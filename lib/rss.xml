<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Category]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://lts.kr/</link><image><url>https://lts.kr/lib/media/favicon.png</url><title>Category</title><link>https://lts.kr/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 05 Jun 2025 09:11:45 GMT</lastBuildDate><atom:link href="https://lts.kr/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 05 Jun 2025 09:11:44 GMT</pubDate><copyright><![CDATA[taesung's Blog]]></copyright><ttl>60</ttl><dc:creator>taesung's Blog</dc:creator><item><title><![CDATA[🤑 ANONI Chat 개발기 - ELK Stack setting]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="https://lts.kr/?query=tag:개발" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개발</a> <a class="tag" href="https://lts.kr/?query=tag:인프라" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#인프라</a> <a class="tag" href="https://lts.kr/?query=tag:Elasticsearch" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Elasticsearch</a> <a class="tag" href="https://lts.kr/?query=tag:Logstash" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Logstash</a> <a class="tag" href="https://lts.kr/?query=tag:Kibana" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Kibana</a> <br> <a href="https://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="https://lts.kr?query=tag:개발" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개발">#개발</a> <a href="https://lts.kr?query=tag:인프라" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#인프라">#인프라</a> <a href="https://lts.kr?query=tag:Elasticsearch" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Elasticsearch">#Elasticsearch</a> <a href="https://lts.kr?query=tag:Logstash" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Logstash">#Logstash</a> <a href="https://lts.kr?query=tag:Kibana" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Kibana">#Kibana</a><br>
<br>ELK는 Elasticsearch, Logstash, Kibana의 약자로, 로그 수집, 저장, 분석, 시각화를 위한 오픈소스 로그 플랫폼 스택이다.
<br>최근에는 Beats까지 포함한 "Elastic Stack" 이라고도 부른다.
<br><img alt="do-messenger_screenshot_2025-06-04_13_38_39.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_13_38_39.png" target="_self"><br>
<br>고성능을 위해 많은 메모리가 필요하다.
<br>infra를 셋팅하는데 있어서 러닝커브가 높다..
<br>build.gradle<br>dependencies { implementation 'net.logstash.logback:logstash-logback-encoder:7.4' }
<br>logstash 의존성을 추가해준다.
<br>
<br>spring boot용 Logback 로깅 사용자 정의 설정파일
<br>logback-spring.xml<br>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;configuration&gt; &lt;!--모든 로그를 콘솔에 출력--&gt; &lt;appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender"&gt; &lt;encoder&gt; &lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;!--예: `12:30:15.321 [main] INFO AuctionService - Started`--&gt; &lt;/appender&gt; &lt;appender name="MAIN_LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender"&gt; &lt;destination&gt;logstash:5000&lt;/destination&gt; &lt;!--컨테이너 포트 5001으로 전송--&gt; &lt;encoder class="net.logstash.logback.encoder.LogstashEncoder" /&gt; &lt;!--JSON 형식 로그로 인코딩--&gt; &lt;keepAliveDuration&gt;5 minutes&lt;/keepAliveDuration&gt; &lt;!--TCP연결 5분간 유지--&gt; &lt;/appender&gt; &lt;!-- 추가적으로 로그 분기 가능 (ex) java. Logger logger = LoggerFactory.getLogger("AuctionServiceLogger"); logger.info("{}", bidLogDTO); &lt;appender name="CUSTOM_LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender"&gt; &lt;destination&gt;logstash:5001&lt;/destination&gt; &lt;encoder class="net.logstash.logback.encoder.LogstashEncoder" /&gt; &lt;keepAliveDuration&gt;5 minutes&lt;/keepAliveDuration&gt; &lt;/appender&gt;
--&gt; &lt;!--전체 시스템 로그 중 INFO 이상만 콘솔 출력 (별도 logger 설정 없는 경우에 해당)--&gt; &lt;root level="info"&gt; &lt;appender-ref ref="CONSOLE" /&gt; &lt;/root&gt; &lt;!-- 클래스 또는 패키지 이름이 `AuctionServiceLogger`인 로거에 적용 DEBUG 이상 로그 additivity="false" : 루트로 로그 전파 X (CONSOLE + AUCTION_LOGSTASH만 사용) + 콘솔 동시 출력 --&gt; &lt;logger name="MainServiceLogger" level="debug" additivity="false"&gt; &lt;appender-ref ref="AUCTION_LOGSTASH" /&gt; &lt;appender-ref ref="CONSOLE" /&gt; &lt;/logger&gt; &lt;!-- &lt;logger name="CustomServiceLogger" level="debug" additivity="false"&gt; &lt;appender-ref ref="CUSTOM_LOGSTASH" /&gt; &lt;appender-ref ref="CONSOLE" /&gt; &lt;/logger&gt;
--&gt;
&lt;/configuration&gt;
<br>mainController<br>@GetMapping(GlobalURL.MAIN_URL) public ModelAndView mainView() { log.info("[MainController Log] mainView 접속 TEST"); return new ModelAndView("main"); }
<br>
<br>DockerComposeTool 설정파일.
<br>여러개의 컨테이너(서비스)를 하나의 애플리케이션 처럼 정의하고 실행하도록 도움.
<br>컨테이너 환경을 코드화/자동화
<br>컨테이너를 띄울 서버(필자는 Ubuntu)에 생성하여 준다.
<br>
<br>Elasticsearch
<br>Logstash
<br>Kibana
<br>Spring Boot 애플리케이션
<br>주석 제외코드 ▶ <a data-href="anoniChat-docker-compose.yml" href="https://lts.kr/project/new-project/anonichat-docker-compose.yml.html" class="internal-link" target="_self" rel="noopener nofollow">anoniChat-docker-compose.yml</a><br># Docker Compose 파일 스펙 버전 3 사용
version: '3' services: elasticsearch: image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1 environment: - discovery.type=single-node # 단일 노드 구성 ports: - "9200:9200" networks: - elk # `elk`키워드 네트워크로 구성 (다른 서비스와 내부 통신) volumes: - esdata:/usr/share/elasticsearch/data logstash: image: docker.elastic.co/logstash/logstash:7.12.0 ports: - "5044:5044" # Filebeat 등 input으로 사용하는 포트 - "5000:5000" # TCP 또는 JSON 로그 input 용 포트 (Spring에서 이 포트를 사용) volumes: - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf networks: - elk # `elk`키워드 네트워크 kibana: image: docker.elastic.co/kibana/kibana:7.11.1 ports: - "5601:5601" # 웹 UI 접근용 포트 networks: - elk # `elk`키워드 네트워크 environment: - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 # Elasticsearch 주소 연결 - server.host=0.0.0.0 # 모든 IP 바인딩 허용 spring: image: ghcr.io/anonichat/app/anonichat ports: - "8080:8080" environment: - ELASTICSEARCH_HOST=elasticsearch:9200 # Elasticsearch의 내부 주소를 환경변수로 주입 depends_on: - elasticsearch # Elasticsearch가 먼저 실행되도록 보장 networks: - elk # 내부 ELK 네트워크로 연결 volumes: esdata: driver: local # Elasticsearch 데이터 저장소를 호스트 볼륨에 영구 저장 networks: elk: # 모든 서비스가 하나의 공용 네트워크 `elk`에서 통신 driver: bridge # `elasticsearch`, `logstash`, `spring`, `kibana`는 서로 이름으로 접근 가능
<br>
<br>Logstash의 데이터 처리 파이프라인을 정의하는 설정 파일이다.
<br>docker-compose.yml파일을 생성한 같은 디렉토리에 생성한다.
<br>주석 제외 코드 ▶ <a data-href="anoniChat-logstash.conf" href="https://lts.kr/project/new-project/anonichat-logstash.conf.html" class="internal-link" target="_self" rel="noopener nofollow">anoniChat-logstash.conf</a><br>input { // 데이터 수신 설정 beats { port =&gt; 5044 } tcp { port =&gt; 5000 codec =&gt; json_lines // json형식으로 한줄씩 파싱 type =&gt; "main_log" // 수산 로그에 type필드로 "auction_log" 부여 } //tcp { // port =&gt; 5001 // codec =&gt; json_lines // type =&gt; "custom_log" //}
} filter { // 수신된 로그를 처리하기위한 전처리 if [type] == "main_log" { // 로그 타입이 `main_log`일 때만 처리. grok { // 정규식으로 메세지 파싱 match =&gt; { "message" =&gt; "%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:thread}\] %{LOGLEVEL:loglevel} %{DATA:logger} - %{GREEDYDATA:logmessage}" } } } // 필터 사용 예시
//	if [type] == "custom_log" {
// if "TestLogDTO" in [message] {
// grok {
// match =&gt; {
// "message" =&gt; "TestLogDTO\(userId=%{NUMBER:user_id}, exchangeAmount=%{NUMBER:exchange_amount}, payType=%{WORD:pay_type}, payStatus=%{WORD:pay_status}\)"
// }
// }
// mutate { // 필드 타입 변환 및 메시지 필드 제거
// remove_field =&gt; ["message"] // }
// } else {
// drop { } // `TestLogDTO`가 포함되지 않으면 해당 로그 삭제(drop).
// }
//	}
} output { // 로그 출력 설정 시작 if [type] == "auction_log" { elasticsearch { hosts =&gt; ["http://elasticsearch:9200"] // Elasticsearch로 전송 index =&gt; "main_log" // 인덱스 이름: `main_log`. } }
// if [type] == "custom_log" {
// elasticsearch {
// hosts =&gt; ["http://elasticsearch:9200"]
// index =&gt; "custom_log"
// }
// }
}
<br>임의의 폴더를 지정한 후,<br><a data-href="anoniChat-docker-compose.yml" href="https://lts.kr/project/new-project/anonichat-docker-compose.yml.html" class="internal-link" target="_self" rel="noopener nofollow">anoniChat-docker-compose.yml</a> / <a data-href="anoniChat-logstash.conf" href="https://lts.kr/project/new-project/anonichat-logstash.conf.html" class="internal-link" target="_self" rel="noopener nofollow">anoniChat-logstash.conf</a><br>nano anoniChat-docker-compose.yml
nano logstash.conf
<br>파일을 생성한다.<br><img alt="Pasted image 20250605172214.png" src="https://lts.kr/사진-및-문서/pasted-image-20250605172214.png" style="width: 550px; max-width: 100%;" target="_self"><br>DockerComposeTool이 없다면?
sudo apt install -y docker-compose 해당 명령어로 다운로드 받기
<br>이후,<br>docker-compose up -d
<br>-d : 백그라운드로 실행
<br>http://{‘IP주소‘}:5610 (Kibana port) 로 접속확인<br><img alt="Pasted image 20250605172823.png" src="https://lts.kr/사진-및-문서/pasted-image-20250605172823.png" target="_self"><br>Kibana를 사용할 준비가 되었다.<br>이후, 왼쪽의 메뉴바 에서 Analytics → Discover 메뉴로 이동
..<br>왜 데이터를 못가져오지..?]]></description><link>https://lts.kr/project/new-project/🤑-anoni-chat-개발기-elk-stack-setting.html</link><guid isPermaLink="false">project/New Project/🤑 ANONI Chat 개발기 - ELK Stack setting.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 05 Jun 2025 09:10:42 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_13_38_39.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_13_38_39.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[UBUNTU sever 명령어 모음]]></title><description><![CDATA[<br><br><br>
<br><br><br><br>sudo apt-get update ( )
sudo apt-get upgrade ( apt-get 도구 업그레이드 )
<br> gui를 설치하기 전에 apt-get 도구를 update와 upgrade를 진행한다.<br><br><br>sudo apt-get install --no-install-recommends ubuntu-desktop ( 최소 설치 )
sudo apt-get install ubuntu-desktop ( 전체 설치 )
<br>
<br>여타 desktop버전의 프로그램들 ex) 인터넷 브라우저 등 을 설치할 계획이라면, 전체 설치를 하면되고,
<br>DB, jenkins 등 서버용 셋팅만을 원하면 최소 설치를 하기를 권장한다.<br><br><br>sudo apt-get install indicator-appmenu-tools ( hud service not connected 오류 해결 ) sudo apt-get install indicator-session ( 계정, 세션 아이콘 추가 ) sudo apt-get install indicator-datetime ( 상단 메뉴 시간 추가 ) sudo apt-get install indicator-applet-complete ( 볼륨 조절 아이콘 추가 )
<br>
<br>gui 패키지 설치 후 발생할 수 있는 hud service not connected 오류와 관련하여 indicator-appmenu-tools
패키지를 통해 해결할 수 있다.
<br>나머지 패키지는 사용자의 입장에서 직관적인 편의성을 위한 패지키로써 선택사항입니다.
<br><br><br>startx ( xwindow 환경 실행 ) sudo systemctl isolate graphical.target ( runlevel 5 일회성 실행 / init 실행 ) sudo systemctl enable graphical.target ( runlevel 5 영구히 실행 / 활성 ) sudo systemctl set-default graphical.target ( runlevel 5 영구히 실행 / inittab 수정 )
<br>
<br>CLI에 startx 명령어를 입력하면 xwindow 환경이 실행이 되면서 gui 환경으로 전환이 된다.
<br>startx 명령어 없이 영구히 적용하기 위해 위 명령어를 입력하면 된다.
<br><br><br>gradlew bootJar
docker build -t anonichat .
docker tag anonichat xotjd794613/anonichat:v0.02
<br>
<br>docker build -t "생성할 이미지 이름" "도커파일을 찾을 위치"
<br>docker tag "복사할 이미지 원본 이름" "복사된 이미지 이름":"태그"
<br><br><br>curl -fsSL https://get.docker.com | sh
docker login
sudo docker pull [image이름]:[태그]
<br><br><br>sudo docker run -p 8000:8080 "계정명"/"이미지이름":"태그"
<br><br><br>docker run -d \ --name jenkins-dood \ -p 8080:8080 \ -v /var/run/docker.sock:/var/run/docker.sock \ -v jenkins_home:/home/hello \ # 볼륨 마운트 적용 ghcr.io/anonichat/app/jenkins-dood:v0.06
<br>
<br>--name jenkins-dood \ 실행시킬 컨테이너 이름
<br>-p 8080:8080 \ 실행시킬 포트번호
<br>xotjd794613/jenkins-dood:v0.01 실행시킬 이미지 명
<br><br><br>su -
<br><br><br>(권한부여 / root계정에서 실행)<br>sudo usermod -aG docker hello(계정명)
<br><br><br>docker exec -it jenkins-dood cat /home/hello/secrets/initialAdminPassword
<br><br><br>docker exec -it &lt;컨테이너_이름&gt; java -jar /usr/share/jenkins.war --version
<br><br><br>$ docker login ghcr.io -u "gitHub아이디" Password: #&lt;Pesonal Access Token&gt; 입력
<br><br><br>docker tag "이미지ID" ghcr.io/"gitHub아이디"/"repo이름"/"이미지:태그"
<br><br><br>docker-compose up -d
]]></description><link>https://lts.kr/project/new-project/ubuntu-sever-명령어-모음.html</link><guid isPermaLink="false">project/New Project/UBUNTU sever 명령어 모음.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 05 Jun 2025 08:45:55 GMT</pubDate></item><item><title><![CDATA[anoniChat-docker-compose.yml]]></title><description><![CDATA[<br>version: '3' services: elasticsearch: image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1 environment: - discovery.type=single-node ports: - "9200:9200" networks: - elk volumes: - esdata:/usr/share/elasticsearch/data logstash: image: docker.elastic.co/logstash/logstash:7.12.0 ports: - "5044:5044" - "5000:5000" volumes: - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf networks: - elk kibana: image: docker.elastic.co/kibana/kibana:7.11.1 ports: - "5601:5601" networks: - elk environment: - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 - server.host=0.0.0.0 spring: image: ghcr.io/anonichat/app/anonichat ports: - "8080:8080" environment: - ELASTICSEARCH_HOST=elasticsearch:9200 depends_on: - elasticsearch networks: - elk volumes: esdata: driver: local networks: elk: driver: bridge
]]></description><link>https://lts.kr/project/new-project/anonichat-docker-compose.yml.html</link><guid isPermaLink="false">project/New Project/anoniChat-docker-compose.yml.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 05 Jun 2025 06:26:34 GMT</pubDate></item><item><title><![CDATA[anoniChat-logstash.conf]]></title><description><![CDATA[<br>input { beats { port =&gt; 5044 } tcp { port =&gt; 5000 codec =&gt; json_lines type =&gt; "main_log" }
} filter { if [type] == "main_log" { grok { match =&gt; { "message" =&gt; "%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:thread}\] %{LOGLEVEL:loglevel} %{DATA:logger} - %{GREEDYDATA:logmessage}" } } }
} output { if [type] == "auction_log" { elasticsearch { hosts =&gt; ["http://elasticsearch:9200"] index =&gt; "main_log" } }
}
]]></description><link>https://lts.kr/project/new-project/anonichat-logstash.conf.html</link><guid isPermaLink="false">project/New Project/anoniChat-logstash.conf.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 05 Jun 2025 06:25:23 GMT</pubDate></item></channel></rss>