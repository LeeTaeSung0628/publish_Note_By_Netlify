<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Category]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://lts.kr/</link><image><url>https://lts.kr/lib/media/favicon.png</url><title>Category</title><link>https://lts.kr/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Fri, 16 May 2025 08:00:15 GMT</lastBuildDate><atom:link href="https://lts.kr/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Fri, 16 May 2025 08:00:13 GMT</pubDate><copyright><![CDATA[taesung's Blog]]></copyright><ttl>60</ttl><dc:creator>taesung's Blog</dc:creator><item><title><![CDATA[🚞 Java 대용량 Excel 리펙토링]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="https://lts.kr/?query=tag:개발" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개발</a> <a class="tag" href="https://lts.kr/?query=tag:JAVA" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#JAVA</a> <a class="tag" href="https://lts.kr/?query=tag:Excel" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Excel</a> <a class="tag" href="https://lts.kr/?query=tag:엑셀" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#엑셀</a> <a class="tag" href="https://lts.kr/?query=tag:성능개선" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#성능개선</a> <a class="tag" href="https://lts.kr/?query=tag:리펙토링" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#리펙토링</a> <br> <a href="https://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="https://lts.kr?query=tag:개발" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개발">#개발</a> <a href="https://lts.kr?query=tag:JAVA" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#JAVA">#JAVA</a> <a href="https://lts.kr?query=tag:Excel" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Excel">#Excel</a> <a href="https://lts.kr?query=tag:엑셀" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#엑셀">#엑셀</a> <a href="https://lts.kr?query=tag:성능개선" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#성능개선">#성능개선</a> <a href="https://lts.kr?query=tag:리펙토링" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#리펙토링">#리펙토링</a><br>
<br>기존 DataTables기반의 Excel export 기능의 성능 부진으로 인한 리펙토링
<br>클라이언트 → 서버사이드 로의 로직 변경
<br>DataTables 기반의 기존 처리
** DataTables란? HTML 테이블을 동적으로 처리하기 위한 jQuery 플러그인이다.
DataTables의 기능 중 Export 기능이 있는데, 클립보드 복사와 인쇄 등 의 기능도 지원한다.<br>
기존의 Excel출력 기능이 이 DataTables의 Export 기능으로 만들어져 있었다.
<br>
DataTables는 클라이언트 측에서 브라우저 메모리를 사용하여 엑셀 파일을 생성한다.
웹 HTML기반의 `DataTables Buttons`를 사용하여 데이터와 스타일을 엑셀 파일로 변환한다.<br>
<br>브라우저 메모리 한계 <br>브라우저는 서버보다 메모리와 CPU 성능이 낮다.
<br>대용량 데이터를 처리할 때 브라우저가 멈추거나 충돌할 가능성이 크다.
<br>DataTables는 전체 데이터를 메모리에 적재한 후 엑셀로 변환한다.
<br>Ajax로 부분 데이터를 불러오는 서버사이드 모드에서는 현재 페이지 데이터만 엑셀로 변환됩니다.
<br>모든 데이터를 한꺼번에 가져와 처리하면 처리 한계에 도달할 가능성이 더 커진다. <br>ex) 10만 개 이상의 행을 엑셀로 내보내면 브라우저의 메모리 한계를 초과하여 강제로 종료되는 경우가 많다.<br>
<br>파일 변환 속도 <br>JavaScript 기반으로 파일을 생성하는 데 시간이 많이 소요된다.
<br>데이터 변환과 파일 생성이 모두 싱글 스레드로 이루어져 병렬 처리의 이점을 활용하지 못한다. <br>
<br>스타일 커스터마이징의 복잡성 <br>엑셀 스타일을 커스터마이징하는 과정이 복잡하며, XML 직접 수정 방식은 성능 저하를 초래한다.
<br>파일의 구조와 스타일을 모두 제어하려면 JavaScript 메모리 부담이 더욱 커진다. <br>정리
소규모 데이터의 Export에는 간단한 설정으로 빠른 구현이 가능하나.<br>
10만개 이상의 대용량 데이터에서는 한계가 명확하다.
<br>... buttons: [ { extend: 'excel', name: 'Excel', text: 'Excel', filename: '엑셀출력_' + moment().format('YYYYMMDDhhmm'), title: '', action: serverSideButtonAction, customize: function(xlsx) { var sSh = xlsx.xl['styles.xml']; var lastXfIndex = $('cellXfs xf', sSh).length - 1; var sheet = xlsx.xl.worksheets['sheet1.xml']; // 스타일 적용 var n1 = '&lt;xf numFmtId="0" fontId="2" fillId="2" borderId="1" applyFont="1" applyFill="1" applyBorder="1" xfId="0" applyAlignment="1"&gt;' + '&lt;alignment horizontal="center"/&gt;&lt;/xf&gt;'; var n2 = '&lt;xf numFmtId="0" fontId="0" fillId="0" borderId="1" applyFont="0" applyFill="0" applyBorder="0" xfId="0" applyAlignment="0"&gt;' + '&lt;alignment horizontal="right"/&gt;&lt;/xf&gt;'; sSh.childNodes[0].childNodes[5].innerHTML += n1 + n2; var greyBoldCentered = lastXfIndex + 1; var value = lastXfIndex + 2; $('c', sheet).attr('s', value); $('row:first c', sheet).attr('s', greyBoldCentered); } }
] <br>
<br>서버의 자원 활용 <br>서버의 메모리와 CPU는 클라이언트보다 월등히 높아 대량 데이터 처리에 유리하다.
<br>서버가 Excel 파일을 직접 생성하여 브라우저에 전송하므로 클라이언트의 부담이 줄어든다. <br>
<br>대용량 데이터 처리 <br>수십만 건 이상의 데이터를 메모리 효율적으로 처리 가능
<br>Apache POI와 같은 라이브러리는 스트리밍 방식으로 데이터를 파일에 직접 기록하여 메모리 과부하를 방지한다.
<br>SXSSFWorkbook를 사용하여 매우 큰 데이터를 처리할 수 있습니다. <br>SXSSFWorkbook란?
Apache POI 라이브러리에서 제공하는 대용량 Excel 파일 생성용 클래스<br>
SXSSFWorkbook은 메모리 절약을 위해 디스크 기반 스트리밍 방식을 사용하여 메모리에 모든 데이터를 올리지 않고, 필요한 부분만 메모리에 유지한다.
<br>
<br>병렬 처리 <br>멀티스레딩을 통해 데이터 수집과 파일 생성을 병렬로 수행할 수 있다.
<br>서버 자원을 최대로 활용하여 성능을 극대화할 수 있다. <br>
<br>직접 파일 다운로드 <br>엑셀 파일을 서버에서 생성하고, URL을 통해 클라이언트가 다운로드 받도록 처리하여 브라우저 부담 최소화.
<br>응답을 스트리밍 방식으로 처리하여 중간에 데이터가 소실되지 않도록 보장한다. <br>
<br>엑셀 파일 처리 클래스
<br>엑셀파일 생성, 데이터 추가, 스타일 적용 등
<br>SXSSFWorkbook방식으로 스트리밍 처리 <br>대용량 처리에 적합
<br>일정 개수 이상의 row를 디스크로 flush
<br>OutOfMemory방지 <br>for (T t : data) { renderBody(t, rowNum, bodyStyle, totalStyle, accumStyle); if (rowNum % 10000 == 0 || rowNum == data.size()) { // 10,000건 마다 flush try { // 마지막 데이터의 경우, 남는 데이터 만큼만 flush, 아닌경우 10,000건씩 플러쉬 workbook.getSheet(sheetName).flushRows(rowNum == data.size() ? data.size() % 10000 : 10000); } catch (IOException e) { throw new BadRequestException(e.getMessage()); } } rowNum++; }
<br>Excel Sheet정보 파라미터로 받아서 초기화
<br>SimpleExcelMetaDataFactory를 이용하여 엑셀 메타데이터를 생성
<br>전체적인 엑셀 다운로드까지의 모든 단계를 포함하고 실제 랜더링해서 셀을 생성하는것
<br>
<br>싱글톤 객체로 생성
<br>엑셀로 출력할 DTO객체의 어노테이션을 파악해 메타데이터 정리
<br>SimpleExcelMetadata객체를 생성하기 위한 기본 틀 제공(헤더, 스타일, 필드 목록 등)
<br>CellStyleMap을 사용하여 각 필드의 스타일을 미리 캐싱 ( 스타일 중복 방지 )
<br>private void applyCellStyle(CellStyleMap cellStyleMap, ExcelColumnStyle fieldStyle, ExcelColumnStyle classDefaultStyle, String fieldName, CellPart part, Workbook workbook) { /* dto 의 field 값에 스타일이 설정되어 있는지 체크 */ boolean styleCheck = fieldStyle.excelCellStyleClass() != NullStyle.class; /* dto 의 field 에 스타일 존재 유무에 따라, ExcelCellKey 의 fieldName 지정 */ String fieldNameKey = styleCheck ? fieldName : "DEFAULT"; /* dto 의 field 에 스타일 존재 유무에 따라 스타일 설정 */ ExcelColumnStyle style = styleCheck ? fieldStyle : classDefaultStyle; ExcelCellKey excelCellKey = ExcelCellKey.of(fieldNameKey, part); /* 해당 키값과 같은 키값을 가진 데이터가 있는 경우 styleMap 에 추가하지 않음 */ if (!cellStyleMap.valueCheck(excelCellKey)) { cellStyleMap.put(decideAppliedStyle(style, workbook), excelCellKey, workbook); } }
<br>스타일, 정보등 dto 어노테이션 필드들을 읽어와서 파악하고, 가공하여 SimpleExcelFile에서 사용하기 쉽게 만드는 역할
<br>
<br>@DefaultExcelHeaderStyle: 엑셀 헤더에 기본 스타일 적용 <br>스타일: HeaderStyle.class <br>@DefaultExcelBodyStyle: 엑셀 데이터 행에 기본 스타일 적용 <br>스타일: BodyStyle.class <br>@DefaultExcelTotalRow: 합계 행에 기본 스타일 적용
<br>@DefaultExcelHeaderStyle(style = @ExcelColumnStyle(excelCellStyleClass = HeaderStyle.class)) @DefaultExcelBodyStyle(style = @ExcelColumnStyle(excelCellStyleClass = BodyStyle.class)) @DefaultExcelTotalRow(style = @ExcelColumnStyle(excelCellStyleClass = TotalRowStyle.class)) public class PgDepositListExcelDto { @ExcelColumn(headerName = "No") private String rowNum; @ExcelColumn(headerName = "회원번호") private String mbNo; @ExcelColumn(headerName = "아이디") private String mbId; @ExcelColumn( headerName = "금액", bodyStyle = @ExcelColumnStyle(excelCellStyleClass = AmountStyle.class), totalRowStyle = @ExcelColumnStyle(excelCellStyleClass = TotalAmountStyle.class) ) private long amt;
<br>실제 객체와 맵핑될 excelDTO객체
<br>SimpleExcelMetaDataFactory에서 @ExcelColumn 어노테이션이 붙은 필드를 수집하여 리스트에 저장<br>public SimpleExcelMetadata createSimpleExcelMetaData( Class&lt;?&gt; type, Workbook workbook, SheetType sheetType, boolean hasGroupHeader) { List&lt;Field&gt; fields = getExcelAnnotatedFields(type); List&lt;String&gt; headerNames = new ArrayList&lt;&gt;(); for (Field field : fields) { ExcelColumn excelColumn = field.getAnnotation(ExcelColumn.class); // 어노테이션 체크 String headerName = excelColumn.headerName(); headerNames.add(headerName); applyCellStyle(cellStyleMap, excelColumn.headerStyle(), null, field.getName(), HEADER, workbook); } return new SimpleExcelMetadata(headerNames, fields, cellStyleMap, groups);
} <br>
<br>엑셀로 출력할 기존 객체 → CustomExcelDto로 파싱 후 simpleExcelWrite로 엑셀 출력
<br>쿼리 데이터 조회시 페이징으로 메모리 관리
<br>// 1) 엑셀 파일 생성 (데이터 -&gt; ExcelFile)
SimpleExcelFile&lt;E&gt; excelFile = new SimpleExcelFile&lt;&gt;( simpleExcelWriteDto.getData(), simpleExcelWriteDto.getType(), simpleExcelWriteDto.getSheetName(), simpleExcelWriteDto.getSheetType() ); // 2) ExcelSetUpDto 간단히 만들어서, 기존 write(...) 메서드 사용 ExcelSetUpDto excelSetUpDto = ExcelSetUpDto.builder() .response(simpleExcelWriteDto.getResponse()) .excel(excelFile.getWorkbook()) .excelPreFileTitle(simpleExcelWriteDto.getPreFileTitle()) .excelFilePath(simpleExcelWriteDto.getFilePath()) .build(); // 3) 한 번에 write
excelFile.write(excelSetUpDto);
<br>case 1<br>입력 : 예치금 입금내역 셀 개수 : 40,000건 출력 : 실패
<br>case 2<br>입력 : 예치금 입금내역 셀 개수 : 5,000건 출력 : 성공
<br><img alt="Pasted image 20250516163401.png" src="https://lts.kr/사진-및-문서/pasted-image-20250516163401.png" target="_self">
case1(4만건) - 메모리 사용율 80% 초과로 인한 순단 발생
<img alt="Pasted image 20250516163522.png" src="https://lts.kr/사진-및-문서/pasted-image-20250516163522.png" target="_self">
이후, case2(5천건) - 메모리 사용율 51%<br>
<br>예치금 입금내역(9개의 속성 X 8,000필드) → 약 7만 셀
<br>test case<br>입력 : 예치금 입금내역 셀 개수 : 70,000건 출력 : 성공
<br>cpu 최대 사용율 17.2%
<br><img alt="Pasted image 20250513101628.png" src="https://lts.kr/사진-및-문서/pasted-image-20250513101628.png" target="_self"><br>메모리 469MB
<br><img alt="Pasted image 20250513101743.png" src="https://lts.kr/사진-및-문서/pasted-image-20250513101743.png" target="_self">
<img alt="Pasted image 20250516154726.png" src="https://lts.kr/사진-및-문서/pasted-image-20250516154726.png" style="width: 725px; max-width: 100%;" target="_self"><br>case1<br>입력 : 예치금 입금내역 셀 개수 : 70,000건 출력 : 성공
<br><img alt="Pasted image 20250516164727.png" src="https://lts.kr/사진-및-문서/pasted-image-20250516164727.png" target="_self">
<img alt="Pasted image 20250516164550.png" src="https://lts.kr/사진-및-문서/pasted-image-20250516164550.png" target="_self">
<img alt="Pasted image 20250516164537.png" src="https://lts.kr/사진-및-문서/pasted-image-20250516164537.png" target="_self">
<img alt="Pasted image 20250516165030.png" src="https://lts.kr/사진-및-문서/pasted-image-20250516165030.png" target="_self"><br>메모리 사용율 약 36%
<br>case2<br>입력 : 예치금 입금내역 셀 개수 : 140,000건 출력 : 성공
<br><img alt="Pasted image 20250516165307.png" src="https://lts.kr/사진-및-문서/pasted-image-20250516165307.png" target="_self">
<img alt="Pasted image 20250516165250.png" src="https://lts.kr/사진-및-문서/pasted-image-20250516165250.png" target="_self">
<img alt="Pasted image 20250516165344.png" src="https://lts.kr/사진-및-문서/pasted-image-20250516165344.png" target="_self"><br>메모리 사용율 약 38%
<br>case3<br>입력 : 예치금 입금내역 셀 개수 : 240,000건 출력 : 성공
<br><img alt="Pasted image 20250516165523.png" src="https://lts.kr/사진-및-문서/pasted-image-20250516165523.png" target="_self">
<img alt="Pasted image 20250516165617.png" src="https://lts.kr/사진-및-문서/pasted-image-20250516165617.png" target="_self">
<img alt="Pasted image 20250516165627.png" src="https://lts.kr/사진-및-문서/pasted-image-20250516165627.png" target="_self"><br>메모리 사용율 약 40%
<br>
<br>예치금 입금내역(9개의 속성 X 666,000필드) → 약 600만 셀
<br>
<br>최대 엑셀 셀 수용량 약 100배 증가.]]></description><link>https://lts.kr/project/🚞-java-대용량-excel-리펙토링.html</link><guid isPermaLink="false">project/🚞 Java 대용량 Excel 리펙토링.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Fri, 16 May 2025 07:59:47 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/pasted-image-20250516163401.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/pasted-image-20250516163401.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[🍧 JPA의 동작원리와 중복 데이터 로그 이슈]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:SQL" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SQL</a> <a class="tag" href="https://lts.kr/?query=tag:JPA" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#JPA</a> <a class="tag" href="https://lts.kr/?query=tag:이슈" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#이슈</a> <a class="tag" href="https://lts.kr/?query=tag:log" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#log</a> <a class="tag" href="https://lts.kr/?query=tag:로그" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#로그</a> <br> <a href="https://lts.kr?query=tag:SQL" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SQL">#SQL</a> <a href="https://lts.kr?query=tag:JPA" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#JPA">#JPA</a> <a href="https://lts.kr?query=tag:이슈" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#이슈">#이슈</a> <a href="https://lts.kr?query=tag:log" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#log">#log</a> <a href="https://lts.kr?query=tag:로그" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#로그">#로그</a><br>업무 중 한 가지 이슈가 있었고, JPA의 영속상태와 동작원리에 대해서 자세히 짚고 넘어가야할 필요가 있다고 느껴
해당 글을 쓰게 되었다.<br>상황은 다음과 같다.<br>신한은행의 계좌잔액(예치금)과 우리가 관리하는 DB의 계좌 잔액간의 차액이 발생했다는 알림을 받았다. <br>원인을 찾기위해 신한 전문을 쌓는 log테이블과, 우리 회원 입급내역 log테이블을 비교하였다.
<br>이떄, 신한에는 같은 금액의 중복 log가 없으나, 우리 DB에는 차액만큼의 중복 입금 log를 발견할 수 있었다. <br>더티 체킹 ← 다음 걔념도 알아보기<br>인서트 - 첫 save로직에 select을 하는지.
<br>준영속상태 - 메모리에 idx가 있으면, select를 한번 날리고 db에 있다면 업데이트를 칠 수 있다.
비영속과 준영속을 나누는 기준과 JPA동작 순서, 원리 알아보기<br>비영속상태에서 save 를 날렸을 때, select를 날리는지? 날린다면 이유가 뭐고,
준영속상태랑의 차이점이 무엇인지? 궁금하다.<br>동해물과 백두산이 마르고랃ㅎㄷ록하느 하느님이벙힆]]></description><link>https://lts.kr/issue_troubleshooting/🍧-jpa의-save동작원리와-데이터-로그.html</link><guid isPermaLink="false">Issue_TroubleShooting/🍧 JPA의 SAVE동작원리와 데이터 로그.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Fri, 16 May 2025 05:00:44 GMT</pubDate></item><item><title><![CDATA[🔫 이슈 분석 &amp; 트러블슈팅]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:이슈" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#이슈</a> <a class="tag" href="https://lts.kr/?query=tag:트러블슈팅" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#트러블슈팅</a> <a class="tag" href="https://lts.kr/?query=tag:모음" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#모음</a> <br> <a href="https://lts.kr?query=tag:이슈" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#이슈">#이슈</a> <a href="https://lts.kr?query=tag:트러블슈팅" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#트러블슈팅">#트러블슈팅</a> <a href="https://lts.kr?query=tag:모음" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#모음">#모음</a><br>이슈 / 트러블 슈팅
크고 작은 이슈와, 그 해결 과정을 쓴 글 모음입니다.
<br>
<br><a data-href="🍧 JPA의 SAVE동작원리와 데이터 로그" href="https://lts.kr/issue_troubleshooting/🍧-jpa의-save동작원리와-데이터-로그.html" class="internal-link" target="_self" rel="noopener nofollow">🍧 JPA의 SAVE동작원리와 데이터 로그</a>
<br><a data-href="🍂 JPA, Mybatis , Dead Lock이슈" href="https://lts.kr/study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock이슈.html" class="internal-link" target="_self" rel="noopener nofollow">🍂 JPA, Mybatis , Dead Lock이슈</a> <br><a data-href="🌋 OSIV와 영속성 컨텍스트" href="https://lts.kr/study/cs/🌋-osiv와-영속성-컨텍스트.html" class="internal-link" target="_self" rel="noopener nofollow">🌋 OSIV와 영속성 컨텍스트</a>
<br><a data-href="🪕 JPA 관련 용어 정리" href="https://lts.kr/study/cs/🪕-jpa-관련-용어-정리.html" class="internal-link" target="_self" rel="noopener nofollow">🪕 JPA 관련 용어 정리</a> <br><a data-href="🔐 상품 투자하기 서비스 Lock기법 개선안" href="https://lts.kr/issue_troubleshooting/🔐-상품-투자하기-서비스-lock기법-개선안.html" class="internal-link" target="_self" rel="noopener nofollow">🔐 상품 투자하기 서비스 Lock기법 개선안</a>
<br><a data-href="⚔ StckOverflow 이슈와 QueryDSL" href="https://lts.kr/issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html" class="internal-link" target="_self" rel="noopener nofollow">⚔ StckOverflow 이슈와 QueryDSL</a>
<br>
<br><a data-href="🚨 RSA 암호화 방식의 이해와 적용 (feat.취약성점검)" href="https://lts.kr/issue_troubleshooting/🚨-rsa-암호화-방식의-이해와-적용-(feat.취약성점검).html" class="internal-link" target="_self" rel="noopener nofollow">🚨 RSA 암호화 방식의 이해와 적용 (feat.취약성점검)</a> <br><a data-href="🤲분산 환경에서의 Cache 선택하기" href="https://lts.kr/study/cs/🤲분산-환경에서의-cache-선택하기.html" class="internal-link" target="_self" rel="noopener nofollow">🤲분산 환경에서의 Cache 선택하기</a>
<br><a data-href="🍎 Redis로 Key관리하기" href="https://lts.kr/study/cs/🍎-redis로-key관리하기.html" class="internal-link" target="_self" rel="noopener nofollow">🍎 Redis로 Key관리하기</a> <br><a data-href="🚦 Spring Batch 트러블슈팅" href="https://lts.kr/issue_troubleshooting/🚦-spring-batch-트러블슈팅.html" class="internal-link" target="_self" rel="noopener nofollow">🚦 Spring Batch 트러블슈팅</a>
<br><a data-href="⏰ Script 로딩 지연 문제 해결 .js" href="https://lts.kr/issue_troubleshooting/⏰-script-로딩-지연-문제-해결-.js.html" class="internal-link" target="_self" rel="noopener nofollow">⏰ Script 로딩 지연 문제 해결 .js</a>]]></description><link>https://lts.kr/project/🔫-이슈-분석-&amp;-트러블슈팅.html</link><guid isPermaLink="false">project/🔫 이슈 분석 &amp; 트러블슈팅.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Fri, 16 May 2025 02:06:12 GMT</pubDate></item><item><title><![CDATA[3.1 스프링 컨테이너 생성]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:SpringCoreBasic" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SpringCoreBasic</a> <a class="tag" href="https://lts.kr/?query=tag:SPRING" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SPRING</a> <a class="tag" href="https://lts.kr/?query=tag:lectur" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#lectur</a> <a class="tag" href="https://lts.kr/?query=tag:강의" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#강의</a> <a class="tag" href="https://lts.kr/?query=tag:컨테이너" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#컨테이너</a> <a class="tag" href="https://lts.kr/?query=tag:Bean" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Bean</a> <a class="tag" href="https://lts.kr/?query=tag:빈" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#빈</a> <br> <a href="https://lts.kr?query=tag:SpringCoreBasic" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SpringCoreBasic">#SpringCoreBasic</a> <a href="https://lts.kr?query=tag:SPRING" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SPRING">#SPRING</a> <a href="https://lts.kr?query=tag:lectur" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#lectur">#lectur</a> <a href="https://lts.kr?query=tag:강의" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#강의">#강의</a> <a href="https://lts.kr?query=tag:컨테이너" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#컨테이너">#컨테이너</a> <a href="https://lts.kr?query=tag:Bean" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Bean">#Bean</a> <a href="https://lts.kr?query=tag:빈" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#빈">#빈</a><br>//스프링 컨테이너 생성
ApplicationContext applicationContext = new AnnotationConfigApplicationContext(AppConfig.class);
<br>
ApplicationContext 를 스프링 컨테이너라 한다. ApplicationContext 는 인터페이스이다. <br>
스프링 컨테이너는 XML을 기반으로 만들 수 있고, 애노테이션 기반의 자바 설정 클래스로 만들 수 있다. <br>
<br>자바 설정 클래스를 기반으로 스프링 컨테이너(ApplicationContext)를 만들어보자. <br>new AnnotationConfigApplicationContext(AppConfig.class); → AppConfig.class를 파라미터로 넘긴다.
<br>이 클래스는 ApplicationContext 인터페이스의 구현체이다. <br>참고
정확히 스프링 컨테이너 를 부를 때, <br>BeanFactory
<br>ApplicationContext 로 구분해서 불러야 하지만, BeanFactory를 직접 사용하는 경우는 거의 없어,<br>
일반적으로 ApplicationContext를 스프링 컨테이너 라고 부른다.
<br>new AnnotationConfigApplicationContext(AppConfig.class)
<br>해당 코드로 AppConfig.class 파일을 넘기면 스프링 컨테이너가 생성된다.<br><img alt="스크린샷 2025-05-15 오후 10.33.42.png" src="https://lts.kr/사진-및-문서/스크린샷-2025-05-15-오후-10.33.42.png" target="_self">
(스프링 컨테이너가 AppConfig.class의 구성 정보를 확인한 후 스프링 빈을 등록한다.)<br>@Bean
public MemberService memberService() { return new MemberServiceImpl(memberRepository());
}
<br>Bean어노테이션이 붙은 메서드의 이름을 사용하여 빈을 등록한다.
<br><img alt="스크린샷 2025-05-15 오후 10.38.28.png" src="https://lts.kr/사진-및-문서/스크린샷-2025-05-15-오후-10.38.28.png" target="_self"><br>** 빈 이름을 직접 부여할 수 있다. @Bean(name="memberService2")<br>
<br>@Bean이 붙은 메서드로 의존관계를 주입한다.
<br>단순히 자바 코드를 호출하는 것이 아닌, 싱글톤을 통해 객체 1개만 생성하도록 한다,
<br><img alt="스크린샷 2025-05-15 오후 10.41.15.png" src="https://lts.kr/사진-및-문서/스크린샷-2025-05-15-오후-10.41.15.png" target="_self"><br>
<br>스프링은 빈을 생성하고, 의존관계를 주입하는 단계가 나누어져 있다.
<br>class ApplicationContextInfoTest { AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class); @Test @DisplayName("모든 빈 출력하기") void findAllBean() { String[] beanDefinitionNames = ac.getBeanDefinitionNames(); for (String beanDefinitionName : beanDefinitionNames) { Object bean = ac.getBean(beanDefinitionName); System.out.println("name=" + beanDefinitionName + " object=" + bean); } }]]></description><link>https://lts.kr/lectur/3.1-스프링-컨테이너-생성.html</link><guid isPermaLink="false">lectur/3.1 스프링 컨테이너 생성.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Fri, 16 May 2025 00:40:22 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/스크린샷-2025-05-15-오후-10.33.42.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/스크린샷-2025-05-15-오후-10.33.42.png"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>