{"createdTime":1739940655695,"shownInTree":["project/hello-batch/🖱-spring-batch-구조-드로잉.html","project/hello-batch/🖱-spring-batch-트러블-슈팅.html","project/hello-batch/🖱-spring-batch-트러블-슈팅-부록.html","project/hello-marketing/👩‍👧‍👦-유입-통계-admin용-테이블-설계-과정.html","project/hello-marketing/👩‍👧‍👦-유입-통계-app__spring-aop에-관하여.html","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html","study/프로그래밍/☕java-,-oop.html","study/프로그래밍/🍃-spring.html","study/프로그래밍/🎵-obsidian.html","study/프로그래밍/🐞-etc.html","study/프로그래밍/📭-server.html","study/프로그래밍/🗒-database.html","study/프로그래밍/🧰-devops.html","study/note-ci_cd/🟣-obsidian-정적호스팅-cicd-과정.html","index.html"],"attachments":["site-lib/scripts/graph-wasm.wasm","site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/6155340132a851f6089e.svg","site-lib/media/2308ab1944a6bfa5c5b8.svg","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/scripts/graph-wasm.js","site-lib/scripts/graph-render-worker.js","site-lib/media/favicon.png","site-lib/styles/obsidian.css","site-lib/styles/other-plugins.css","site-lib/styles/theme.css","site-lib/styles/global-variable-styles.css","site-lib/styles/supported-plugins.css","site-lib/styles/main-styles.css","사진-및-문서/output-(9).png","사진-및-문서/output-(1).png","사진-및-문서/pasted-image-20250102181842.png","사진-및-문서/pasted-image-20241224144309.png","사진-및-문서/pasted-image-20241226111559.png","사진-및-문서/pasted-image-20241226152219.png","사진-및-문서/pasted-image-20241226171158.png","사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png","사진-및-문서/do-messenger_screenshot_2025-02-10_17_10_58.png","사진-및-문서/pasted-image-20240603173517.png","사진-및-문서/pasted-image-20240603180042.png","사진-및-문서/pasted-image-20240604102140.png","사진-및-문서/pasted-image-20240604144026.png","사진-및-문서/pasted-image-20250218145702.png","사진-및-문서/pasted-image-20250218145823.png","사진-및-문서/pasted-image-20250218151731.png","사진-및-문서/pasted-image-20250218151806.png","사진-및-문서/pasted-image-20250218152044.png","사진-및-문서/pasted-image-20250218152103.png","사진-및-문서/pasted-image-20250218153131.png","사진-및-문서/pasted-image-20250218153319.png","사진-및-문서/pasted-image-20250218153445.png","사진-및-문서/pasted-image-20250218153543.png","사진-및-문서/pasted-image-20250218153553.png","사진-및-문서/pasted-image-20250218151330.png","사진-및-문서/pasted-image-20250218153814.png","사진-및-문서/pasted-image-20250218153858.png","사진-및-문서/pasted-image-20250218154352.png","사진-및-문서/pasted-image-20250218154433.png","사진-및-문서/pasted-image-20250218154615.png","사진-및-문서/pasted-image-20250218154633.png","사진-및-문서/pasted-image-20250218154647.png","사진-및-문서/pasted-image-20250218155524.png","사진-및-문서/pasted-image-20250218160328.png","사진-및-문서/pasted-image-20250218160359.png","사진-및-문서/pasted-image-20250218160428.png","사진-및-문서/pasted-image-20250218160532.png","사진-및-문서/pasted-image-20250218160956.png","사진-및-문서/pasted-image-20250218161424.png","사진-및-문서/pasted-image-20250218161515.png","사진-및-문서/pasted-image-20250218161728.png","사진-및-문서/pasted-image-20250218161824.png","사진-및-문서/pasted-image-20250218161847.png","사진-및-문서/pasted-image-20240531162124.png","사진-및-문서/pasted-image-20240722180706.png","사진-및-문서/pasted-image-20240610171904.png","사진-및-문서/pasted-image-20240531103441.png","사진-및-문서/pasted-image-20240531103549.png","사진-및-문서/pasted-image-20240531105228.png","사진-및-문서/pasted-image-20240531105241.png","사진-및-문서/pasted-image-20240531104351.png","사진-및-문서/pasted-image-20240531104418.png","사진-및-문서/pasted-image-20240531104751.png","사진-및-문서/pasted-image-20240531104803.png","사진-및-문서/pasted-image-20240828104032.png","사진-및-문서/pasted-image-20240828104728.png","사진-및-문서/pasted-image-20240611144129.png","사진-및-문서/pasted-image-20240605160336.png","사진-및-문서/pasted-image-20240723134224.png","사진-및-문서/pasted-image-20240723134333.png","site-lib/rss.xml"],"allFiles":["index.html","project/hello-batch/🖱-spring-batch-트러블-슈팅-부록.html","project/hello-batch/🖱-spring-batch-트러블-슈팅.html","project/hello-marketing/👩‍👧‍👦-유입-통계-admin용-테이블-설계-과정.html","project/hello-marketing/👩‍👧‍👦-유입-통계-app__spring-aop에-관하여.html","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html","study/프로그래밍/📭-server.html","study/프로그래밍/🎵-obsidian.html","study/note-ci_cd/🟣-obsidian-정적호스팅-cicd-과정.html","study/프로그래밍/☕java-,-oop.html","study/프로그래밍/🐞-etc.html","study/프로그래밍/🧰-devops.html","study/프로그래밍/🗒-database.html","study/프로그래밍/🍃-spring.html","사진-및-문서/pasted-image-20250218161847.png","사진-및-문서/pasted-image-20250218161824.png","사진-및-문서/pasted-image-20250218161728.png","사진-및-문서/pasted-image-20250218161515.png","사진-및-문서/pasted-image-20250218161424.png","사진-및-문서/pasted-image-20250218160956.png","사진-및-문서/pasted-image-20250218160532.png","사진-및-문서/pasted-image-20250218160428.png","사진-및-문서/pasted-image-20250218160359.png","사진-및-문서/pasted-image-20250218160328.png","사진-및-문서/pasted-image-20250218155524.png","사진-및-문서/pasted-image-20250218154647.png","사진-및-문서/pasted-image-20250218154633.png","사진-및-문서/pasted-image-20250218154615.png","사진-및-문서/pasted-image-20250218154433.png","사진-및-문서/pasted-image-20250218154352.png","사진-및-문서/pasted-image-20250218153858.png","사진-및-문서/pasted-image-20250218153814.png","사진-및-문서/pasted-image-20250218153553.png","사진-및-문서/pasted-image-20250218153543.png","사진-및-문서/pasted-image-20250218153445.png","사진-및-문서/pasted-image-20250218153319.png","사진-및-문서/pasted-image-20250218153131.png","사진-및-문서/pasted-image-20250218152103.png","사진-및-문서/pasted-image-20250218152044.png","사진-및-문서/pasted-image-20250218151806.png","사진-및-문서/pasted-image-20250218151731.png","사진-및-문서/pasted-image-20250218151330.png","사진-및-문서/pasted-image-20250218145823.png","사진-및-문서/pasted-image-20250218145702.png","project/hello-batch/🖱-spring-batch-구조-드로잉.html","사진-및-문서/output-(9).png","사진-및-문서/output-(1).png","사진-및-문서/pasted-image-20250102181842.png","사진-및-문서/pasted-image-20241226171158.png","사진-및-문서/pasted-image-20241226111559.png","사진-및-문서/pasted-image-20241226152219.png","사진-및-문서/pasted-image-20241224144309.png","사진-및-문서/pasted-image-20240828104728.png","사진-및-문서/pasted-image-20240828104032.png","사진-및-문서/pasted-image-20240723134333.png","사진-및-문서/pasted-image-20240723134224.png","사진-및-문서/pasted-image-20240722180706.png","사진-및-문서/pasted-image-20240611144129.png","사진-및-문서/pasted-image-20240610171904.png","사진-및-문서/pasted-image-20240605160336.png","사진-및-문서/pasted-image-20240604144026.png","사진-및-문서/pasted-image-20240604102140.png","사진-및-문서/pasted-image-20240603180042.png","사진-및-문서/pasted-image-20240603173517.png","사진-및-문서/pasted-image-20240531162124.png","사진-및-문서/pasted-image-20240531105241.png","사진-및-문서/pasted-image-20240531105228.png","사진-및-문서/pasted-image-20240531104803.png","사진-및-문서/pasted-image-20240531104418.png","사진-및-문서/pasted-image-20240531104751.png","사진-및-문서/pasted-image-20240531104351.png","사진-및-문서/pasted-image-20240531103441.png","사진-및-문서/pasted-image-20240531103549.png","사진-및-문서/do-messenger_screenshot_2025-02-10_17_10_58.png","사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png","site-lib/scripts/graph-wasm.wasm","site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/6155340132a851f6089e.svg","site-lib/media/2308ab1944a6bfa5c5b8.svg","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/scripts/graph-wasm.js","site-lib/scripts/graph-render-worker.js","site-lib/media/favicon.png","site-lib/styles/obsidian.css","site-lib/styles/other-plugins.css","site-lib/styles/theme.css","site-lib/styles/global-variable-styles.css","site-lib/styles/supported-plugins.css","site-lib/styles/main-styles.css"],"webpages":{"project/hello-batch/🖱-spring-batch-구조-드로잉.html":{"title":"🖱 Spring Batch 구조 드로잉","icon":"","description":"balancePartitionedJobbalanceInitializeStepbalancePartitionStepbalanceSendSnsStepbalanceResetSteppartitionerpartitionHandlerStepExecutionContextReaderprocesserwriterdtochuck sizeSlaveStep-no: 2SlaveStep-no: gridSize balanceQueueResponnse QueueProcessed ItemsProcessed Itemstotal DataProcessed ItemsProcessed ItemsworkingProcessed ItemsProcessed ItemsProcessed ItemsProcessed ItemsSlaveStep-no: 1gridSize - 1gridSize - 2partiton thread-no: 1partiton thread-no: 2partiton thread-no: gridSize totalRecords+ datagridSizeContorllerjobParameters(read only)jobParameters - gridSize - startDate - endDateJob Schedulerexcutedto List(chuck size)dto Listdto Listdto Listdto Listdto Listdto Listdto Listdto ListThe restdto ListfinishedfinishedworkingworkingdtotriggerJobExecutionContextgrid size","aliases":[],"inlineTags":[],"frontmatterTags":["#excalidraw"],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"project/hello-batch/🖱-spring-batch-구조-드로잉.html","pathToRoot":"../..","attachments":[],"createdTime":1739843285680,"modifiedTime":1739844018493,"sourceSize":57706,"sourcePath":"project/hello Batch/🖱 Spring Batch 구조 드로잉.md","exportPath":"project/hello-batch/🖱-spring-batch-구조-드로잉.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"excalidraw"},"project/hello-batch/🖱-spring-batch-트러블-슈팅.html":{"title":"🖱 Spring Batch 트러블 슈팅","icon":"","description":"<a href=\".?query=tag:프로젝트\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#프로젝트\">#프로젝트</a> <a href=\".?query=tag:개발\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#개발\">#개발</a> <a href=\".?query=tag:SPRING\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SPRING\">#SPRING</a> <a href=\".?query=tag:Batch\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Batch\">#Batch</a> <a href=\".?query=tag:Partitioning\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Partitioning\">#Partitioning</a> <a href=\".?query=tag:Chunk\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Chunk\">#Chunk</a>기존 예치금 차액비교 Batch의 Tasklet방식의 배치의 단점을 보완하는 chunk 방식의 배치를 구현하고,\n나아가 다른 기능의 Batch에도 효과적으로 빠르게 적용할 수 있는재사용성/유지보수성 높은 코드, 선례를 만들기 위함이다.\nChunk, Partioning방식을 Job을 추가 개발 (기존 balanceJob 유지)\n당분간 두 Job을 병행하면서 비교\n추가한 Job 기능에 문제없다면 기존 balanceJob 삭제 평균 소요시간: 약 17.35분\n최대 소요시간: 22분\n최소 소요시간: 12분<br>\n<img alt=\"output (1).png\" src=\"사진-및-문서/output-(1).png\" target=\"_self\"> 처음 가져온 Point 배치 완료시 까지 계속 물고있다. -&gt; 한 트렌젝션의 범위가 넓다. G5-Point 등은 처음 7시 시점에 묶여있다. 회원별로 실데이터를 건건이 api(신한)를 호출하여 비교한다. 때문에, 7시 이후에 수정된데이터를 실시간으로 반영하지 못한다. 목적 : batch의 step 레벨에서의 스레드 분리 ( 병렬처리 ) 독립적인 ExecutionContext가 주어져 상태를 안전하게 관리할 수 있다. 목적 : 각 step내의 트렌젝션 단위 분리\nReader / Processor / writer 가 역할을 분담 Partition 생성: Partition 1 : ID 1 ~ 25 / 대기열1 : ID 101 ~ 125 / 대기열2 : ID 201 ~ 225\nPartition 2 : ID 26 ~ 50 / 대기열 : ID 126 ~ 150 / 대기열2 : ID 226 ~ 250\nPartition 3 : ID 51 ~ 75 / 대기열 : ID 151 ~ 175 / 대기열2 : -\nPartition 4 : ID 76 ~ 100 / 대기열 : ID 176 ~ 200 / 대기열2 : - 각 Partition에서 Chunk 처리: Partition 1: Chunk 1: ID 1 ~ 10 → 커밋\nChunk 2: ID 11 ~ 20 → 커밋\nChunk 3: ID 21 ~ 25 → 커밋 Partition 2: Chunk 1: ID 26 ~ 35 → 커밋\nChunk 2: ID 36 ~ 45 → 커밋\nChunk 3: ID 46 ~ 50 → 커밋 나머지 Partition도 동일 방식으로 처리. 병렬 실행: 스레드 풀 크기 = 4이므로 4개의 Partition이 동시에 실행됩니다.\nPartition 처리 순서는 스레드 풀에서 처리되는 순서에 따라 다를 수 있음. 트랜잭션 관리: 각 Partition은 독립적인 트랜잭션을 가짐.\n각 Chunk가 커밋될 때마다 트랜잭션이 종료됨. Partition 생성: Partition 1 : ID 1 ~ 25 / 대기열1 : ID 101 ~ 125 / 대기열2 : ID 201 ~ 225\nPartition 2 : ID 26 ~ 50 / 대기열 : ID 126 ~ 150 / 대기열2 : ID 226 ~ 250\nPartition 3 : ID 51 ~ 75 / 대기열 : ID 151 ~ 175 / 대기열2 : ID 251 ~ 275\nPartition 4 : ID 76 ~ 100 / 대기열 : ID 176 ~ 200 / 대기열2 : ID 276 ~ 300\n추가 스레드 풀 생성\nPartition 5 : ID 300 ~ 325 / 대기열 : ID 326 ~ 350 / 대기열2 : ID 351 ~ 375\n추가 스레드 풀 생성\nPartition 6 : ID 376 ~ 400 / 대기열 : ID 401 ~ 425 / 대기열2 : ID 426 ~ 450 모든 대기열 소모 및 최대 스레드 풀 도달 =&gt; 작업 중단 및 오류 -&gt; 이로볼때, 쿼리작업보다 api호출작업의 소요시간이 길어보임범위 - 2017-11-07 ~ 2017-12-01\nstartDate=2017-11-07&amp;endDate=2017-12-01기존 병렬처리 : 1분 7초\n기존로직 : 6분 32초t:스레드 개수 / c:각 스레드별 청크 파티션 수SimpleAsyncTaskExecutor\ng4/c10 : 1분 41.586초\ng5/c10 : 1분 30.037초\ng5/c3 : 1분 28.997초\ng5/c1 : 1분 29.931초\ng8/c10 : 1분 36.019초\ng10/c1 : 1분 24.529초 ThreadPoolTaskExecutor\nTh min/maxSize64, g64/c10 : 1분 42.848초\nTh min/maxSize32, g32/c10 : 1분 26.551초Th min/maxSize16, g16/c10 :\n1분 46.753초 / 1분 33.779초 / 2분 25.759초\n1분 11.668초 / 2분 5.773초 / 2분 39.553초Th min/maxSize32, g8/c20 : 3분 25.743초Th min/maxSize16, g4/c10 : 2분 29.207초 / 2분 8.004초\nGrid사이즈(파티셔닝 갯수) 만큼 스레드 풀 계속 생성\n파티셔닝 갯수가 많아졌을 때, 스레드 생성/소멸에 드는 오버헤드 증가 최소 스레드풀 개수 / 최대 스레드풀 개수 / 대기열 큐 크기 / 유휴 시간 모두 설정가능\n파티셔닝 갯수가 많을 경우, 처리 성능에 맞는 스레드 풀에서 대기작업으로 처리하여 오버헤드 감소 총 처리량 기준 1/n로 각 스레드에 할당시 충분히 감당한 양으로, 대기열을 사용할 필요가 없다. 쿼리 호출 및 페이징 기법 직접 구현 Native Query 형태로 호출하여 자동 페이징 Spring Batch에서는 공식적으로 지원하지 않음\n자동 페이징\nQuerydsl형태로 쿼리 호출 가능 기존(헬로)의 Querydsl기반 JPAQuery를 그대로 사용 가능\n자동 페이징\n그 외 Querydsl의 장점 보유 기존 PagingItemReader의 메서드를 오버라이딩 하여 사용하며,\nJPQL이 수행되던 부분에 코드를 수정하였다.\n@Bean @Scope(value = \"step\", proxyMode = ScopedProxyMode.TARGET_CLASS) public QuerydslPagingItemReader&lt;HfbatBankBalanceCheckDto&gt; balanceReader() { ExecutionContext jobContext = Objects.requireNonNull(StepSynchronizationManager.getContext()).getStepExecution().getJobExecution().getExecutionContext(); Date startDate = (Date) jobContext.get(START_DATE_KEY); Date endDate = (Date) jobContext.get(END_DATE_KEY); return new QuerydslPagingItemReader&lt;&gt;( entityManagerFactory, executionOrder, DEFAULT_CHUNK_SIZE, queryFactory -&gt; repository.newFindChangeBalanceMemberList( startDate, endDate )); } 각 파티션 스레드 별 종료 시간이 크게 상이하다. 총 소요시간 기준 최대 약 20% 차이\n적용 한다면, 각 스레드 별로 even하게 작업을 수행하여 총 소요시간을 줄일 수 있을것이라 판단 JOB private static AtomicLong executionOrder = new AtomicLong(0); ... new QuerydslPagingItemReader&lt;&gt;( entityManagerFactory, executionOrder, DEFAULT_CHUNK_SIZE, queryFactory -&gt; repository.newFindChangeBalanceMemberList( startDate, endDate )); job 레벨에서의 스레드 세이프한 전역 변수를 생성하였다.\n그 후, 각 파티션 별 리더에 인자값으로 넘긴다.\nlong currentExecutionOrder = executionOrder.getAndIncrement(); long startIndex = (currentExecutionOrder) * getPageSize(); int totalRecords = stepContext.getInt(\"totalRecords\"); if (startIndex &gt;= totalRecords) { initResults(); // 빈 결과로 초기화 tx.commit(); return; } int chunkSizeToRead = Math.min(getPageSize(), (int) (totalRecords - startIndex)); // 남은 데이터 크기만큼 읽기 // QueryDSL Query 생성 JPQLQuery&lt;T&gt; query = createQuery() .offset(startIndex) .limit(chunkSizeToRead); 먼저 한 청크단위의 작업을 끝낸 파티션은 그 다음 작업을 즉시 할당받게 된다.\n즉, 총 처리시간 기준 가장 빨리끝난 파티션과 가장 늦게 끝난 파티션의 실행 시간 차이는 최대 한 청크사이즈를 처리하는 시간보다 크지 않게 된다.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"작업 목적","level":1,"id":"작업_목적_0"},{"heading":"작업 계획","level":1,"id":"작업_계획_0"},{"heading":"예치금차액비교 Batch Job 기존 소요시간 그래프","level":1,"id":"예치금차액비교_Batch_Job_기존_소요시간_그래프_0"},{"heading":"2024-10-28 ~ 2024-11-19 (주말제외)","level":2,"id":"2024-10-28_~_2024-11-19_(주말제외)_0"},{"heading":"문제점 분석","level":1,"id":"문제점_분석_0"},{"heading":"1. 하나의 트렌젝션으로 동작하며, 실패시 처음부터 재시도 해야함","level":2,"id":"1._하나의_트렌젝션으로_동작하며,_실패시_처음부터_재시도_해야함_0"},{"heading":"2. 한 트렌젝션내에서 긴 시간을 동작하여, 배치중 일어나는 insert/update(예치금 입금 출금) 건을 감지하지 못함","level":2,"id":"2._한_트렌젝션내에서_긴_시간을_동작하여,_배치중_일어나는_insert/update(예치금_입금_출금)_건을_감지하지_못함_0"},{"heading":"배치 동작 로직","level":1,"id":"배치_동작_로직_0"},{"heading":"7:00 -&gt; 회원 개개인 별 비교. 문자는 9시 30분에 예약문자로 오지만, 실제 로직은 7시에 돈다","level":3,"id":"700_->_회원_개개인_별_비교._문자는_9시_30분에_예약문자로_오지만,_실제_로직은_7시에_돈다_0"},{"heading":"신한API가 main데이터.","level":4,"id":"신한API가_main데이터._0"},{"heading":"New Batch의 주요 기술 및 목적","level":1,"id":"New_Batch의_주요_기술_및_목적_0"},{"heading":"Partitioning","level":2,"id":"Partitioning_0"},{"heading":"<strong> 프로세스(서비스 로직)단계에서 병렬처리를 하는 것과 어떠한차이가 있는가? ex) parallelStream, CompletableFuture </strong>","level":5,"id":"**_프로세스(서비스_로직)단계에서_병렬처리를_하는_것과_어떠한차이가_있는가?_ex)_parallelStream,_CompletableFuture_**_0"},{"heading":"즉, 파티션 별로 독립적인 SlaveStep을 생성하기 떄문에 Spring Batch의 관리를 받을 수 있다.","level":3,"id":"즉,_파티션_별로_독립적인_SlaveStep을_생성하기_떄문에_Spring_Batch의_관리를_받을_수_있다._0"},{"heading":"Chunk","level":2,"id":"Chunk_0"},{"heading":"파티셔닝 흐름","level":1,"id":"파티셔닝_흐름_0"},{"heading":"ThreadPoolSize : 동시에 실행시킬 스테리드의 개수","level":3,"id":"ThreadPoolSize_동시에_실행시킬_스테리드의_개수_0"},{"heading":"gridSize : 실제로 제단할 사이즈(작업단위)","level":3,"id":"gridSize_실제로_제단할_사이즈(작업단위)_0"},{"heading":"QueueCapacity : 대기열 크기","level":3,"id":"QueueCapacity_대기열_크기_0"},{"heading":"MaxPoolSize : 최대 추가 스레드 풀 개수","level":3,"id":"MaxPoolSize_최대_추가_스레드_풀_개수_0"},{"heading":"ThreadPoolSize : 4  /  gridSize : 25","level":5,"id":"ThreadPoolSize_4_/_gridSize_25_0"},{"heading":"MaxPoolSize : 4 / QueueCapacity : 2 (대기열크기를 벗어나면 Exception 발생)","level":5,"id":"MaxPoolSize_4_/_QueueCapacity_2_(대기열크기를_벗어나면_Exception_발생)_0"},{"heading":"0. 250개의 데이터","level":4,"id":"0._250개의_데이터_0"},{"heading":"데이터가 늘어났을때?","level":3,"id":"데이터가_늘어났을때?_0"},{"heading":"ThreadPoolSize : 4  /  gridSize : 25","level":5,"id":"ThreadPoolSize_4_/_gridSize_25_1"},{"heading":"MaxPoolSize : 6 / QueueCapacity : 2 (대기열크기를 벗어나면 Exception 발생)","level":5,"id":"MaxPoolSize_6_/_QueueCapacity_2_(대기열크기를_벗어나면_Exception_발생)_0"},{"heading":"실행 흐름:","level":3,"id":"실행_흐름_0"},{"heading":"0. 500개의 데이터","level":4,"id":"0._500개의_데이터_0"},{"heading":"파티셔닝 시 스레드 설정 방식 선택","level":1,"id":"파티셔닝_시_스레드_설정_방식_선택_0"},{"heading":"어떠한 방식을 적용하는게 속도와 안정성 면에서 효율적일지??","level":3,"id":"어떠한_방식을_적용하는게_속도와_안정성_면에서_효율적일지??_0"},{"heading":"처리할 컬럼 개수가 적을 때는 청크가 세분화되더라도 부하가 크지 않음.","level":2,"id":"처리할_컬럼_개수가_적을_때는_청크가_세분화되더라도_부하가_크지_않음._0"},{"heading":"SimpleAsyncTaskExecutor vs ThreadPoolTaskExecutor","level":5,"id":"SimpleAsyncTaskExecutor_vs_ThreadPoolTaskExecutor_0"},{"heading":"컬럼 개수 - 292개","level":2,"id":"컬럼_개수_-_292개_0"},{"heading":"SimpleAsyncTaskExecutor vs ThreadPoolTaskExecutor","level":6,"id":"SimpleAsyncTaskExecutor_vs_ThreadPoolTaskExecutor_1"},{"heading":"정리","level":3,"id":"정리_0"},{"heading":"SimpleAsyncTaskExecutor","level":4,"id":"SimpleAsyncTaskExecutor_0"},{"heading":"ThreadPoolTaskExecutor","level":4,"id":"ThreadPoolTaskExecutor_0"},{"heading":"1. 예치금 차액 처리 건은 총 컬럼수가 많지 않다.","level":3,"id":"1._예치금_차액_처리_건은_총_컬럼수가_많지_않다._0"},{"heading":"2. 배치 프로젝트 특성상 동시 작업을 고려하지 않아도 된다.","level":3,"id":"2._배치_프로젝트_특성상_동시_작업을_고려하지_않아도_된다._0"},{"heading":"따라서, <mark>SimpleAsyncTaskExecutor를</mark> 통해 관리하는 것이 적합하다고 판단하였다.","level":2,"id":"따라서,_==SimpleAsyncTaskExecutor를==_통해_관리하는_것이_적합하다고_판단하였다._0"},{"heading":"청크 방식의 정확한 동작 로직","level":1,"id":"청크_방식의_정확한_동작_로직_0"},{"heading":"1. 리더는 청크사이즈 만큼 반복하며, 각 반복마다 특정범위의 값을 return한다.","level":2,"id":"1._==리더==는_청크사이즈_만큼_반복하며,_각_반복마다_특정범위의_값을_return한다._0"},{"heading":"2. 프로세서는 청크사이즈와 관계없이 리더가 넘긴 return에 따라 동작을 수행한다.","level":2,"id":"2._==프로세서==는_청크사이즈와_관계없이_리더가_넘긴_return에_따라_동작을_수행한다._0"},{"heading":"3. 롸이터는 청크사이즈만큼 모이면, 그때 1번 동작한다.","level":2,"id":"3._==롸이터==는_청크사이즈만큼_모이면,_그때_1번_동작한다._0"},{"heading":"QuerydslPagingItemReader 적용기","level":1,"id":"QuerydslPagingItemReader_적용기_0"},{"heading":"ItemReader 방식","level":2,"id":"ItemReader_방식_0"},{"heading":"PagingItemReader 방식","level":2,"id":"PagingItemReader_방식_0"},{"heading":"QuerydslPagingItemReader (커스텀) 방식","level":2,"id":"QuerydslPagingItemReader_(커스텀)_방식_0"},{"heading":"QuerydslPagingItemReader 방식 구현 목적","level":3,"id":"QuerydslPagingItemReader_방식_구현_목적_0"},{"heading":"AbstractPagingItemReader를 상속받는 커스텀 QuerydslPagingItemReader 클래스 생성","level":3,"id":"AbstractPagingItemReader를_상속받는_커스텀_QuerydslPagingItemReader_클래스_생성_0"},{"heading":"구현된 Reader","level":4,"id":"구현된_Reader_0"},{"heading":"QuerydslPagingItemReader를 사용하며, 다중스레드 스케줄링 하기","level":1,"id":"QuerydslPagingItemReader를_사용하며,_다중스레드_스케줄링_하기_0"},{"heading":"목적","level":2,"id":"목적_0"},{"heading":"구현 방법","level":2,"id":"구현_방법_0"},{"heading":"스레드 세이프한 해당 변수는 각 페이징 리더의 startIndex를 지정 한 후,","level":3,"id":"스레드_세이프한_해당_변수는_각_페이징_리더의_startIndex를_지정_한_후,_0"},{"heading":"즉시 값을 늘린다. getAndIncrement()","level":3,"id":"즉시_값을_늘린다._getAndIncrement()_0"},{"heading":"효과","level":2,"id":"효과_0"},{"heading":"메세징 처리 로직 분리","level":1,"id":"메세징_처리_로직_분리_0"},{"heading":"1. 로직순서","level":2,"id":"1._로직순서_0"},{"heading":"메세징 처리할 데이터","level":3,"id":"메세징_처리할_데이터_0"}],"links":["?query=tag:%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8","?query=tag:%EA%B0%9C%EB%B0%9C","?query=tag:SPRING","?query=tag:Batch","?query=tag:Partitioning","?query=tag:Chunk"],"author":"","coverImageURL":"","fullURL":"project/hello-batch/🖱-spring-batch-트러블-슈팅.html","pathToRoot":"../..","attachments":["사진-및-문서/output-(1).png"],"createdTime":1739842773924,"modifiedTime":1739940469478,"sourceSize":24667,"sourcePath":"project/hello Batch/🖱 Spring Batch 트러블 슈팅.md","exportPath":"project/hello-batch/🖱-spring-batch-트러블-슈팅.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"project/hello-batch/🖱-spring-batch-트러블-슈팅-부록.html":{"title":"🖱 Spring Batch 트러블 슈팅 부록","icon":"","description":"<a href=\".?query=tag:프로젝트\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#프로젝트\">#프로젝트</a> <a href=\".?query=tag:개발\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#개발\">#개발</a> <a href=\".?query=tag:SPRING\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SPRING\">#SPRING</a> <a href=\".?query=tag:Batch\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Batch\">#Batch</a> <a href=\".?query=tag:Partitioning\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Partitioning\">#Partitioning</a> <a href=\".?query=tag:Chunk\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Chunk\">#Chunk</a>1 .GridSize: 4 ActiveConnections: 9/50 소요시간: 6 minutes 23.55\n2 .GridSize: 5 ActiveConnections: 11/50 소요시간: 4 minutes 55.57\n3 .GridSize: 6 ActiveConnections: 13/50 소요시간: 4 minutes 47.01\n4 .GridSize: 7 ActiveConnections: 15/50 소요시간: 3 minutes 47.76\n5 .GridSize: 8 ActiveConnections: 17/50 소요시간: 3 minutes 47.69\n6 .GridSize: 9 ActiveConnections: 19/50 소요시간: 3 minutes 59.85\n7 .GridSize: 10 ActiveConnections: 21/50 소요시간: 3 minutes 6.98\n8 .GridSize: 11 ActiveConnections: 23/50 소요시간: 3 minutes 0.52\n9 .GridSize: 12 ActiveConnections: 25/50 소요시간: 3 minutes 5.6112월21일\n164컬럼\n10분 40.78312월20일\n161컬럼\n10분 10.79412월19일\n223컬럼\n14분 29.279초12월18일\n181컬럼\n11분 09.660초12월17일\n329컬럼\n19분 56.948초 12월14일\n220컬럼\n13분 28.209초12월13일\n179컬럼\n10분 57.596초12월12일\n236컬럼\n14분 30.033초12월11일\n226컬럼\n14분 02.939초12월21일\nstartDate=2024-12-14 07:30:00:00&amp;endDate=2024-12-21 07:30:00\n388컬럼\n4분 43.53초12월20일\nstartDate=2024-12-13 07:30:00:00&amp;endDate=2024-12-20 07:30:00\n388컬럼\n4분 44.438초12월19일\nstartDate=2024-12-12 07:30:00:00&amp;endDate=2024-12-19 07:30:00\n387컬럼\n4분 41.215초12월18일\nstartDate=2024-12-11 07:30:00:00&amp;endDate=2024-12-18 07:30:00\n395컬럼\n4분 50.9초12월17일\nstartDate=2024-12-10 07:30:00:00&amp;endDate=2024-12-17 07:30:00\n407컬럼\n4분 55.686초 12월14일\nstartDate=2024-12-07 07:30:00:00&amp;endDate=2024-12-14 07:30:00\n376컬럼\n4분 35.387초12월13일\nstartDate=2024-12-06 07:30:00:00&amp;endDate=2024-12-13 07:30:00\n384컬럼\n4분 43.642초12월12일\nstartDate=2024-12-05 07:30:00:00&amp;endDate=2024-12-12 07:30:00\n438컬럼\n4분 47.027초12월11일\nstartDate=2024-12-04 07:30:00:00&amp;endDate=2024-12-11 07:30:00\n437컬럼\n4분 54.308초\n4일 7:30분-5일 7:30분\n5일 7:30분-6일 7:30분\n6일 7:30분-7일 7:30분\n7일 7:30분-8일 7:30분\n8일 7:30분-9일 7:30분\n9일 7:30분-10일 7:30분\n10일 7:30분-11일 7:30분\ndev 배치 IP운영 배치 IP\n10.22.161.86:8010localhost:8010/run-newMemberBalance?gridSize=6&amp;startDate=2017-11-29 00:00:00&amp;endDate=2017-12-01 23:59:59localhost:8010/run-memberBalance?startDate=2017-11-29&amp;endDate=2017-12-01### 300테스트 1\n## 범위 - 2016-09-28 ~ 2016-12-13\nstartDate=2016-09-28&amp;endDate=2016-12-13\n## 컬럼 개수 - 289개\n6분 22초 ### 300테스트 2\n## 범위 - 2016-12-13 ~ 2017-01-16\nstartDate=2016-12-13&amp;endDate=2017-01-16\n## 컬럼 개수 - 280개\n5분 57초 ### 300테스트 3\n## 범위 - 2017-01-11 ~ 2017-02-13\nstartDate=2017-01-11&amp;endDate=2017-02-13\n## 컬럼 개수 - 286개\n6분 23초 ### 300테스트 4\n## 범위 - 2017-05-17 ~ 2017-06-01\nstartDate=2017-05-17&amp;endDate=2017-06-01\n## 컬럼 개수 - 274개\n5분 54초 ### 300테스트 5\n## 범위 - 2017-11-07 ~ 2017-12-01\nstartDate=2017-11-07&amp;endDate=2017-12-01\n## 컬럼 개수 - 292개\n6분 32초 -------------------------------------------------- ### 1100테스트 1-1\n## 범위 - 2018-02-11 ~ 2018-05-06\nstartDate=2018-02-11&amp;endDate=2018-05-06\n## 컬럼 개수 - 1094개(예상)\n22분 45초 ### 1100테스트 1-2\n## 범위 - 2018-02-11 ~ 2018-05-06\nstartDate=2018-02-11&amp;endDate=2018-05-06\n## 컬럼 개수 - 1094개(예상)\n22분 34초 현재 예치금 차액 배치의 서비스로직은, 각 파티션에서 실행되며,\n이렇게 실행된 코드는 parallelStream을 사용하여 내부적인 병렬처리를 진행한다.\n해당 로직의 특징은 cpu에 부하를 주는 계산식이 아닌, 단순 I/O (api호출 대기)의 소요시간이 크다. API 호출 작업 10,000건 처리\n각 호출 응답 시간 200ms 기본 스레드 풀 크기: CPU 코어 수 - 1 (예: 7개의 코어)\n처리 시간 ≈ 작업&nbsp;개수/스레드&nbsp;수×응답&nbsp;시간\\text{작업 개수} / \\text{스레드 수} \\times \\text{응답 시간}작업&nbsp;개수/스레드&nbsp;수×응답&nbsp;시간\n≈10,000/7×200ms\\approx 10,000 / 7 \\times 200ms≈10,000/7×200ms\n≈286초\\approx 286초≈286초 스레드 풀 크기: 100\n처리 시간 ≈ 작업&nbsp;개수/스레드&nbsp;수×응답&nbsp;시간\\text{작업 개수} / \\text{스레드 수} \\times \\text{응답 시간}작업&nbsp;개수/스레드&nbsp;수×응답&nbsp;시간\n≈10,000/100×200ms\\approx 10,000 / 100 \\times 200ms≈10,000/100×200ms\n≈20초\\approx 20초≈20초 CPU 바운드 작업: CPU를 많이 사용하는 작업(예: 복잡한 계산)이면, 코어 수 이상의 스레드를 실행할 경우 컨텍스트 스위칭(스레드 간 전환) 비용이 증가해 성능이 오히려 떨어질 수 있습니다.\n예: 7개의 코어로 100개의 CPU 작업 스레드를 처리하려 하면 병목이 발생. I/O 바운드 작업(API 호출 포함): 네트워크 I/O 작업은 대기 시간이 길고, 대기 중에는 CPU를 거의 사용하지 않습니다.\n이 경우 스레드 수 &gt; 코어 수가 유리하며, 100개의 스레드를 실행해도 대부분의 스레드는 대기 상태에 있으므로 CPU 사용량이 낮습니다. 69961 ms\n70048 ms\n70396 ms55180 ms\n55036 ms\n55285 ms\n55442 ms71139 ms\n72220 ms64473 ms\n65609 ms\n미리 파티션 되어있는 데이터의 특성상 한번에 처리되는 양이 많지 않다.\n또한, stream().parallel()은 forkJoinPool에서 효율적으로 관리되며,\n데이터의 동기화 병목을 줄이고, 컨텍스트 전환 횟수를 줄여 더 효율적인 것으로 보임.\n사실 잘 모르겠음 stream().parallel() 기능이 효율적이다. 아마도 Where절이 추가되면서 reader의 속도가 크게 올라갓으며, 1번의 호출만을 하기 때문에 더 개선되었을것이다.\nchunk-size:20\n55969 mschunk-size:20\n54679 ms\n54416 ms기존 : reader에서 넘어온녀석들의(옛날기준 날짜범위 내의 가장최신Point)차액 -&gt; 차액이있는녀석들의 (모든날짜 범위내의 최신 Point)의 차액\n현재 : reader에서 가져온녀석들의(모든날짜범위내의 최신 Point)의 차액=&gt; 옛날기준 날짜범위 내의 가장최신포인트와 실시간 포인트는 다를 경우가 많음. 거기 내에전날의 최신포인트 vs 현재 최신포인트(신한) -&gt; 여기엔 안걸리지만\n현재 최신포인트 vs 현재 최신포인트(신한) -&gt; 여기에는 걸리면 로컬을 기준으로 잡아도, 운영 서버에서 어떠한 스레드 셋팅이 효과적일지 판단하기 힘듬.\n어떠한 방법을 사용해야 실제 운영 서버 반영 전, 테스트를 할 수 있을지? 1차에서는 어제 범위 Point (서브쿼리도 메인 쿼리에서 .where()에 의해 이미 어제의 데이터로 필터링된 상태에서 작동)\n2차에서는 모든데이터 범위의 최신 Point 배치를 돌리는 현재날짜 0시 ~ 7시 사이에 입출금건이 있는 고객의 경우 1차에서 항상 걸릴 수 밖에 없음Point 1차에서 모두 검증하는 방법은 어떨지?\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"size별 소요시간 데이터","level":1,"id":"size별_소요시간_데이터_0"},{"heading":"최종 데이터","level":1,"id":"최종_데이터_0"},{"heading":"기존 예치금 차액 로직 ( 기준일 기준 하루 전 모든 입/출금 회원)","level":2,"id":"기존_예치금_차액_로직_(_기준일_기준_하루_전_모든_입/출금_회원)_0"},{"heading":"신규 예치금 차액 로직","level":2,"id":"신규_예치금_차액_로직_0"},{"heading":"<span alt=\"output (9).png\" src=\"output (9).png\" class=\"internal-embed media-embed image-embed is-loaded\"><img alt=\"output (9).png\" src=\"app://c9ba5480e7ab55b1c77551ab6f893fb0f3ac/C:/Users/Hello/Desktop/obsidian/Vault_md_public/%EC%82%AC%EC%A7%84%20%EB%B0%8F%20%EB%AC%B8%EC%84%9C/output%20(9).png?1739424429383\"></span>","level":2,"id":"![[output_(9).png]]_0"},{"heading":"10.22.164.107:8010","level":2,"id":"10.22.164.1078010_0"},{"heading":"최종 테스트 <mark>( 삭제 )</mark>","level":1,"id":"최종_테스트_==(_삭제_)==_0"},{"heading":"","level":5,"id":"_0"},{"heading":"기존 Batch","level":3,"id":"기존_Batch_0"},{"heading":"기존 로직","level":3,"id":"기존_로직_0"},{"heading":"1컬럼당 평균 소요시간 : 1.3 s","level":4,"id":"1컬럼당_평균_소요시간_1.3_s_0"},{"heading":"parallelStream vs CompletableFuture 서비스의 api호출 로직을 더 효율적으로 관리할 수는 없을까?","level":1,"id":"parallelStream_vs_CompletableFuture_서비스의_api호출_로직을_더_효율적으로_관리할_수는_없을까?_0"},{"heading":"<strong>작업 시나리오</strong>","level":4,"id":"**작업_시나리오**_0"},{"heading":"<strong><code>parallelStream</code></strong>의 성능:","level":4,"id":"**`parallelStream`**의_성능_0"},{"heading":"<mark>CompletableFuture</mark> + FixedThreadPool(100)**의 성능:","level":4,"id":"==CompletableFuture==_+_FixedThreadPool(100)**의_성능_0"},{"heading":"<strong>a. 작업의 성격</strong>","level":4,"id":"**a._작업의_성격**_0"},{"heading":"2차 검증로직 삭제 전","level":3,"id":"2차_검증로직_삭제_전_0"},{"heading":"기존로직","level":2,"id":"기존로직_0"},{"heading":"2차 검증로직 삭제 후","level":3,"id":"2차_검증로직_삭제_후_0"},{"heading":"기존 로직","level":2,"id":"기존_로직_1"},{"heading":"(계산로직 + API호출 로직) - 스레드 고정(20)","level":2,"id":"(계산로직_+_API호출_로직)_-_스레드_고정(20)_0"},{"heading":"(API호출 로직만 스레드 고정(20)","level":2,"id":"(API호출_로직만_스레드_고정(20)_0"},{"heading":"결과","level":4,"id":"결과_0"},{"heading":"QuerydslPagingItemReader를 적용함으로 인하여, 일정한 데이터의 크기를 자동으로 페이징 하기 때문에(Reader는 각 Partition별 1번 작동) 스케줄링이 동작할 수 없다.","level":2,"id":"QuerydslPagingItemReader를_적용함으로_인하여,_일정한_데이터의_크기를_자동으로_페이징_하기_때문에(Reader는_각_Partition별_1번_작동)_스케줄링이_동작할_수_없다._0"},{"heading":"그럼에도 속도가 더 개선된 이유를 분석해보면 좋을것으로 보인다.","level":3,"id":"그럼에도_속도가_더_개선된_이유를_분석해보면_좋을것으로_보인다._0"},{"heading":"292Column","level":4,"id":"292Column_0"},{"heading":"기존 :","level":5,"id":"기존__0"},{"heading":"변경후 :","level":5,"id":"변경후__0"},{"heading":"2차 검증 삭제시 최종 차액 인원이 다른 이유","level":3,"id":"2차_검증_삭제시_최종_차액_인원이_다른_이유_0"},{"heading":"현재:281 / 기존:141","level":3,"id":"현재281_/_기존141_0"},{"heading":"현재차액에 기존차액이 모두 포함되어있음","level":4,"id":"현재차액에_기존차액이_모두_포함되어있음_0"},{"heading":"결론 : 예전 차액자 기준으로 오늘날의 차액은 한 번 더 구하는 코드는 옳지 않다.","level":2,"id":"결론_예전_차액자_기준으로_오늘날의_차액은_한_번_더_구하는_코드는_옳지_않다._0"},{"heading":"2차 검증 로직을 삭제한 코드가 더 바람직해 보인다.","level":2,"id":"2차_검증_로직을_삭제한_코드가_더_바람직해_보인다._0"},{"heading":"회의 안건","level":1,"id":"회의_안건_0"},{"heading":"1. 스레드 풀 개수 정의 어떻게 할것인가?","level":2,"id":"1._스레드_풀_개수_정의_어떻게_할것인가?_0"},{"heading":"2. fail list 2차검증 로직 꼭 필요한가?","level":2,"id":"2._fail_list_2차검증_로직_꼭_필요한가?_0"}],"links":["?query=tag:%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8","?query=tag:%EA%B0%9C%EB%B0%9C","?query=tag:SPRING","?query=tag:Batch","?query=tag:Partitioning","?query=tag:Chunk"],"author":"","coverImageURL":"","fullURL":"project/hello-batch/🖱-spring-batch-트러블-슈팅-부록.html","pathToRoot":"../..","attachments":["사진-및-문서/output-(9).png"],"createdTime":1739842890772,"modifiedTime":1739940476089,"sourceSize":8808,"sourcePath":"project/hello Batch/🖱 Spring Batch 트러블 슈팅 부록.md","exportPath":"project/hello-batch/🖱-spring-batch-트러블-슈팅-부록.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"project/hello-marketing/👩‍👧‍👦-유입-통계-admin용-테이블-설계-과정.html":{"title":"👩‍👧‍👦 유입 통계 ADMIN용 테이블 설계 과정","icon":"","description":"<a href=\".?query=tag:프로젝트\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#프로젝트\">#프로젝트</a> <a href=\".?query=tag:개발\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#개발\">#개발</a> <a href=\".?query=tag:SPRING\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SPRING\">#SPRING</a> <a href=\".?query=tag:AOP\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#AOP\">#AOP</a>hf_marketing_codehf_marketing_targethf_marketing_hit_log<br><img alt=\"Pasted image 20250102181842.png\" src=\"사진-및-문서/pasted-image-20250102181842.png\" target=\"_self\">=&gt; 해당형태로 컬럼을 고정시키고, 동적으로 유입 수 를 출력한다.-&gt; 그 후 페이지에 뿌려주기Date: 01-02\nAd Type: 구글광고\nTotal Inflow: 4\nTotal Hit: 27\nDetail Information: Page Name: 대출하기 페이지 Hit: 9 Page Name: 한도조회 버튼 Hit: 12 Page Name: 이용안내 페이지 Hit: 6\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"DB에서 관리? -&gt; ADMIN페이지로 생성?","level":1,"id":"DB에서_관리?_->_ADMIN페이지로_생성?_0"},{"heading":"1. enum객체의 상수값들을 빌드시에 DB에서 셋팅할 수 있는지?","level":1,"id":"1._enum객체의_상수값들을_빌드시에_DB에서_셋팅할_수_있는지?_0"},{"heading":"2. pageURL/pageType 과 targetClass/targetMethod/methodParameters중 하나로 특정","level":1,"id":"2._pageURL/pageType_과_targetClass/targetMethod/methodParameters중_하나로_특정_0"},{"heading":"3. DB 최적화를 진행하자 -&gt; 중복데이터 제거","level":1,"id":"3._DB_최적화를_진행하자_->_중복데이터_제거_0"},{"heading":"포인트 컷 생성시 DB 호출하여 타겟 메서드 세팅","level":1,"id":"포인트_컷_생성시_DB_호출하여_타겟_메서드_세팅_0"},{"heading":"ADMIN에서 어떻게 받을것인가?","level":1,"id":"ADMIN에서_어떻게_받을것인가?_0"},{"heading":"=&gt;  기존 EXCEL로직을 사용하기 위해 service로직에서 row를 병합하여 view에 건내주도록 개발하였다.","level":4,"id":"=>_기존_EXCEL로직을_사용하기_위해_service로직에서_row를_병합하여_view에_건내주도록_개발하였다._0"},{"heading":"repositoty에서 세부데이터를 List형태로 받을 수 있도록 쿼리 작성","level":1,"id":"repositoty에서_세부데이터를_List형태로_받을_수_있도록_쿼리_작성_0"}],"links":["?query=tag:%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8","?query=tag:%EA%B0%9C%EB%B0%9C","?query=tag:SPRING","?query=tag:AOP"],"author":"","coverImageURL":"","fullURL":"project/hello-marketing/👩‍👧‍👦-유입-통계-admin용-테이블-설계-과정.html","pathToRoot":"../..","attachments":["사진-및-문서/pasted-image-20250102181842.png"],"createdTime":1739783488509,"modifiedTime":1739940415967,"sourceSize":2997,"sourcePath":"project/hello marketing/👩‍👧‍👦 유입 통계 ADMIN용 테이블 설계 과정.md","exportPath":"project/hello-marketing/👩‍👧‍👦-유입-통계-admin용-테이블-설계-과정.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"project/hello-marketing/👩‍👧‍👦-유입-통계-app__spring-aop에-관하여.html":{"title":"👩‍👧‍👦 유입 통계 APP__SPRING AOP에 관하여","icon":"","description":"<a href=\".?query=tag:프로젝트\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#프로젝트\">#프로젝트</a> <a href=\".?query=tag:개발\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#개발\">#개발</a> <a href=\".?query=tag:DB\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#DB\">#DB</a><br><a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.hellofunding.co.kr/sp/loan/gtLoan?p=a2FrYW8xc3QK\" target=\"_self\">https://www.hellofunding.co.kr/sp/loan/gtLoan?p=a2FrYW8xc3QK</a><br>\n<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.hellofunding.co.kr/sp/loan/gtLoan?p=a2FrYW8xc222\" target=\"_self\">https://www.hellofunding.co.kr/sp/loan/gtLoan?p=a2FrYW8xc222</a>\n통계 필요 페이지 내에서(프론트), 쿠키 데이터 페이지 별 최초 진입 확인? 해당 진입시점부터 특정 동작에 대한 모든 타임라인 로그 레디스 가용 메모리에 대한 한계값 산정. -&gt; 아직 적용 X URL + 함수명 조합\n=&gt; 메인 테이블\n=&gt; 백로직에서 쿠키 데이터 쌓기=&gt; 디테일 테이블 - 타임라인으로 관리 단, 메인테이블에 존재하는 내셕들에 대해서\n=&gt; AOP에서 특정 서비스or메서드orURL로 지정하여 로그 쌀기- 관심사(Aspect)를 분리하여, 각 서비스 메서드에 반복해서 구현하는 것이 아닌, 별도의 Aspect로 관리하여 핵심로직을 공통으로 적용하기 위함이다. 난수 생성 후 물고있기☑ IP로 추적 <br><img alt=\"Pasted image 20241224144309.png\" src=\"사진-및-문서/pasted-image-20241224144309.png\" target=\"_self\">쿠키가 필요한 페이지의 경로가 기본 path와 일치하는 경우(redirect url 이 SP_MARKETING_HIT_TEST1 의 하위 url일 경우)\n에는 명시적으로 표시할 필요가 없지만,<br><img alt=\"Pasted image 20241226111559.png\" src=\"사진-및-문서/pasted-image-20241226111559.png\" target=\"_self\">\n장점: 코드가 간결하고 읽기 쉽다.\nSpring의 AOP 인프라를 사용하여 메서드 인터셉션을 쉽게 구현할 수 있다. 단점:\n- 포인트컷 조건은 컴파일 시점에 고정된다.\n- 복잡한 조건이나 동적으로 변경되는 조건을 처리하기 어렵다. -&gt; @Pointcut 등의 조건에 부합하는 Bean객체를 컴파일 시점에 찾아내어 프록시를 감싼다. 동적 생성: 런타임에 프록시를 생성하여 포인트컷과 어드바이스를 동적으로 적용.\nStaticMethodMatcherPointcut 또는 DynamicMethodMatcherPointcut을 사용하여 런타임 조건 기반으로 메서드 매칭. 장점: 런타임 조건에 따라 동적으로 포인트컷 생성 가능.\n복잡한 조건과 동적 필터링을 처리하기 용이.\nSpring AOP가 아닌 순수 Java 프록시 방식도 지원. 단점: 코드가 복잡해지고 추가 구현이 필요.\nSpring AOP와 동일한 수준의 간결성을 제공하지 않음. -&gt; 해당 프록시 객체를 적용하고 싶은 Bean객체에 매번 생성(등록)해주어야 함.import org.springframework.aop.Pointcut;\nimport org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;\nimport org.springframework.aop.support.DefaultPointcutAdvisor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration; @Configuration\npublic class AopConfig { @Bean public Pointcut customPointcut() { return new CustomPointcut(); } @Bean public CustomAdvice customAdvice() { return new CustomAdvice(); } @Bean public DefaultPointcutAdvisor customAdvisor(Pointcut customPointcut, CustomAdvice customAdvice) { return new DefaultPointcutAdvisor(customPointcut, customAdvice); } @Bean public DefaultAdvisorAutoProxyCreator proxyCreator() { return new DefaultAdvisorAutoProxyCreator(); }\n} @Pointcut 방식과 동일한 동작: Spring 컨테이너가 관리하는 모든 빈에 대해 조건을 평가하고 프록시를 자동 생성합니다. 프록시를 명시적으로 선언할 필요 없음: ProxyFactory처럼 수동으로 프록시를 생성하지 않아도 됩니다. 유연성과 효율성 향상: Spring AOP 인프라를 활용하므로, 관리가 용이하고 런타임 성능이 개선됩니다. BeanPostProcessor: DefaultAdvisorAutoProxyCreator는 Spring의 BeanPostProcessor를 구현한 클래스이다.\nSpring 컨테이너는 애플리케이션 컨텍스트에 등록된 모든 BeanPostProcessor를 자동으로 호출하여 빈의 초기화 전후 작업을 수행한다.\n이를 통해, Spring AOP는 빈 생성 단계에서 프록시를 생성하고 조건에 맞는 빈에 대해 어드바이저를 적용. Advisor 탐색: DefaultAdvisorAutoProxyCreator는 Spring 컨텍스트에 등록된 모든 Advisor를 자동으로 탐색한다.\n이는 DefaultAdvisorAutoProxyCreator가 BeanFactory를 통해 컨테이너의 모든 Advisor 타입 빈을 조회하기 때문.\n탐색된 Advisor를 사용하여 각 빈의 메서드와 포인트컷 조건을 매칭. Advisor와 빈의 매칭: 빈이 생성될 때, DefaultAdvisorAutoProxyCreator는 해당 빈의 메서드가 어떤 Advisor의 포인트컷 조건에 부합하는지 평가.\n조건에 부합하면, 해당 빈을 프록시 객체로 감싸고, 어드바이스를 연결. 이렇게 맵핑이 되어야 하나, 이를 동적으로 탐지하지 못한다.\n/* * EnableAspectJAutoProxy &gt; 프록시 적용시 인터페이스/클래스 여부 자동 판단 * 클래스에 인터페이스가 있으면 JDK 동적 프록시. * 인터페이스가 없으면 CGLIB 프록시. * */@Configuration @EnableAspectJAutoProxy public class AopConfig { @Bean public Pointcut customPointcut() { return new CustomPointcut(); } @Bean public CustomAdvice customAdvice() { return new CustomAdvice(); } @Bean public DefaultPointcutAdvisor customAdvisor(Pointcut customPointcut, CustomAdvice customAdvice) { return new DefaultPointcutAdvisor(customPointcut, customAdvice); } /* * @EnableAspectJAutoProxy를 사용해 등록했기 때문에 불필요. * */ // @Bean // public DefaultAdvisorAutoProxyCreator proxyCreator() { // return new DefaultAdvisorAutoProxyCreator(); // } }\n프록시(Proxy)는 대리자라는 뜻으로, 다른 객체에 대한 인터페이스 역할을 하는 객체를 말합니다. 프로그래밍에서 프록시는 실제 객체에 접근하기 전에 특정 작업(로깅, 보안, 트랜잭션 관리 등)을 수행하거나, 객체에 대한 접근을 제어하는 데 사용됩니다.\n대리 객체: 프록시는 실제 객체에 대한 중간다리 역할을 합니다.\n동작 조정: 프록시는 요청을 가로채서 추가적인 작업을 수행하거나, 요청을 변형한 뒤 실제 객체에 전달할 수 있습니다.\nAOP와 연관: 프록시를 사용하면 코드를 변경하지 않고도 객체의 동작을 확장하거나 변경할 수 있습니다.\nMethod Name: loanerLoginPage\njavax.servlet.http.HttpServletRequest\norg.springframework.web.bind.annotation.GetMapping <br><img alt=\"Pasted image 20241226152219.png\" src=\"사진-및-문서/pasted-image-20241226152219.png\" target=\"_self\"><br><img alt=\"Pasted image 20241226171158.png\" src=\"사진-및-문서/pasted-image-20241226171158.png\" target=\"_self\">\n외부링크 최초진입. hitCode, hitUid 발급 및 DB저장 외부링크 재진입. hitCode는 변경될 수 있으므로 \"p\"파라미터로 재발급\n=&gt; hitCode는 매번 재발급 / hitUid는 없을때만 발급 일반사용자 이며, 아무동작 하지 않는다. 외부링크 진입 후 동작. 없는 녀석 새로 발급 및 DB저장\n@Override @Transactional public ResponseModel insertMarketingHitLog(String hitCode, String hitUid, String pageUrl, String pageType){ try { Optional&lt;HfMarketingHitLog&gt; existingLog = hfMarketingHitLogRepository.findByHitCodeAndHitUidAndPageUrlAndPageType(hitCode, hitUid, pageUrl, pageType); if (existingLog.isPresent()) { HfMarketingHitLog logToUpdate = existingLog.get(); logToUpdate.setUpdateDate(LocalDateTime.now()); hfMarketingHitLogRepository.save(logToUpdate); return new ResponseModel(ResponseModel.ResponseStatus.SUCCESS); } HfMarketingHitLog hfMarketingHitLog = HfMarketingHitLog.builder() .hitCode(hitCode) .hitUid(hitUid) .pageUrl(pageUrl) .pageType(pageType) .build(); hfMarketingHitLogRepository.save(hfMarketingHitLog); return new ResponseModel(ResponseModel.ResponseStatus.SUCCESS); } catch (Exception e) { return new ResponseModel(ResponseModel.ResponseStatus.FAILED, \"데이터 처리 중 오류 발생\"); } }\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"인입 페이지 주소 예시","level":1,"id":"인입_페이지_주소_예시_0"},{"heading":"구상","level":1,"id":"구상_0"},{"heading":"1. 광고 url 진입자, 파라미터(CODE) 쿠키 저장","level":2,"id":"1._광고_url_진입자,_파라미터(CODE)_쿠키_저장_0"},{"heading":"2. Hit체크 하고싶은 페이지에서, CODE별 최초 진입 확인시 Hit로그 저장 controller 호출","level":2,"id":"2._Hit체크_하고싶은_페이지에서,_CODE별_최초_진입_확인시_Hit로그_저장_controller_호출_0"},{"heading":"3. 파라미터로 CODE 및 현재 페이지 주소(ex. /sp/loan) 저장","level":2,"id":"3._파라미터로_CODE_및_현재_페이지_주소(ex._/sp/loan)_저장_0"},{"heading":"데이터 테이블 구상","level":1,"id":"데이터_테이블_구상_0"},{"heading":"고려사항","level":1,"id":"고려사항_0"},{"heading":"1. 추적을 얼마나 디테일하게 저장할지?","level":2,"id":"1._추적을_얼마나_디테일하게_저장할지?_0"},{"heading":"2. 디테일에 대한 부하분산은 어떻게 할지?","level":2,"id":"2._디테일에_대한_부하분산은_어떻게_할지?_0"},{"heading":"3. 인입시점이 아닌 동작에대한 unique값을 어떻게 지정할지?","level":2,"id":"3._인입시점이_아닌_동작에대한_unique값을_어떻게_지정할지?_0"},{"heading":"정리","level":1,"id":"정리_0"},{"heading":"1. 첫 외부 URL진입 시점엔 controller redirect로직 으로 로그 쌓기 / 쿠키 셋팅 =&gt; 이후 AOP 공통로직 화","level":3,"id":"1._첫_외부_URL진입_시점엔_controller_redirect로직_으로_==로그_쌓기==_/_==쿠키_셋팅==_=>_이후_AOP_공통로직_화_0"},{"heading":"2. 이후 동작에 대해 쿠기값 비교 / AOP 로그 쌓기 공통 실행","level":3,"id":"2._이후_동작에_대해_==쿠기값_비교==_/_==AOP_로그_쌓기_공통_실행==_0"},{"heading":"<strong>Spring AOP 사용 이유</strong>","level":2,"id":"**Spring_AOP_사용_이유**_0"},{"heading":"어떻게 자신의 메인 테이블을 찾을것인가?","level":4,"id":"어떻게_자신의_메인_테이블을_찾을것인가?_0"},{"heading":"Path를 명시적으로 설정하여 주지 않았을 때, 쿠키가 등록되지 않는 이유","level":1,"id":"Path를_명시적으로_설정하여_주지_않았을_때,_쿠키가_등록되지_않는_이유_0"},{"heading":"현재는 하위 URL이 아니기 때문에 경로를 명시적으로 설정해주어야 한다.","level":2,"id":"현재는_하위_URL이_아니기_때문에_경로를_명시적으로_설정해주어야_한다._0"},{"heading":"AOP에서 Front-end 단의 특정 동작 필터링 하기","level":1,"id":"AOP에서_Front-end_단의_특정_동작_필터링_하기_0"},{"heading":"1. Pointcut 객체에 동적으로 enum에서 미리 선언한 값 execution으로 삽입하기","level":2,"id":"1._Pointcut_객체에_동적으로_enum에서_미리_선언한_값_execution으로_삽입하기_0"},{"heading":"<strong>(이후 ADMIN 관리를 위해 enum객체 -&gt; DB로 데이터 이전)</strong>","level":3,"id":"**(이후_ADMIN_관리를_위해_enum객체_->_DB로_데이터_이전)**_0"},{"heading":"<code>@Pointcut</code> 어노테이션은 컴파일 시점에 고정된 문자열로 정의된 포인트컷 표현식을 기반으로 동작한다.","level":1,"id":"`@Pointcut`_어노테이션은_컴파일_시점에_고정된_문자열로_정의된_포인트컷_표현식을_기반으로_동작한다._0"},{"heading":"이를 해결할 방법은?","level":3,"id":"이를_해결할_방법은?_0"},{"heading":"프록시 기반 동적 포인트컷 생성방식","level":1,"id":"프록시_기반_동적_포인트컷_생성방식_0"},{"heading":"customAdvisor를 사용한 동적 포인트컷 생성방식","level":1,"id":"customAdvisor를_사용한_동적_포인트컷_생성방식_0"},{"heading":"위 코드의 <code>DefaultAdvisorAutoProxyCreator</code>객체가 조건에 부합하는 빈에 대해 자동으로 프록시를 생성하여 <code>Advice</code>를 적용한다.","level":4,"id":"위_코드의_`DefaultAdvisorAutoProxyCreator`객체가_조건에_부합하는_빈에_대해_자동으로_프록시를_생성하여_`Advice`를_적용한다._0"},{"heading":"<code>DefaultAdvisorAutoProxyCreator</code>는 어떻게 <code>customAdvisor</code>의 조건에 부합하는 빈을 찾나?","level":1,"id":"`DefaultAdvisorAutoProxyCreator`는_어떻게_`customAdvisor`의_조건에_부합하는_빈을_찾나?_0"},{"heading":"위 방법의 문제점?","level":1,"id":"위_방법의_문제점?_0"},{"heading":"클래스에 인터페이스가 있으면 JDK 동적 프록시, 인터페이스가 없으면 CGLIB 프록시","level":2,"id":"클래스에_인터페이스가_있으면_JDK_동적_프록시,_인터페이스가_없으면_CGLIB_프록시_0"},{"heading":"@EnableAspectJAutoProxy 어노테이션을 사용한다면, 빈 최초등록시 자동으로 판단하여 해당 프록시 객체를 적용할 수 있다.","level":3,"id":"@EnableAspectJAutoProxy_어노테이션을_사용한다면,_빈_최초등록시_자동으로_판단하여_해당_프록시_객체를_적용할_수_있다._0"},{"heading":"프록시?","level":1,"id":"프록시?_0"},{"heading":"프록시(Proxy)란?","level":3,"id":"프록시(Proxy)란?_0"},{"heading":"핵심 개념:","level":4,"id":"핵심_개념_0"},{"heading":"StaticMethodMatcherPointcut에서 사용가능한 호출 고유정보","level":1,"id":"StaticMethodMatcherPointcut에서_사용가능한_호출_고유정보_0"},{"heading":"타겟 클래스 / 메서드명 / 파라미터 / 어노테이션","level":2,"id":"타겟_클래스_/_메서드명_/_파라미터_/_어노테이션_0"},{"heading":"메서드 검증 포인트 컷 추가 후 빌드 시간","level":2,"id":"메서드_검증_포인트_컷_추가_후_빌드_시간_0"},{"heading":"ENUM객체에, 고유한 정보를 넣어주면 자동 집계가 시작된다","level":1,"id":"ENUM객체에,_고유한_정보를_넣어주면_자동_집계가_시작된다_0"},{"heading":"customAdvice에 등록된 invoke함수는 Pointcut의 조건에 부합하는 메서드의 정보만을 가져온다.","level":3,"id":"customAdvice에_등록된_invoke함수는_Pointcut의_조건에_부합하는_메서드의_정보만을_가져온다._0"},{"heading":"케이스 정리","level":1,"id":"케이스_정리_0"},{"heading":"1. Pointcut에 있는 메서드이며, \"p\"파라미터가 있을때,","level":2,"id":"1._Pointcut에_있는_메서드이며,_`\"p\"파라미터`가_있을때,_0"},{"heading":"1.1 현재 쿠키에 <code>hitCode</code> / <code>hitUid</code> 가 없을때","level":3,"id":"1.1_현재_쿠키에_`hitCode`_/_`hitUid`_가_없을때_0"},{"heading":"1.2 현재 쿠키에 <code>hitCode</code> / <code>hitUid</code> 가 있을때","level":3,"id":"1.2_현재_쿠키에_`hitCode`_/_`hitUid`_가_있을때_0"},{"heading":"2. Pointcut에 있는 메서드이며,\"p\"파라미터가 없을때,","level":2,"id":"2._Pointcut에_있는_메서드이며,`\"p\"파라미터`가_없을때,_0"},{"heading":"2.1 현재 쿠키에 <code>hitCode</code> / <code>hitUid</code> 가 둘다 없을때","level":3,"id":"2.1_현재_쿠키에_`hitCode`_/_`hitUid`_가_둘다_없을때_0"},{"heading":"2.2 현재 쿠키에 <code>hitUid</code> 또는 <code>hitUid</code> 가 있을때","level":3,"id":"2.2_현재_쿠키에_`hitUid`_또는_`hitUid`_가_있을때_0"},{"heading":"서비스 저장시 동시성 이슈가 발생할 수 있다?","level":1,"id":"서비스_저장시_동시성_이슈가_발생할_수_있다?_0"},{"heading":"1. 중복 데이터 조회와 저장 사이의 타이밍 차이","level":4,"id":"1._**중복_데이터_조회와_저장_사이의_타이밍_차이**_0"}],"links":["?query=tag:%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8","?query=tag:%EA%B0%9C%EB%B0%9C","?query=tag:DB"],"author":"","coverImageURL":"","fullURL":"project/hello-marketing/👩‍👧‍👦-유입-통계-app__spring-aop에-관하여.html","pathToRoot":"../..","attachments":["사진-및-문서/pasted-image-20241224144309.png","사진-및-문서/pasted-image-20241226111559.png","사진-및-문서/pasted-image-20241226152219.png","사진-및-문서/pasted-image-20241226171158.png"],"createdTime":1739783337843,"modifiedTime":1739940414777,"sourceSize":16027,"sourcePath":"project/hello marketing/👩‍👧‍👦 유입 통계 APP__SPRING AOP에 관하여.md","exportPath":"project/hello-marketing/👩‍👧‍👦-유입-통계-app__spring-aop에-관하여.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html":{"title":"🥇 정보처리 기사 실기 키워드","icon":"","description":"<a href=\".?query=tag:정보처리기사\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정보처리기사\">#정보처리기사</a> <a href=\".?query=tag:실기\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#실기\">#실기</a> <a href=\".?query=tag:키워드\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#키워드\">#키워드</a> <a href=\".?query=tag:정리\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정리\">#정리</a>\n시제품을 끊임없이 제작하며 사이클을 반복하는 개발 방법론\n워터폴과 대조적이며, 소프트웨어 개발을 넘어 기업 경영 전반에서 사용되고 있다.\n고객의 변화하는 요구사항과 환경 변화에 능동적인 소프트웨어 개발 방법론 소프트웨어 공학에서 리펙토링(Refactoring)을 하는 목적에 대해 간략히 서술하시오. 리펙토링의 목적은 프로그램을 쉽게 이해하고 수정하여 빠르게 개발할 수 있도록 하기 위함이다. ( 1 ) 요구사항은 시스템이 무엇을 하는지, 어떤 기능을 하는지 등 사용자가 시스템을 통해 제공받기를 원하는 기능이나 시스템이 반드시 수행해야하는 기능을 의미한다.\n( 2 ) 요구사항은 품질이나 제약사항과 관련된 요구사항으로, 시스템의 장비 구성, 성능, 인터페이스, 테스트, 보안 등의 요구사항을 말한다. UML에 관한 다음 괄호에 공통으로 들어갈 알맞은 용어는?\n( ) 다이어그램은 UML다이어그램중 객체(Object)들을 ( )로 추상화하여 표현하는 다이어그램으로, 대표적인 구조적 다이어그램이다.\n( )는 각각의 객체들이 갖는 속성과 메소드를 표현한 것으로 3개의 구획으로 나눠 이름, 속성, 메서드를 표기한다. UML은 시스템 분석, 설계, 구현 등 시스템 개발 과정에서 시스템 개발자와 고객 또는 개발자 상호 간의 의사소통이 원활하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어로 사물, ( 1 ), 다이어그램 으로 이루어져있다.\n( 1 )는 사물과 사물사이의 연관성을 표현하는 것으로 연관, 집합, 포함, 일반화 등 다양한 형태의 ( 1 )가 존재한다.\n( 2 )는 UML에 표현되는 사물의 하나로, 객체가 갖는 속성과 동작을 표현한다. 일반적으로 직사각형으로 표현하며, 직사각형 안에 이름, 속성, 동작을 표기한다.\n( 3 )는 ( 2 )와 같은 UML에 표현되는 사물의 하나로, ( 2 )나 컴포넌트의 동작을 모아놓은 것이며, 외부적으로 가시화되는 행동을 표현한다. 단독으로 사용되는 경우는 없으며, ( 3 )구현을 위한 ( 2 )또는 컴포넌트와 함께 사용된다. 관계(Relationship)는 사물과 사물 사이의 연관성을 표현하는 것이다.\n1 - 하나의 사물이 다른 사물에 포함되어 있는 관계로, 전체와 부분으로 구분되어지며, 서로 독립적이다.\n2 - 상위 모듈이 하위 모듈보다 더 일반적인 개념을 가지고 있으며, 하위 모듈이 상위 모듈보다 더 구체적인 개념을 가진다. [보기]\n-Association(연관 관계) : 객체간의 기본적인 관계를 나타낸다.\n-Dependency(의존 관계) : 한 객체가 다른 객체에 의존하거나 영향을 받는다.\n-Aggregation(집합 관계) : 부분과 전체의 관계를 나타내며, 부분이 독립적으로 존재할 수 있는 경우를 말한다.\n-Realization(실체화 관계) : 인터페이스와 이를 구현하는 클래스 간의 관계\n-Composition(합성 관계) : 집합관계의 특수한 형태로, 부분이 전체와 생명 주기를 공유하며 독립적으로 존재할 수 없는 경우\n-Generalization(일반화 관계) : 상위 클래스와 하위 클래스 간의 관계로, 상속을 통해 일반적인 특성을 공유한다. UML을 이용한 다이어그램 중 다음 그림에 해당하는 다이어그램을 쓰시오.\n[ ] &lt;&lt;import&gt;&gt; [Security]\nOrder ----------------&gt; +(Credentials) / ( ) +(MDSCrupt) LOC기법에 의하여 예측된 총 라인 수가 30,000라인, 개발에 참여할 프로그래머가 5명, 프로그래머들의 평균 생산성이 월간 300라인일 때 개발에 소요되는 기간을 계산식과 함께 쓰시오. 데이터베이스 스키마(Schema)에 대해 간략히 서술하시오. 스키마는 데이터베이스의 구조와 제약 조건에 관한 전반적인 명세를 기술한 것이다. DB 설계에 대한 설명. 괄호를 채우시오\n( 1 ) : 논리적 구조로 표현된 데이터를 디스크 등의 저장장치에 저장할 수 있는 데이터로 변환하는 과정으로, 파일의 저장 구조 및 엑세스 경로를 결정하며, 테이블 정의서 및 명세서가 산출된다.\n( 2 ) : 현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정으로, 개념 스키마 모델링과 트렌젝션 모델링을 수행하며, 요구 조건 명세를 E-R 다이어그램으로 작성한다.\n( 3 ) : 현실의 자료를 특정 DBMS가 지원하는 자료구조로 변환하는 과정으로, 트렌젝션의 인터페이스를 설계하고, 정규화를 통해 스키마를 평가 및 정제한다. 다음은 데이터베이스 구축까지의 과정을 나열한 것이다. 순서대로 괄호를 채우시오. 요구분석 → ( ) → ( ) → ( ) → 구현 데이터 모델이 구성 요소에 대한 다음 설명에서 괄호(1, 2)에 들어갈 용어를 쓰시오\n( 1 )은 데이터베이스에 저장된 실제 데이터를 처리하는 작업에 대한 명세서로서 데이터베이스를 조작하는 기본 도구에 해당된다.\n( 2 )는 논리적으로 표현된 객체 타입들 간의 관계로서 데이터의 구성 및 정적 성질을 표현한다.\n제약조건은 데이터베이스에 저장될 수 있는 실제 데이터의 논리적인 제약 조건을 의미한다.\n<br><img alt=\"do-messenger_screenshot_2025-02-10_15_04_45.png\" src=\"사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png\" target=\"_self\">\n-다음 E-R다이어그램을 참고하여 괄호(1~5)의 설명에 적합한 요소를 찾아 기호로 표시\n( 1 ) : 관계 집합을 의미한다.\n( 2 ) : 관계 집합과 속성을 연결한다.\n( 3 ) : 개체 집합을 의미하며, 키로 사용되는 항목에는 밑줄을 표시한다.\n( 4 ) : 관계 집합의 속성을 의미한다.\n( 5 ) : 개체 집합과 집합을 연결한다. 1 → ㄴ\n2 → ㄷ\n3 → ㄱ\n4 → ㄹ\n5 → ㅁ\n-키(Key)에 대한 다음 설명에서 괄호(1, 2)에 들어갈 용어를 쓰시오.\n키는 데이터베이스에서 조건에 만족하는 튜플을 찾거나 순서대로 정렬할 때 기준이 되는 속성을 말한다.\n슈퍼키는 한 릴레이션 내에 있는 속성들의 집합으로 구성된 키로, 릴레이션을 구성하는 모든 튜플에 대해 ( 1 )을 만족한다.\n후보키(Candidate Key)는 릴레이션을 구성하는 속성들 중에서 튜플을 유일하게 식별하기 위해 사용되는 속성들의 부분집합으로, ( 1 )과 ( 2 )을 만족하는 특징이 있다. 관계대수란 관계형 데이터베이스에서 원하는 정보와 그 정보를 검색하기 위해서 어떻게 유도하는가를 기술하는 절차적인 언어이다. 관계 대수에 사용되는 연산은 다음과 같다. 합집합(UNION)은 두 릴레이션에 존재하는 튜플의 합집합을 구하되, 결과로 생성된 릴레이션에서 중복되는 튜플은 제되는 연산으로, 기호는 ( 1 )이다. 차집합(DIFFERENCCE)은 두 릴레이션에 존재하는 튜플의 차집합을 구하는 연산으로, 사용하는 기호는 ( 2 )이다. 교차곱(CARTESIAN PRODUCT)은 두 릴레이션에 있는 튜플들의 순서쌍을 구하는 연산으로, 사용하는 기호는 ( 3 )이다. 프로젝트(PROJECT)는 주어진 릴레이션에서 송성 리스트(Attribute List)에 제시된 속성 값만을 추출하여 새로운 릴레이션을 만드는 연산으로, 사용하는 기호는 ( 4 )이다. 조인(JOIN)은 공통 속성을 중심으로 두 개의 릴레이션을 하나로 합쳐서 새로운 릴레이션을 만드는 연산으로, 사용하는 기호는 ( 5 )이다. 1 → U\n2 → ㅡ\n3 → x\n4 → ㅠ\n5 → |&gt;&lt;| 릴레이션 A, B가 있을 때, 릴레이션 B의조건에 맞는 것들만 릴레이션 A에서 분리하여 프로젝션을 하는 연산은? ( )은 관계 데이터의 연산을 표현하는 방법으로, 관계 데이터 모델의 제안자인 코드(E. F. Codd)가 수학의 술어 해석(Predicate Calculus)에 기반을 두고 관계 데이터베이스를 위해 제안했다.\n원하는 정보가 무엇이라는 것만 정의하는 비절차적 특성을 지니며, 원하는 정보를 정의할 때 계산 수식을 사용한다.\n튜플 해석식을 사용하는 튜플 ( )과 도메인 해석식을 사용하는 도메인 ( )으로 구분된다. 데이터의 중복으로 인해 테이블 조작 시 문제가 발생하는 현상을 이상(Anomaly)이라고 한다. 이상 중 삭제 이상(Deletion Anomaly)에 대해 간략히 서술하시오. 데이터베이스의 이상(Anomaly)의 종류 3가지를 쓰시오. 삽입 이상(Insertion Anomaly)\n삭제 이상(Deletion Anomaly)\n갱신 이상(Update Anomaly)\n<br><img alt=\"do-messenger_screenshot_2025-02-10_17_10_58.png\" src=\"사진-및-문서/do-messenger_screenshot_2025-02-10_17_10_58.png\" target=\"_self\">\n테이블 &lt;R&gt;에서 성적은 기본키인 {학생, 학과}에 대해 ( 1 ) Functional Dependency이다.\n테이블 &lt;R&gt;에서 학년은 기본키인 {학생, 학과} 중 학생만으로 식별이 가능하므로 기본키에 대해 ( 2 ) Functional Dependency이다.\n임이의 테이블에 속성 A, B, C가 있을 떄, A → B이고 B → C일 때 A → C인 관계는 ( 3 )Functional Dependency이다. Full\nPartial\nTransitive 데이터베이스에서 비(반)정규화(Denormalization)의 개념을 서술하시오. 비정규화는 정규화된 데이터 모델을 통합, 중복, 분리 하는 과정으로, 의도적으로 정규화 원칙을 위배하는 행위이다. 데이터베이스의 상태 변화를 일으키는 트렌젝션(Transaction)의 특성 원자성 : 트렌젝션의 연산은 데이터베이스에 모두 반영되도록 완료(Commit)되든지 아니면 전혀 반영되지 않도록 복구(Rollback)되어야 한다. 일관성 : 트렌젝션이 그 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환한다. 독립성 : 둘 이상의 트렌젝션이 동시에 병행 실행되는 경우 어느 하나의 트렌젝션 실행중에 다른 트렌젝션의 연산이 끼어들 수 없다. 지속성 성공적으로 완료된 트렌젝션의 결과는 시스템이 고장나더라도 영구적으로 반영되어야 한다. 파일의 구조는 파일을 구성하는 레코드들이 보조기억장치에 편성되는 방식을 의미하는 것으로, 크게 순차, ( ), 해싱으로 구분한다.\n( ) 파일 구조는 &lt;값, 주소&gt; 쌍으로 구성되는 데이터 구조를 활용하여 데이터에 접근하는 방식으로, 자기 디스크서 주로 활용된다. 비상 상황이 발생한 경우 비상사태 또는 업무중단 시점부터 업무가 복구되어 다시 정상 가동 될 때까지의 시간을 의미한다. 접근통제는 데이터가 저장된 객체와 이를 사용하려는 주체 사이의 정보 흐름을 제한하는 것이다. 이러한 접근통제에 관한 기술 중 ( )는 데이터에 접근하는 사용자의 신원에 따라 접근 권한을 부여하여 제어하는 방식으로, 데이터의 소유자가 접근통제 권한을 지정하고 제어한다.\n객체를 생성한 사용자가 생성된 객체에 대한 모든 권한을 부여받고, 부여된 권한을 다른 사용자에게 허가할 수도 있다. DBMS는 데이터베이스에 치명적인 손실이 발생했을 때 이를 복구하기 위해 데이터베이스의 처리내용이나 이용 상황 등 상태 변화를 시간의 흐름에 따라 기록한 로그를 생성한다.\n( 1 ) : 데이터베이스가 비정상적으로 종료되었을 때, 디스크에 저장된 로그를 분석하여 트렌젝션의 시작(start)과 완료(commit)에 대한 기록이 있는 트렌젝션들의 작업을 재작업 한다. 즉, 로그를 이용하여 해당 데이터 항목에 대해 이전 값을 이후값으로 변경하는 연산이다.\n( 2 ) : 데이터베이스가 비정상적으로 종료되었을 때, 디스크에 저장된 로그를 분석하여 트렌젝션의 시작을 나타는 'start'는 있지만 완료를 나타내는 'commit' 기록이 없는 트렌젝션들이 작업한 내용들을 모두 취소한다. 즉 로그를 이용하여 해당 데이터 항목에 대해 이후 값을 이전 값으로 변경한다. 웹 페이지의 기본 형식인 HTML의 문법이 각 웹 브라우저에서 상호 호환적이지 못한다는 문제와 SGML의 복잡함을 해결하기 위하여 개발된 ( )은 다른 특수한 목적을 갖는 마크업 언어이다.\n원활한 데이터의 연계를 위해 송.수신 시스템 간에 전송되는 데이터가 동일한 구조로 구성될 수 있도록 형태를 정의는 역할을 수행하며, 다음과 같은 특징이 있다. 텍스트 데이터 형식으로 유니코드를 사용하여 전 세계 언어를 지원한다. 대다수의 웹 브라우저가 해석을 위한 번역기(Parser)를 내장하고 있다. XML문서의 문자들은 마크업과 내용으로 구분된다.\n일반적으로 마크업은 &lt;로 시작하여 &gt;로 끝나는 태그(Tag)를 의미하고, 그 외의 문자열은 내용에 해당한다. 마크업과 내용으로 이루어지는 하나의 요소를 의미한다. 통합 구현과 관련하여 다음 설명의 괄호에 공통으로 들어갈 알맞은 용어는?\n( )는 HTTP, HTTPS, SMTP 등을 사용하여 xml 기반의 메시지를 네트워크상에서 교환하는 프로토콜이다.\n( ) envelope, 헤더, 바디 등이 추가된 xml 문서이다.\n( )는 복잡하고 무거운 구조로 구성되어 있어, ( )보다는 RESTful 프로토콜을 이용하기도 한다. 웹 서비스와 관련된 다음 설명에 해당되는 용어는?\n웹 서비스와 관련된 서식이나 프로토콜 등을 표준적인 방법으로 기술하고 게시하기 위한 언어.\nXML로 작성되며 UDDI의 기초가 된다. SOAP, XML 스키마와 결합하여 인터넷에서 웹 서비스를 제공하기 위해 사용되며, 클라이언트는 이것을 통해 서버에서 어떠한 조작이 가능한지를 파악할 수 있다.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"답 : 애자일(Agile)","level":3,"id":"답_애자일(Agile)_0"},{"heading":"답 :","level":3,"id":"답__0"},{"heading":"답 : 1 - 기능 / 2 - 비기능","level":3,"id":"답_1_-_기능_/_2_-_비기능_0"},{"heading":"답 : 클래스(Class)","level":3,"id":"답_클래스(Class)_0"},{"heading":"답 : 1 - 관계 / 2 - 클래스 / 3 - 인터페이스","level":3,"id":"답_1_-_관계_/_2_-_클래스_/_3_-_인터페이스_0"},{"heading":"답 : 1 - Aggregation / 2 - Generalization","level":3,"id":"답_1_-_Aggregation_/_2_-_Generalization_0"},{"heading":"답 : 패키지 다이어그램(Package Diagram)","level":3,"id":"답_패키지_다이어그램(Package_Diagram)_0"},{"heading":"계산식 : (30,000 / 300) / 5 = 20","level":3,"id":"계산식_(30,000_/_300)_/_5_=_20_0"},{"heading":"답 : 20개월","level":3,"id":"답_20개월_0"},{"heading":"답 :","level":3,"id":"답__1"},{"heading":"답 : 1 - 물리적 설계 / 2 - 개념적 설계 / 3 - 논리적 설계","level":3,"id":"답_1_-_물리적_설계_/_2_-_개념적_설계_/_3_-_논리적_설계_0"},{"heading":"답 : <strong>개념</strong>적 설계 / <strong>논리</strong>적 설계 / <strong>물리</strong>적 설계","level":3,"id":"답_**개념**적_설계_/_**논리**적_설계_/_**물리**적_설계_0"},{"heading":"답 : 1 - 연산 / 2 - 구조","level":3,"id":"답_1_-_연산_/_2_-_구조_0"},{"heading":"답 :","level":3,"id":"답__2"},{"heading":"답 : 1 - 유일성 / 2 - 최소성","level":3,"id":"답_1_-_유일성_/_2_-_최소성_0"},{"heading":"답 :","level":3,"id":"답__3"},{"heading":"답 : %","level":3,"id":"답_%_0"},{"heading":"정답 : 관계해석(Relational Calculus)","level":3,"id":"정답_관계해석(Relational_Calculus)_0"},{"heading":"답 : 테이블에서 튜플을 삭제할 때 의도와는 상관없는 값들도 함께 삭제되는 현상.","level":3,"id":"답_테이블에서_튜플을_삭제할_때_의도와는_상관없는_값들도_함께_삭제되는_현상._0"},{"heading":"답 :","level":3,"id":"답__4"},{"heading":"답 :","level":3,"id":"답__5"},{"heading":"답 :","level":3,"id":"답__6"},{"heading":"답 :","level":3,"id":"답__7"},{"heading":"답 : 색인(Index)","level":3,"id":"답_색인(Index)_0"},{"heading":"답 : RTO(목표복구시간)","level":3,"id":"답_RTO(목표복구시간)_0"},{"heading":"답 : DAC(임의 접근통제)","level":3,"id":"답_DAC(임의_접근통제)_0"},{"heading":"답 : 1 - REDO(재작업) / 2 - UNDO(작업취소)","level":3,"id":"답_1_-_REDO(재작업)_/_2_-_UNDO(작업취소)_0"},{"heading":"유니코드 문자(Unicode Text)","level":4,"id":"유니코드_문자(Unicode_Text)_0"},{"heading":"XML 파서(Parser)","level":4,"id":"XML_파서(Parser)_0"},{"heading":"마크업(Markup)과 내용(Content)","level":4,"id":"마크업(Markup)과_내용(Content)_0"},{"heading":"엘리먼트(Element)","level":4,"id":"엘리먼트(Element)_0"},{"heading":"답 : XML(eXtensible Markup Language)","level":3,"id":"답_XML(eXtensible_Markup_Language)_0"},{"heading":"답 : SOAP(Simple Object Access Protocol)","level":3,"id":"답_SOAP(Simple_Object_Access_Protocol)_0"},{"heading":"답 : WSDL(Web Services Description Language)","level":3,"id":"답_WSDL(Web_Services_Description_Language)_0"}],"links":["?query=tag:%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC","?query=tag:%EC%8B%A4%EA%B8%B0","?query=tag:%ED%82%A4%EC%9B%8C%EB%93%9C","?query=tag:%EC%A0%95%EB%A6%AC"],"author":"","coverImageURL":"","fullURL":"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html","pathToRoot":"../../..","attachments":["사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png","사진-및-문서/do-messenger_screenshot_2025-02-10_17_10_58.png"],"createdTime":1739777477564,"modifiedTime":1739940405412,"sourceSize":43617,"sourcePath":"study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 키워드.md","exportPath":"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html":{"title":"🥈 필기 1과목 - 소프트웨어 설계","icon":"","description":"<a href=\".?query=tag:정보처리기사\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정보처리기사\">#정보처리기사</a> <a href=\".?query=tag:필기\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#필기\">#필기</a> <a href=\".?query=tag:정리\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정리\">#정리</a> 클래스 인터페이스\n명령어(사용자 질의 수)\n데이터 파일\n출력 보고서\n흭공개운유\n네트워크 변화에 신속히 대처할 수 있다.\n거리 벡터 라우팅 프로토콜 이라고 한다.\n멀티캐스팅을 지원한다.\n최단 경로 탐색에 다익스트라 알고리즘을 사용한다. 클래스 설계서\n통합시험 결과서\n프로그램 코드\n사용자 요구사항 정의서 암호화 키와 복호화 키가 동일한 암호화 알고리즘을 뜻한다.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"침입탐지 시스템(IDS : Intrusion Detection System)에 대한 설명","level":1,"id":"침입탐지_시스템(IDS_Intrusion_Detection_System)에_대한_설명_0"},{"heading":"이상탐지(Anomaly Detection)기법","level":3,"id":"이상탐지(Anomaly_Detection)기법_0"},{"heading":"<span>- \n\n<span>Behavior, Statistical Detection으로 불리며, 평균적 시스템의 상태 기준으로 <mark>비정상적인 행위나 자원의 사용이 감지되면 이를 알려줌</mark></span></span>","level":4,"id":"-_Behavior,_Statistical_Detection으로_불리며,_평균적_시스템의_상태_기준으로_==비정상적인_행위나_자원의_사용이_감지되면_이를_알려줌==_0"},{"heading":"<span>- \n\n<span>잘 알려지지 않은 공격 탐지에 적합. 기존 패턴과 급격하게 다른 패턴을 발견하면 침입으로 판단</span></span>","level":4,"id":"-_잘_알려지지_않은_공격_탐지에_적합._기존_패턴과_급격하게_다른_패턴을_발견하면_침입으로_판단_0"},{"heading":"오용탐지(Misuse Detection)기법","level":3,"id":"오용탐지(Misuse_Detection)기법_0"},{"heading":"<span>- \n\n<span>Signature Base나 Knowledge Base로 불리며, <mark>미리 입력해둔 공격 패턴이 감지되면 이를 알려줌</mark></span></span>","level":4,"id":"-_Signature_Base나_Knowledge_Base로_불리며,_==미리_입력해둔_공격_패턴이_감지되면_이를_알려줌==_0"},{"heading":"<span>- \n\n<span>잘 알려진 시스템의 취약점을 공격하는 패턴의 침입을 탐지 (새로운 패턴의 공격을 막기 어려움)</span></span>","level":4,"id":"-_잘_알려진_시스템의_취약점을_공격하는_패턴의_침입을_탐지_(새로운_패턴의_공격을_막기_어려움)_0"},{"heading":"정보 시스템에서 접근통제 방법에 대한 설명","level":1,"id":"정보_시스템에서_접근통제_방법에_대한_설명_0"},{"heading":"강제접근 통제(MAC) <mark>맥-&gt;등급</mark>","level":3,"id":"강제접근_통제(MAC)_==맥->등급==_0"},{"heading":"<span>- \n\n<span>주체와 객체의 <strong>등급을 비교</strong>하여 접근 권한을 부여하는 방식</span></span>","level":4,"id":"-_주체와_객체의_**등급을_비교**하여_접근_권한을_부여하는_방식_0"},{"heading":"임의접근 통제(DAC) <mark>닥 -&gt; 신원</mark>","level":3,"id":"임의접근_통제(DAC)_==닥_->_신원==_0"},{"heading":"<span>- \n\n<span>접근하는 사용자의 <strong>신원에 따라</strong> 접근 권한을 부여하는 방식</span></span>","level":4,"id":"-_접근하는_사용자의_**신원에_따라**_접근_권한을_부여하는_방식_0"},{"heading":"역할기반접근 통제(RBAC)","level":3,"id":"역할기반접근_통제(RBAC)_0"},{"heading":"<span>- \n\n<span>직무나 직책과 같이 <em>개인의역할</em>에 따라 접근 권한을 부여하는 접근 정책</span></span>","level":4,"id":"-_직무나_직책과_같이_*개인의역할*에_따라_접근_권한을_부여하는_접근_정책_0"},{"heading":"사용자계정 컨트롤(UAC)","level":3,"id":"사용자계정_컨트롤(UAC)_0"},{"heading":"<span>- \n\n<span>프로그램에서 관리자 수준의 권한이 필요한 작업을 수행할 때 <em>사용자에게 알려서</em> 제어할 수 있도록 돕는기능</span></span>","level":4,"id":"-_프로그램에서_관리자_수준의_권한이_필요한_작업을_수행할_때_*사용자에게_알려서*_제어할_수_있도록_돕는기능_0"},{"heading":"자료별 접근통제(Data-Label AC)","level":3,"id":"자료별_접근통제(Data-Label_AC)_0"},{"heading":"<span>- \n\n<span>개별 행, 열에 대해 쓰기 권한, 읽기 권한을 가졌는지를 명확하게 결정하는 제어방식</span></span>","level":4,"id":"-_개별_행,_열에_대해_쓰기_권한,_읽기_권한을_가졌는지를_명확하게_결정하는_제어방식_0"},{"heading":"정보시스템에 대한 설명","level":1,"id":"정보시스템에_대한_설명_0"},{"heading":"<span>- \n\n<span>고가용성 솔루션(HACMP)</span></span>","level":3,"id":"-_고가용성_솔루션(HACMP)_0"},{"heading":"1. AIX를 기반으로 한 IBM의 고가용성 솔루션.","level":4,"id":"1._AIX를_기반으로_한_IBM의_고가용성_솔루션._0"},{"heading":"2. Resource의 중복 또는 공유를 통해 Application의 보호를 가능하게 해줌","level":4,"id":"2._==Resource의_중복_또는_공유를_통해_Application의_보호==를_가능하게_해줌_0"},{"heading":"3. 같은 데이터를 공유하거나 동시에 access하는 노드들에서 여러개의 Application을 실행하게 해줌","level":4,"id":"3._같은_데이터를_공유하거나_동시에_access하는_노드들에서_여러개의_Application을_실행하게_해줌_0"},{"heading":"4. 두대 이상의 시스템을 하나의 클러스터로 묶어 한 시스템에서 장애가 발생할 경우 다른 시스템이 자원을 인수할 수 있도록하여 서비스의 중단을 최소화 할 수 있도록 도와주는 솔루션","level":4,"id":"4._==두대_이상의_시스템을_하나의_클러스터로_묶어==_한_시스템에서_장애가_발생할_경우_다른_시스템이_자원을_인수할_수_있도록하여_서비스의_중단을_최소화_할_수_있도록_도와주는_솔루션_0"},{"heading":"<span>- \n\n<span>점대점 연결 방식(Point to Point Mode)</span></span>","level":3,"id":"-_점대점_연결_방식(Point_to_Point_Mode)_0"},{"heading":"1. 네트워크에 있어 물리적으로는 중개 장치를 통과하지 않고 한 지점에서 다른 지점으로 직접가는 채널","level":4,"id":"1._네트워크에_있어_==물리적으로는_중개_장치를_통과하지_않고==_한_지점에서_다른_지점으로_직접가는_채널_0"},{"heading":"2. 두 스테이션간을 별도의회선을 사용하여 1대1로 연결","level":4,"id":"2._두_스테이션간을_**별도의회선**을_사용하여_1대1로_연결_0"},{"heading":"3. 전용회선이나 공중 전화 회선을 이용","level":4,"id":"3._==전용회선이나_공중_전화_회선을_이용==_0"},{"heading":"4. 회선 구성이 간당하고 대용량 전송에 유리","level":4,"id":"4._회선_구성이_간당하고_대용량_전송에_유리_0"},{"heading":"5. 별도의 회선과 포트에 따른 높은 설치 비용","level":4,"id":"5._별도의_회선과_포트에_따른_==높은_설치_비용==_0"},{"heading":"네트워크 공격 방법에 대한 설명","level":1,"id":"네트워크_공격_방법에_대한_설명_0"},{"heading":"Parsing","level":3,"id":"Parsing_0"},{"heading":"<span>- \n\n<span>하나의 프로그램을 런타임 환경이 실제로 실행할 수 있는 내부 포맷으로 분석하고 변환하는것을 의미</span></span>","level":4,"id":"-_하나의_프로그램을_런타임_환경이_실제로_실행할_수_있는_내부_포맷으로_분석하고_변환하는것을_의미_0"},{"heading":"LAN Tapping","level":3,"id":"LAN_Tapping_0"},{"heading":"<span>- \n\n<span>LAN신호를 직접 자신에게 끌어노는 방식의 공격</span></span>","level":4,"id":"-_LAN신호를_직접_자신에게_끌어노는_방식의_공격_0"},{"heading":"Switch Jamming","level":3,"id":"Switch_Jamming_0"},{"heading":"<span>- \n\n<span>스위치의 기능이 방해 받아 정상 동작을 하지 못해 <strong>스위치가 더미 허브처럼 작동</strong>하게 하는것</span></span>","level":4,"id":"-_스위치의_기능이_방해_받아_정상_동작을_하지_못해_**스위치가_더미_허브처럼_작동**하게_하는것_0"},{"heading":"FTP Flooding","level":3,"id":"FTP_Flooding_0"},{"heading":"<span>- \n\n<span>TCP의 3way Handshake 취약점을 이용한 DoS공격으로, <strong>다량의 SYN패킷을 보내 백로그큐를</strong> 가득 채우는 공격.</span></span>","level":4,"id":"-_TCP의_3way_Handshake_취약점을_이용한_DoS공격으로,_**다량의_SYN패킷을_보내_백로그큐를**_가득_채우는_공격._0"},{"heading":"Smurfing","level":3,"id":"Smurfing_0"},{"heading":"<span>- \n\n<span>IP또는 ICMP의 특성을 악용하여 특정 사이트에 <strong>집중적으로데이터를 보내 네트워크 또는 시스템의 상태를 불능으로</strong> 만드는 공격.</span></span>","level":4,"id":"-_IP또는_ICMP의_특성을_악용하여_특정_사이트에_**집중적으로데이터를_보내_네트워크_또는_시스템의_상태를_불능으로**_만드는_공격._0"},{"heading":"블루투스 공격과 설명","level":1,"id":"블루투스_공격과_설명_0"},{"heading":"블루버그","level":3,"id":"블루버그_0"},{"heading":"<span>- \n\n<span>블루투스 장비 사이의 <strong>취약한 연결 관리를 이용</strong>한 공격</span></span>","level":4,"id":"-_블루투스_장비_사이의_**취약한_연결_관리를_이용**한_공격_0"},{"heading":"블루스나프(스나핑)","level":3,"id":"블루스나프(스나핑)_0"},{"heading":"<span>- \n\n<span>블루투스의 취약점을 활용하여 장비의 파일에 접근하는 공격으로 <strong>OPP를 사용하여 정보를 열람</strong></span></span>","level":4,"id":"-_블루투스의_취약점을_활용하여_장비의_파일에_접근하는_공격으로_**OPP를_사용하여_정보를_열람**_0"},{"heading":"블루재킹","level":3,"id":"블루재킹_0"},{"heading":"<span>- \n\n<span>블루투스를 이용해 <strong>스팸처럼 명함을 익명으로 띄우는것</strong></span></span>","level":4,"id":"-_블루투스를_이용해_**스팸처럼_명함을_익명으로_띄우는것**_0"},{"heading":"간트차트(Gantt Chart)에 대한 설명","level":1,"id":"간트차트(Gantt_Chart)에_대한_설명_0"},{"heading":"1. 프로젝트를 이루는 소작업 별로 언제 시작되고, 언제 끝나야 하는지 한 눈에 볼 수 있도록 도와준다.","level":3,"id":"1._프로젝트를_이루는_소작업_별로_==언제_시작되고,_언제_끝나야_하는지_한_눈에_볼_수_있도록==_도와준다._0"},{"heading":"2. 자원 배치 계획에 유용하게 사용된다.","level":3,"id":"2._자원_배치_계획에_유용하게_사용된다._0"},{"heading":"3. CPM 네트워크로부터 만드는것이 가능하다.","level":3,"id":"3._CPM_네트워크로부터_만드는것이_가능하다._0"},{"heading":"4. 수평 막대의 길이는 각 작업에 필요한 기간을 나타낸다.","level":3,"id":"4._*수평_막대의_길이*는_각_*작업에_필요한_기간*을_나타낸다._0"},{"heading":"5. 작업 일정을 한눈에 볼 수 있도록 해주며, 막대그래프를 통해 표현한다.","level":3,"id":"5._*작업_일정*을_한눈에_볼_수_있도록_해주며,_*막대그래프를_통해_표현*한다._0"},{"heading":"Window파일 저장시스템 FAT / NTFS 에 대한 설명","level":1,"id":"Window파일_저장시스템_FAT_/_NTFS_에_대한_설명_0"},{"heading":"FAT","level":3,"id":"FAT_0"},{"heading":"<span>- \n\n<span>DOS때 부터 사용되던 윈도의 파일시스템</span></span>","level":4,"id":"-_DOS때_부터_사용되던_윈도의_파일시스템_0"},{"heading":"<span>- \n\n<span><mark>저용량에 적합</mark>. <em>호환성이 좋음</em>. 저장가능한 파일의 최대크기는 <em>4GB</em></span></span>","level":4,"id":"-_==저용량에_적합==._*호환성이_좋음*._저장가능한_파일의_최대크기는_*4GB*_0"},{"heading":"NTFS","level":3,"id":"NTFS_0"},{"heading":"<span>- \n\n<span>FAT시스템을 대체하기 위해 개발된 윈도우 파일 시스템</span></span>","level":4,"id":"-_FAT시스템을_대체하기_위해_개발된_윈도우_파일_시스템_0"},{"heading":"<span>- \n\n<span>사용자마다 다른 보안 적용 가능. 즉 보안이 FAT보다 뛰어남</span></span>","level":4,"id":"-_사용자마다_다른_보안_적용_가능._즉_보안이_FAT보다_뛰어남_0"},{"heading":"<span>- \n\n<span><mark>대용량 저장 가능 및 안정성이 뛰어남</mark></span></span>","level":4,"id":"-_==대용량_저장_가능_및_안정성이_뛰어남==_0"},{"heading":"<span>- \n\n<span><mark>저용량 볼륨에서 속도 저하</mark></span></span>","level":4,"id":"-_==저용량_볼륨에서_속도_저하==_0"},{"heading":"리눅스에서 umask값을 구하는 방법","level":1,"id":"리눅스에서_umask값을_구하는_방법_0"},{"heading":"umask는 파일이나 디렉터리의 초기 권한을 설정할때 사용하는 값으로,","level":3,"id":"umask는_파일이나_디렉터리의_초기_권한을_설정할때_사용하는_값으로,_0"},{"heading":"파일의 경우 <mark>666</mark>에서 umask값을 뺀 값이다.","level":3,"id":"파일의_경우_==666==에서_umask값을_뺀_값이다._0"},{"heading":"상향식 비용 산정 기법 중 LOC(원시 코드 라인 수) 기법에 필요한 항목 <mark>낙비기</mark>","level":1,"id":"상향식_비용_산정_기법_중_LOC(원시_코드_라인_수)_기법에_필요한_항목_==낙비기==_0"},{"heading":"1. 낙관치","level":3,"id":"1._낙관치_0"},{"heading":"2. 비관치","level":3,"id":"2._비관치_0"},{"heading":"3. 기대치","level":3,"id":"3._기대치_0"},{"heading":"소프트웨어 개발 방법론 중 <mark>테일러링</mark>(Tailoring)과 관련한 설명","level":1,"id":"소프트웨어_개발_방법론_중_==테일러링==(Tailoring)과_관련한_설명_0"},{"heading":"1. 프로젝트 상황 특성에 맞게 정의된 소프트웨어 개발 방법론 절차, 사용기법 등을 수정 및 보완하는 작업","level":3,"id":"1._*프로젝트_상황_특성에_맞게*_정의된_소프트웨어_개발_방법론_절차,_사용기법_등을_*수정_및_보완하는_작업*_0"},{"heading":"2. 관리 측면에서 목적 중 하나는, 최단기간에 안정적인 프로젝트를 진행하기 위한 사전 위험을 식별하고 제거하는 것.","level":3,"id":"2._관리_측면에서_목적_중_하나는,_*최단기간에_안정적인*_프로젝트를_진행하기_위한_사전_위험을_식별하고_제거하는_것._0"},{"heading":"3. 기술적 측면에서 목적 중 하나는, 프로젝트에 최적화된 기술 요소를 도입하여 프로젝트 특성에 맞는 최적의 기법과 도구를 사용하는것.","level":3,"id":"3._기술적_측면에서_목적_중_하나는,_프로젝트에_최적화된_기술_요소를_도입하여_프로젝트_특성에_맞는_최적의_기법과_도구를_사용하는것._0"},{"heading":"CMM(Capability Maturity Model) 의 레벨 <mark>초관정정최</mark>","level":1,"id":"CMM(Capability_Maturity_Model)_의_레벨_==초관정정최==_0"},{"heading":"<span>- \n\n<span>초기</span></span>","level":3,"id":"-_초기_0"},{"heading":"<span>- \n\n<span>관리</span></span>","level":3,"id":"-_관리_0"},{"heading":"<span>- \n\n<span>정의</span></span>","level":3,"id":"-_정의_0"},{"heading":"<span>- \n\n<span>정량적 관리</span></span>","level":3,"id":"-_정량적_관리_0"},{"heading":"<span>- \n\n<span>최적화</span></span>","level":3,"id":"-_최적화_0"},{"heading":"PICONET 이란?","level":1,"id":"PICONET_이란?_0"},{"heading":"<span>- \n\n<span>여러 개의 <em>독립된 통신장치</em>가 UWB(Ultra Wide Band)기술 또는 블루투스 기술을 사용하여 <em>통신망을 형성하는 무선 네트워크 기술</em></span></span>","level":3,"id":"-_여러_개의_*독립된_통신장치*가_UWB(Ultra_Wide_Band)기술_또는_블루투스_기술을_사용하여_*통신망을_형성하는_무선_네트워크_기술*_0"},{"heading":"기능점수(Functional Point)모형에서 비용산정에 이용되는 요소가 아닌것은?","level":1,"id":"기능점수(Functional_Point)모형에서_비용산정에_이용되는_요소가_아닌것은?_0"},{"heading":"기능점수(FP)모형의 비용산정 요인에는 <mark>클래스 인터페이스가 아닌, 필요한 외부 루틴과의 인터페이스</mark> 이다.","level":4,"id":"기능점수(FP)모형의_비용산정_요인에는_==클래스_인터페이스가_아닌,_필요한_외부_루틴과의_인터페이스==_이다._0"},{"heading":"Mesh Network 란?","level":1,"id":"Mesh_Network_란?_0"},{"heading":"<em>기존 무선 랜의 한계 극복</em>을 위해 등장","level":4,"id":"*기존_무선_랜의_한계_극복*을_위해_등장_0"},{"heading":"<em>대규모 디바이스</em>의 네트워크 생성에 최적화 된 <em>차세대 이동통신 네트워크</em>","level":4,"id":"*대규모_디바이스*의_네트워크_생성에_최적화_된_*차세대_이동통신_네트워크*_0"},{"heading":"RIP(Routing Information Protocol)에 대한 설명","level":1,"id":"RIP(Routing_Information_Protocol)에_대한_설명_0"},{"heading":"1. 거리 벡터 라우팅 프로토콜 이라고도 한다.","level":3,"id":"1._*거리_벡터_라우팅*_프로토콜_이라고도_한다._0"},{"heading":"2. 소규모 네트워크 환경에 적합하다.","level":3,"id":"2._*소규모*_네트워크_환경에_적합하다._0"},{"heading":"3. 최대 홉 카운트를 15 이하로 한정한다.","level":3,"id":"3._최대_홉_카운트를_*15_이하*로_한정한다._0"},{"heading":"4. 최단경로 탐색에 벨만-포드 알고리즘을 사용한다.","level":3,"id":"4._최단경로_탐색에_*벨만-포드*_알고리즘을_사용한다._0"},{"heading":"나선형 모델의 4가지 주요 활동 <mark>계위공고</mark>","level":1,"id":"나선형_모델의_4가지_주요_활동_==계위공고==_0"},{"heading":"1. 계획수림","level":3,"id":"1._계획수림_0"},{"heading":"2. 위험 분석","level":3,"id":"2._위험_분석_0"},{"heading":"3. 공학적 개발","level":3,"id":"3._공학적_개발_0"},{"heading":"4. 고객 평가","level":3,"id":"4._고객_평가_0"},{"heading":"위 4항목을 순서대로 반복하여 수행한다.","level":4,"id":"위_4항목을_순서대로_반복하여_수행한다._0"},{"heading":"CMM(Capability Maturity Model)모델의 레벨","level":1,"id":"CMM(Capability_Maturity_Model)모델의_레벨_0"},{"heading":"1. 초기","level":2,"id":"1._초기_0"},{"heading":"2. 관리","level":2,"id":"2._관리_0"},{"heading":"3. 정의","level":2,"id":"3._정의_0"},{"heading":"4. 정량적 관리","level":2,"id":"4._정량적_관리_0"},{"heading":"5. 최적화","level":2,"id":"5._최적화_0"},{"heading":"공개키 암호화 방식에 대한 설명 <code>공개 -&gt; 비대칭</code>","level":1,"id":"공개키_암호화_방식에_대한_설명_`공개_->_비대칭`_0"},{"heading":"1. 공개키로 암호화된 메세지는, 비밀키를 사용해 복호화 한다.","level":3,"id":"1._*공개키*로_암호화된_메세지는,_*비밀키*를_사용해_복호화_한다._0"},{"heading":"2. 비대칭 암호기법 이라고도 한다.","level":3,"id":"2._*비대칭*_암호기법_이라고도_한다._0"},{"heading":"3. 대표적인 기법은 RSA기법이 있다.","level":3,"id":"3._대표적인_기법은_*RSA*기법이_있다._0"},{"heading":"4. 키 분배가 용이하고, 관리해야 할 키 개수가 적다.","level":3,"id":"4._키_분배가_용이하고,_관리해야_할_키_개수가_적다._0"},{"heading":"5. 공개키 암호화 알고리즘은 소인수 분해나, 이산대수 등을 사용한다.","level":3,"id":"5._공개키_암호화_알고리즘은_*소인수_분해*나,_*이산대수*_등을_사용한다._0"},{"heading":"XSS - 크로스사이트 스크립팅 이란?","level":1,"id":"XSS_-_크로스사이트_스크립팅_이란?_0"},{"heading":"<span>- \n\n<span><code>웹페이지에 악의적인 스크립트를 포함</code>시켜 사용자 측에서 실행되게 유도함으로써, 정보유출 등의 공격을 유발할 수 있는 취약점</span></span>","level":2,"id":"-_`웹페이지에_악의적인_스크립트를_포함`시켜_사용자_측에서_실행되게_유도함으로써,_정보유출_등의_공격을_유발할_수_있는_취약점_0"},{"heading":"SSH(Seccure Shell)에 대한 설명","level":1,"id":"SSH(Seccure_Shell)에_대한_설명_0"},{"heading":"1. ssh의 기본 네트워크 포트는 22번을 사용한다.","level":3,"id":"1._ssh의_기본_네트워크_포트는_*22번*을_사용한다._0"},{"heading":"2. 전송되는 데이터는 암호화 된다.","level":3,"id":"2._전송되는_데이터는_암호화_된다._0"},{"heading":"3. 키를 통한 인증은 클라이언트의 공개키를 서버에 등록해야한다.","level":3,"id":"3._키를_통한_인증은_클라이언트의_*공개키를_서버에_등록*해야한다._0"},{"heading":"4. 서로 연결되어 있는 컴퓨터 간 원격 명령 실행이나 셀 서비스 등을 수행한다.","level":3,"id":"4._서로_연결되어_있는_컴퓨터_간_원격_명령_실행이나_셀_서비스_등을_수행한다._0"},{"heading":"필사 오류(Transcription Error)란?","level":1,"id":"필사_오류(Transcription_Error)란?_0"},{"heading":"임의의 한 자리를 잘못 기입해서 발생하는 오류.","level":2,"id":"임의의_한_자리를_잘못_기입해서_발생하는_오류._0"},{"heading":"ex) <code>123456</code>을 <code>123476</code>으로 잘못 기입","level":5,"id":"ex)_`123456`을_`123476`으로_잘못_기입_0"},{"heading":"N-Screen(엔스크린)이란?","level":1,"id":"N-Screen(엔스크린)이란?_0"},{"heading":"PC, TV, 휴대폰에서 원하는 콘텐츠를 끊김없이 자유롭게 이용할 수 있는 서비스이다.","level":2,"id":"PC,_TV,_휴대폰에서_원하는_콘텐츠를_끊김없이_자유롭게_이용할_수_있는_서비스이다._0"},{"heading":"ISO 12207 표준의 기본 생명주기의 주요 프로세스","level":1,"id":"ISO_12207_표준의_기본_생명주기의_주요_프로세스_0"},{"heading":"1. 획득 프로세스","level":3,"id":"1._획득_프로세스_0"},{"heading":"2. 공급 프로세스","level":3,"id":"2._공급_프로세스_0"},{"heading":"3. 개발 프로세스","level":3,"id":"3._개발_프로세스_0"},{"heading":"4. 운영 프로세스","level":3,"id":"4._운영_프로세스_0"},{"heading":"5. 유지보수 프로세스","level":3,"id":"5._유지보수_프로세스_0"},{"heading":"라우팅 프로토콜인 OSPF(Open Shortest Path First)에 대한 설명 중 옳지 않은것?","level":1,"id":"라우팅_프로토콜인_OSPF(Open_Shortest_Path_First)에_대한_설명_중_옳지_않은것?_0"},{"heading":"거리벡터 라우팅 프로토콜은 RIP(Routing Information Protocol)이다.","level":4,"id":"거리벡터_라우팅_프로토콜은_RIP(Routing_Information_Protocol)이다._0"},{"heading":"CBD(Component Based Development) SW개발 표준 산출물 중 분석 단계에 해당하는것?","level":1,"id":"CBD(Component_Based_Development)_SW개발_표준_산출물_중_분석_단계에_해당하는것?_0"},{"heading":"CBD(컴포넌트 기반) SW개발 표준 산출물 중 분석단계에 해당하는 것은 요구사항 정의서이다.","level":4,"id":"CBD(컴포넌트_기반)_SW개발_표준_산출물_중_분석단계에_해당하는_것은_요구사항_정의서이다._0"},{"heading":"<mark>라우터</mark>란?","level":1,"id":"==라우터==란?_0"},{"heading":"서로 다른 네트워크 대역에 있는 호스트를 상호간에 통신할 수 있도록 해주는 네트워크 장비","level":2,"id":"서로_다른_네트워크_대역에_있는_호스트를_상호간에_통신할_수_있도록_해주는_네트워크_장비_0"},{"heading":"개인키(대칭키) 알고리즘, 블록암호화 방식이라고도 한다.","level":1,"id":"개인키(대칭키)_알고리즘,_블록암호화_방식이라고도_한다._0"},{"heading":"1. DES","level":3,"id":"1._DES_0"},{"heading":"2. SEED","level":3,"id":"2._SEED_0"},{"heading":"3. AES - DES의 보안 문제 해결을 위해 NIST에서 개발한 개인키 암호화 알고리즘","level":3,"id":"3._AES_-_*DES의_보안_문제_해결을_위해_NIST에서_개발한_개인키_암호화_알고리즘*_0"},{"heading":"4. ARIA","level":3,"id":"4._ARIA_0"},{"heading":"5. LSFSR","level":3,"id":"5._LSFSR_0"},{"heading":"6. RC4","level":3,"id":"6._RC4_0"},{"heading":"IPSec(IP Security)에 대한 설명","level":1,"id":"IPSec(IP_Security)에_대한_설명_0"},{"heading":"1. 암호화와 복호화 모두 가능한 양방향 암호방식이다.","level":3,"id":"1._암호화와_복호화_모두_가능한_양방향_암호방식이다._0"},{"heading":"2. ESP는 발신자 인증, 데이터 무결성, 기밀성 모두를 보장한다.","level":3,"id":"2._ESP는_발신자_인증,_데이터_무결성,_기밀성_모두를_보장한다._0"},{"heading":"3. 운영모드는 Tunnel모드와 Transport모드로 분류된다.","level":3,"id":"3._운영모드는_Tunnel모드와_Transport모드로_분류된다._0"},{"heading":"4. AH는 발신자 호스트를 인증하고, IP패킷의 무결성을 보장한다.","level":3,"id":"4._AH는_발신자_호스트를_인증하고,_IP패킷의_무결성을_보장한다._0"}],"links":["?query=tag:%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC","?query=tag:%ED%95%84%EA%B8%B0","?query=tag:%EC%A0%95%EB%A6%AC"],"author":"","coverImageURL":"","fullURL":"study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html","pathToRoot":"../../..","attachments":[],"createdTime":1739783025899,"modifiedTime":1739940377445,"sourceSize":21277,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 1과목 - 소프트웨어 설계.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html":{"title":"🥈 필기 2과목 - 소프트웨어 개발","icon":"","description":"<a href=\".?query=tag:정보처리기사\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정보처리기사\">#정보처리기사</a> <a href=\".?query=tag:필기\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#필기\">#필기</a> <a href=\".?query=tag:정리\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정리\">#정리</a> 프로그램의 하위 모듈에서 상위 모듈 방향으로 통합\n하나의 주요 제어 모듈과 관련된 종속 모듈의 그룹인 클러스터 필요 상위 모듈에서 하위 모듈방향으로 통합\n깊이 우선 통합법, 넓이 우선 통합법 사용\n초기부터 사용자에게 시스템 구조를 보여줌 사용사례를 확장하여 명세하거나 설계 다이어그램, 원시코드, 테스트 케이스 등에 적용할 수 있다.\n복잡한 알고리즘 또는 반복, 실시간 동작, 병행 처리와 같은 기능이나 동작을 이해하려고 할 때 유용하다.\n단순한 테스트 케이스를 이용하여 프로덕트를 수작업으로 수행해 보는 것이다.\n요구사항 명세서 작성자를 포함하여 사전 검토한 후에 짧은 검토 회의를 통해 결함을 발견 요구사항 명세서 작성자를 제외한 다른 검토 전문가들이 요구사항 명세서를 확인하면서 결함을 발견\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"소프트웨어 테스트에서 검증과 확인의 대한 설명","level":1,"id":"소프트웨어_테스트에서_검증과_확인의_대한_설명_0"},{"heading":"검증(Verification)","level":3,"id":"검증(Verification)_0"},{"heading":"<span>- \n\n<span>소프트웨어가 <mark>요구사항에 부함하게 구현</mark>되었음을 보장하는 활동</span></span>","level":4,"id":"-_소프트웨어가_==요구사항에_부함하게_구현==되었음을_보장하는_활동_0"},{"heading":"확인(Validation)","level":3,"id":"확인(Validation)_0"},{"heading":"<span>- \n\n<span>소프트웨어가 <mark>고객의 의도에 따라 구현</mark>되었음을 보장하는 활동</span></span>","level":4,"id":"-_소프트웨어가_==고객의_의도에_따라_구현==되었음을_보장하는_활동_0"},{"heading":"검증 -&gt; 개발자 / 확인 -&gt; 사용자","level":5,"id":"검증_->_개발자_/_확인_->_사용자_0"},{"heading":"테스트별 특징에 대한 설명","level":1,"id":"테스트별_특징에_대한_설명_0"},{"heading":"단위 테스트","level":3,"id":"단위_테스트_0"},{"heading":"<span>- \n\n<span>하나의 <mark>'모듈'</mark>을 기준으로 독립적으로 진행되는 가장 작은 단위의 테스트</span></span>","level":4,"id":"-_하나의_=='모듈'==을_기준으로_독립적으로_진행되는_가장_작은_단위의_테스트_0"},{"heading":"<span>- \n\n<span>내부에 존재하는 논리적인 오류를 검출, 기능이 제대로 수행되는지 점검</span></span>","level":4,"id":"-_내부에_존재하는_논리적인_오류를_검출,_기능이_제대로_수행되는지_점검_0"},{"heading":"통합 테스트","level":3,"id":"통합_테스트_0"},{"heading":"<span>- \n\n<span>모듈을 통합하는 과정에서 <mark>'모듈 간의' 호환성</mark>을 확인하기 위해 수행되는 테스트</span></span>","level":4,"id":"-_모듈을_통합하는_과정에서_=='모듈_간의'_호환성==을_확인하기_위해_수행되는_테스트_0"},{"heading":"시스템 테스트","level":3,"id":"시스템_테스트_0"},{"heading":"<span>- \n\n<span><mark>'완전한 시스템'</mark>에 대해 수행하는 테스트. <mark>기능적 비기능적 요구사항</mark>을 만족하는지 확인</span></span>","level":4,"id":"-_=='완전한_시스템'==에_대해_수행하는_테스트._==기능적_비기능적_요구사항==을_만족하는지_확인_0"},{"heading":"인수 테스트","level":3,"id":"인수_테스트_0"},{"heading":"<span>- \n\n<span>실제 환경에서 <mark>'사용자'</mark>가 참여하는 테스트. 요구 분석 명세서에 나타난 사항을 모두 충족하는지, 시스템이 예상대로 동작하는지 사용자 관점에서 확인</span></span>","level":4,"id":"-_실제_환경에서_=='사용자'==가_참여하는_테스트._요구_분석_명세서에_나타난_사항을_모두_충족하는지,_시스템이_예상대로_동작하는지_사용자_관점에서_확인_0"},{"heading":"통합 테스트(Integration Test)에 관련한 설명","level":1,"id":"통합_테스트(Integration_Test)에_관련한_설명_0"},{"heading":"[상향식 통합 테스트]","level":3,"id":"[상향식_통합_테스트]_0"},{"heading":"[하향식 통합 테스트]","level":3,"id":"[하향식_통합_테스트]_0"},{"heading":"소프트웨어 공학에서 워크스루(walkthrough)에 대한 설명","level":1,"id":"소프트웨어_공학에서_워크스루(walkthrough)에_대한_설명_0"},{"heading":"[워크스루]","level":3,"id":"[워크스루]_0"},{"heading":"[인스펙션]","level":3,"id":"[인스펙션]_0"},{"heading":"테스트 케이스와 관련된 설명","level":1,"id":"테스트_케이스와_관련된_설명_0"},{"heading":"프로그램에 결함이 있더라도 입력에 대해 정상적인 결과를 낼 수 있기 때문에 결함을 검사할 수 있는 테스트 케이스를 찾는것이 중요하다","level":3,"id":"프로그램에_결함이_있더라도_입력에_대해_정상적인_결과를_낼_수_있기_때문에_결함을_검사할_수_있는_테스트_케이스를_찾는것이_중요하다_0"},{"heading":"테스트 케이스 실행이 통과되었는지 실패하였는지 판단하기 위한 기준을 테스트 오라클 이라고 한다.","level":3,"id":"테스트_케이스_실행이_통과되었는지_실패하였는지_판단하기_위한_기준을_테스트_오라클_이라고_한다._0"},{"heading":"<mark>DRM</mark>(Digital Right Management) 에 대한 설명","level":1,"id":"==DRM==(Digital_Right_Management)_에_대한_설명_0"},{"heading":"디지털 콘텐츠의 지적재산권보고, 관리 기능 및 안전한 유통과 배포를 보장하는 솔루션이다.","level":3,"id":"디지털_콘텐츠의_지적재산권보고,_관리_기능_및_안전한_유통과_배포를_보장하는_솔루션이다._0"},{"heading":"디지털 콘텐츠의 권한통제기술, 사용권한제어 기술, 패키징 기술, 라이선스 관리를 포함한 유통체계이다.","level":3,"id":"디지털_콘텐츠의_권한통제기술,_사용권한제어_기술,_패키징_기술,_라이선스_관리를_포함한_유통체계이다._0"},{"heading":"디지털 콘텐츠와 디바이스의 사용을 제한하기 위해 하드웨어 제조업자, 저작권자, 출판업자 등이 사용할 수 있는 접근 제어기술이다.","level":3,"id":"디지털_콘텐츠와_디바이스의_사용을_제한하기_위해_하드웨어_제조업자,_저작권자,_출판업자_등이_사용할_수_있는_접근_제어기술이다._0"},{"heading":"DRM의 구성요소","level":2,"id":"DRM의_구성요소_0"},{"heading":"1. 콘텐츠 분배자 : 암호화된 콘텐츠를 유통하는 곳/사람","level":4,"id":"1._콘텐츠_분배자_암호화된_콘텐츠를_유통하는_곳/사람_0"},{"heading":"2. 패키저 : 콘텐츠를 메타데이터와 함께 배포가능한 형태로 묶어 암호화","level":4,"id":"2._패키저_콘텐츠를_메타데이터와_함께_배포가능한_형태로_묶어_암호화_0"},{"heading":"3. 클리어링 하우스 : 키 관리 및 라이센스 발급 관리","level":4,"id":"3._클리어링_하우스_키_관리_및_라이센스_발급_관리_0"},{"heading":"4. DRM컨트롤러 : 배포된 콘텐츠의 이용권한을 통제","level":4,"id":"4._DRM컨트롤러_배포된_콘텐츠의_이용권한을_통제_0"},{"heading":"위험 모니터링이란?","level":1,"id":"위험_모니터링이란?_0"},{"heading":"위험 요소 징후들에 대하여 계속적으로 인지하는 것","level":3,"id":"위험_요소_징후들에_대하여_계속적으로_인지하는_것_0"},{"heading":"<mark>RCS</mark>(Revision Contorol System)","level":1,"id":"==RCS==(Revision_Contorol_System)_0"},{"heading":"CVS와의 차이점은 <mark>소스 파일의 수정을 한 사람만</mark>으로 제한한다.","level":3,"id":"CVS와의_차이점은_==소스_파일의_수정을_한_사람만==으로_제한한다._0"},{"heading":"다수의 사용자가 동시에 파일 수정을 할 수 없도록 <mark>파일 잠금 방식으로 버전을 관리</mark>하는 도구이다.","level":3,"id":"다수의_사용자가_동시에_파일_수정을_할_수_없도록_==파일_잠금_방식으로_버전을_관리==하는_도구이다._0"},{"heading":"다른 방향으로 진행된 개발 결과를 합치거나 변경 내용을 추적할 수 있다.","level":3,"id":"다른_방향으로_진행된_개발_결과를_합치거나_변경_내용을_추적할_수_있다._0"},{"heading":"화이트 박스 테스트에 대한 설명","level":1,"id":"화이트_박스_테스트에_대한_설명_0"},{"heading":"프로그램 구조를 고려하지 않는 것은 == 블랙박스 테스트 이다.","level":3,"id":"프로그램_구조를_고려하지_않는_것은_==_블랙박스_테스트_이다._0"},{"heading":"화이트박스 테스트는 정적 분석뿐만 아니라 동적 분석에도 사용될 수 있다.","level":3,"id":"화이트박스_테스트는_정적_분석뿐만_아니라_동적_분석에도_사용될_수_있다._0"},{"heading":"정적 분석 : 코드를 실행하지 않고 검토하여 문제점을 찾는다.","level":4,"id":"정적_분석_코드를_실행하지_않고_검토하여_문제점을_찾는다._0"},{"heading":"동적 분석 : 실제로 코드를 실행시켜 테스트를 하기 때문에, 로직의 흐름도를 이용하여 로직 검증을 할 수 있고, 동적 테스트를 통해 실제 실행중인 프로그램의 동작을 검증할 수도 있다.","level":4,"id":"동적_분석_실제로_코드를_실행시켜_테스트를_하기_때문에,_로직의_흐름도를_이용하여_로직_검증을_할_수_있고,_동적_테스트를_통해_실제_실행중인_프로그램의_동작을_검증할_수도_있다._0"},{"heading":"버블 정렬에 대한 설명","level":1,"id":"버블_정렬에_대한_설명_0"},{"heading":"버블정렬은 첫위치부터 시작해서 계속해서 오른쪽값과 비교한다. (pass 1)","level":3,"id":"버블정렬은_첫위치부터_시작해서_계속해서_오른쪽값과_비교한다._(pass_1)_0"},{"heading":"인스펙션(Inspection)의 과정에 대한 설명","level":1,"id":"인스펙션(Inspection)의_과정에_대한_설명_0"},{"heading":"계획 -&gt; 사전교육 -&gt; 준비 -&gt; 인스펙션 회의 -&gt; 수정 -&gt; 후속조치","level":3,"id":"계획_->_사전교육_->_준비_->_인스펙션_회의_->_수정_->_후속조치_0"},{"heading":"수정 -&gt; 다시 계획으로","level":3,"id":"수정_->_다시_계획으로_0"},{"heading":"용어들에 대한 설명","level":1,"id":"용어들에_대한_설명_0"},{"heading":"Refactoring - 코드의 구조 재조정","level":3,"id":"Refactoring_-_코드의_구조_재조정_0"},{"heading":"Architecting - 설계관련","level":3,"id":"Architecting_-_설계관련_0"},{"heading":"Specification - 명세서","level":3,"id":"Specification_-_명세서_0"},{"heading":"Renewal - 유지보수","level":3,"id":"Renewal_-_유지보수_0"},{"heading":"단위 테스트(unit Test)와 관련된 설명","level":1,"id":"단위_테스트(unit_Test)와_관련된_설명_0"},{"heading":"필요 데이터를 인자를 통해 넘게주고, 테스트 완료 후 그 결과값을 받는 역할을 하는 가상의 모듈을 테스트 드라이버라고 한다.","level":3,"id":"필요_데이터를_인자를_통해_넘게주고,_테스트_완료_후_그_결과값을_받는_역할을_하는_가상의_모듈을_테스트_드라이버라고_한다._0"},{"heading":"반대로 테스트 스텁(test stub)은 인자를 통해 받은 값을 가지고 수행한 후 그 결과를 테스트할 모듈에 넘겨주는 역할을 한다.","level":3,"id":"반대로_테스트_스텁(test_stub)은_인자를_통해_받은_값을_가지고_수행한_후_그_결과를_테스트할_모듈에_넘겨주는_역할을_한다._0"},{"heading":"테스트 드라이버","level":4,"id":"테스트_드라이버_0"},{"heading":"<span>- \n\n<span>테스트 대상 하위 모듈을 호출하고, 파라미터 전달, 모듈 테스트 수행 후의 결과 도출</span></span>","level":5,"id":"-_테스트_대상_하위_모듈을_호출하고,_파라미터_전달,_모듈_테스트_수행_후의_결과_도출_0"},{"heading":"<span>- \n\n<span>상향식 테스트에 사용됨</span></span>","level":5,"id":"-_상향식_테스트에_사용됨_0"},{"heading":"테스트 스텁","level":4,"id":"테스트_스텁_0"},{"heading":"<span>- \n\n<span>제어 모듈이 호출되는 타 모듈의 기능을 단순히 수행하는 도구</span></span>","level":5,"id":"-_제어_모듈이_호출되는_타_모듈의_기능을_단순히_수행하는_도구_0"},{"heading":"<span>- \n\n<span>하향식 테스트에 사용됨</span></span>","level":5,"id":"-_하향식_테스트에_사용됨_0"},{"heading":"IDE 도구의 각 기능에 대한 설명","level":1,"id":"IDE_도구의_각_기능에_대한_설명_0"},{"heading":"Compile - 주어진 언어로 작성된 컴퓨터 프로그램을 다른 언어의 동등한 프로그램으로 변환하는 기능, 고급언어(사람이 인식하는 언어 -&gt; 저급언어(기계어)","level":3,"id":"Compile_-_주어진_언어로_작성된_컴퓨터_프로그램을_다른_언어의_동등한_프로그램으로_변환하는_기능,_고급언어(사람이_인식하는_언어_->_저급언어(기계어)_0"},{"heading":"JSON에 대한 설명","level":1,"id":"JSON에_대한_설명_0"},{"heading":"JSON(JavaScript Object Notation)","level":3,"id":"JSON(JavaScript_Object_Notation)_0"},{"heading":"속성-값 의 쌍으로 이루어진 데이터 오브젝트를 전달하기 위해 사용하는 개방형 표준 포맷이다.","level":3,"id":"속성-값_의_쌍으로_이루어진_데이터_오브젝트를_전달하기_위해_사용하는_개방형_표준_포맷이다._0"},{"heading":"AJAX에서 많이 사용되는 XML을 대체하는 주요 데이터 포맷이다.","level":3,"id":"AJAX에서_많이_사용되는_XML을_대체하는_주요_데이터_포맷이다._0"},{"heading":"언어 독립형 포맷으로 다양한 프로그래밍 언어에서 사용되고 있다.","level":3,"id":"언어_독립형_포맷으로_다양한_프로그래밍_언어에서_사용되고_있다._0"},{"heading":"단위 테스트 도구에 대한 설명","level":1,"id":"단위_테스트_도구에_대한_설명_0"},{"heading":"CppUnit - C++프로그래밍 언어용 단위 테스트 도구","level":3,"id":"CppUnit_-_C++프로그래밍_언어용_단위_테스트_도구_0"},{"heading":"JUnit - Java프로그래밍 언어용 단위 테스트 도구","level":3,"id":"JUnit_-_Java프로그래밍_언어용_단위_테스트_도구_0"},{"heading":"HttpUnit - 웹 브라우저 없이 웹 사이트 테스트를 수행하는데 사용되는 오픈소스 테스트 프레임워크","level":3,"id":"HttpUnit_-_웹_브라우저_없이_웹_사이트_테스트를_수행하는데_사용되는_오픈소스_테스트_프레임워크_0"},{"heading":"단위 테스트의 용어에 대한 설명","level":1,"id":"단위_테스트의_용어에_대한_설명_0"},{"heading":"테스트 드라이버 <mark>결과까지 받음</mark>","level":3,"id":"테스트_드라이버_==결과까지_받음==_0"}],"links":["?query=tag:%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC","?query=tag:%ED%95%84%EA%B8%B0","?query=tag:%EC%A0%95%EB%A6%AC"],"author":"","coverImageURL":"","fullURL":"study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html","pathToRoot":"../../..","attachments":[],"createdTime":1739783025899,"modifiedTime":1739940386004,"sourceSize":11697,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 2과목 - 소프트웨어 개발.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html":{"title":"🥈 필기 3과목 - 데이터베이스 구축","icon":"","description":"<a href=\".?query=tag:정보처리기사\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정보처리기사\">#정보처리기사</a> <a href=\".?query=tag:필기\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#필기\">#필기</a> <a href=\".?query=tag:정리\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정리\">#정리</a> 0 or 1\n트렌젠션 전/후 같아야함\n다른 트렌젝션의 간섭 X\n트렌젝션 커밋 결과가 영구히 저장\n하드웨어와 소프트웨어의 물리적 위치를 사용자가 알 필요 없다. 논리적인 명칭으로만 엑세스할 수 있음\n사용자에게 통지할 필요없이 시스템 안에 파일들과 자원들의 부가적인 복사를 자유롭게 할 수 있다.\n다중 사용자들이 자원들을 자동으로 공유할 수 있다.\n사용자들은 어는 위치의 시스템에 장애가 발생했는지 알 필요가 없다.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"DB의 Locking / Lock에 대한 설명","level":1,"id":"DB의_Locking_/_Lock에_대한_설명_0"},{"heading":"로킹(Locking) - <mark>병행제어 기법</mark>의 종류 중 하나","level":3,"id":"로킹(Locking)_-_==병행제어_기법==의_종류_중_하나_0"},{"heading":"<span>- \n\n<span><mark>직렬화</mark> 기법</span></span>","level":4,"id":"-_==직렬화==_기법_0"},{"heading":"<span>- \n\n<span>데이터베이스, 파일, 레코드 등은 로킹단위가 될 수 있음</span></span>","level":4,"id":"-_데이터베이스,_파일,_레코드_등은_로킹단위가_될_수_있음_0"},{"heading":"<span>- \n\n<span>로킹 단위가 작아지면, 데이터 베이스 공유도 증가.</span></span>","level":4,"id":"-_로킹_단위가_작아지면,_데이터_베이스_공유도_증가._0"},{"heading":"<span>- \n\n<span>로킹 단위가 작아지면, 로킹 오버헤드 증가.</span></span>","level":4,"id":"-_로킹_단위가_작아지면,_로킹_오버헤드_증가._0"},{"heading":"<span>- \n\n<span>로킹 단위가 작아지면, 로크의 수 증가.</span></span>","level":4,"id":"-_로킹_단위가_작아지면,_로크의_수_증가._0"},{"heading":"<span>- \n\n<span>로킹 단위가 작아지면, 병행성 수준이 높아짐</span></span>","level":4,"id":"-_로킹_단위가_작아지면,_병행성_수준이_높아짐_0"},{"heading":"<span>- \n\n<span>한꺼번에 로킹할 수 있는 객체의 크기를 로킹단위라고 함.</span></span>","level":4,"id":"-_한꺼번에_로킹할_수_있는_객체의_크기를_로킹단위라고_함._0"},{"heading":"CASCADE 명령어에 대한설명","level":1,"id":"CASCADE_명령어에_대한설명_0"},{"heading":"DROP VIEW V_1 CASCADE 등과 같이 사용하면","level":3,"id":"DROP_VIEW_V_1_CASCADE_등과_같이_사용하면_0"},{"heading":"-&gt; V_1과 조인되어있거나 연결되어있으면 연쇄적으로 삭제된다. ( 참조하는 자식 개체까지 모두 삭제 )","level":4,"id":"->_V_1과_조인되어있거나_연결되어있으면_연쇄적으로_삭제된다._(_참조하는_자식_개체까지_모두_삭제_)_0"},{"heading":"반대로 RESTRICTED 명령어를 사용하면, 삭제하면서 참조중일 때 에러를 띄우며 삭제하는 작업을 중지한다.","level":3,"id":"반대로_RESTRICTED_명령어를_사용하면,_삭제하면서_참조중일_때_에러를_띄우며_삭제하는_작업을_중지한다._0"},{"heading":"DB 정규화 과정에 대한 설명","level":1,"id":"DB_정규화_과정에_대한_설명_0"},{"heading":"도부이결다조","level":3,"id":"도부이결다조_0"},{"heading":"1NF - 도 : <mark>모든 도메인</mark>이 원자 값으로만 구성","level":3,"id":"1NF_-_도_==모든_도메인==이_원자_값으로만_구성_0"},{"heading":"2NF - 부 : <mark>부분적 함수 종속을 <code>제거</code></mark>한 정규형, 기본키가 아닌 속성이 기본키에 대한 완전 함수 종속을 만족","level":3,"id":"2NF_-_부_==부분적_함수_종속을_`제거`==한_정규형,_기본키가_아닌_속성이_기본키에_대한_완전_함수_종속을_만족_0"},{"heading":"3NF - 이 : 기본키가 아닌 모든 속성이 기본키에 대해 <mark>이행성 함수 종속관계를 만족하지</mark> 않는 정규형","level":3,"id":"3NF_-_이_기본키가_아닌_모든_속성이_기본키에_대해_==이행성_함수_종속관계를_만족하지==_않는_정규형_0"},{"heading":"BCNF - 결 : <mark>모든 결정자가 후보키</mark>인 정규형","level":3,"id":"BCNF_-_결_==모든_결정자가_후보키==인_정규형_0"},{"heading":"4NF - 다 : <mark>다치 종속이 성립</mark>하는 경우, R의 모든 속성이 A에 함수적 종속 관계를 만족","level":3,"id":"4NF_-_다_==다치_종속이_성립==하는_경우,_R의_모든_속성이_A에_함수적_종속_관계를_만족_0"},{"heading":"5NF - 조 : <mark>모든 조인 종속</mark>이 R의 후보키를 통해서만 성립되는 정규형","level":3,"id":"5NF_-_조_==모든_조인_종속==이_R의_후보키를_통해서만_성립되는_정규형_0"},{"heading":"DB 트렌젝션에 대한 설명","level":1,"id":"DB_트렌젝션에_대한_설명_0"},{"heading":"Atomicity 원자성 : 완전하게 수행 완료되지 않으면 전혀 수행되지 않아야함","level":3,"id":"Atomicity_원자성_완전하게_수행_완료되지_않으면_전혀_수행되지_않아야함_0"},{"heading":"Consistency 일관성 : 시스템의 고정 요소는 트렌젝션 수행 전후에 같아야함","level":3,"id":"Consistency_일관성_시스템의_고정_요소는_트렌젝션_수행_전후에_같아야함_0"},{"heading":"Isolation 고립성 : 트렌젝션 실행 시 다른 트렌젝션의 간섭을 받지 않아야함","level":3,"id":"Isolation_고립성_트렌젝션_실행_시_다른_트렌젝션의_간섭을_받지_않아야함_0"},{"heading":"Durability 영속성 : 트렌젝션의 완료 결과가 DB에 영구히 기억됨","level":3,"id":"Durability_영속성_트렌젝션의_완료_결과가_DB에_영구히_기억됨_0"},{"heading":"분산 데이터베이스의 목표에 대한 설명 <mark>위중병장</mark>","level":1,"id":"분산_데이터베이스의_목표에_대한_설명_==위중병장==_0"},{"heading":"위치 투명성","level":3,"id":"위치_투명성_0"},{"heading":"중복 투명성","level":3,"id":"중복_투명성_0"},{"heading":"병행 투명성","level":3,"id":"병행_투명성_0"},{"heading":"장애 투명성","level":3,"id":"장애_투명성_0"},{"heading":"DB의 인덱스와 관련한 설명","level":1,"id":"DB의_인덱스와_관련한_설명_0"},{"heading":"Index - <mark>독립적인 저장 공간</mark>을 보유하며, 데이터베이스에 저장된 자료를 더욱 빠르게 조회하기 위하여 별도로 구성한 순서 데이터를 말한다.","level":3,"id":"Index_-_==독립적인_저장_공간==을_보유하며,_데이터베이스에_저장된_자료를_더욱_빠르게_조회하기_위하여_별도로_구성한_순서_데이터를_말한다._0"},{"heading":"대부분의 데이터베이스에서 <mark>테이블을 삭제하면 인덱스도 함께 삭제</mark>된다.","level":3,"id":"대부분의_데이터베이스에서_==테이블을_삭제하면_인덱스도_함께_삭제==된다._0"},{"heading":"CREATE 생성 / DROP 삭제","level":3,"id":"CREATE_생성_/_DROP_삭제_0"},{"heading":"<mark>물리적</mark> DB구조의 기본 데이터 단위인, 저장레코드의 양식을 설계할 때 고려할 사항 <mark>타 분 빈</mark>","level":1,"id":"==물리적==_DB구조의_기본_데이터_단위인,_저장레코드의_양식을_설계할_때_고려할_사항_==타_분_빈==_0"},{"heading":"1. 데이터 타입","level":3,"id":"1._데이터_타입_0"},{"heading":"2. 데이터 값의 분포","level":3,"id":"2._데이터_값의_분포_0"},{"heading":"3. 접근 빈도","level":3,"id":"3._접근_빈도_0"},{"heading":"트렌젝션 모델링은 개념적 설계 단계에서 진행한다.","level":4,"id":"트렌젝션_모델링은_개념적_설계_단계에서_진행한다._0"},{"heading":"SQL의 기능에 따른 분류 설명","level":1,"id":"SQL의_기능에_따른_분류_설명_0"},{"heading":"DCL","level":3,"id":"DCL_0"},{"heading":"COMMIT : 명령어로 수행된 결과를 실제 물리적 디스크로 저장하고, 명령어로 수행을 성공적으로 완료하였음을 선언한다.","level":4,"id":"COMMIT_명령어로_수행된_결과를_실제_물리적_디스크로_저장하고,_명령어로_수행을_성공적으로_완료하였음을_선언한다._0"},{"heading":"ROLLBACK : 명령어로 수행을 실패하였음을 알리고, 수행된 결과를 원상복구시킨다.","level":4,"id":"ROLLBACK_명령어로_수행을_실패하였음을_알리고,_수행된_결과를_원상복구시킨다._0"},{"heading":"GRANT : DB 사용자에게 사용 권한을 부여한다.","level":4,"id":"GRANT_DB_사용자에게_사용_권한을_부여한다._0"},{"heading":"REVOKE : DB 사용자로부터 사용 권한을 취소한다.","level":4,"id":"REVOKE_DB_사용자로부터_사용_권한을_취소한다._0"},{"heading":"DDL","level":3,"id":"DDL_0"},{"heading":"CREATE : 스키마 / 도메인 / 테이블 / 뷰 / 인덱스를 정의","level":4,"id":"CREATE_스키마_/_도메인_/_테이블_/_뷰_/_인덱스를_정의_0"},{"heading":"ALTER : 테이블에 대한 정의를 변경하는데 사용","level":4,"id":"ALTER_테이블에_대한_정의를_변경하는데_사용_0"},{"heading":"DROP : 스키마 / 도메인 / 테이블 / 뷰 / 인덱스를 삭제","level":4,"id":"DROP_스키마_/_도메인_/_테이블_/_뷰_/_인덱스를_삭제_0"},{"heading":"DML","level":3,"id":"DML_0"},{"heading":"SELECT : 테이블에서 조건에 맞는 튜플을 검색","level":4,"id":"SELECT_테이블에서_조건에_맞는_튜플을_검색_0"},{"heading":"INSERT : 테이블에 새로운 튜플을 삽입","level":4,"id":"INSERT_테이블에_새로운_튜플을_삽입_0"},{"heading":"DELETE : 테이블에서 조건에 맞는 튜플을 삭제","level":4,"id":"DELETE_테이블에서_조건에_맞는_튜플을_삭제_0"},{"heading":"UPDATE : 테이블에서 조건에 맞는 튜플의 내용을 변경","level":4,"id":"UPDATE_테이블에서_조건에_맞는_튜플의_내용을_변경_0"},{"heading":"데이터 사전(Data Dictionary)에 대한 설명","level":1,"id":"데이터_사전(Data_Dictionary)에_대한_설명_0"},{"heading":"1. 시스템 자신이 필요로하는 여러가지 객체(기본테이블 / 뷰 / 인덱스 / DB / 패키지 / 접근 권한 등)","level":3,"id":"1._시스템_자신이_필요로하는_여러가지_객체(기본테이블_/_뷰_/_인덱스_/_DB_/_패키지_/_접근_권한_등)_0"}],"links":["?query=tag:%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC","?query=tag:%ED%95%84%EA%B8%B0","?query=tag:%EC%A0%95%EB%A6%AC"],"author":"","coverImageURL":"","fullURL":"study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html","pathToRoot":"../../..","attachments":[],"createdTime":1739783025899,"modifiedTime":1739940388501,"sourceSize":11304,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 3과목 - 데이터베이스 구축.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html":{"title":"🥈 필기 4과목 - 프로그래밍 언어 활용","icon":"","description":"<a href=\".?query=tag:정보처리기사\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정보처리기사\">#정보처리기사</a> <a href=\".?query=tag:필기\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#필기\">#필기</a> <a href=\".?query=tag:정리\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정리\">#정리</a> 다른 프로세스가 뺐지 못하는 상태.\n#### - 최적의 경로를 산출하기 위한 정보로서 홉(거리 값)만을 고려하므로, RIP를 선택한 경로가 ==최적의 경로가 아닌경우가== 많이 발생할 수 있다.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"교착 상태(Deadlock)의 필요 충분 조건?","level":1,"id":"교착_상태(Deadlock)의_필요_충분_조건?_0"},{"heading":"<span>- \n\n<span>상호 배제(Mutual Exclusion)</span></span>","level":3,"id":"-_상호_배제(Mutual_Exclusion)_0"},{"heading":"<span>- \n\n<span>점유와 대기(Hold and Wait)</span></span>","level":3,"id":"-_점유와_대기(Hold_and_Wait)_0"},{"heading":"<span>- \n\n<span>환형 대기(Circular Wait)</span></span>","level":3,"id":"-_환형_대기(Circular_Wait)_0"},{"heading":"<span>- \n\n<span>비선점(Nonpreemptive)</span></span>","level":3,"id":"-_비선점(Nonpreemptive)_0"},{"heading":"IPv6의 주소 체계 <mark>애멀유</mark>","level":1,"id":"IPv6의_주소_체계_==애멀유==_0"},{"heading":"<span>- \n\n<span>유니캐스트</span></span>","level":3,"id":"-_유니캐스트_0"},{"heading":"<span>- \n\n<span>멀티캐스트</span></span>","level":3,"id":"-_멀티캐스트_0"},{"heading":"<span>- \n\n<span>애니캐스트</span></span>","level":3,"id":"-_애니캐스트_0"},{"heading":"<mark>파일 디스크립터</mark>에 대한 설명","level":1,"id":"==파일_디스크립터==에_대한_설명_0"},{"heading":"<span>- \n\n<span>파일 관리를 위해 시스템이 필요로 하는 정보를 가지고 있다.</span></span>","level":3,"id":"-_파일_관리를_위해_시스템이_필요로_하는_정보를_가지고_있다._0"},{"heading":"<span>- \n\n<span>보조기억장치에 저장되어 있다가 파일이 개방되면 주기억장치로 이동된다.</span></span>","level":3,"id":"-_보조기억장치에_저장되어_있다가_파일이_개방되면_주기억장치로_이동된다._0"},{"heading":"<span>- \n\n<span>파일 시스템이 관리하므로 사용자가 파일 <mark>디스크립터를 직접 참조할 수 없다</mark>.</span></span>","level":3,"id":"-_파일_시스템이_관리하므로_사용자가_파일_==디스크립터를_직접_참조할_수_없다==._0"},{"heading":"<span>- \n\n<span>파일 제어 블록 이라고도 한다.</span></span>","level":3,"id":"-_파일_제어_블록_이라고도_한다._0"},{"heading":"<span>- \n\n<span>파일마다 따로 있으며 시스템에 따라 다른 구조를 가질 수 있다.</span></span>","level":3,"id":"-_파일마다_따로_있으며_시스템에_따라_다른_구조를_가질_수_있다._0"},{"heading":"<span>- \n\n<span>파일이름 / 위치 / 파일구조 / 유형 / 시간 등의 정보를 담고 있다.</span></span>","level":3,"id":"-_파일이름_/_위치_/_파일구조_/_유형_/_시간_등의_정보를_담고_있다._0"},{"heading":"페이지 교체 알고리즘에 대한 설명","level":1,"id":"페이지_교체_알고리즘에_대한_설명_0"},{"heading":"OPT (Optimal)","level":3,"id":"OPT_(Optimal)_0"},{"heading":"<span>- \n\n<span>앞으로 가장 오랫동안 사용되지 않을 페이지 교체</span></span>","level":4,"id":"-_앞으로_가장_오랫동안_사용되지_않을_페이지_교체_0"},{"heading":"FIFO (First In Fist Out)","level":3,"id":"FIFO_(First_In_Fist_Out)_0"},{"heading":"<span>- \n\n<span>먼저 선택된 페이지가 먼저 교체</span></span>","level":4,"id":"-_먼저_선택된_페이지가_먼저_교체_0"},{"heading":"LRU (Least Recently Used)","level":3,"id":"LRU_(Least_Recently_Used)_0"},{"heading":"<span>- \n\n<span>가장 오랫동안 사용되지 않은 페이지 교체</span></span>","level":4,"id":"-_가장_오랫동안_사용되지_않은_페이지_교체_0"},{"heading":"LFU (Least Frequently Used) <mark>F는 참초횠수</mark>","level":3,"id":"LFU_(Least_Frequently_Used)_==F는_참초횠수==_0"},{"heading":"<span>- \n\n<span>참조 횟수가 가장 적은 페이지 교체</span></span>","level":4,"id":"-_참조_횟수가_가장_적은_페이지_교체_0"},{"heading":"MFU (Most Frequently Used) <mark>F는 참초횠수</mark>","level":3,"id":"MFU_(Most_Frequently_Used)_==F는_참초횠수==_0"},{"heading":"<span>- \n\n<span>참조 횟수가 가장 많은 페이지 교체</span></span>","level":4,"id":"-_참조_횟수가_가장_많은_페이지_교체_0"},{"heading":"NUR (Not Used Recently)","level":3,"id":"NUR_(Not_Used_Recently)_0"},{"heading":"<span>- \n\n<span>최근에 사용하지 않은 페이지 교체</span></span>","level":4,"id":"-_최근에_사용하지_않은_페이지_교체_0"},{"heading":"프로세스에 대한 설명","level":1,"id":"프로세스에_대한_설명_0"},{"heading":"디스패치(Dispatch)","level":3,"id":"디스패치(Dispatch)_0"},{"heading":"<span>- \n\n<span>프로세스가 준비 상태에서 프로세서가 배당되어 실행 상태로 변화하는 것.</span></span>","level":4,"id":"-_프로세스가_준비_상태에서_프로세서가_배당되어_실행_상태로_변화하는_것._0"},{"heading":"제어블록(PCB: Process Controll Block)","level":3,"id":"제어블록(PCB_Process_Controll_Block)_0"},{"heading":"<span>- \n\n<span>프로세스 식별자, 프로세스 상태 등의 정보로 구성된다.</span></span>","level":4,"id":"-_프로세스_식별자,_프로세스_상태_등의_정보로_구성된다._0"},{"heading":"<span>- \n\n<span>운영체제가 그 프로레스를 관리하는데 필요한 모든 정보를 유지하는 자료구조 테이블</span></span>","level":4,"id":"-_운영체제가_그_프로레스를_관리하는데_필요한_모든_정보를_유지하는_자료구조_테이블_0"},{"heading":"문맥교환(Context Switching)","level":3,"id":"문맥교환(Context_Switching)_0"},{"heading":"<span>- \n\n<span>CPU가 현재 실행하고 있는 프로세서의 상태를 PCB에 저장하고 다음 프로세스의 PCB로부터 문맥을 복원하는 작업.</span></span>","level":4,"id":"-_CPU가_현재_실행하고_있는_프로세서의_상태를_PCB에_저장하고_다음_프로세스의_PCB로부터_문맥을_복원하는_작업._0"},{"heading":"IP Address가 속한 Class에 대한 종류","level":1,"id":"IP_Address가_속한_Class에_대한_종류_0"},{"heading":"127 / 191 / 233 / 239 / 255","level":5,"id":"127_/_191_/_233_/_239_/_255_0"},{"heading":"A Class - 0.0.0.0 ~ 127.255.255.255","level":3,"id":"A_Class_-_0.0.0.0_~_127.255.255.255_0"},{"heading":"B Class - 128.0.0.0 ~ 191.255.255.255","level":3,"id":"B_Class_-_128.0.0.0_~_191.255.255.255_0"},{"heading":"C Class - 192.0.0.0 ~ 223.255.255.255","level":3,"id":"C_Class_-_192.0.0.0_~_223.255.255.255_0"},{"heading":"D Class와 E Class는 각각 멀티케스트용 또는 연구용으로 사용된다.","level":4,"id":"D_Class와_E_Class는_각각_멀티케스트용_또는_연구용으로_사용된다._0"},{"heading":"D Class - 224.0.0.0 ~ 239.255.255.255","level":3,"id":"D_Class_-_224.0.0.0_~_239.255.255.255_0"},{"heading":"E Class - 240.0.0.0 ~ 255.255.255.255","level":3,"id":"E_Class_-_240.0.0.0_~_255.255.255.255_0"},{"heading":"오류제어에 사용되는 자동반복 요청방식의 종류","level":1,"id":"오류제어에_사용되는_자동반복_요청방식의_종류_0"},{"heading":"자동반복 요청방식(ARQ: Automatic Repeat reQuest)","level":3,"id":"자동반복_요청방식(ARQ_Automatic_Repeat_reQuest)_0"},{"heading":"<span>- \n\n<span>Stop-and-Wait ARQ : 송신 측이 하나의 블록을 전송한 후 수신 측에서 에러의 발생을 정검한 다음, 에러 발생 유무 신호를 보내올 때까지 기다리는 방식</span></span>","level":4,"id":"-_Stop-and-Wait_ARQ_송신_측이_하나의_블록을_전송한_후_수신_측에서_에러의_발생을_정검한_다음,_에러_발생_유무_신호를_보내올_때까지_기다리는_방식_0"},{"heading":"<span>- \n\n<span>Go-Back-N ARQ : 여러 블록을 연속적으로 전송하고, 수신 측에서 부정 응답(NAK)을 보내오면 송신 측이 오류가 발생한 블록부터 모두 재전송</span></span>","level":4,"id":"-_Go-Back-N_ARQ_여러_블록을_연속적으로_전송하고,_수신_측에서_부정_응답(NAK)을_보내오면_송신_측이_오류가_발생한_블록부터_모두_재전송_0"},{"heading":"<span>- \n\n<span>Selective-Repeat ARQ : 여러 블록을 연속적으로 전송하고, 수신측에서 부정 응답을 보내오면 송신 측이 오류가 발생한 블록만을 재전송</span></span>","level":4,"id":"-_Selective-Repeat_ARQ_여러_블록을_연속적으로_전송하고,_수신측에서_부정_응답을_보내오면_송신_측이_오류가_발생한_블록만을_재전송_0"},{"heading":"<span>- \n\n<span>Adaptive ARQ : 전송 효율을 최대로 하기 위해서 데이터 블록의 길이를 채널의 상태에 따라 동적으로 변경하는 방식</span></span>","level":4,"id":"-_Adaptive_ARQ_전송_효율을_최대로_하기_위해서_데이터_블록의_길이를_채널의_상태에_따라_동적으로_변경하는_방식_0"},{"heading":"unix시스템에서 쉘의 주요기능에 대한 설명","level":1,"id":"unix시스템에서_쉘의_주요기능에_대한_설명_0"},{"heading":"1. 사용자의 명령을 해석하고 커널로 전달하는 기능을 제공한다.","level":3,"id":"1._사용자의_명령을_해석하고_커널로_전달하는_기능을_제공한다._0"},{"heading":"2. 반복적인 명령 프로그램을 만드는 프로그램이 기능을 제공한다.","level":3,"id":"2._반복적인_명령_프로그램을_만드는_프로그램이_기능을_제공한다._0"},{"heading":"3. 초기화 파일을 이용해 사용자 환경을 설정하는 기능을 제공한다.","level":3,"id":"3._초기화_파일을_이용해_사용자_환경을_설정하는_기능을_제공한다._0"},{"heading":"<span>- \n\n<span>프로세스와 메모리를 관리하는 것은 커널(Kernel)의 기능이다.</span></span>","level":5,"id":"-_프로세스와_메모리를_관리하는_것은_커널(Kernel)의_기능이다._0"},{"heading":"IP프로토콜에 대한 설명","level":1,"id":"IP프로토콜에_대한_설명_0"},{"heading":"Header Length는 ip프로토콜의 헤더 길이를 32비트 워드 단위로 표시한다.","level":3,"id":"Header_Length는_ip프로토콜의_헤더_길이를_32비트_워드_단위로_표시한다._0"},{"heading":"Packet Length는 ip헤더및 데이터를 포함한 ip패킷 전체 길이를 바이트 단위로 표시.","level":3,"id":"Packet_Length는_ip헤더및_데이터를_포함한_ip패킷_전체_길이를_바이트_단위로_표시._0"},{"heading":"Time to Live는 송신 호스트가 패킷을 전송하기 전 네트워크에서 생존할 수 있는 시간을 지정한 것이다.","level":3,"id":"Time_to_Live는_송신_호스트가_패킷을_전송하기_전_네트워크에서_생존할_수_있는_시간을_지정한_것이다._0"},{"heading":"Version Number는 ip프로토콜의 버전번호를 나타낸다.","level":3,"id":"Version_Number는_ip프로토콜의_버전번호를_나타낸다._0"},{"heading":"IPv4와 IPv6의 차이에 대한 설명","level":1,"id":"IPv4와_IPv6의_차이에_대한_설명_0"},{"heading":"IPv4","level":3,"id":"IPv4_0"},{"heading":"1. 32비트 주소","level":4,"id":"1._**32비트**_주소_0"},{"heading":"2. 유니캐스트/멀티캐스트/브로드캐스트 사용","level":4,"id":"2._유니캐스트/멀티캐스트/브로드캐스트_사용_0"},{"heading":"3. 헤더의 크기가 가변적이다.","level":4,"id":"3._==헤더의_크기가_가변적==이다._0"},{"heading":"IPv6","level":3,"id":"IPv6_0"},{"heading":"1. 128비트 주소 ( 16비트 씩 8부분 ) / 2^128 개의 주소를 표현 가능","level":4,"id":"1._128비트_주소_(_16비트_씩_8부분_)_/_2^128_개의_주소를_표현_가능_0"},{"heading":"2. 기존 IPv4의 주소 부족 문제를 해결하기 위해 개발","level":4,"id":"2._기존_IPv4의_주소_부족_문제를_해결하기_위해_개발_0"},{"heading":"3. 인증성/기밀성/무결성 지원(=보안성 강화)","level":4,"id":"3._인증성/기밀성/무결성_지원(=보안성_강화)_0"},{"heading":"4. 유니캐스트/애니캐스트/멀티캐스트 사용","level":4,"id":"4._유니캐스트/애니캐스트/멀티캐스트_사용_0"},{"heading":"5. 헤더가 40 octet의 고정된 길이를 가진다.","level":4,"id":"5._헤더가_==40_octet==의_고정된_길이를_가진다._0"},{"heading":"6. v4에 비하여 더 빠르다.","level":4,"id":"6._v4에_비하여_더_빠르다._0"},{"heading":"RIP라우팅 프로토콜에 대한 설명","level":1,"id":"RIP라우팅_프로토콜에_대한_설명_0"},{"heading":"<mark>RIP</mark>(Routing Information Protocol)","level":3,"id":"==RIP==(Routing_Information_Protocol)_0"},{"heading":"<span>- \n\n<span>최단경로 탐색에는 <strong>Bellman-Ford</strong> 알고리즘을 사용하는 <strong>거리 벡터 라우팅 프로토콜</strong></span></span>","level":4,"id":"-_최단경로_탐색에는_**Bellman-Ford**_알고리즘을_사용하는_**거리_벡터_라우팅_프로토콜**_0"},{"heading":"<span>- \n\n<span>라우팅 프로토콜을 IGP와 EGP로 분류했을 때 <strong>IGP에</strong> 해당한다.</span></span>","level":4,"id":"-_라우팅_프로토콜을_IGP와_EGP로_분류했을_때_**IGP에**_해당한다._0"},{"heading":"<span>- \n\n<span><mark>소규모 네트워크 환경</mark>에 적합하다.</span></span>","level":4,"id":"-_==소규모_네트워크_환경==에_적합하다._0"},{"heading":"<span>- \n\n<span>최대 홉 카운트를 15홉 이하로 한정하고 있다.</span></span>","level":4,"id":"-_최대_홉_카운트를_15홉_이하로_한정하고_있다._0"},{"heading":"IGP : Interior Gateway Protocol 내부 게이트웨이 프로토콜 - 학내망 내부에서 라우팅하는 것. 즉 하나의 AS내에서 사용됨.","level":5,"id":"IGP_Interior_Gateway_Protocol_내부_게이트웨이_프로토콜_-_학내망_내부에서_라우팅하는_것._즉_하나의_AS내에서_사용됨._0"},{"heading":"EGP : Exterior Gateway Protocol 외부 게이트웨이 프로토콜 - 학내망과 다른 학내망의 라우팅에 사용. 즉 AS간의 라우팅에 사용.","level":5,"id":"EGP_Exterior_Gateway_Protocol_외부_게이트웨이_프로토콜_-_학내망과_다른_학내망의_라우팅에_사용._즉_AS간의_라우팅에_사용._0"},{"heading":"<mark>HRN</mark> 스케줄링 방식에 대한 설명","level":1,"id":"==HRN==_스케줄링_방식에_대한_설명_0"},{"heading":"비선점 스케줄링","level":3,"id":"비선점_스케줄링_0"},{"heading":"실행시간이 긴 프로세스에 불리한 SJF 를 보완하기 위해 대기시간 및 서비스 시간을 이용","level":4,"id":"실행시간이_긴_프로세스에_불리한_SJF_를_보완하기_위해_대기시간_및_서비스_시간을_이용_0"},{"heading":"<mark>긴 작업과 짧은 작업간의 지나친 불평등을 해소</mark>할 수 있다.","level":4,"id":"==긴_작업과_짧은_작업간의_지나친_불평등을_해소==할_수_있다._0"},{"heading":"우선순위를 계산, 숫자가 높은것부터 낮은순으로 순위 부여","level":4,"id":"우선순위를_계산,_숫자가_높은것부터_낮은순으로_순위_부여_0"},{"heading":"(대기시간 + 서비스시간) / 서비스시간 = 우선순위값. 해당 값이 클수록 우선순위가 높다.","level":6,"id":"(대기시간_+_서비스시간)_/_서비스시간_=_우선순위값._해당_값이_클수록_우선순위가_높다._0"},{"heading":"SSTF 스케줄링 방식에 대한 설명","level":1,"id":"SSTF_스케줄링_방식에_대한_설명_0"},{"heading":"SSTF : Shortest Seek Time First","level":3,"id":"SSTF_Shortest_Seek_Time_First_0"},{"heading":"현재 헤드 위치에서 가장 가까운 것부터 처리.","level":4,"id":"현재_헤드_위치에서_가장_가까운_것부터_처리._0"},{"heading":"이후 동일한 방법으로 진행.","level":4,"id":"이후_동일한_방법으로_진행._0"},{"heading":"UNIX 운영체제 관한 설명","level":1,"id":"UNIX_운영체제_관한_설명_0"},{"heading":"주로 서비용 컴퓨터에서 사용됨","level":3,"id":"주로_서비용_컴퓨터에서_사용됨_0"},{"heading":"time sharing system을 위해 설계된 대화식 운영체제","level":3,"id":"time_sharing_system을_위해_설계된_대화식_운영체제_0"},{"heading":"c언어로 작성되어 이식성이 높고, 장치간 호환성이 높다.","level":3,"id":"c언어로_작성되어_이식성이_높고,_장치간_호환성이_높다._0"},{"heading":"Multi User, Multi tasking 모두 지원.","level":3,"id":"Multi_User,_Multi_tasking_모두_지원._0"},{"heading":"트리구조의 파일시스템.","level":3,"id":"트리구조의_파일시스템._0"},{"heading":"UDP 프로토콜의 특징에 대한 설명","level":1,"id":"UDP_프로토콜의_특징에_대한_설명_0"},{"heading":"비연결형 및 비신뢰성 전송 서비스를 제공한다.","level":3,"id":"비연결형_및_비신뢰성_전송_서비스를_제공한다._0"},{"heading":"흐름제어나 순서제어가 없어 전송속도가 빠르다.","level":3,"id":"흐름제어나_순서제어가_없어_전송속도가_빠르다._0"},{"heading":"수신된 데이터의 순서 재조정 기능을 지원하지 않는다.","level":3,"id":"수신된_데이터의_순서_재조정_기능을_지원하지_않는다._0"},{"heading":"복구기능을 제공하지 않는다.","level":3,"id":"복구기능을_제공하지_않는다._0"},{"heading":"TCP와 같이 트랜스포트 계층에 존재한다.","level":3,"id":"TCP와_같이_트랜스포트_계층에_존재한다._0"},{"heading":"Python의 데이터 타입에 대한 설명","level":1,"id":"Python의_데이터_타입에_대한_설명_0"},{"heading":"시퀀스 - 리스트 : 순서있고, 가변이다. [1,2,3]","level":3,"id":"시퀀스_-_리스트_순서있고,_가변이다._[1,2,3]_0"},{"heading":"시퀀스 - 튜플 : 순서있고, 불변이다. (1,2,3)","level":3,"id":"시퀀스_-_튜플_순서있고,_불변이다._(1,2,3)_0"},{"heading":"세트 - 세트 : 순서없고, 중복X {1,2,3}","level":3,"id":"세트_-_세트_순서없고,_중복X_{1,2,3}_0"},{"heading":"맵 - 딕셔너리 : 순서없고, key-value 쌍이다. {'a' : 1 , 'b' : 3}","level":3,"id":"맵_-_딕셔너리_순서없고,_key-value_쌍이다._{'a'_1_,_'b'_3}_0"},{"heading":"Myers가 구분한 응집도(Cohesion)에 대한 설명","level":1,"id":"Myers가_구분한_응집도(Cohesion)에_대한_설명_0"},{"heading":"(약함 순으로) <mark>우논시절교순기</mark>","level":5,"id":"(약함_순으로)_==우논시절교순기==_0"},{"heading":"1. 기능적 응집도 (Functional Cohesion)","level":3,"id":"1._기능적_응집도_(Functional_Cohesion)_0"},{"heading":"2. 순차적 응집도 (Sequential Cohesion)","level":3,"id":"2._순차적_응집도_(Sequential_Cohesion)_0"},{"heading":"3. 교환적 응집도 (Communication Cohesion)","level":3,"id":"3._교환적_응집도_(Communication_Cohesion)_0"},{"heading":"4. 절차적 응집도 (Procedural Cohesion)","level":3,"id":"4._절차적_응집도_(Procedural_Cohesion)_0"},{"heading":"5. 시간적 응집도 (Temporal Cohesion)","level":3,"id":"5._시간적_응집도_(Temporal_Cohesion)_0"},{"heading":"6. 논리적 응집도 (Logical Cohesion)","level":3,"id":"6._논리적_응집도_(Logical_Cohesion)_0"},{"heading":"7. 우연적 응집도 (Coincidental Cohesion)","level":3,"id":"7._우연적_응집도_(Coincidental_Cohesion)_0"}],"links":["?query=tag:%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC","?query=tag:%ED%95%84%EA%B8%B0","?query=tag:%EC%A0%95%EB%A6%AC"],"author":"","coverImageURL":"","fullURL":"study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html","pathToRoot":"../../..","attachments":[],"createdTime":1739783025899,"modifiedTime":1739940390716,"sourceSize":25213,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 4과목 - 프로그래밍 언어 활용.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html":{"title":"🥈 필기 5과목 - 정보시스템 구축관리","icon":"","description":"<a href=\".?query=tag:정보처리기사\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정보처리기사\">#정보처리기사</a> <a href=\".?query=tag:필기\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#필기\">#필기</a> <a href=\".?query=tag:정리\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정리\">#정리</a> 클래스 인터페이스\n명령어(사용자 질의 수)\n데이터 파일\n출력 보고서\n흭공개운유\n네트워크 변화에 신속히 대처할 수 있다.\n거리 벡터 라우팅 프로토콜 이라고 한다.\n멀티캐스팅을 지원한다.\n최단 경로 탐색에 다익스트라 알고리즘을 사용한다. 클래스 설계서\n통합시험 결과서\n프로그램 코드\n사용자 요구사항 정의서 암호화 키와 복호화 키가 동일한 암호화 알고리즘을 뜻한다. COCOMO\nPutnam\nFunction-Point\nPERT 비교적 실행속도 빠르기 때문에, 다양한 암호의 핵심 함수로 사용될 수 있다.\n키 교환을 필요로 하기 때문에, 키를 교환하는 중 탈취가 될 가능성이 있다. 자신만이 보관하는 비밀키를 이용하여 인증, 전자서명 등에 적용이 가능하다.\n- 캡슐화를 통해 모듈화를 강화하고, 설계 및 구현의 변경에 따른 영향을 최소화 함으로써 품질을 향상시킨다.\n- 재사용 가능한 모듈들을 제공함으로써 예산을 절감한다.\n- 다형성을 통한 인터페이스 확장이 가능하여 다양한 형태와 기능을 가진 애플리케이션 개발이 가능하다.\n- 개발자가 관리하고 통제해야 하는 객체들의 제어를 프레임워크에 넘김으로써 생상선을 향상시킴 벨만-포드 알고리즘 사용\nRIP프로토콜 ( 최대 홉 개수 15개 )\n인접 라우터와 주기적으로 정보 교환 다익스트라 알고리즘 사용\nOSPF프로토콜 ( 최대 홉 개수 제한 없음 )\n최단 경로, 최소 지연, 최대 처리량\n<br><a data-href=\"🥇 정보처리 기사 실기 키워드\" href=\"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥇 정보처리 기사 실기 키워드</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"침입탐지 시스템(IDS : Intrusion Detection System)에 대한 설명","level":1,"id":"침입탐지_시스템(IDS_Intrusion_Detection_System)에_대한_설명_0"},{"heading":"이상탐지(Anomaly Detection)기법","level":3,"id":"이상탐지(Anomaly_Detection)기법_0"},{"heading":"<span>- \n\n<span>Behavior, Statistical Detection으로 불리며, 평균적 시스템의 상태 기준으로 <mark>비정상적인 행위나 자원의 사용이 감지되면 이를 알려줌</mark></span></span>","level":4,"id":"-_Behavior,_Statistical_Detection으로_불리며,_평균적_시스템의_상태_기준으로_==비정상적인_행위나_자원의_사용이_감지되면_이를_알려줌==_0"},{"heading":"<span>- \n\n<span>잘 알려지지 않은 공격 탐지에 적합. 기존 패턴과 급격하게 다른 패턴을 발견하면 침입으로 판단</span></span>","level":4,"id":"-_잘_알려지지_않은_공격_탐지에_적합._기존_패턴과_급격하게_다른_패턴을_발견하면_침입으로_판단_0"},{"heading":"오용탐지(Misuse Detection)기법","level":3,"id":"오용탐지(Misuse_Detection)기법_0"},{"heading":"<span>- \n\n<span>Signature Base나 Knowledge Base로 불리며, <mark>미리 입력해둔 공격 패턴이 감지되면 이를 알려줌</mark></span></span>","level":4,"id":"-_Signature_Base나_Knowledge_Base로_불리며,_==미리_입력해둔_공격_패턴이_감지되면_이를_알려줌==_0"},{"heading":"<span>- \n\n<span>잘 알려진 시스템의 취약점을 공격하는 패턴의 침입을 탐지 (새로운 패턴의 공격을 막기 어려움)</span></span>","level":4,"id":"-_잘_알려진_시스템의_취약점을_공격하는_패턴의_침입을_탐지_(새로운_패턴의_공격을_막기_어려움)_0"},{"heading":"정보 시스템에서 접근통제 방법에 대한 설명","level":1,"id":"정보_시스템에서_접근통제_방법에_대한_설명_0"},{"heading":"강제접근 통제(MAC) <mark>맥-&gt;등급</mark>","level":3,"id":"강제접근_통제(MAC)_==맥->등급==_0"},{"heading":"<span>- \n\n<span>주체와 객체의 <strong>등급을 비교</strong>하여 접근 권한을 부여하는 방식</span></span>","level":4,"id":"-_주체와_객체의_**등급을_비교**하여_접근_권한을_부여하는_방식_0"},{"heading":"임의접근 통제(DAC) <mark>닥 -&gt; 신원</mark>","level":3,"id":"임의접근_통제(DAC)_==닥_->_신원==_0"},{"heading":"<span>- \n\n<span>접근하는 사용자의 <strong>신원에 따라</strong> 접근 권한을 부여하는 방식</span></span>","level":4,"id":"-_접근하는_사용자의_**신원에_따라**_접근_권한을_부여하는_방식_0"},{"heading":"역할기반접근 통제(RBAC)","level":3,"id":"역할기반접근_통제(RBAC)_0"},{"heading":"<span>- \n\n<span>직무나 직책과 같이 <em>개인의역할</em>에 따라 접근 권한을 부여하는 접근 정책</span></span>","level":4,"id":"-_직무나_직책과_같이_*개인의역할*에_따라_접근_권한을_부여하는_접근_정책_0"},{"heading":"사용자계정 컨트롤(UAC)","level":3,"id":"사용자계정_컨트롤(UAC)_0"},{"heading":"<span>- \n\n<span>프로그램에서 관리자 수준의 권한이 필요한 작업을 수행할 때 <em>사용자에게 알려서</em> 제어할 수 있도록 돕는기능</span></span>","level":4,"id":"-_프로그램에서_관리자_수준의_권한이_필요한_작업을_수행할_때_*사용자에게_알려서*_제어할_수_있도록_돕는기능_0"},{"heading":"자료별 접근통제(Data-Label AC)","level":3,"id":"자료별_접근통제(Data-Label_AC)_0"},{"heading":"<span>- \n\n<span>개별 행, 열에 대해 쓰기 권한, 읽기 권한을 가졌는지를 명확하게 결정하는 제어방식</span></span>","level":4,"id":"-_개별_행,_열에_대해_쓰기_권한,_읽기_권한을_가졌는지를_명확하게_결정하는_제어방식_0"},{"heading":"정보시스템에 대한 설명","level":1,"id":"정보시스템에_대한_설명_0"},{"heading":"<span>- \n\n<span>고가용성 솔루션(HACMP)</span></span>","level":3,"id":"-_고가용성_솔루션(HACMP)_0"},{"heading":"1. AIX를 기반으로 한 IBM의 고가용성 솔루션.","level":4,"id":"1._AIX를_기반으로_한_IBM의_고가용성_솔루션._0"},{"heading":"2. Resource의 중복 또는 공유를 통해 Application의 보호를 가능하게 해줌","level":4,"id":"2._==Resource의_중복_또는_공유를_통해_Application의_보호==를_가능하게_해줌_0"},{"heading":"3. 같은 데이터를 공유하거나 동시에 access하는 노드들에서 여러개의 Application을 실행하게 해줌","level":4,"id":"3._같은_데이터를_공유하거나_동시에_access하는_노드들에서_여러개의_Application을_실행하게_해줌_0"},{"heading":"4. 두대 이상의 시스템을 하나의 클러스터로 묶어 한 시스템에서 장애가 발생할 경우 다른 시스템이 자원을 인수할 수 있도록하여 서비스의 중단을 최소화 할 수 있도록 도와주는 솔루션","level":4,"id":"4._==두대_이상의_시스템을_하나의_클러스터로_묶어==_한_시스템에서_장애가_발생할_경우_다른_시스템이_자원을_인수할_수_있도록하여_서비스의_중단을_최소화_할_수_있도록_도와주는_솔루션_0"},{"heading":"<span>- \n\n<span>점대점 연결 방식(Point to Point Mode)</span></span>","level":3,"id":"-_점대점_연결_방식(Point_to_Point_Mode)_0"},{"heading":"1. 네트워크에 있어 물리적으로는 중개 장치를 통과하지 않고 한 지점에서 다른 지점으로 직접가는 채널","level":4,"id":"1._네트워크에_있어_==물리적으로는_중개_장치를_통과하지_않고==_한_지점에서_다른_지점으로_직접가는_채널_0"},{"heading":"2. 두 스테이션간을 별도의회선을 사용하여 1대1로 연결","level":4,"id":"2._두_스테이션간을_**별도의회선**을_사용하여_1대1로_연결_0"},{"heading":"3. 전용회선이나 공중 전화 회선을 이용","level":4,"id":"3._==전용회선이나_공중_전화_회선을_이용==_0"},{"heading":"4. 회선 구성이 간당하고 대용량 전송에 유리","level":4,"id":"4._회선_구성이_간당하고_대용량_전송에_유리_0"},{"heading":"5. 별도의 회선과 포트에 따른 높은 설치 비용","level":4,"id":"5._별도의_회선과_포트에_따른_==높은_설치_비용==_0"},{"heading":"네트워크 공격 방법에 대한 설명","level":1,"id":"네트워크_공격_방법에_대한_설명_0"},{"heading":"Parsing","level":3,"id":"Parsing_0"},{"heading":"<span>- \n\n<span>하나의 프로그램을 런타임 환경이 실제로 실행할 수 있는 내부 포맷으로 분석하고 변환하는것을 의미</span></span>","level":4,"id":"-_하나의_프로그램을_런타임_환경이_실제로_실행할_수_있는_내부_포맷으로_분석하고_변환하는것을_의미_0"},{"heading":"LAN Tapping","level":3,"id":"LAN_Tapping_0"},{"heading":"<span>- \n\n<span>LAN신호를 직접 자신에게 끌어노는 방식의 공격</span></span>","level":4,"id":"-_LAN신호를_직접_자신에게_끌어노는_방식의_공격_0"},{"heading":"Switch Jamming","level":3,"id":"Switch_Jamming_0"},{"heading":"<span>- \n\n<span>스위치의 기능이 방해 받아 정상 동작을 하지 못해 <strong>스위치가 더미 허브처럼 작동</strong>하게 하는것</span></span>","level":4,"id":"-_스위치의_기능이_방해_받아_정상_동작을_하지_못해_**스위치가_더미_허브처럼_작동**하게_하는것_0"},{"heading":"FTP Flooding","level":3,"id":"FTP_Flooding_0"},{"heading":"<span>- \n\n<span>TCP의 3way Handshake 취약점을 이용한 DoS공격으로, <strong>다량의 SYN패킷을 보내 백로그큐를</strong> 가득 채우는 공격.</span></span>","level":4,"id":"-_TCP의_3way_Handshake_취약점을_이용한_DoS공격으로,_**다량의_SYN패킷을_보내_백로그큐를**_가득_채우는_공격._0"},{"heading":"Smurfing","level":3,"id":"Smurfing_0"},{"heading":"<span>- \n\n<span>IP또는 ICMP의 특성을 악용하여 특정 사이트에 <strong>집중적으로데이터를 보내 네트워크 또는 시스템의 상태를 불능으로</strong> 만드는 공격.</span></span>","level":4,"id":"-_IP또는_ICMP의_특성을_악용하여_특정_사이트에_**집중적으로데이터를_보내_네트워크_또는_시스템의_상태를_불능으로**_만드는_공격._0"},{"heading":"블루투스 공격과 설명","level":1,"id":"블루투스_공격과_설명_0"},{"heading":"블루버그","level":3,"id":"블루버그_0"},{"heading":"<span>- \n\n<span>블루투스 장비 사이의 <strong>취약한 연결 관리를 이용</strong>한 공격</span></span>","level":4,"id":"-_블루투스_장비_사이의_**취약한_연결_관리를_이용**한_공격_0"},{"heading":"블루스나프(스나핑)","level":3,"id":"블루스나프(스나핑)_0"},{"heading":"<span>- \n\n<span>블루투스의 취약점을 활용하여 장비의 파일에 접근하는 공격으로 <strong>OPP를 사용하여 정보를 열람</strong></span></span>","level":4,"id":"-_블루투스의_취약점을_활용하여_장비의_파일에_접근하는_공격으로_**OPP를_사용하여_정보를_열람**_0"},{"heading":"블루재킹","level":3,"id":"블루재킹_0"},{"heading":"<span>- \n\n<span>블루투스를 이용해 <strong>스팸처럼 명함을 익명으로 띄우는것</strong></span></span>","level":4,"id":"-_블루투스를_이용해_**스팸처럼_명함을_익명으로_띄우는것**_0"},{"heading":"간트차트(Gantt Chart)에 대한 설명","level":1,"id":"간트차트(Gantt_Chart)에_대한_설명_0"},{"heading":"1. 프로젝트를 이루는 소작업 별로 언제 시작되고, 언제 끝나야 하는지 한 눈에 볼 수 있도록 도와준다.","level":3,"id":"1._프로젝트를_이루는_소작업_별로_==언제_시작되고,_언제_끝나야_하는지_한_눈에_볼_수_있도록==_도와준다._0"},{"heading":"2. 자원 배치 계획에 유용하게 사용된다.","level":3,"id":"2._자원_배치_계획에_유용하게_사용된다._0"},{"heading":"3. CPM 네트워크로부터 만드는것이 가능하다.","level":3,"id":"3._CPM_네트워크로부터_만드는것이_가능하다._0"},{"heading":"4. 수평 막대의 길이는 각 작업에 필요한 기간을 나타낸다.","level":3,"id":"4._*수평_막대의_길이*는_각_*작업에_필요한_기간*을_나타낸다._0"},{"heading":"5. 작업 일정을 한눈에 볼 수 있도록 해주며, 막대그래프를 통해 표현한다.","level":3,"id":"5._*작업_일정*을_한눈에_볼_수_있도록_해주며,_*막대그래프를_통해_표현*한다._0"},{"heading":"Window파일 저장시스템 FAT / NTFS 에 대한 설명","level":1,"id":"Window파일_저장시스템_FAT_/_NTFS_에_대한_설명_0"},{"heading":"FAT","level":3,"id":"FAT_0"},{"heading":"<span>- \n\n<span>DOS때 부터 사용되던 윈도의 파일시스템</span></span>","level":4,"id":"-_DOS때_부터_사용되던_윈도의_파일시스템_0"},{"heading":"<span>- \n\n<span><mark>저용량에 적합</mark>. <em>호환성이 좋음</em>. 저장가능한 파일의 최대크기는 <em>4GB</em></span></span>","level":4,"id":"-_==저용량에_적합==._*호환성이_좋음*._저장가능한_파일의_최대크기는_*4GB*_0"},{"heading":"NTFS","level":3,"id":"NTFS_0"},{"heading":"<span>- \n\n<span>FAT시스템을 대체하기 위해 개발된 윈도우 파일 시스템</span></span>","level":4,"id":"-_FAT시스템을_대체하기_위해_개발된_윈도우_파일_시스템_0"},{"heading":"<span>- \n\n<span>사용자마다 다른 보안 적용 가능. 즉 보안이 FAT보다 뛰어남</span></span>","level":4,"id":"-_사용자마다_다른_보안_적용_가능._즉_보안이_FAT보다_뛰어남_0"},{"heading":"<span>- \n\n<span><mark>대용량 저장 가능 및 안정성이 뛰어남</mark></span></span>","level":4,"id":"-_==대용량_저장_가능_및_안정성이_뛰어남==_0"},{"heading":"<span>- \n\n<span><mark>저용량 볼륨에서 속도 저하</mark></span></span>","level":4,"id":"-_==저용량_볼륨에서_속도_저하==_0"},{"heading":"리눅스에서 umask값을 구하는 방법","level":1,"id":"리눅스에서_umask값을_구하는_방법_0"},{"heading":"umask는 파일이나 디렉터리의 초기 권한을 설정할때 사용하는 값으로,","level":3,"id":"umask는_파일이나_디렉터리의_초기_권한을_설정할때_사용하는_값으로,_0"},{"heading":"파일의 경우 <mark>666</mark>에서 umask값을 뺀 값이다.","level":3,"id":"파일의_경우_==666==에서_umask값을_뺀_값이다._0"},{"heading":"상향식 비용 산정 기법 중 LOC(원시 코드 라인 수) 기법에 필요한 항목 <mark>낙비기</mark>","level":1,"id":"상향식_비용_산정_기법_중_LOC(원시_코드_라인_수)_기법에_필요한_항목_==낙비기==_0"},{"heading":"1. 낙관치","level":3,"id":"1._낙관치_0"},{"heading":"2. 비관치","level":3,"id":"2._비관치_0"},{"heading":"3. 기대치","level":3,"id":"3._기대치_0"},{"heading":"소프트웨어 개발 방법론 중 <mark>테일러링</mark>(Tailoring)과 관련한 설명","level":1,"id":"소프트웨어_개발_방법론_중_==테일러링==(Tailoring)과_관련한_설명_0"},{"heading":"1. 프로젝트 상황 특성에 맞게 정의된 소프트웨어 개발 방법론 절차, 사용기법 등을 수정 및 보완하는 작업","level":3,"id":"1._*프로젝트_상황_특성에_맞게*_정의된_소프트웨어_개발_방법론_절차,_사용기법_등을_*수정_및_보완하는_작업*_0"},{"heading":"2. 관리 측면에서 목적 중 하나는, 최단기간에 안정적인 프로젝트를 진행하기 위한 사전 위험을 식별하고 제거하는 것.","level":3,"id":"2._관리_측면에서_목적_중_하나는,_*최단기간에_안정적인*_프로젝트를_진행하기_위한_사전_위험을_식별하고_제거하는_것._0"},{"heading":"3. 기술적 측면에서 목적 중 하나는, 프로젝트에 최적화된 기술 요소를 도입하여 프로젝트 특성에 맞는 최적의 기법과 도구를 사용하는것.","level":3,"id":"3._기술적_측면에서_목적_중_하나는,_프로젝트에_최적화된_기술_요소를_도입하여_프로젝트_특성에_맞는_최적의_기법과_도구를_사용하는것._0"},{"heading":"CMM(Capability Maturity Model) 의 레벨 <mark>초관정정최</mark>","level":1,"id":"CMM(Capability_Maturity_Model)_의_레벨_==초관정정최==_0"},{"heading":"<span>- \n\n<span>초기</span></span>","level":3,"id":"-_초기_0"},{"heading":"<span>- \n\n<span>관리</span></span>","level":3,"id":"-_관리_0"},{"heading":"<span>- \n\n<span>정의</span></span>","level":3,"id":"-_정의_0"},{"heading":"<span>- \n\n<span>정량적 관리</span></span>","level":3,"id":"-_정량적_관리_0"},{"heading":"<span>- \n\n<span>최적화</span></span>","level":3,"id":"-_최적화_0"},{"heading":"PICONET 이란?","level":1,"id":"PICONET_이란?_0"},{"heading":"<span>- \n\n<span>여러 개의 <em>독립된 통신장치</em>가 UWB(Ultra Wide Band)기술 또는 블루투스 기술을 사용하여 <em>통신망을 형성하는 무선 네트워크 기술</em></span></span>","level":3,"id":"-_여러_개의_*독립된_통신장치*가_UWB(Ultra_Wide_Band)기술_또는_블루투스_기술을_사용하여_*통신망을_형성하는_무선_네트워크_기술*_0"},{"heading":"기능점수(Functional Point)모형에서 비용산정에 이용되는 요소가 아닌것은?","level":1,"id":"기능점수(Functional_Point)모형에서_비용산정에_이용되는_요소가_아닌것은?_0"},{"heading":"기능점수(FP)모형의 비용산정 요인에는 <mark>클래스 인터페이스가 아닌, 필요한 외부 루틴과의 인터페이스</mark> 이다.","level":4,"id":"기능점수(FP)모형의_비용산정_요인에는_==클래스_인터페이스가_아닌,_필요한_외부_루틴과의_인터페이스==_이다._0"},{"heading":"Mesh Network 란?","level":1,"id":"Mesh_Network_란?_0"},{"heading":"<em>기존 무선 랜의 한계 극복</em>을 위해 등장","level":4,"id":"*기존_무선_랜의_한계_극복*을_위해_등장_0"},{"heading":"<em>대규모 디바이스</em>의 네트워크 생성에 최적화 된 <em>차세대 이동통신 네트워크</em>","level":4,"id":"*대규모_디바이스*의_네트워크_생성에_최적화_된_*차세대_이동통신_네트워크*_0"},{"heading":"RIP(Routing Information Protocol)에 대한 설명","level":1,"id":"RIP(Routing_Information_Protocol)에_대한_설명_0"},{"heading":"1. 거리 벡터 라우팅 프로토콜 이라고도 한다.","level":3,"id":"1._*거리_벡터_라우팅*_프로토콜_이라고도_한다._0"},{"heading":"2. 소규모 네트워크 환경에 적합하다.","level":3,"id":"2._*소규모*_네트워크_환경에_적합하다._0"},{"heading":"3. 최대 홉 카운트를 15 이하로 한정한다.","level":3,"id":"3._최대_홉_카운트를_*15_이하*로_한정한다._0"},{"heading":"4. 최단경로 탐색에 벨만-포드 알고리즘을 사용한다.","level":3,"id":"4._최단경로_탐색에_*벨만-포드*_알고리즘을_사용한다._0"},{"heading":"나선형 모델의 4가지 주요 활동 <mark>계위공고</mark>","level":1,"id":"나선형_모델의_4가지_주요_활동_==계위공고==_0"},{"heading":"1. 계획수림","level":3,"id":"1._계획수림_0"},{"heading":"2. 위험 분석","level":3,"id":"2._위험_분석_0"},{"heading":"3. 공학적 개발","level":3,"id":"3._공학적_개발_0"},{"heading":"4. 고객 평가","level":3,"id":"4._고객_평가_0"},{"heading":"위 4항목을 순서대로 반복하여 수행한다.","level":4,"id":"위_4항목을_순서대로_반복하여_수행한다._0"},{"heading":"CMM(Capability Maturity Model)모델의 레벨","level":1,"id":"CMM(Capability_Maturity_Model)모델의_레벨_0"},{"heading":"1. 초기","level":2,"id":"1._초기_0"},{"heading":"2. 관리","level":2,"id":"2._관리_0"},{"heading":"3. 정의","level":2,"id":"3._정의_0"},{"heading":"4. 정량적 관리","level":2,"id":"4._정량적_관리_0"},{"heading":"5. 최적화","level":2,"id":"5._최적화_0"},{"heading":"공개키 암호화 방식에 대한 설명 <code>공개 -&gt; 비대칭</code>","level":1,"id":"공개키_암호화_방식에_대한_설명_`공개_->_비대칭`_0"},{"heading":"1. 공개키로 암호화된 메세지는, 비밀키를 사용해 복호화 한다.","level":3,"id":"1._*공개키*로_암호화된_메세지는,_*비밀키*를_사용해_복호화_한다._0"},{"heading":"2. 비대칭 암호기법 이라고도 한다.","level":3,"id":"2._*비대칭*_암호기법_이라고도_한다._0"},{"heading":"3. 대표적인 기법은 RSA기법이 있다.","level":3,"id":"3._대표적인_기법은_*RSA*기법이_있다._0"},{"heading":"4. 키 분배가 용이하고, 관리해야 할 키 개수가 적다.","level":3,"id":"4._키_분배가_용이하고,_관리해야_할_키_개수가_적다._0"},{"heading":"5. 공개키 암호화 알고리즘은 소인수 분해나, 이산대수 등을 사용한다.","level":3,"id":"5._공개키_암호화_알고리즘은_*소인수_분해*나,_*이산대수*_등을_사용한다._0"},{"heading":"XSS - 크로스사이트 스크립팅 이란?","level":1,"id":"XSS_-_크로스사이트_스크립팅_이란?_0"},{"heading":"<span>- \n\n<span><code>웹페이지에 악의적인 스크립트를 포함</code>시켜 사용자 측에서 실행되게 유도함으로써, 정보유출 등의 공격을 유발할 수 있는 취약점</span></span>","level":2,"id":"-_`웹페이지에_악의적인_스크립트를_포함`시켜_사용자_측에서_실행되게_유도함으로써,_정보유출_등의_공격을_유발할_수_있는_취약점_0"},{"heading":"SSH(Seccure Shell)에 대한 설명","level":1,"id":"SSH(Seccure_Shell)에_대한_설명_0"},{"heading":"1. ssh의 기본 네트워크 포트는 22번을 사용한다.","level":3,"id":"1._ssh의_기본_네트워크_포트는_*22번*을_사용한다._0"},{"heading":"2. 전송되는 데이터는 암호화 된다.","level":3,"id":"2._전송되는_데이터는_암호화_된다._0"},{"heading":"3. 키를 통한 인증은 클라이언트의 공개키를 서버에 등록해야한다.","level":3,"id":"3._키를_통한_인증은_클라이언트의_*공개키를_서버에_등록*해야한다._0"},{"heading":"4. 서로 연결되어 있는 컴퓨터 간 원격 명령 실행이나 셀 서비스 등을 수행한다.","level":3,"id":"4._서로_연결되어_있는_컴퓨터_간_원격_명령_실행이나_셀_서비스_등을_수행한다._0"},{"heading":"필사 오류(Transcription Error)란?","level":1,"id":"필사_오류(Transcription_Error)란?_0"},{"heading":"임의의 한 자리를 잘못 기입해서 발생하는 오류.","level":2,"id":"임의의_한_자리를_잘못_기입해서_발생하는_오류._0"},{"heading":"ex) <code>123456</code>을 <code>123476</code>으로 잘못 기입","level":5,"id":"ex)_`123456`을_`123476`으로_잘못_기입_0"},{"heading":"N-Screen(엔스크린)이란?","level":1,"id":"N-Screen(엔스크린)이란?_0"},{"heading":"PC, TV, 휴대폰에서 원하는 콘텐츠를 끊김없이 자유롭게 이용할 수 있는 서비스이다.","level":2,"id":"PC,_TV,_휴대폰에서_원하는_콘텐츠를_끊김없이_자유롭게_이용할_수_있는_서비스이다._0"},{"heading":"ISO 12207 표준의 기본 생명주기의 주요 프로세스","level":1,"id":"ISO_12207_표준의_기본_생명주기의_주요_프로세스_0"},{"heading":"1. 획득 프로세스","level":3,"id":"1._획득_프로세스_0"},{"heading":"2. 공급 프로세스","level":3,"id":"2._공급_프로세스_0"},{"heading":"3. 개발 프로세스","level":3,"id":"3._개발_프로세스_0"},{"heading":"4. 운영 프로세스","level":3,"id":"4._운영_프로세스_0"},{"heading":"5. 유지보수 프로세스","level":3,"id":"5._유지보수_프로세스_0"},{"heading":"라우팅 프로토콜인 OSPF(Open Shortest Path First)에 대한 설명 중 옳지 않은것?","level":1,"id":"라우팅_프로토콜인_OSPF(Open_Shortest_Path_First)에_대한_설명_중_옳지_않은것?_0"},{"heading":"거리벡터 라우팅 프로토콜은 RIP(Routing Information Protocol)이다.","level":4,"id":"거리벡터_라우팅_프로토콜은_RIP(Routing_Information_Protocol)이다._0"},{"heading":"CBD(Component Based Development) SW개발 표준 산출물 중 분석 단계에 해당하는것?","level":1,"id":"CBD(Component_Based_Development)_SW개발_표준_산출물_중_분석_단계에_해당하는것?_0"},{"heading":"CBD(컴포넌트 기반) SW개발 표준 산출물 중 분석단계에 해당하는 것은 요구사항 정의서이다.","level":4,"id":"CBD(컴포넌트_기반)_SW개발_표준_산출물_중_분석단계에_해당하는_것은_요구사항_정의서이다._0"},{"heading":"<mark>라우터</mark>란?","level":1,"id":"==라우터==란?_0"},{"heading":"서로 다른 네트워크 대역에 있는 호스트를 상호간에 통신할 수 있도록 해주는 네트워크 장비","level":2,"id":"서로_다른_네트워크_대역에_있는_호스트를_상호간에_통신할_수_있도록_해주는_네트워크_장비_0"},{"heading":"개인키(대칭키) 알고리즘, 블록암호화 방식이라고도 한다.","level":1,"id":"개인키(대칭키)_알고리즘,_블록암호화_방식이라고도_한다._0"},{"heading":"1. DES","level":3,"id":"1._DES_0"},{"heading":"2. SEED","level":3,"id":"2._SEED_0"},{"heading":"3. AES - DES의 보안 문제 해결을 위해 NIST에서 개발한 개인키 암호화 알고리즘","level":3,"id":"3._AES_-_*DES의_보안_문제_해결을_위해_NIST에서_개발한_개인키_암호화_알고리즘*_0"},{"heading":"4. ARIA","level":3,"id":"4._ARIA_0"},{"heading":"5. LSFSR","level":3,"id":"5._LSFSR_0"},{"heading":"6. RC4","level":3,"id":"6._RC4_0"},{"heading":"IPSec(IP Security)에 대한 설명","level":1,"id":"IPSec(IP_Security)에_대한_설명_0"},{"heading":"1. 암호화와 복호화 모두 가능한 양방향 암호방식이다.","level":3,"id":"1._암호화와_복호화_모두_가능한_양방향_암호방식이다._0"},{"heading":"2. ESP는 발신자 인증, 데이터 무결성, 기밀성 모두를 보장한다.","level":3,"id":"2._ESP는_발신자_인증,_데이터_무결성,_기밀성_모두를_보장한다._0"},{"heading":"3. 운영모드는 Tunnel모드와 Transport모드로 분류된다.","level":3,"id":"3._운영모드는_Tunnel모드와_Transport모드로_분류된다._0"},{"heading":"4. AH는 발신자 호스트를 인증하고, IP패킷의 무결성을 보장한다.","level":3,"id":"4._AH는_발신자_호스트를_인증하고,_IP패킷의_무결성을_보장한다._0"},{"heading":"소인수 분해나, 이산대수 등 고유의 방법으로 키를 생성하는 암호화 방식?","level":1,"id":"소인수_분해나,_이산대수_등_고유의_방법으로_키를_생성하는_암호화_방식?_0"},{"heading":"<span>- \n\n<span>공개키 암호화 방식</span></span>","level":2,"id":"-_공개키_암호화_방식_0"},{"heading":"해쉬(Hash)기법에 대한 설명","level":1,"id":"해쉬(Hash)기법에_대한_설명_0"},{"heading":"1. 임의의 길이의 입력 데이터를 받아 고정된 길이의 해쉬값으로 변환한다.","level":3,"id":"1._임의의_길이의_입력_데이터를_받아_고정된_길이의_해쉬값으로_변환한다._0"},{"heading":"2. 대표적인 해쉬 알고리즘으로 HAVAL, SHA-1 등이 있다.","level":3,"id":"2._대표적인_해쉬_알고리즘으로_HAVAL,_SHA-1_등이_있다._0"},{"heading":"3. 해쉬 함수는 일방향 함수이다.","level":3,"id":"3._해쉬_함수는_일방향_함수이다._0"},{"heading":"소프트웨어 비용 추정 모델이 아닌것은?","level":1,"id":"소프트웨어_비용_추정_모델이_아닌것은?_0"},{"heading":"PERT는 프로젝트 일정 계획 및 관리에 사용되는 방법론이다.","level":5,"id":"PERT는_프로젝트_일정_계획_및_관리에_사용되는_방법론이다._0"},{"heading":"비용산정 기법 중 <mark>LOC</mark>기법이란?","level":1,"id":"비용산정_기법_중_==LOC==기법이란?_0"},{"heading":"<span>- \n\n<span>S/W 각 기능의 원시 코드 라인수의 비관치, 낙관치, 기대치를 측정하여 예측치를 구하고 이를 이용하여 비용을 산정하는 기법.</span></span>","level":2,"id":"-_S/W_각_기능의_원시_코드_라인수의_비관치,_낙관치,_기대치를_측정하여_예측치를_구하고_이를_이용하여_비용을_산정하는_기법._0"},{"heading":"Salt(솔트)암호화 기법에 대한 설명","level":1,"id":"Salt(솔트)암호화_기법에_대한_설명_0"},{"heading":"<span>- \n\n<span>암호 공격을 막기위해 똑같은 패스워드들이 다른 암호값으로 저장되도록 추가되는 값</span></span>","level":2,"id":"-_암호_공격을_막기위해_똑같은_패스워드들이_다른_암호값으로_저장되도록_추가되는_값_0"},{"heading":"<mark>SSO</mark>(Single Sign On)이란?","level":1,"id":"==SSO==(Single_Sign_On)이란?_0"},{"heading":"<span>- \n\n<span>시스템이 몇 대가 되어도 하나의 시스템에서 인증에 성공하면 다른 시스템에 대한 접근 권한도 얻은 시스템</span></span>","level":2,"id":"-_시스템이_몇_대가_되어도_하나의_시스템에서_인증에_성공하면_다른_시스템에_대한_접근_권한도_얻은_시스템_0"},{"heading":"COCOMO 모형에 대한 설명","level":1,"id":"COCOMO_모형에_대한_설명_0"},{"heading":"1. 보햄이 제안한 것으로, 원시 프로그램의 규모인 LOC(원시 코드 라인 수)에 의한 비용산정 기법이다.","level":3,"id":"1._보햄이_제안한_것으로,_원시_프로그램의_규모인_LOC(원시_코드_라인_수)에_의한_비용산정_기법이다._0"},{"heading":"조직형(Organic Mode) : 중.소규모 소프트웨어. 5만 라인 이하","level":4,"id":"조직형(Organic_Mode)_중.소규모_소프트웨어._5만_라인_이하_0"},{"heading":"반 분리형(Semi-Detached Mode) : 트렌젝션처리 시스템, 운영체제 등. 30만 라인 이하","level":4,"id":"반_분리형(Semi-Detached_Mode)_트렌젝션처리_시스템,_운영체제_등._30만_라인_이하_0"},{"heading":"내장형(Embedded Mode) : 초대형 규모 트렌젝션 처리 시스템 / 미사일 유도 시스템. 30만 라인 이상","level":4,"id":"내장형(Embedded_Mode)_초대형_규모_트렌젝션_처리_시스템_/_미사일_유도_시스템._30만_라인_이상_0"},{"heading":"비대칭 암호화 방식 중, 소수를 활용한 암호화 알고리즘은?","level":1,"id":"비대칭_암호화_방식_중,_소수를_활용한_암호화_알고리즘은?_0"},{"heading":"<span>- \n\n<span>RSA(Rivest Shamir Adleman)</span></span>","level":2,"id":"-_RSA(Rivest_Shamir_Adleman)_0"},{"heading":"암호화 알고리즘에 대한 설명","level":1,"id":"암호화_알고리즘에_대한_설명_0"},{"heading":"대칭 암호 알고리즘","level":2,"id":"대칭_암호_알고리즘_0"},{"heading":"비대칭 암호 알고리즘","level":2,"id":"비대칭_암호_알고리즘_0"},{"heading":"PaaS-TA 파스타 란?","level":1,"id":"PaaS-TA_파스타_란?_0"},{"heading":"<span>- \n\n<span>국내 IT서비스 경쟁력 강화를 목표로 개발되었으며 인프라 제어 및 관리환경, 실행환경, 개발환경, 서비스환경, 운영환경으로 구성되어있는 <mark>개방형 클라우드 플랫폼</mark></span></span>","level":4,"id":"-_국내_IT서비스_경쟁력_강화를_목표로_개발되었으며_인프라_제어_및_관리환경,_실행환경,_개발환경,_서비스환경,_운영환경으로_구성되어있는_==개방형_클라우드_플랫폼==_0"},{"heading":"강제 접근통제(MAC : Mandatory Access Control) 이란?","level":1,"id":"강제_접근통제(MAC_Mandatory_Access_Control)_이란?_0"},{"heading":"<span>- \n\n<span>정보시스템 내에서 어떤 주체가 특정 개체에 접근하려 할 떄 양쪽의 보안 레이블에 기초하여 <mark>높은 보안 수준을 요구하는 정보가 낮은 보안수준의 주체에게 노출되지 않도록</mark> 하는 접근 제어방법.</span></span>","level":4,"id":"-_정보시스템_내에서_어떤_주체가_특정_개체에_접근하려_할_떄_양쪽의_보안_레이블에_기초하여_==높은_보안_수준을_요구하는_정보가_낮은_보안수준의_주체에게_노출되지_않도록==_하는_접근_제어방법._0"},{"heading":"소프트웨어 생명 주기 모델 중 V모델과 관련한 설명","level":1,"id":"소프트웨어_생명_주기_모델_중_V모델과_관련한_설명_0"},{"heading":"1. 요구사항 -&gt; 분석 -&gt; 설계 -&gt; 구현 단계로 수행되며 각 단계를 테스트와 연결하여 표시한다.","level":3,"id":"1._==요구사항_->_분석_->_설계_->_구현==_단계로_수행되며_각_단계를_테스트와_연결하여_표시한다._0"},{"heading":"2. Perry에 의해 제안되었으며, 세부적인 테스트 과정으로 구성되어 신뢰도 높은 시스템을 개발하는데 효과적이다","level":3,"id":"2._Perry에_의해_제안되었으며,_세부적인_테스트_과정으로_구성되어_신뢰도_높은_시스템을_개발하는데_효과적이다_0"},{"heading":"3. 개발 작업과 검증 작업 사이의 관계를 명호가히 들어내 놓은 폭포수 모델의 변형이라고 볼 수 있다.","level":3,"id":"3._개발_작업과_검증_작업_사이의_관계를_명호가히_들어내_놓은_폭포수_모델의_변형이라고_볼_수_있다._0"},{"heading":"4. 폭포수 모델이 산출물 중심이라면, V모델은 작업과 결과의 검증에 초점을 둔다.","level":3,"id":"4._폭포수_모델이_산출물_중심이라면,_V모델은_작업과_결과의_검증에_초점을_둔다._0"},{"heading":"웹 크롤링을 지원하는 가장 대표적인 프레임워크는?","level":1,"id":"웹_크롤링을_지원하는_가장_대표적인_프레임워크는?_0"},{"heading":"<span>- \n\n<span>파이썬의 Scrapy(스크래피)</span></span>","level":2,"id":"-_파이썬의_Scrapy(스크래피)_0"},{"heading":"DES(암호화 알고리즘)의 암호화 블록 단위","level":1,"id":"DES(암호화_알고리즘)의_암호화_블록_단위_0"},{"heading":"<span>- \n\n<span>64비트</span></span>","level":2,"id":"-_64비트_0"},{"heading":"DPI(Deep Packet Inspection)이란?","level":1,"id":"DPI(Deep_Packet_Inspection)이란?_0"},{"heading":"<span>- \n\n<span>OSI 7 Layer전 계층의 프로토콜과 패킷 내부의 콘텐츠를 파악하여 침입시도, 해킹등을 탐지하고 트래픽을 조정하기 위한 패킷 분석 기술</span></span>","level":4,"id":"-_OSI_7_Layer전_계층의_프로토콜과_패킷_내부의_콘텐츠를_파악하여_침입시도,_해킹등을_탐지하고_트래픽을_조정하기_위한_패킷_분석_기술_0"},{"heading":"테일러링(Tailoring)이란?","level":1,"id":"테일러링(Tailoring)이란?_0"},{"heading":"<span>- \n\n<span>프로젝트에 최적화 된 개발 방법론을 적용하기 위해 절차, 산출물 등을 적절히 변경하는 활동.</span></span>","level":5,"id":"-_프로젝트에_최적화_된_개발_방법론을_적용하기_위해_절차,_산출물_등을_적절히_변경하는_활동._0"},{"heading":"<span>- \n\n<span>프로젝트 상황 및 특성에 맞추어 기존의 방법론, 프로세스 등을 수정하는 것.</span></span>","level":4,"id":"-_프로젝트_상황_및_특성에_맞추어_기존의_방법론,_프로세스_등을_수정하는_것._0"},{"heading":"<span>- \n\n<span>예상되는 변화를 충분히 고려하여 진행 필요.</span></span>","level":4,"id":"-_예상되는_변화를_충분히_고려하여_진행_필요._0"},{"heading":"CASE(Computer Aided Software Engineering)이란?","level":1,"id":"CASE(Computer_Aided_Software_Engineering)이란?_0"},{"heading":"<span>- \n\n<span>소프트웨어 개발 과정에서 사용되는 요구 분석, 설계, 구현, 검사 및 디버깅 과정 전체 또는 일부를 컴퓨터와 전용소프트웨어 도구를 사용하여 자동화 하는 것이다.</span></span>","level":4,"id":"-_소프트웨어_개발_과정에서_사용되는_요구_분석,_설계,_구현,_검사_및_디버깅_과정_전체_또는_일부를_컴퓨터와_전용소프트웨어_도구를_사용하여_자동화_하는_것이다._0"},{"heading":"1. 객체지향 시스템, 구조적 시스템 등 다양한 시스템에서 활용되는 자동화 도구이다.","level":3,"id":"1._객체지향_시스템,_구조적_시스템_등_다양한_시스템에서_활용되는_자동화_도구이다._0"},{"heading":"2. 소프트웨어,하드웨어,DB,테스트 등을 통합하여 소프트웨어를 개발하는 환경을 조성한다.","level":3,"id":"2._소프트웨어,하드웨어,DB,테스트_등을_통합하여_소프트웨어를_개발하는_환경을_조성한다._0"},{"heading":"3. 소프트웨어 생명주기의 전체단계를 연결해 주고 자동화 해주는 통합된 도구를 제공한다.","level":3,"id":"3._소프트웨어_생명주기의_전체단계를_연결해_주고_자동화_해주는_통합된_도구를_제공한다._0"},{"heading":"4. 소프트웨어 개발 도구와 방법론이 결합된 것이다.","level":3,"id":"4._소프트웨어_개발_도구와_방법론이_결합된_것이다._0"},{"heading":"그래픽 또한 지원한다.","level":5,"id":"그래픽_또한_지원한다._0"},{"heading":"Putnam모형이란?","level":1,"id":"Putnam모형이란?_0"},{"heading":"<span>- \n\n<span>소프트웨어 생명 주기의 전 과정 동안에 사용될 <mark>노력의 분포를 가정</mark>해주는 모형이다.</span></span>","level":4,"id":"-_소프트웨어_생명_주기의_전_과정_동안에_사용될_==노력의_분포를_가정==해주는_모형이다._0"},{"heading":"간트 차트란?","level":1,"id":"간트_차트란?_0"},{"heading":"<span>- \n\n<span>프로젝트의 각 작업들이 언제 시작하고 언제 종료되는지에 대한 작업 일정을 막대 도표를 이용하여 표시하는 프로젝트 일정표이다.</span></span>","level":4,"id":"-_프로젝트의_각_작업들이_언제_시작하고_언제_종료되는지에_대한_작업_일정을_막대_도표를_이용하여_표시하는_프로젝트_일정표이다._0"},{"heading":"1. 시간선(Time-Line) 차트라고도 한다.","level":3,"id":"1._시간선(Time-Line)_차트라고도_한다._0"},{"heading":"2. 작업경로는 표시할 수 없으며, 계획의 변화에 대한 적응성이 약하다.","level":3,"id":"2._작업경로는_표시할_수_없으며,_계획의_변화에_대한_적응성이_약하다._0"},{"heading":"3. 주관적 수치에 기울어지기 쉽다.","level":3,"id":"3._주관적_수치에_기울어지기_쉽다._0"},{"heading":"프레임워크의 특성?","level":1,"id":"프레임워크의_특성?_0"},{"heading":"1. 모듈화","level":3,"id":"1._모듈화_0"},{"heading":"2. 재사용성","level":3,"id":"2._재사용성_0"},{"heading":"3. 확장성","level":3,"id":"3._확장성_0"},{"heading":"4. 제어의 역전","level":3,"id":"4._제어의_역전_0"},{"heading":"CSMA/CA 란 무엇인가","level":1,"id":"CSMA/CA_란_무엇인가_0"},{"heading":"<span>- \n\n<span>무선 랜에서 데이터 전송 시 <mark>매체가 비어있음을 확인한 뒤</mark> 충돌을 피하기 위해 <mark>일정한 시간을 기다린 후</mark> 데이터를 전송하는 방법</span></span>","level":2,"id":"-_무선_랜에서_데이터_전송_시_==매체가_비어있음을_확인한_뒤==_충돌을_피하기_위해_==일정한_시간을_기다린_후==_데이터를_전송하는_방법_0"},{"heading":"<span>- \n\n<span><mark>IEEE 802.3 LAN</mark> 에서 사용되는 전송 매체 접속 제어방식이다.</span></span>","level":2,"id":"-_==IEEE_802.3_LAN==_에서_사용되는_전송_매체_접속_제어방식이다._0"},{"heading":"SOA(Service Oriented Architecture)서비스지향아키텍처의 계층","level":1,"id":"SOA(Service_Oriented_Architecture)서비스지향아키텍처의_계층_0"},{"heading":"1. 표현 계층","level":3,"id":"1._표현_계층_0"},{"heading":"2. 프로세스 계층","level":3,"id":"2._프로세스_계층_0"},{"heading":"3. 서비스 계층","level":3,"id":"3._서비스_계층_0"},{"heading":"4. 비즈니스 계층","level":3,"id":"4._비즈니스_계층_0"},{"heading":"5. 영속 계층","level":3,"id":"5._영속_계층_0"},{"heading":"라우팅 프로토콜 종류 및 설명","level":1,"id":"라우팅_프로토콜_종류_및_설명_0"},{"heading":"1. 거리 벡터 라우팅 프로토콜(RIP) - IGP에 속함,내부게이트웨이","level":2,"id":"1._거리_벡터_라우팅_프로토콜(RIP)_-_==IGP에_속함==,==내부게이트웨이==_0"},{"heading":"2. 링크 상태 라우팅 프로토콜(OSPF)","level":2,"id":"2._링크_상태_라우팅_프로토콜(OSPF)_0"},{"heading":"SPICE란?","level":1,"id":"SPICE란?_0"},{"heading":"<span>- \n\n<span>ISO/IEC 15504 라고도 한다.</span></span>","level":3,"id":"-_ISO/IEC_15504_라고도_한다._0"},{"heading":"<span>- \n\n<span>소프트웨어 품질 및 생산성 향상을 위해 소프트웨어 <mark>프로세스를 평가</mark>하고 개서하는 국체 표준이다.</span></span>","level":3,"id":"-_소프트웨어_품질_및_생산성_향상을_위해_소프트웨어_==프로세스를_평가==하고_개서하는_국체_표준이다._0"},{"heading":"<span>- \n\n<span>기관에서 지정한 요구조건의 만족여부를 개발 조직이 <mark>스스로 평가</mark>한다.</span></span>","level":3,"id":"-_기관에서_지정한_요구조건의_만족여부를_개발_조직이_==스스로_평가==한다._0"},{"heading":"수행 능력 수준 <code>불수관확예최</code>","level":2,"id":"수행_능력_수준_`불수관확예최`_0"},{"heading":"불완전(0) -&gt; 수행(1) -&gt; 관리(2) -&gt; 확립(3) -&gt; 예측(4) -&gt; 최적화(5)","level":6,"id":"불완전(0)_->_수행(1)_->_관리(2)_->_확립(3)_->_예측(4)_->_최적화(5)_0"},{"heading":"TCP Wrapper란?","level":1,"id":"TCP_Wrapper란?_0"},{"heading":"<span>- \n\n<span>어떤 <em>외부 컴퓨터</em>가 접속되면 <strong>접속 인가 여부를 점검</strong>해서 인가된 경우에는 접속이 허용되고, 그 반대 경우에는 거부할 수 있는 <strong>접근제어 유틸리티</strong> 이다.</span></span>","level":4,"id":"-_어떤_*외부_컴퓨터*가_접속되면_**접속_인가_여부를_점검**해서_인가된_경우에는_접속이_허용되고,_그_반대_경우에는_거부할_수_있는_**접근제어_유틸리티**_이다._0"},{"heading":"세션 하이재킹을 탐지하는 방법","level":1,"id":"세션_하이재킹을_탐지하는_방법_0"},{"heading":"1. 비동기화 상태 탐지","level":3,"id":"1._비동기화_상태_탐지_0"},{"heading":"2. ACK Storm 탐지","level":3,"id":"2._ACK_Storm_탐지_0"},{"heading":"3. 패킷의 유실과 재전송 증가 탐지","level":3,"id":"3._패킷의_유실과_재전송_증가_탐지_0"},{"heading":"4. 예상치 못한 접속의 리셋 탐지","level":3,"id":"4._예상치_못한_접속의_리셋_탐지_0"},{"heading":"네트워크 장비에 대한 설명","level":1,"id":"네트워크_장비에_대한_설명_0"},{"heading":"브라우터(Brouter)","level":2,"id":"브라우터(Brouter)_0"},{"heading":"<span>- \n\n<span>브릿지와 라우터의 기능으 모두 갖추고 있는 네트워크 장비이다.</span></span>","level":4,"id":"-_브릿지와_라우터의_기능으_모두_갖추고_있는_네트워크_장비이다._0"},{"heading":"리피터","level":2,"id":"리피터_0"},{"heading":"<span>- \n\n<span>전송되는 신호가 전송 선로의 특성 및 외부 충격 등의 요인으로 <em>왜곡되거나 약해질 경우 원래의 신호 형태로 재생하여 다시 전송</em>하는 역할.</span></span>","level":4,"id":"-_전송되는_신호가_전송_선로의_특성_및_외부_충격_등의_요인으로_*왜곡되거나_약해질_경우_원래의_신호_형태로_재생하여_다시_전송*하는_역할._0"},{"heading":"브리지","level":2,"id":"브리지_0"},{"heading":"<span>- \n\n<span>LAN과 LAN을 연결하거나, LAN안에서의 컴퓨터 그룹을 연결하는 기능을 수행한다.</span></span>","level":4,"id":"-_LAN과_LAN을_연결하거나,_LAN안에서의_컴퓨터_그룹을_연결하는_기능을_수행한다._0"},{"heading":"<span>- \n\n<span><em>데이터링크 계층</em> 중 <em>MAC계층에서 사용된다</em>.</span></span>","level":4,"id":"-_*데이터링크_계층*_중_*MAC계층에서_사용된다*._0"},{"heading":"스위치","level":2,"id":"스위치_0"},{"heading":"<span>- \n\n<span>LAN과 LAN을 연결하여 더 큰 LAN을 만드드는 장치</span></span>","level":4,"id":"-_LAN과_LAN을_연결하여_더_큰_LAN을_만드드는_장치_0"},{"heading":"<span>- \n\n<span>OSI 7계층 중 <em>데이터링크 계층(2)에서 사용된다.</em></span></span>","level":4,"id":"-_OSI_7계층_중_*데이터링크_계층(2)에서_사용된다.*_0"},{"heading":"라우터","level":2,"id":"라우터_0"},{"heading":"<span>- \n\n<span>LAN과 LAN의 연결 기능에 데이터 전송의 <em>최적경로를 선택할 수 있는 기능</em>을 추가한것</span></span>","level":4,"id":"-_LAN과_LAN의_연결_기능에_데이터_전송의_*최적경로를_선택할_수_있는_기능*을_추가한것_0"},{"heading":"<span>- \n\n<span>서로 다른 LAN이나 LAN과 WAN의 연결도 수행한다</span></span>","level":4,"id":"-_서로_다른_LAN이나_LAN과_WAN의_연결도_수행한다_0"},{"heading":"<span>- \n\n<span>OSI 7계층의 <em>네트워크 계층(3)에 속한다.</em></span></span>","level":4,"id":"-_OSI_7계층의_*네트워크_계층(3)에_속한다.*_0"},{"heading":"루프(폐회로)를 형성하지 않으면서 연결을 설정할 수 있는 알고리즘","level":1,"id":"루프(폐회로)를_형성하지_않으면서_연결을_설정할_수_있는_알고리즘_0"},{"heading":"<span>- \n\n<span>STA(Spanning Tree Algorithm)</span></span>","level":2,"id":"-_STA(Spanning_Tree_Algorithm)_0"},{"heading":"SAN(<strong>Storage</strong> Area Network)란?","level":1,"id":"SAN(**Storage**_Area_Network)란?_0"},{"heading":"1. 네트워크상에 광채널 스위치의 이점인 고속 전송과 장거리 연결 및 멀티 프로토콜 기능을 활용","level":3,"id":"1._네트워크상에_광채널_스위치의_이점인_*고속_전송*과_**장거리_연결_및_멀티_프로토콜_기능을_활용**_0"},{"heading":"2. 각기 다른 OS를 가진 여러 기종들이 네트워크상에서 동일 저장장치의 데이터를 공유하게 함으로써, 여러개의 저장장치나 백업장치를 단일화시킨 시스템","level":3,"id":"2._**각기_다른_OS를_가진_여러_기종**들이_네트워크상에서_동일_저장장치의_**데이터를_공유**하게_함으로써,_**여러개의_저장장치나_백업장치를_단일화**시킨_시스템_0"},{"heading":"nmap 이란??","level":1,"id":"nmap_이란??_0"},{"heading":"<span>- \n\n<span>서버에 열린 포트 정보를 스캐닝해서 보안 취약점을 찾는데 사용하는 도구이다.</span></span>","level":2,"id":"-_서버에_열린_포트_정보를_스캐닝해서_보안_취약점을_찾는데_사용하는_도구이다._0"},{"heading":"Bell-LaPadula Model(벨-라파듈라 모델)에 대한 설명","level":1,"id":"Bell-LaPadula_Model(벨-라파듈라_모델)에_대한_설명_0"},{"heading":"1. 군대의 보안레벨처럼 정보의 기밀성에 따라 상하 관계가 구분된 정보를 보호하기 위해 사용","level":3,"id":"1._군대의_보안레벨처럼_정보의_기밀성에_따라_상하_관계가_구분된_정보를_보호하기_위해_사용_0"},{"heading":"2. 자신의 권한보다 낮은 보안 레벨 권한을 가진 경우에는 높은 보안 레벨의 문서를 읽을 수 없고, 자신보다 권한레벨이 낮은 문서만 읽읈 수 있다.","level":3,"id":"2._자신의_권한보다_낮은_보안_레벨_권한을_가진_경우에는_높은_보안_레벨의_문서를_읽을_수_없고,_자신보다_권한레벨이_낮은_문서만_읽읈_수_있다._0"},{"heading":"3. 자신의 권한보다 높은 보안 레벨의 문서에는 쓰기가 가능하지만, 보아레벨이 낮은 문서의 쓰기 권한은 제한한다.","level":3,"id":"3._자신의_권한보다_높은_보안_레벨의_문서에는_쓰기가_가능하지만,_보아레벨이_낮은_문서의_쓰기_권한은_제한한다._0"},{"heading":"Secure OS의 보안 기능","level":1,"id":"Secure_OS의_보안_기능_0"},{"heading":"1. 식별 및 인증","level":3,"id":"1._식별_및_인증_0"},{"heading":"2. 임의/강제적 접근 통제","level":3,"id":"2._임의/강제적_접근_통제_0"},{"heading":"3. 객체 재사용 보호","level":3,"id":"3._객체_재사용_보호_0"},{"heading":"4. 완전한 조정","level":3,"id":"4._완전한_조정_0"},{"heading":"5. 신뢰 경로","level":3,"id":"5._신뢰_경로_0"},{"heading":"6. 감사 및 감사기록 축소","level":3,"id":"6._감사_및_감사기록_축소_0"}],"links":["?query=tag:%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC","?query=tag:%ED%95%84%EA%B8%B0","?query=tag:%EC%A0%95%EB%A6%AC","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#_0"],"author":"","coverImageURL":"","fullURL":"study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html","pathToRoot":"../../..","attachments":[],"createdTime":1739783043089,"modifiedTime":1739940403179,"sourceSize":21274,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 5과목 - 정보시스템 구축관리.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"study/프로그래밍/☕java-,-oop.html":{"title":"☕JAVA , OOP","icon":"","description":"<a href=\".?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\".?query=tag:Java\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Java\">#Java</a> <a href=\".?query=tag:OOP\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#OOP\">#OOP</a>- 컴파일 다형성\n- 이름이 같지만, 매개변수의 타입/개수/순서 를 다르게 정의하여 사용하는 방법\n- 어떤 메서드가 호출될지 컴파일 시점에서 결정\n- 코드를 직관적이게 만드는데 사용\n- 런타임 다형성\n- 부모클래스 또는 인터페이스에 정의된 메서드를 하위 클래스에서 재정의하여 사용하는 방법\n- 어떤 메서드가 호출될지 런타임 시점에 결정된다.\nMap&lt;String, Integer&gt; map1 = new HashMap&lt;&gt;();\nMap&lt;String, Integer&gt; map2 = new TreeMap&lt;&gt;();\n해당 형태로 map1 / 2를 구현했다면.\n객체 타입은 각각 HashMap/TreeMap 이 되며,\n변수 타입은 모두 Map이 된다.\n- 즉 map1.add / map2.add 등 Map인터페이스가 가진 함수만을 사용할 수 있으며,\nHashMap이나 TreeMap가 가진 고유메서드는 사용할 수 없다.\n하지만, 오버라이딩(런타임 다형성)으로 재정의한 각각의 메서드로 해당 동작이\n구현체의 특성에 맞게 실행되게 된다.Java는 다중 상속을 지원하지 않는다.(부모가 2명 이상인것)\n다중 상속 처럼 여러개를 상속받을 수 있다. 부모의 메서드를 사용하며, 동작이 의도대로 흘러가도록 강제할 수 있으나, 구현은 자식 클래스에서 하기때문에 결합도를 낮출 수 있다. 상속은 부모 클래스의 내부 구현에 대해 상세히 알아야 하기 때문에, 자식과 부모 사이의 결합도가 높아질 수 밖에 없다.\n또한, 부모의 쓸모없는 기능까지 모두 받게 될 가능성이 있다.\n부모 클래스가 수정되면, 자식클래스도 동시에 수정해야하는 경우가 생긴다.\n단일 상속만 가능하기 때문에, 결국 인터페이스를 또 사용하게 된다. 합성은 구현에 의존하지 않는 점에서 상속과 다르다. 합성을 이용했을 때는, 객체의 내부는 공개되지 않고 인터페이스를 통해 코드를 재사용하기 때문에,\n구현에 대한 의존성을 인터페이스에 대한 의존성으로 변경하여 결합도를 낮출 수 있다.\n합성 관계는 실행 시점에 동적으로 변경될수 있다.(런타임) public class Phone { private RatePolicy ratePolicy; // 클래스 합성 private List&lt;Call&gt; calls = new ArrayList&lt;&gt;(); // 클래스 합성 public Phone(RatePolicy ratePolicy) { this.ratePolicy = ratePolicy; } public List&lt;Call&gt; getCalls() { return Collections.unmodifiableList(calls); }\n} 객체지향 설계시 지켜야 하는 5가지 원칙들의 앞글자를 딴것이다.\n순서는 노상관이다.\n책임 = 기능 이다. 수정시 영향도를 낮추는 주요한 원칙이다.\n- 추상화 사용을 통한 관계를 구축하기를 권장하는 의미이다.\n- 추상클래스,인터페이스를 통한 관계를 구축하여 확장은 쉽고, 변경에는 영향도가 없어지도록 분리해라?\n- 코드에는 문제가 없더라도, 부모타입의 설계 목적에도 부합하도록 설계해라. -&gt; 부모의 동작의도대로 흘러가도록 설계해라\n- Map a = new HashMap(); 같이 구현해서, 사용해도 문제 없도록 하는거다\n- &gt; 변수는 Map타입으로, Map메서드만 사용가능하지만 객체는 HashMap이기 때문에 각각의 기능으로 수행되고, 수정시에도 Map을 상속받는 다른 클래스로 변경이 쉬워진다.\n- 인터페이스의 단일책임과 비슷하다. 기능별로 잘 분리하고, 수정을 최소화할수 있도록 처음부터 생각하라.\n- 리스코프 치환의 원칙을 따라 설계했다면, 의존성 역전의 원칙을 따르기 쉬워진다.\n- 의존관계를 맺을때, 변화기 쉬운것 보다, 변화하기 어려운 것에 의존하라는 것이다.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"오버로딩 / 오버라이딩","level":1,"id":"오버로딩_/_오버라이딩_0"},{"heading":"오버로딩","level":2,"id":"오버로딩_0"},{"heading":"오버라이딩","level":2,"id":"오버라이딩_0"},{"heading":"상속과 합성","level":1,"id":"상속과_합성_0"},{"heading":"상속의 개념","level":4,"id":"상속의_개념_0"},{"heading":"<span>- \n\n<span>extends : 부모에서 선언 및 전의를 모두 마치며, 자식은 메서드 / 변수를 그대로 사용 가능한 형태</span></span>","level":5,"id":"-_extends_부모에서_선언_및_전의를_모두_마치며,_자식은_메서드_/_변수를_그대로_사용_가능한_형태_0"},{"heading":"<span>- \n\n<span>impliments : interface구현. 부모 객체는 선언만 하며, 정의는 자식에서 오버라이딩 하여 사용하는 형태</span></span>","level":5,"id":"-_impliments_interface구현._부모_객체는_선언만_하며,_정의는_자식에서_오버라이딩_하여_사용하는_형태_0"},{"heading":"<span>- \n\n<span>abstract : extends와 impliments의 혼합. extends는 하되, 부모의 몇 개는 추상 메서드로 구현되어있는 형태</span></span>","level":5,"id":"-_abstract_extends와_impliments의_혼합._extends는_하되,_부모의_몇_개는_추상_메서드로_구현되어있는_형태_0"},{"heading":"상속의 단점","level":2,"id":"상속의_단점_0"},{"heading":"'합성' 이란?","level":2,"id":"'합성'_이란?_0"},{"heading":"결론은 다형성을 이용하고 싶을때, 부모클래스를 정확히 이해하고 그대로 계승할것이 아니라면, extends 대신 impliments를 사용하여 결합도를 낮추는 것이 좋고, 그 외 모든 경우네는 <mark>합성</mark>을 이용하도록 권고하고있다.","level":4,"id":"결론은_다형성을_이용하고_싶을때,_부모클래스를_정확히_이해하고_그대로_계승할것이_아니라면,_extends_대신_impliments를_사용하여_결합도를_낮추는_것이_좋고,_그_외_모든_경우네는_==합성==을_이용하도록_권고하고있다._0"},{"heading":"객체지향설계 5원칙 S.O.L.I.D","level":1,"id":"객체지향설계_5원칙_S.O.L.I.D_0"},{"heading":"이녀석들은 뭐하는 애들인가","level":2,"id":"이녀석들은_뭐하는_애들인가_0"},{"heading":"1. 단일 책임의 원칙 - 클래스 하나에 너무 많은 책임을 넣지마라. 근데 기준은 너가 정한다.","level":3,"id":"1._단일_책임의_원칙_-_클래스_하나에_너무_많은_책임을_넣지마라._근데_기준은_너가_정한다._0"},{"heading":"2. 개방 폐쇄의 원칙 - 확장에는 열려있게, 변경에는 닫혀있게 설계해라.","level":3,"id":"2._개방_폐쇄의_원칙_-_확장에는_열려있게,_변경에는_닫혀있게_설계해라._0"},{"heading":"3. 리스코프 치환의 원칙 - 하위타입은 언제나 상위타입으로 전환이 가능해야한다.","level":3,"id":"3._리스코프_치환의_원칙_-_하위타입은_언제나_상위타입으로_전환이_가능해야한다._0"},{"heading":"4. 인터페이스 분리의 원칙 - 인터페이스를 기능별로 잘 분리하고, 수정하지 말아라","level":3,"id":"4._인터페이스_분리의_원칙_-_인터페이스를_기능별로_잘_분리하고,_수정하지_말아라_0"},{"heading":"5. 의존성 역전의 원칙 - 어떤 클래스를 참조할때, 직접참조하지 말고 상위 인터페이스나 추상클래스를 참조해라.","level":3,"id":"5._의존성_역전의_원칙_-_어떤_클래스를_참조할때,_직접참조하지_말고_상위_인터페이스나_추상클래스를_참조해라._0"}],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:Java","?query=tag:OOP"],"author":"","coverImageURL":"","fullURL":"study/프로그래밍/☕java-,-oop.html","pathToRoot":"../..","attachments":[],"createdTime":1739844224869,"modifiedTime":1739940343419,"sourceSize":36011,"sourcePath":"study/프로그래밍/☕JAVA , OOP.md","exportPath":"study/프로그래밍/☕java-,-oop.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"study/프로그래밍/🍃-spring.html":{"title":"🍃 Spring","icon":"","description":"<a href=\".?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\".?query=tag:SPRING\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SPRING\">#SPRING</a> <a href=\".?query=tag:FRAMWORK\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#FRAMWORK\">#FRAMWORK</a>1. 컴파일러에게 코드작성 문법에러를 체크하도록 정보 제공\n2. 빌드나 배치시 코드를 자동으로 생성할수 있도록 정보 제공\n3. 실행시 특정 기능을 수행하도록 정보 제공\n- Spring컨테이너에 의해 관리되는 재사용 가능한 컴포넌트이다.\n즉 스프링이 관리하는 자바 객체 이다.\n- getter/setter를 포함한다.\n이때 객체가 생성된다면 싱글톤 패턴으로 생성이 된다. ** Spring Framework의 도움을 받으면 단점을 줄이고 장점을 사용할 수 있다.\n*@Controller / @Service / @Repository 등의 어노테이션을 포함한다.\n싱글톤패턴?\n인스턴스(객체)가 오직 한개만 생성된다\n장점 : 메모리낭비를 방지한다.\n이미 생성된 객체를 재사용하기 때문에 속도가 빠르며\n전역으로 사용되는 인스턴스이기 때문에 데이터공유가 쉽다.\n단점 : 테스트에 어려움이있다.\n자식클래스를 만들수없다.\n내부의 상태를 변경하기 어렵다. - 컴포넌트와 컨트롤러 모두 Bean객체를 등록하지만\n컨트롤러는 url과 클래스를 이어주는 역할을 할 수 있다.\nJAVA오브젝트로 자동 변환해준다. (Controller기준 받는 입장) 프론트앤드에서 Ajax요청시 JSON형식으로 값이 넘어오는데,\n이 JSON형식을 받을때 사용하는 어노테이션이다. 자동으로 자바객체로 바꿔준다.\n- 외부API에서 name으로 넘긴 값을 String name에 저장함.\n- Autowired/생성자/setter 이렇게 총 3가지 방법으로 의존성을 주입받을 수 있다.\n- 경로변수는 {id}로 둘러싸인 값을 의미한다.\n- 주로 상세조회, 수정, 삭제 등의 작업에서 리소스 식별자로 사용된다.\n하이버네이트가 오브젝트를 대신 갱신한다.\n*빌더 패턴이란? : 생성자에 파라미터를 주입하여 생성하는것이 아닌, 별도의 Builder를 두어서 객체를 생성하는것을 말한다.\n생성자가 없는경우 : 모든 맴버 변수를 파라미터로 받는 기본 생성자 생성\n생성자가 있는 경우 : 따로 생성자를 생성하지 않음\n@Getter/@Setter/@ToString/@EqualsAndHashCode/@RequiredArgsConstructor를 자동으로 적용시켜준다.\n@NonNull이나 final이 붙은 필드값 들에 대해 생성자를 자동으로 생성해준다. ( @Autowired를 사용하지 않고 의존성주입이 가능하다)\n해당 어노테이션을 사용하면 클래스가 의존하고 있는 필드를 간단하게 초기화할 수 있다.\n해당 어노테이션을 사용하면 클래스의 모든 필드값을 한 번에 초기화할 수 있다.\n해당 어노테이션을 사용하면 클래스에 명시적으로 선언된 생성자가 없더라도 인스턴스를 생성할 수 있다. 개발자가 실수로 클래스의 필드 중 하나의 필드에 대한값 설정을 누락 시킬수도 있어, 객체는 불완전한 상태가 되어버린다.\n이를 방지하고자 모든 필드값을 가지도록 강제하고 싶다면, AccessLevel.PROTECTED 속성을 부여해줘 해결할 수 있다.\n다음과 같은 속성을 부여해주면, 기본 생성자의 접근 제어가되어 IDE단계에서 누락을 방지할 수 있다.\n- equals는 두 객체의 내용이 같은지, 동등성을 비교하는 연산자이다.\n- hashcode는 두 객체가 같은 객체인지, 동일성을 비교하는 연산자 이다. 생성자의 파라미터가 많은 경우 가독성이 떨어진다. 빌더패턴으로 생성하는 경우 각 값들이 함수로 셋팅이되고, 각각 무슨값들이 어떠한 것을을 의미하는지 파악하기가 수월하다.\nex)\nBag bag = new Bag(\"name\", 1000, \"memo\", \"20\", \"30\");\nvs\nBag bag = Bag.builder()\n,name(\"name\")\n,money(1000)\n,memo(\"memo\")\n,won(20)\n,dolor(30)\n,build(); 어떠한 값을 먼저 넣더라도 상관없다(순서x) 생성자의 경우 정해진 파라미터대로 값을 입력해야 정해진 값에 매핑이 되지만, 빌더패던의 경우 필드 이름을 기준으로 값을 삽입하게 때문에 순서를 생각하지 않아도 된다. @NoArgsConstructor로 기본 생성자의 생성을 방지하고, @Builder를 이용하여 객체의 생성에 유연성을 준다.\n이때, 이 2개의 어노테이션을 함께 사용하기 위해서는 @AllArgsConstructor 어노테이션이 필요하다.\n이유 : @Build는 위에서 설명한 바와 같이 생성자가 없다면 모든 파라미터를 갖는 생성자를 생성하지만, @NoArgsConstructor로 인해 아무런 생성자를 생성하지 않는다. 이때 build메서드를 사용하여 모든파라미터를 받는 메서드(생성자)를 동작시키면 매칭되는 생성자가 없기때문에 오류를 야기한다.\n따라서 @AllArgsConstructor 어노테이션을 추가로 작성하여 해결할 수 있다.더 깔끔한 방법으로는 직접 생성자를 생성해주고, 빌더 패턴에서 해당 생성자를 사용하도록 하는 방법도 있다.- 위 두개의 어노테이션을 편리하게 생성자를 자동으로 생성해 주지만, 주의를 요할 필요가 있다. 어떠한 클래스에서 순서대로 인자를 받는 생성자가 있다고 했을 때, 개발자가 임의로 순서를 변경할 경우, 리펙토링은 전혀 작동하지 않고, lombok이 개발자가 인지하지 못하는 사이에 순서에 맞춰 두 필드를 변경해 버린다.\n그렇기 때문에 순서의 구애받지 않는 @Builder 어노테이션을 사용한는 것을 권장하고 있다. Mutable(변경가능한)객체에 아무런 파라미터 없이 그냥 사용하는 경우에 문제가 발생할 수 있다. 동일한 객체임에도 불구하고 Set으로 필드값을 변경하게 되면, hashCode가 변경되면서 찾을 수 없게되는 부분이 있다. - 위에서 설명한 @RequiredArgsConstructor 및 @EqualsAndHashCode를 포함하고 있기 때문에 사용을 피하는 것이 좋다.\n- 불변 클래스를 생성해주는 @Value또한, @EqualsAndHashCode와 @AllArgsConstructor를 포함하고 있기 때문에 사용을 피하는것이 좋다. - 불변클래스 이기 때문에 @EqualsAndHashCode는 문제가 되지 않지만, AllArgsConstructor가 문제를 일으킬 가능성이 있다.\n- 두가지 모두 브라우저 저장 장소이다.\n주로, 휘발성 데이터를 저장할 목적을 갖고있다. @Component public class Controller{ @Autowired private Service servic ... }\n- 단일책임의 원칙 위반\n- 의존성을 주입하기 쉽기 때문에, @Autoqwired아래에 개수 제한없이 추가할 수 있다.\n- 이때, 하나의 class가 많은 책임을 갖고, 순환참조가 이뤄질 수도 있기 때문에\n의존성이 높아져, 사용을 피하는것이 좋다. @Component public class Controller{ private Service servic @Autowired private void setService(Service servic){ this.service = service; } }\n선택적인 의존성을 사용할때 유용하다.\n스프링 3.x 에서는 수정자 주입을 권장하고있다.- 수정자 주입을 사용하게 되면, service구현제를 주입하지 않아도 controller객체는 생서이 가능하기때문에 널포인터익셉션이 발생할 가능성이 있다.\n주입이 필요한 객체가 주입되지 않아도 얼마든지 객체를 생성할 수 있다는것이 문제다. @Component public class Service{ private DAO dao; //생성자 @Autowired private Service(DAO dao){ this.dao = dao; } } @Component public class Controller{ private final Service servic = new Service( new DAO( ) ); }\n- Spring Framework 에서 권장하는 방법으로, 필수적으로 사용해야하는 의존성 없이는 객체를 만들지 못하도록 강제할 수 있기\n때문에 사용을 권장하고 있다.\n- Spring 4.3 버전 이후부터는 Class를 완벽하게 DI Framework로 부터\n분리할 수 있다.\n- 단일 생성자에 한해서 @Autowired를 붙이지 않아도 된다.\n- 필드 주입과 수정자 주입은 final로 선언할 수 없지만, 생성자 주입은 final로 필드 객체를 선언하여 런타임에 불변성을 보장한다.\n- 앞서 설명한 필드 주입의 모든 단점을 보완할 수 있다.\n하지만 실무에서는 필드 주입을 주로 사용한다.\n이유 : 가장 구현하기 쉽고, 읽기 편하기 때문이다.Spring에서의 데이터 검증(Validation)은 여러 계층에 거쳐서 발생한다.\n여기서, 가장 기본적인 검증 방법은 Bean Validation이다.\n'필드'에 특정 어노테이션을 적용하여 필드가 갖는 제약 조건을 정의하는 구조로 이루어진 검사다.\nvalidator가 그 클래스로 생성된 객체의 유효성 여부를 확인한다.\n이때, 어떠한 비즈니스로직에 대한 검증이 아닌, 객체 자체 필드에 대한 검증을 한다. @RestController @AllArgsConstructor public class BookController { private BookService bookService; @PostMapping(\"/books\") public void save(@RequestBody @Valid AddBookRequestDto addBookRequestDto, BindingResult bindingResult) { if(bindingResult.hasErrors()) { bindingResult.getAllErrors() .forEach(objectError-&gt;{ System.err.println(\"code : \" + objectError.getCode()); System.err.println(\"defaultMessage : \" + objectError.getDefaultMessage()); System.err.println(\"objectName : \" + objectError.getObjectName()); }); return; } bookService.save(addBookRequestDto.toEntity()); }\n-&gt; 여기서@Valid 어노테이션이 Request에 있는 방인된 객체(dto)의 유효성을 확인하고\n유효하지 않은객체라면 BindingResult 파라미터에 들어가게 된다.그렇다면, @PathVariable과 @RequestParam은 어떻게 유효성 검사를 진행할까? 클래스에 @Validated 어노테이션을 등록해 주면 된다.\n@RestController\n@Validated\npublic class UserController {\n} - Entity와 관련된 코드들은 많은데 비해 Dto의 경우는 상대적으로 적다.\n그런 상황에서 Entity의 변경가능성은 Dto의 비해서 또 적다.\n만약 Entity를 Request나 Respons에 사용하게 된다면 변경 가능성이 높아지고,\n동시에 같이 변경되는 코드들이 늘어나기 때문에 코드 유지보수를 생각했을때 분리하는것이 옳다.\n- 엔티티 매니저는 DB커넥션처럼 사용된다. 즉, 엔티티매니저를 절대 공유해서는 안된다.\n하나의 스레드에서만 사용해야하며, 사용이 끝나면 반납해야한다.\n그 이유는 트렌젝션 단위로 엔티티매니저를 사용하기 때문이다.\n여러 쓰레드가 동시에 사용하게 된다면 영속성 과 DB간의 데이터동기화가 깨지게 되기 때문이다.\n- 저장 프로시저는 각 DBMS에서 제공하는 기능으로, SQL문을 저장해놓고, 필요할 때마다 호출해서 사용하는 프로그래밍 기능이다. SQL의성능을 향상시킬수 있다. SP를 실행하게 되면 최적화, 컴파일 단계를 거쳐, 결과가 캐시에 저장되게 되는데,\n이 후 해당 SP를 실행하게 되면 캐시에 있는것을 가져와 사용하므로 실행속도가 빠르다. 유지보수 및 재활용 측면에서 유리하다. 응용프로그램 내에서 직접 SQL문을 호출하지않고 SP이름을 호출하도록 설정하면\nSP파일만 수정하면 되기때문에 유지보수와 재활용 측면에서 유리하다 보안이 강화될 수 있다. 사용자별로 테이블 권한을 부여하는것이 아닌, SP에만 접근 권한을 주는 방식으로 보안을 강화할 수 있다.\n실제 테이블에 접근하여 조작하는것이 위험하기 때문에 개발자에게는 SP권한만 주는 방식을 많이 사용한다. 또한, 일반적인 쿼리들은 Where의 조건이 조금만 달라져도, 최적화 컴파일을 다시 수행하여야 하지만,\n함수 형태의 SP로 생성하게 되면 매개변수만 변경하여 성능적인 측면을 크게 높일 수 있다.1. DB에서 SP를 생성한다( 미리 작성되어있는 쿼리 모음 )\n2. SP의 리턴값을 저장하는 Entity클래스(@NamedStoredProcedureQuery어노테이션)으로 연결함.\n3. Repository에서 프로시저 객체를 생성한다. 이때, 2.에서 생성한 프로시저JPA의 파라미터를 설정한 후 execute한다.\n궁금한점 : 저장 프로시저를 사용할경우 Entity는 테이블명으로 class와 연결하지 않아도 괜찮은것인가?\n@NamedStoredProcedureQuery어노테이션을 Entity에 적용하면 DBMS에 정의 되어있는 SP(저장 프로시저)\n와 연동하여 사용할 수 있다. String username = \"java\"; String jpql = \"select m from Member m where m.username = :username\"; List&lt;Member&gt; result = em.createQuery(query, Member.class).getResultList()\njpql이란 JPA의 일부로, 쿼리를 Table이 아닌 객체 기준으로 작성하는 객체지향 쿼리 언어 이다.문제점 : String형태 이기 때문에 개발자 의존적인 형태를 띈다.\n컴파일 단계에서 Type-Check가 불가능하다.\n런타임 단계에서 오류가 발생한다.(장애 리스크가 증가한다)\tString username = \"java\"; List&lt;Member&gt; result = queryFactory .select(member) .from(member) .where(usernameEq(username)) .fetch();\nQueryDSL은 해당 문제를 해결하기 위해서 나온 기능이다.장점 : 문자가 아닌 코드로 쿼리를 작성할 수 있어 컴파일 시점에 문법오류 확인 가능.\nIDE의 자동완성 기능의 도움을 받을 수 있다.\n복잡한 쿼리나 동적 쿼리 작성이 편하다.\n쿼리 작성시 제약조건 등 메서드를 추출해서 재사용할 수 있다.- 두 클래스 모두 JPA에서 동적쿼리를 제작할 때 사용한다.\nBooleanBuilder는 if문을 각 데이터 조건에 맞게 코드로 작성할 수 있도록 도와주는 역할을 한다.\nBooleanExpression 는 메서드를 생성하여 where절 안에서 호출하여 구현할 수 있다.\n메서드 안에서 where절로 null이 반환되면 해당 조건이 무시되기 때문에 동적쿼리가 가능하다.\n(모든 조건이 NULL을 반환하면 전체 엔티티를 불러오는 점을 주의하자)\n메서드는 재사용이 가능하고, 메서드들 끼리 재조합도 가능하기 때문에 유지보수나, 재활용에 유리하다.*동적쿼리 - 실행시점에서, 사용자나 프로그램의 사정에따라 쿼리의 조건이나 구조를 동적으로 결정할때 사용.- SQL문법과 유사하게 복잡한 쿼리를 제작할 수 있게 도와주는 SPRING의 JPA지원 클래스이다.\nex) private RemainDto firstList(DashBoardModel model) { return factory .select( Projections.fields( RemainDto.class, cfProductInvest.amount.sum().coalesce(0L).as(\"total\"), new CaseBuilder() .when(cfProduct.category.eq(\"2\")) .then(cfProductInvest.amount) .otherwise(0L).sum().coalesce(0L).as(\"estate\"), new CaseBuilder() .when(cfProduct.category.ne(\"2\")) .then(cfProductInvest.amount) .otherwise(0L).sum().coalesce(0L).as(\"noneEstate\") ) ) .from(cfProductInvest) .leftJoin(cfProduct) .on(cfProductInvest.productIdx.eq(cfProduct.idx)) .leftJoin(g5Member) .on(cfProductInvest.memberIdx.eq(g5Member.mbNo)) .where( g5Member.mbId.eq(model.getMbId()), cfProductInvest.investState.eq(\"Y\") ) .fetchOne(); }\n- 스프링배치는 엔터프라이즈 시스템의 강력한 배치 어플리케이션을 개발할 수 있도록 설계된 배치프레임워크이다.\n- 일괄처리(Batch Processing), 분산처리 작업을 효율적으로 처리할 수있는 기능 제공.\n- 로깅/추적, 트렌잭션관리, 작업 처리통계, 작업재시작, 리소스관리 등 대용량 레코드 처리에 필수적인 기능을 제공\n- SpringBatch는 JobRepository로 동작하는데, 여기에 Job / JobLauncher / Step이 포함되어있다. SpringBatch는 대량의 데이터를 일괄적으로 처리할 뿐\n특정 주기마다 자동으로 돌아가는 스케줄링 기능은 없다.\n단지, 스케줄러와 함계 사용할 수 있도록 설계되어있을 뿐이다.\n그렇기 때문에 스케줄링 라이브러리인 Quartz라이브러리를 추가하여 같이 사용한다.\n독립적으로 실행할 수 있는 고유하며 순서가 지정된 스텝의 목록\n애플리케이션 실행시 Job으로 인식되는 bean들이 자동으로 실행된다.\n1개 이상의 Step을 포함하여 원하는 동작을 실행시킬 수 있다\n배치 처리 과정 중 전체 계층의 최상단에 위치도 job의 구성요소로 자체적인 입력/출력/처리를 가질 수 있다.\ntasklet 또는 Chunk기반 처리를 포함하여 step안에서 수행될 기능들을 명시할 수 있다.\n트렌젝션은 step내에서 이루어진다. 때문에, 독립되도록 의도적으로 설계된 것이다. Step의 작업 단위를 Tasklet으로 정의\n주로 간단한 작업(단일 데이터 처리, 파일 삭제 등)에 적합하다.\n@Component\npublic class SimpleTasklet implements Tasklet { @Override public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception { System.out.println(\"Tasklet 방식으로 작업 수행\"); return RepeatStatus.FINISHED; }\n} @Bean\npublic Step step1(StepBuilderFactory stepBuilderFactory) { return stepBuilderFactory.get(\"step1\") .tasklet(new SimpleTasklet()) .build();\n} @Bean\npublic Job job(JobBuilderFactory jobBuilderFactory, Step step1) { return jobBuilderFactory.get(\"job\") .start(step1) .build();\n} 대량 데이터를 일정 크기(chunk)로 나누어 처리한다.\nReader / Processor / Writer로 구성된다.\n@Bean\npublic FlatFileItemReader&lt;String&gt; reader() { return new FlatFileItemReaderBuilder&lt;String&gt;() .name(\"fileReader\") .resource(new ClassPathResource(\"input.txt\")) .lineMapper(new DefaultLineMapper&lt;String&gt;() { { setLineTokenizer(new DelimitedLineTokenizer()); setFieldSetMapper(new PassThroughFieldSetMapper()); } }) .build();\n} @Bean\npublic ItemProcessor&lt;String, String&gt; processor() { return item -&gt; \"Processed \" + item;\n} @Bean\npublic FlatFileItemWriter&lt;String&gt; writer() { return new FlatFileItemWriterBuilder&lt;String&gt;() .name(\"fileWriter\") .resource(new FileSystemResource(\"output.txt\")) .lineAggregator(new PassThroughLineAggregator&lt;&gt;()) .build();\n} @Bean\npublic Step step(StepBuilderFactory stepBuilderFactory) { return stepBuilderFactory.get(\"step\") .&lt;String, String&gt;chunk(10) .reader(reader()) .processor(processor()) .writer(writer()) .build();\n} @Bean\npublic Job job(JobBuilderFactory jobBuilderFactory, Step step) { return jobBuilderFactory.get(\"job\") .start(step) .build();\n} 잡 리스너를 이용해서 스프링batch 생명주기의 여러로직을 추가할 수 있다.\nex) beforeJob , afterJob 등등\n=&gt; 스케줄러는 Jenkins에서 SSH스크립트를 통해 주기적으로 실행한다. Controller에 POST주소가 맵핑되어있는 이유는 테스트로 직접 실행하기 위함이다.\nTasklet 방식과 Chunk 방식 모두 사용 가능하지만, 보통 Chunk방식에서 사용한다. 대량 데이터를 효율적으로 처리하기 위해 데이터를 여러 개의 작은 조각(Partition)으로 나눠 병렬적으로 처리하는 기술입니다. Spring Batch에서 파티셔닝은 마스터-슬레이브 패턴을 사용하며, 마스터는 작업을 분할하고 슬레이브는 각각의 분할된 작업을 수행합니다.\nimport org.springframework.batch.core.partition.support.Partitioner;\nimport org.springframework.batch.item.ExecutionContext;\nimport java.util.HashMap;\nimport java.util.Map; public class RangePartitioner implements Partitioner { @Override public Map&lt;String, ExecutionContext&gt; partition(int gridSize) { Map&lt;String, ExecutionContext&gt; partitions = new HashMap&lt;&gt;(); int min = 1; // 데이터베이스 ID의 최소값 int max = 5; // 데이터베이스 ID의 최대값 int targetSize = (max - min) / gridSize + 1; // 각 Partition의 범위 크기 int start = min; int end = start + targetSize - 1; for (int i = 0; i &lt; gridSize; i++) { ExecutionContext context = new ExecutionContext(); context.putInt(\"minId\", start); // 시작 ID context.putInt(\"maxId\", end); // 종료 ID partitions.put(\"partition\" + i, context); start += targetSize; end += targetSize; } return partitions; }\n} 데이터베이스에 100개의 레코드가 있음.\ngridSize = 4: 데이터를 4개의 Partition으로 나눔.\nchunkSize = 10: 각 Partition에서 데이터를 10개씩 읽어 처리.\n스레드 풀 크기 = 4: 4개의 Partition이 동시에 실행 가능.\n코드가 여러줄 나올거같진 않아서 방식은\n페어 프로그래밍 방식으로 진행하도록 하죠개발 절차는 이렇게 갈 예정이에요\nChunk, Partioning방식을 Job을 추가 개발 (기존 balanceJob 유지)\n당분간 두 Job을 병행하면서 비교\n추가한 Job 기능에 문제없다면 기존 balanceJob 삭제 Partition 생성: Partition 1: ID 1 ~ 25\nPartition 2: ID 26 ~ 50\nPartition 3: ID 51 ~ 75\nPartition 4: ID 76 ~ 100 각 Partition에서 Chunk 처리: Partition 1: Chunk 1: ID 1 ~ 10 → 커밋\nChunk 2: ID 11 ~ 20 → 커밋\nChunk 3: ID 21 ~ 25 → 커밋 Partition 2: Chunk 1: ID 26 ~ 35 → 커밋\nChunk 2: ID 36 ~ 45 → 커밋\nChunk 3: ID 46 ~ 50 → 커밋 나머지 Partition도 동일 방식으로 처리. 병렬 실행: 스레드 풀 크기 = 4이므로 4개의 Partition이 동시에 실행됩니다.\nPartition 처리 순서는 스레드 풀에서 처리되는 순서에 따라 다를 수 있음. 트랜잭션 관리: 각 Partition은 독립적인 트랜잭션을 가짐.\n각 Chunk가 커밋될 때마다 트랜잭션이 종료됨. 투자신청기록쪽 api -&gt; API레스폰스모델\n웹플럭스(비동기 기반)을 사용해서 service프로젝트와 (내부)통신한다.내부통신을 위해 필요한 헤더, url등을 생성해야하기 때문에 senderutils 클래스를 공통(빈)을 정의해서 만들어 통신.retrieve ** 중요\n웹클라이언트 클래스 객체를 사용해서 uri 콘텐츠 등등 헤더와 바디(데이타)를 정의한다\n스프링5에서 소개된 리엑티브 프로그래밍, 반응형 및 비동기적인 웹 어플리케이션 개발을 지원하는 모듈이다.<br>\n<img alt=\"Pasted image 20240611144129.png\" src=\"사진-및-문서/pasted-image-20240611144129.png\" target=\"_self\">\n*리엑티브 프로그래밍이란 ?\n- 비동기 및 이벤트 기반 애플리케이션을 개발하기 위한 패러다임으로, 주로 높은 확장성과 성능을 제공하는것내부통신을 이용하여 API프로젝트와 통신할때 주소 맵핑이 어떻게 이루어지는지??\n- Spring WebClient를 이용하여 내부 통신을 한다. SpringWebFlux의 일부로써, 비동기적인 방식으로 HTTP 요청을 보내고 응답을 받을 수 있는 라이브러리이다. 웹으로 API를 호출하기 위해 사용되는 HTTP Client모듈 중 하나이다. RestTemplate과 같은 기능을 하지만, RestTemplate는 Blocking 방식이고, WebClient는 Non-Blocking방식이다.\nBlocking 동기 - Non-Blocking 비동기 ( 정확히 같은것은 아니지만 비슷하다 ? ) 요청자(APP)에서 WebClient라이브러리를 사용한 senderUtils를 사용하여\n프로퍼티 소스와, 송신방식(GET/POST), 넘길 값(DTO), request를 수신할 값(ApiResponseModel)을 설정한다. -SpringMVC에서는 WebFlux와 달리, 블로킹I/O를 사용하기 때문에, 동기적인 작업을 수행할 떄에는 WebClient보다 RestTemplat이 효과적이지만, 비동기 작업을 할 때에는 WebClient를 사용하는것이 효과적이다.\nThread Pool을 애플리케이션 구동시 미리 만들어 두고,\n요청시 가용한 Thread가 있다면 1요청당 1Thread가 할당된다.\n만약 가용한 스레드가 부족하다면 Queue는 대기하게 되며,\n전체 서비스의 속도가 현저히 느려지게 된다. Core당 1개의 Thread를 사용한다.\n요청은 Event Loop내의 job으로 등록되고, 각 job을 제공자에게 요청한 후,\n기다리지 않고 다른 job을 처리한다.\nEvent Loop는 제공자로부터 callback으로 응답이 오면, 그 결과를 요청자에게 제공하낟.\n따라서 반응성/탄력성/가용성/비동기성 을 보장하기 때문에 동시사용자가 크게 몰렸을때\nRestTemplate에 비해 성능이 저하되지 않는다.\n- 웹 애플리케이션 최전방에서 사용자의 요청을 접수하여 URL기주능로 요청을 처리할 controller를 찾고, 그 controller에 처리를 위임한 후, 결과를 받아서 사용자에게 처리 결과가 담긴 화면을 제공해준다. 설정은 web.xml의 정보를 활용한다. 사용자 요청을 처리할 Controller목록과 사용자 에게 보여줄 화면을 찾는 ViewResolver가 있다.\n#### PathVariable 방법 @RestController public class SecondController { @GetMapping(\"/second/{id}\") //PK(id)가 (변수)인 페이지를 찾고 싶다 public String getData(@PathVariable Integer id) { return \"id : \"+id; }\n#### QueryString 방법 @GetMapping(\"/second\") public String getData2(String title, String content) { return \"title:\"+title+\", content :\"+content; }\n@PostMapping(\"/second\") public String postData(String title, String content) { return \"title:\"+title+\", content :\"+content; } @PutMapping(\"/second\") public String putData(String title, String content) { return \"title:\"+title+\", content :\"+content; } PostMapping과 같은원리로 작동한다 @DeleteMapping(\"/second/{id}\") //쿼리스트링 해도 됨 public String deleteData(@PathVariable Integer id) { return id+\"delete ok\"; } 데이터 전달이 필요한 경우 @RequestParam을 사용하거나\n@DeleteMapping 대신에 @PutMapping을 사용하도록 하자 내생각에는 메서드를 명시적으로 작성 할 수 있기 때문에 더욱 가독성이 높아지는 장점이 있지 않을까 싶다. 애플리케이션 내부-외부 사이의 메시징을 가능하게 하는 프레임워크이다. Spring Framwork에서 매세징이란 메타데이터와 함께 결합되어있는 이련의 자바 오브젝트를 위한 포괄적인 Wrapper를 말한다. 메시지는 여러개의 헤더로 구성된다. Enterprise Integration Patterns은 엔터프라이즈 환경에서 사용하고 있는 다양한 분야(ex. 결제,메일, 각 부서별 서비스) 의 애플리케이션을 통합, 즉 유기적으로 연결해서 효율적으로 적절하게 통합하는 방법을 여러 패턴을 통해 제시했다. 하나의 동작을 하는 서비스의 각각의 기능들(프로젝트)이 내/외부 모듈과 접촉하는 부분을 쉽게 구성할 수 있도록 하는 기능들을 제공한다. 채널: 한 요소로부터 다른 요소로 메시지를 전달\n필터: 조건에 맞는 메시지가 플로우를 통과하게 해줌\n변환기: 메시지 값을 변경하거나 메시지 페이로드의 타입을 다른 타입으로 변환\n라우터: 여러 채널 중 하나로 메시지를 전달하며 대개 메시지 헤더를 기반으로 함\n분배기: 들어오는 메시지를 두 개 이상의 메시지로 분할하며, 분할된 각 메시지는 다른 채널로 전송\n집적기: 분배기와 상반된 것으로 별개의 채널로부터 전달되는 다수의 메시지를 하나의메시지로 결합함\n서비스 액티베이터: 메시지를 처리하도록 자바 메서드에 메시지를 넘겨준 후 메서드의 반환값을 출력 채널로 전송\n채널 어댑터: 외부 시스템에 채널을 연결함. 외부 시스템으로부터 입력을 받거나 쓸 수 있음\n게이트웨이: 인터페이스를 통해 통합플로우로 데이터를 전달 Spring Integration은 'pipe and filters' 모델을 구현하기 위해 3가지 핵심 개념으로 구성되어 있다.\nheader, payload로 구성되어 있는 내용을 포함하고 있는 generic wrapper. 컴포넌트 간에 이동되는 실제 데이터이다.\n<br><img alt=\"Pasted image 20240605160336.png\" src=\"사진-및-문서/pasted-image-20240605160336.png\" target=\"_self\">pipes-and-filters 모델의 pipe에 해당.\n컴포넌트간의 메세지 중간 통로 역할을 함으로써 컴포넌트간 디컬플링을 유지 할 수 있도록 하며 interception, monitering 포인트가 될 수 있다. 다른 주요 기능 중 하나는, 메세지 버퍼 역할을 할 수 있는 Queue로써 동작할 수 있다.\nFIFO방식으로 컨슈머가 가져갈 때 까지 큐에 저장된다.\nex)\n@Bean\npublic MessageChannel sampleChannel() {\nreturn new DirectChannel();\n}\n-&gt; DirectChannel은 Point to Point로, 하나의 MessageHeader에게 Message를 전달한다.\n이외에도 다양한 체널종류가 있다.pipes-and-filters 모델의 filters에 해당.\nSpring integration상에서 채널을 통해서 메세지를 받고, 소비하는 주체이며 하나의 클래스이다.\n여기서 말하는 EndPoint란 Spring integration이 구성할 파이프라인의 끝단이 아닌, 파이프라인 중간에서 메세지를 변경하거나 필터링 하거나, 다른 채널로 라우팅하는 요소이다.\nex)\n@MessageEndpoint\npublic class serverEndpoint { ...\n} Spring integration에서 일련의 작업들을 정의한 플로우를 integration flow 라고 하는데, 이 플로우가 Message Endpoint로 구성되어있다. 엔드포인트는 작업 타입에 따라 크게 그 종류를 나눌 수 있는데 Transformer(변형), Filter(필터링), Router(메세지를 특정 채널로 전송), Splitter(메세지를 분리하여 여러 채널로 전송), Aggregator(splitter의 반대), Service Activator(메세지로 특정 작업을 수행할 수 있는 핸들러를 붙일 수 있는 엔드포인트), Channel Adapter(외부 시스템과 입출력이 가능)가 있다. 통합 파이프라인 중간에 위치하며, 조건을 기반으로 플로우의 전 단계로부터 다음단계로의 메세지 전달에 조건을 달 수 있다.\nex)\n@Filter( inputChannel=\"numberChannel\", outputchannel=\"evenNumberChannel\" )\npublic boolean evenNumberFilter( Integer number ) { return number % 2 == 0; //숫자를 받아 짝수만 전달\n} 입력체널로 부터 메세지를 수신하고, 이 메세지를 MessageHandler 인터페이스를 통해 구현한 클래스에 전달(서비스호출)한다.\n서비스를 메시징 시스템에 연결하기 위한 앤드포인트이다.\n입력 채널이 설정되어 있어야 하고, 서비스가 값을 리턴하도록 구현했다면 출력 채널도 설정해야한다.\n**만약 출력체널을 설정하지 않았을 때 메세지에 \"return address\"가 있다면 이 헤더에 지정한 체널로 응답을 전송한다.\nMessageChennel메서드를 입력해서 파이프라인을 구축한다,\nex)\n@ServiceActivator(inputChannel = \"sampleChannel\") { }\n1. e.getMessage() : 에러 메시지의 정보를 받음\n2. e.getExceptionCode() : 에러 메시지 발생 코드를 받음\n3. e.getStatus() : 에러 메시지의 발생 상태를 받음\n4. HttpStatus(enum 클래스)를 받아 해당 value(Code) 와 getReasonPhrase(message)를 얻을 수 있음\n1. 체크 예외 발생한 예외를 잡아서(catch) 체크 후 예외를 복구 or 회피 하도록 만드는 구체적인 처리를 필요로 하는 예외이다. try catch가 강제된다. 컴파일 시점에서 에러의 확인이 가능하다. try catch를 할 수 없다면 예외를 밖으로 던지는 Throw 예외를 필수로 선언해 주어야 한다.\n2. 언체크 예외 예외를 잡아서 해당 예외에 대한 처리가 필요 없는 예외. RuntimeException을 상속 받은 예외들이 이에 포함된다.\nUncheckedException으로 처리\ntry { 예외가 생길 가능성이 있는 코드\n} catch (예외종류){ 예외처리 코드\n} finaly { 예외와 상관없이 항상 실행시킬 코드(선택사항)\n}\n자바에서는 Exception클래스에서 상속받은 다양한 Exception클래스를 갖고 있기 때문에, 여러가지 에러 발생 가능성에 대해서 예외 구문을 처리해 줄 수 있다.자신을 호출하는 메서드에 예외처리의 책임을 떠넘기는 것이다.\n단, throws를 사용하려면 반드시 호출한 메서드에 try-catch 구문을 사용하여 예외를 처리해 주어야 한다.public class ThrowTest { public static void main(String[] args) { int n1, n2; n1=12; n2=0; try { throwTest(n1, n2); } catch (ArithmeticException e) { // n1/n2 라면 발생했을 것 System.out.println(\"ArithmeticException: \" + e.getMessage()); } } public static void throwTest(int a, int b) throws ArithmeticException{ System.out.println(\"throw a/b: \"+ a/b); }\n}\nthrow와 throws는 큰 차이가 있다.\nthrow는 개발자가 직접 예외를 발생시키고싶을 떄 사용하는 것이다.\n주로 RuntimeException처리를 위해 사용한다.**checkedException에서도 사용이 가능하다.throw new IOException(\"IO Exception occurred\");\n사용예제public class ThrowTest { public static void main(String[] args) { int n1, n2; n1=12; n2=0; try { throwTest(n1, n2); } catch (ArithmeticException e) { // n1/n2 라면 발생했을 것 System.out.println(\"ArithmeticException: \" + e.getMessage()); } } public static void throwTest(int a, int b) throws ArithmeticException{ throw new ArithmeticException(); }\n}\n해당 코드의 익셉션 메세지는 null 로 뜨게 된다.\nthrow는 Exception을 던질 때, 예외 내용을 함께 던져 주지 않기 때문이다.\n그래서 개발자가 Exception을 따로 커스터마이징해서 만들고, 그 안에 메세지를 넣어서 던져주는 방식이다. CheckedException =&gt; try ~ catch 문, throws(의존관계) 로 처리! UnCheckedException(RuntimeException) =&gt; 기본적으로 복구 불가능한 예외(발생시 런타임 중지)로, CheckedExceptoin이어도 더 구체적인 UnCheckedException으로 발생시켜! throw로 exception을 던지고, ExceptionHandler로 처리! 언체크드익셉션(런타입익셉션) -&gt; 기본적으로 복구 불가능한 예외(발생시 런타임 중지)로, 체크드익셉션이어도 더 구체적인 언체크드익셉션으로 발생시켜 쓰로우로 익셉션을 던지고, 익셉션핸들러로 처리 해당 구조가 갖는 장점이 무엇인가?\n먼저 Serviced에 인터페이스를 구현하여 세부 구현체를 숨기고 인터페이스를 바라보게 함으로써 클래스간의 의존관계를 줄이는것 이다.\n좀 더 쉽게 정리하면,\n하나의 인터페이스를 구현하는 여러개의 구현체가 있고, 기능에 따라 적절한 구현체가 드어감으로써 다형성을 주기위함이다. 하지만, 인터페이스 하나에 구현체 한개만 사용하는경우는 어떠한가?\n이렇게 된다면, 의존관계를 줄여주는 효과도, 다형성을 주는 효과도 없게된다.\n하지만 보통의 경우 한개의 기능을하는 인터페이스를 여러기능의 구현체로 나누는 일은 쉽게 일어나지 않는다. public interface CardPaymentService { void pay();\n} public class ShinhanCardPaymentService implements CardPaymentService{ private ShinhanCard shinhanCard; @Override public void pay() { shinhanCard.pay(); //신한 카드 결제 API 호출 // 결제를 위한 비즈니스 로직 실행.... }\n} 위와 같은 경우, 하나의 인터페이스에 하나의 구현체를 갖지만, 향후 추가적으로 구현체가 더 생길여지가 있으니, 인터페이스를 두는것이 바람직 하다고 할 수 있다.\n그렇다면 향후 구현체가 추가될 계획이 없는 기능들 까지 인터페이스를 만들어주어야 하는가?\n그렇지 않다, 예를들어 간단하게 아이디를 기반으로한 조회기능 등은 인터페이스를 구현하지 않고 바로 서비스 객체를 생성하는것이 옳다.\npublic interface ChangePasswordService { public void change(MemberId id, PasswordDto.ChangeRequest dto);\n} public class ByAuthChangePasswordService implements ChangePasswordService { private MemberFindService memberFindService; @Override public void change(MemberId id, PasswordDto.ChangeRequest dto) { if (dto.getAuthCode().equals(\"인증 코드가 적합한지 로직 추가...\")) { final Member member = memberFindService.findById(id); final String newPassword = dto.getNewPassword().getValue(); member.changePassword(newPassword); // 필요로직... } }\n} public class ByPasswordChangePasswordService implements ChangePasswordService { private MemberFindService memberFindService; @Override public void change(MemberId id, PasswordDto.ChangeRequest dto) { if (dto.getPassword().equals(\"비밀번호가 일치하는지 판단 로직...\")) { final Member member = memberFindService.findById(id); final String newPassword = dto.getNewPassword().getValue(); member.changePassword(newPassword); } }\n}\n이렇게 비밀번호를 변경하는 기능같은 경우에는 2가지 이상의 경우가 있기때문에 인터페이스로 구현하는것이 옳아보인다.- Controller로 부터 값을 받는 객체로 사용. 엔티티로부터 타입 변환을 하여 Controller로 넘겨주는 객체\nPage&lt;Dto&gt; -&gt; List&lt;Dto&gt;\n<br><img alt=\"Pasted image 20240723134224.png\" src=\"사진-및-문서/pasted-image-20240723134224.png\" target=\"_self\"><br><img alt=\"Pasted image 20240723134333.png\" src=\"사진-및-문서/pasted-image-20240723134333.png\" target=\"_self\">\n비동기 적으로 입출력처리를 관리하기 때문에 전송 작업이 성공했는지 실패했는지 알수 있다.\n비동기식 작업에서 높은 성능을 유지할수 있다.\n@Test\n@DisplayName(\"같은 객체를 equals 비교\")\nvoid equals() { //given Menu friedChicken = new Menu(\"후라이드치킨\", 16_000); Menu friedChicken2 = new Menu(\"후라이드치킨\", 16_000); //when &amp; then assertThat(friedChicken).isEqualTo(friedChicken2);\n}\n헤당 코드와 같이 구현한다면, false를 출력한다.\n이유는 객체의 equals메서드는 주소값이 서로 다른 객체는 다른객체로 판단하기 때문이다.이때, 왜 HashCode도 재정의 해야하나?해당 규약으로 인하여, 서로다른 객체의 해쉬값을 통일시켜주어야 한다.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"@ 어노테이션이란 무엇인인가?","level":1,"id":"@_어노테이션이란_무엇인인가?_0"},{"heading":"Bean이란 무엇인가?","level":1,"id":"Bean이란_무엇인가?_0"},{"heading":"@Component는 내가 만든 클래스에 Bean을 주입하는역할을 한다.","level":1,"id":"@Component는_내가_만든_클래스에_Bean을_주입하는역할을_한다._0"},{"heading":"이때, @Component와 @Controller의 차이점은 무엇일까?","level":3,"id":"이때,_@Component와_@Controller의_차이점은_무엇일까?_0"},{"heading":"Spring 어노테이션@ 설명","level":1,"id":"Spring_어노테이션@_설명_0"},{"heading":"@RequestBody는 API호출시 넘겨주는 파라미터값(JSON등)을","level":2,"id":"@RequestBody는_API호출시_넘겨주는_파라미터값(JSON등)을_0"},{"heading":"@RequestParam은 외부API호출시 넘겨주는 파라미터값을 가져옴","level":2,"id":"@RequestParam은_외부API호출시_넘겨주는_파라미터값을_가져옴_0"},{"heading":"@Autowired는 빈(의존성)을 주입받기위해 사용.","level":2,"id":"@Autowired는_빈(의존성)을_주입받기위해_사용._0"},{"heading":"@Entity는 데이터베이스와 직접 연결된 클래스를 설정한다.","level":2,"id":"@Entity는_데이터베이스와_직접_연결된_클래스를_설정한다._0"},{"heading":"@PathVariable은 URL(경로)에서 변수를 추출하여 매개변수에 할당한다.","level":2,"id":"@PathVariable은_URL(경로)에서_변수를_추출하여_매개변수에_할당한다._0"},{"heading":"@Generated는 개발자가 아닌, DB에서 기계적으로 생성한 클래스이다.","level":2,"id":"@Generated는_개발자가_아닌,_DB에서_기계적으로_생성한_클래스이다._0"},{"heading":"@Builder는 빌더패턴을 완벽하게 지원해주는 어노테이션이다.","level":2,"id":"@Builder는_빌더패턴을_완벽하게_지원해주는_어노테이션이다._0"},{"heading":"@Data","level":2,"id":"@Data_0"},{"heading":"@RequiredArgsConstructor","level":2,"id":"@RequiredArgsConstructor_0"},{"heading":"@AllArgsConstructor 는 모든 필드값을 파라미터로 받는 생성자를 생성해준다.","level":2,"id":"@AllArgsConstructor_는_모든_필드값을_파라미터로_받는_생성자를_생성해준다._0"},{"heading":"@NoArgsConstructor 는 파라미터가 없는 디폴트 생성자를 생성해준다.","level":2,"id":"@NoArgsConstructor_는_파라미터가_없는_디폴트_생성자를_생성해준다._0"},{"heading":"@EqualsAndHashCode는 equals와 hashCode를 자동으로 생성해준다.","level":2,"id":"@EqualsAndHashCode는_equals와_hashCode를_자동으로_생성해준다._0"},{"heading":"빌더패던의 장점","level":4,"id":"빌더패던의_장점_0"},{"heading":"빌더패턴 구현","level":4,"id":"빌더패턴_구현_0"},{"heading":"Lombok 사용시 주의사항","level":1,"id":"Lombok_사용시_주의사항_0"},{"heading":"1. @AllArgsConstructor / @RequiredArgsConstructor 사용시","level":2,"id":"1._@AllArgsConstructor_/_@RequiredArgsConstructor_사용시_0"},{"heading":"2. 무분별한 @EqualsAndHashCode 사용","level":2,"id":"2._무분별한_@EqualsAndHashCode_사용_0"},{"heading":"3. @Data 사용금지","level":2,"id":"3._@Data_사용금지_0"},{"heading":"4. @Value 사용 금지","level":2,"id":"4._@Value_사용_금지_0"},{"heading":"SessionStorage 와 LocalStorage","level":1,"id":"SessionStorage_와_LocalStorage_0"},{"heading":"Spring에서의 의존성 주입 방법","level":1,"id":"Spring에서의_의존성_주입_방법_0"},{"heading":"Filed Injection(필드 주입)","level":2,"id":"Filed_Injection(필드_주입)_0"},{"heading":"사용하면 안되는 이유","level":3,"id":"사용하면_안되는_이유_0"},{"heading":"Setter Injection(수정자 주입)","level":2,"id":"Setter_Injection(수정자_주입)_0"},{"heading":"문제점","level":3,"id":"문제점_0"},{"heading":"Contructor Injection(생성자 주입)","level":2,"id":"Contructor_Injection(생성자_주입)_0"},{"heading":"생성자 주입을 사용해야 하는 이유","level":3,"id":"생성자_주입을_사용해야_하는_이유_0"},{"heading":"생성자 주입의 경우에도 순환참조가 똑같이 일어날 수 있지만, 필드, 수정자 주입과 다르게 <mark>런타임</mark> 시가 아니라, <mark>컴파일</mark> 시 미연에 찾아낼 수 있다.","level":4,"id":"생성자_주입의_경우에도_순환참조가_똑같이_일어날_수_있지만,_필드,_수정자_주입과_다르게_==런타임==_시가_아니라,_==컴파일==_시_미연에_찾아낼_수_있다._0"},{"heading":"데이터 검증 (Validation)","level":1,"id":"데이터_검증_(Validation)_0"},{"heading":"Entity와 DTO를 분리해야하는 이유","level":1,"id":"Entity와_DTO를_분리해야하는_이유_0"},{"heading":"Spring의 EntityManager는 무엇일까?","level":1,"id":"Spring의_EntityManager는_무엇일까?_0"},{"heading":"DB의 저장 프로시저 (SP : Stored Procedure)란?","level":1,"id":"DB의_저장_프로시저_(SP_Stored_Procedure)란?_0"},{"heading":"사용하는 이유","level":3,"id":"사용하는_이유_0"},{"heading":"Spring에서의 저장 프로시저 동작원리","level":1,"id":"Spring에서의_저장_프로시저_동작원리_0"},{"heading":"JPQL과 QueryDSL 비교","level":1,"id":"JPQL과_QueryDSL_비교_0"},{"heading":"JPQL","level":2,"id":"JPQL_0"},{"heading":"QueryDSL","level":2,"id":"QueryDSL_0"},{"heading":"JPA에서 BooleanBuilder 와 BooleanExpression 이란?","level":1,"id":"JPA에서_BooleanBuilder_와_BooleanExpression_이란?_0"},{"heading":"JPAQueryFactory란?","level":1,"id":"JPAQueryFactory란?_0"},{"heading":"Spring Batch란?","level":1,"id":"Spring_Batch란?_0"},{"heading":"Batch 용어 설명","level":1,"id":"Batch_용어_설명_0"},{"heading":"Job","level":3,"id":"Job_0"},{"heading":"Step","level":3,"id":"Step_0"},{"heading":"tasklet","level":3,"id":"tasklet_0"},{"heading":"Chunk","level":3,"id":"Chunk_0"},{"heading":"Job Listener","level":3,"id":"Job_Listener_0"},{"heading":"hfbatJobScheduler(스케줄러)가 Job으로 등록되어있는 녀석들을 순차적으로 실행될할 때 , 누가 트리거 역할을 하는지","level":1,"id":"hfbatJobScheduler(스케줄러)가_Job으로_등록되어있는_녀석들을_순차적으로_실행될할_때_,_누가_트리거_역할을_하는지_0"},{"heading":"Spring Batch에서의 파티셔닝(Partitioning)","level":1,"id":"Spring_Batch에서의_파티셔닝(Partitioning)_0"},{"heading":"파티셔닝(Partitioning)","level":3,"id":"파티셔닝(Partitioning)_0"},{"heading":"파티션너(파티션 별 범위 - 컨텍스트 범위 설정)","level":4,"id":"파티션너(파티션_별_범위_-_컨텍스트_범위_설정)_0"},{"heading":"<strong>Chunk와 Partitioning의 병렬 실행 예제</strong>","level":3,"id":"**Chunk와_Partitioning의_병렬_실행_예제**_0"},{"heading":"예제 시나리오:","level":4,"id":"예제_시나리오_0"},{"heading":"실행 흐름:","level":4,"id":"실행_흐름_0"},{"heading":"ThreadPoolSize : 동시에 실행시킬 스테리드의 개수","level":3,"id":"ThreadPoolSize_동시에_실행시킬_스테리드의_개수_0"},{"heading":"gridSize : 실제로 제단할 사이즈(데이터를 얼마나 세분화해서 각 파티션 작업에 할당할 건지)","level":3,"id":"gridSize_실제로_제단할_사이즈(데이터를_얼마나_세분화해서_각_파티션_작업에_할당할_건지)_0"},{"heading":"QueueCapacity : 대기열 크기","level":3,"id":"QueueCapacity_대기열_크기_0"},{"heading":"APP - SERVICE - API 통신 플로우","level":1,"id":"APP_-_SERVICE_-_API_통신_플로우_0"},{"heading":"Spring WebFlux란?","level":1,"id":"Spring_WebFlux란?_0"},{"heading":"Spring WebClient란??","level":2,"id":"Spring_WebClient란??_0"},{"heading":"*Spring MVC환경에서도 SpringWebClient를 사용해도 될까?(현재 프로젝트가 이렇게되있다)","level":4,"id":"*Spring_MVC환경에서도_SpringWebClient를_사용해도_될까?(현재_프로젝트가_이렇게되있다)_0"},{"heading":"Spring WebClient VS RestTemplate","level":1,"id":"Spring_WebClient_VS_RestTemplate_0"},{"heading":"RestTemplate : Multi-Thread / Blocking방식","level":3,"id":"RestTemplate_Multi-Thread_/_Blocking방식_0"},{"heading":"Spring WebClient : Single-Thread / Non-Blocking 방식","level":3,"id":"Spring_WebClient_Single-Thread_/_Non-Blocking_방식_0"},{"heading":"DispatcherServlet의 역할","level":1,"id":"DispatcherServlet의_역할_0"},{"heading":"HTTP Method - Mapping","level":1,"id":"HTTP_Method_-_Mapping_0"},{"heading":"1. GetMapping","level":3,"id":"1._GetMapping_0"},{"heading":"2. PostMapping","level":3,"id":"2._PostMapping_0"},{"heading":"GetMapping은 PostMapping과 달리 http body값을 받는 메서드가 아니다. 따라서 GET요청에 Body값을 넣으면 null값이 나온다.","level":5,"id":"GetMapping은_PostMapping과_달리_http_body값을_받는_메서드가_아니다._따라서_GET요청에_Body값을_넣으면_null값이_나온다._0"},{"heading":"PostMapping에 body가 아닌 params에 값을 넣어도 값이 정상적으로 출력되는 이유는 params는 GET/POST/PUT/DELETE 모든 값이 나오기 때문이다. PostMapping을 원한다면 Body에 값을 넣어줘야한다","level":5,"id":"PostMapping에_body가_아닌_params에_값을_넣어도_값이_정상적으로_출력되는_이유는_params는_GET/POST/PUT/DELETE_모든_값이_나오기_때문이다._PostMapping을_원한다면_Body에_값을_넣어줘야한다_0"},{"heading":"3. PutMapping","level":3,"id":"3._PutMapping_0"},{"heading":"4. DeleteMapping","level":3,"id":"4._DeleteMapping_0"},{"heading":"DeleteMapping은 요청바디(@RequestBody)를 가지지 않는것이 일반적이다.","level":5,"id":"DeleteMapping은_요청바디(@RequestBody)를_가지지_않는것이_일반적이다._0"},{"heading":"그렇기에 @RequestBody를 사용하여 바디를 수신하는 것이 지원되지 않음","level":5,"id":"그렇기에_@RequestBody를_사용하여_바디를_수신하는_것이_지원되지_않음_0"},{"heading":"Get말고는 다들 비슷한 기능같은데 나누는 이유가 무었인지??","level":2,"id":"Get말고는_다들_비슷한_기능같은데_나누는_이유가_무었인지??_0"},{"heading":"Spring Integration이란?","level":1,"id":"Spring_Integration이란?_0"},{"heading":"Spring Integration을 구성하는 컴포넌트 종류","level":3,"id":"Spring_Integration을_구성하는_컴포넌트_종류_0"},{"heading":"3가지의 메인 Component","level":2,"id":"3가지의_메인_Component_0"},{"heading":"1. Message","level":4,"id":"1._Message_0"},{"heading":"2. Message Channel","level":4,"id":"2._Message_Channel_0"},{"heading":"3. Message Endpoint","level":4,"id":"3._Message_Endpoint_0"},{"heading":"Filter 란?","level":2,"id":"Filter_란?_0"},{"heading":"ServiceActivator 란?","level":2,"id":"ServiceActivator_란?_0"},{"heading":"예외처리(Exception)","level":1,"id":"예외처리(Exception)_0"},{"heading":"0. 에러 메세지로 부터 정보를 받는 메서드","level":3,"id":"0._에러_메세지로_부터_정보를_받는_메서드_0"},{"heading":"1. 체크 예외(Checked Exception)와 언체크 예외(UnChecked Exception)","level":3,"id":"1._체크_예외(Checked_Exception)와_언체크_예외(UnChecked_Exception)_0"},{"heading":"2. 예외처리 방법 3가지","level":3,"id":"2._예외처리_방법_3가지_0"},{"heading":"1. try~catch : 다른 작업 흐름으로 유도한다. checkedException으로 처리","level":4,"id":"1._try~catch_다른_작업_흐름으로_유도한다._checkedException으로_처리_0"},{"heading":"2. throws~ : 호출한 쪽(부모)에게 예외 처리를 위힘한다.","level":4,"id":"2._throws~_호출한_쪽(부모)에게_예외_처리를_위힘한다._0"},{"heading":"3. throw~ : 명확한 의미의 예외로 바로처리, 개발자들이 비즈니스 로직에서 처리하는 방식","level":4,"id":"3._throw~_명확한_의미의_예외로_바로처리,_개발자들이_비즈니스_로직에서_처리하는_방식_0"},{"heading":"1. try-catch","level":2,"id":"1._try-catch_0"},{"heading":"2. throws","level":2,"id":"2._throws_0"},{"heading":"3. throw","level":2,"id":"3._throw_0"},{"heading":"결론","level":3,"id":"결론_0"},{"heading":"Spring MVC의 Service와 ServiceImpl 구조","level":1,"id":"Spring_MVC의_Service와_ServiceImpl_구조_0"},{"heading":"하나의 인터페이스의 하나의 구현체","level":3,"id":"하나의_인터페이스의_하나의_구현체_0"},{"heading":"결론 : 하나의 클래스에 너무 많은 역할을 부여하지 말자. (책임을 몰리지 말자)","level":5,"id":"결론_하나의_클래스에_너무_많은_역할을_부여하지_말자._(책임을_몰리지_말자)_0"},{"heading":"DTO ( Request와 Respons)","level":1,"id":"DTO_(_Request와_Respons)_0"},{"heading":"Request ( Json to DTO )","level":2,"id":"Request_(_Json_to_DTO_)_0"},{"heading":"Responsse ( Object to Json)","level":2,"id":"Responsse_(_Object_to_Json)_0"},{"heading":"페이지 펙토리 객체 생성시, 리스트 넘길때 Page리스트 객체일 필요없다.","level":1,"id":"페이지_펙토리_객체_생성시,_리스트_넘길때_Page리스트_객체일_필요없다._0"},{"heading":"PageFactory.paginate(<mark>dList</mark>, ((int) cnt), hfcfgLoanRequestDto)","level":3,"id":"PageFactory.paginate(==dList==,_((int)_cnt),_hfcfgLoanRequestDto)_0"},{"heading":"쿼리펙토리 빈으로 주입받은 것 바로 사용하기 ( 중복으로 생성할 필요 없음)","level":1,"id":"쿼리펙토리_빈으로_주입받은_것_바로_사용하기_(_중복으로_생성할_필요_없음)_0"},{"heading":"기존코드 :","level":3,"id":"기존코드__0"},{"heading":"Netty란??","level":1,"id":"Netty란??_0"},{"heading":"netty란 java기반의 네트워크 프레임워크이다.","level":2,"id":"netty란_java기반의_네트워크_프레임워크이다._0"},{"heading":"webClient도 Netty안에 포함되어 있다.","level":3,"id":"webClient도_Netty안에_포함되어_있다._0"},{"heading":"장점","level":2,"id":"장점_0"},{"heading":"Equals() 와 HashCode() 재정의","level":1,"id":"Equals()_와_HashCode()_재정의_0"},{"heading":"String은 equals 잘쓰잖아? =&gt; String은 String pool에서 중복생성을 막고, 같은 값을 생성한다면 재사용하기 때문~","level":4,"id":"String은_equals_잘쓰잖아?_=>_String은_String_pool에서_중복생성을_막고,_같은_값을_생성한다면_재사용하기_때문~_0"},{"heading":"재정의 해서, 객체가 아닌 내부 값을 비교하는 equals를 만들었다.","level":2,"id":"재정의_해서,_객체가_아닌_내부_값을_비교하는_equals를_만들었다._0"},{"heading":"HashCode의 규약에는 다음과 같은 사항이 존재한다.","level":3,"id":"HashCode의_규약에는_다음과_같은_사항이_존재한다._0"},{"heading":"<span>- \n\n<span>equals(object)가 두 객체를 같다고 판단했다면, 두 객체의 hashCode값은 항상 같아야한다</span></span>","level":4,"id":"*_equals(object)가_두_객체를_같다고_판단했다면,_두_객체의_hashCode값은_항상_같아야한다_0"}],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:SPRING","?query=tag:FRAMWORK"],"author":"","coverImageURL":"","fullURL":"study/프로그래밍/🍃-spring.html","pathToRoot":"../..","attachments":["사진-및-문서/pasted-image-20240611144129.png","사진-및-문서/pasted-image-20240605160336.png","사진-및-문서/pasted-image-20240723134224.png","사진-및-문서/pasted-image-20240723134333.png"],"createdTime":1739844578975,"modifiedTime":1739940260396,"sourceSize":46695,"sourcePath":"study/프로그래밍/🍃 Spring.md","exportPath":"study/프로그래밍/🍃-spring.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"study/프로그래밍/🎵-obsidian.html":{"title":"🎵 Obsidian","icon":"","description":"<a href=\".?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\".?query=tag:메모\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#메모\">#메모</a> <a href=\".?query=tag:Obsidian\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Obsidian\">#Obsidian</a>\n옵시디언은 Markdow기반의 노트 작성 및 지식 관리 어플이다.\n특히, 데이터 시각화 및 개인지식관리에 뛰어나다. 옵시디언은 Markdown 형식을 기반으로 노트를 작성하며, 간단한 텍스트 포맷팅(굵게, 기울임, 리스트, 링크 등)이 가능.\n.md 파일로 저장되어 데이터 이동 및 백업이 자유로움. 옵시디언은 위키 스타일의 링크([[노트 제목]])를 사용하여 노트 간 연결이 가능.\n노트 간의 관계를 자동으로 분석하여 연결된 구조를 보여줌. 연결된 노트들을 시각적으로 보여주는 그래프 뷰 제공.\n노트 간의 관계를 네트워크 그래프 형태로 표현하여 지식 네트워크 구축에 용이. 기본 기능 외에도 다양한 플러그인을 추가하여 확장 가능.\n공식 플러그인 및 커뮤니티에서 제공하는 다양한 기능 추가 가능. 예: 캘린더, 태그 관리, LaTeX 지원, AI 플러그인 등. 클라우드가 아닌 로컬 저장 방식을 기본으로 하여 데이터 소유권을 보장.\n추가적으로 Obsidian Sync를 사용하면 여러 기기 간 동기화 가능. Windows, macOS, Linux, iOS, Android에서 사용 가능.\n모바일에서도 원활한 노트 작성과 검색이 가능. 자주 사용하는 노트 형식을 템플릿으로 저장하여 반복 사용 가능.\n태그(#태그이름)를 활용하여 노트 분류 및 검색 가능. 특정 키워드를 기반으로 노트 검색 가능.\n정규 표현식(Regex) 지원으로 복잡한 검색도 가능\n<br><img alt=\"Pasted image 20250218145702.png\" src=\"사진-및-문서/pasted-image-20250218145702.png\" target=\"_self\"><br><img alt=\"Pasted image 20250218145823.png\" src=\"사진-및-문서/pasted-image-20250218145823.png\" target=\"_self\">노션이란? - 올인원 생산성 및 노트 관리 도구로, 노트 작성, 데이터베이스, 프로젝트 관리, 협업 기능을 통합적으로 제공하는 플랫폼이다단편적으로 기능의 차이를 보면 다음과 같다.\n옵시디언의 최대 장점으로는 다양한 유저 커스텀 플러그인이 있다.\n노션에서 기본으로 지원하는 캘린더, 데이터베이스, 클라우드, 템플릿 등을 모두 사용 가능하다.\n또한, 해당되는 플러그인 들은 유저들에 의해 지속적으로 업데이트 된다.\nEX) ChatGPT / HTML Export / Git 등등..\n옵시디언은 노션과 달리 로컬 네이티브앱으로 인터넷 연결없이도 사용이 가능하다.\n로컬환경에서 Markdown문법만으로 문서가 작성되기 때문에 속도가 무척 빠르고 쾌적하다.\n또한, 로컬 저장 방식으로 직접적인 데이터의 소유가 가능하다. → 보안이 뛰어나다고 볼 수 있다. 옵시디언은 기본적으로 모든 기능이 제한없이 무료이다.\n! 유료 서비스인 Obsidian Sync(클라우드 동기화 서비스) 가 있지만, Git을 통한 형상관리를 한다면 전혀 사용할 필요가 없다\n따라서, 용량에 구애받지 않고 무제한 확장이 가능하다고 볼 수 있다. 그럼에도 노션이 가지는 장점도 만만치 않으며, 옵시디언의 단점 또한 존재한다.\n즉, 각자의 작업 환경 및 취향에 맞추어서 최적의 Tool을 선택하는 것이 바람직 하다고 볼 수 있다.\n나는 그래도 옵시디언이다.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"개요","level":1,"id":"개요_0"},{"heading":"옵시디언(Obsidian)이란 무엇인가?","level":2,"id":"옵시디언(Obsidian)이란_무엇인가?_0"},{"heading":"주요 기능엔 어떠한 것이 있나?","level":2,"id":"주요_기능엔_어떠한_것이_있나?_0"},{"heading":"<strong>✅ Markdown 기반 노트 작성</strong>","level":3,"id":"**✅_Markdown_기반_노트_작성**_0"},{"heading":"<strong>✅ 노트 간 연결 (Linking)</strong>","level":3,"id":"**✅_노트_간_연결_(Linking)**_0"},{"heading":"<strong>✅ 그래프 뷰 (Graph View)</strong>","level":3,"id":"**✅_그래프_뷰_(Graph_View)**_0"},{"heading":"<strong>✅ 플러그인 시스템 지원</strong>","level":3,"id":"**✅_플러그인_시스템_지원**_0"},{"heading":"<strong>✅ 로컬 저장 방식 (데이터 소유권)</strong>","level":3,"id":"**✅_로컬_저장_방식_(데이터_소유권)**_0"},{"heading":"<strong>✅ 다양한 플랫폼 지원</strong>","level":3,"id":"**✅_다양한_플랫폼_지원**_0"},{"heading":"<strong>✅ 템플릿 및 태그 기능</strong>","level":3,"id":"**✅_템플릿_및_태그_기능**_0"},{"heading":"<strong>✅ 고급 검색 기능</strong>","level":3,"id":"**✅_고급_검색_기능**_0"},{"heading":"이렇게 칙칙한 옵시디언도 플러그인을 통한 커스텀을 거치면..","level":5,"id":"이렇게_칙칙한_옵시디언도_플러그인을_통한_커스텀을_거치면.._0"},{"heading":"몰라보게 달라진다.","level":5,"id":"몰라보게_달라진다._0"},{"heading":"Obsidian <strong>VS</strong> Notion","level":1,"id":"Obsidian_**VS**_Notion_0"},{"heading":"노션과의 비교","level":2,"id":"노션과의_비교_0"},{"heading":"내가 Obsidian을 선택한 이유?","level":1,"id":"내가_Obsidian을_선택한_이유?_0"},{"heading":"첫 번째","level":2,"id":"첫_번째_0"},{"heading":"옵시디언의 다양한 플러그인","level":3,"id":"옵시디언의_다양한_플러그인_0"},{"heading":"Git 플러그인을 통해 형상관리 및 통합, 배포가 가능하다.","level":4,"id":"Git_플러그인을_통해_형상관리_및_통합,_배포가_가능하다._0"},{"heading":"두 번째","level":2,"id":"두_번째_0"},{"heading":"네이티브 앱만의 장점","level":3,"id":"네이티브_앱만의_장점_0"},{"heading":"세 번째","level":2,"id":"세_번째_0"},{"heading":"무료!","level":3,"id":"무료!_0"},{"heading":"결론","level":1,"id":"결론_0"}],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:%EB%A9%94%EB%AA%A8","?query=tag:Obsidian"],"author":"","coverImageURL":"","fullURL":"study/프로그래밍/🎵-obsidian.html","pathToRoot":"../..","attachments":["사진-및-문서/pasted-image-20250218145702.png","사진-및-문서/pasted-image-20250218145823.png"],"createdTime":1739863713458,"modifiedTime":1739940350374,"sourceSize":5641,"sourcePath":"study/프로그래밍/🎵 Obsidian.md","exportPath":"study/프로그래밍/🎵-obsidian.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"study/프로그래밍/🐞-etc.html":{"title":"🐞 etc","icon":"","description":"<a href=\".?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\".?query=tag:기타\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#기타\">#기타</a>순서를 맞추어 호출하는 로직과 예외처리를하는 로직이 컨트롤러에 집중되어 있다면 가독성이 떨어지게된다 이를 해결하기위해, 서비스에서 로직을 구현하게 된다면 서비스에서 서비스를 호출하는 순환참조를 야기할 수 있게된다. 이를위한 해결법으로 서비스를 주입받는 메인 서비스를 만들어 여러서비스를 주입받고 한개의 서비스에서 이를 동작시킬 수 있다. 1. String x = \"abc\"; 2. String y = new String(\"abc\");\n1번의 경우로 생성했을 때는 abc라는 문자열을 String 상수 pool에 저장하고,\n다음번에 동일 문자열이 선언될 때 이풀에서 꺼내의 재사용하게 된다.2번의 경우엔 String을 인스턴스와 하여 새로운 객체를 생성하게 된다.\nString Class는 자신을 수정하는 기능을 제공하지 않기때문에,\n1번의 경우로 선언했을경우 한가지가 바뀌게 되면 나머지가 모두 바뀌게 된다.\n이러한 일을 방지하기 위해서는 생성자를 이용한 선언(2번)을 사용해야한다.\nApach에서 2004년 출시한 빌드 툴이다.\nAnt를 사용하던 개발자들의 불편함을 해소 + 부가기능을 추가 하기위해 만들어졌다. Ant와 Maven의 장점을 모아 2012년 출시한 빌드 툴이다.\nGradel이 시기 상 늦게 출시된 만큼 사용성/성능 등 비교적 뛰어난 스펙을 갖고 있다. Gradle의 Groovy를 이용해서 기존 XML로 작성되있던 요소들의 단점을 해소하고 있다. XML의 경우 코드가 길어지면 가독성이 떨어진다.\n의존관계가 복잡한 프로젝트 설정에 어려움이 있다. 특정 상황에서 Gradle의 속도는 Maven보다 훨씬 빠르다. Gradle은 캐시를 사용하기 때문에 반복될 수록 속도 차이는 더욱 커진다. 일반적으로 하나의 인스턴스만 존재해야 할 경우 Singleton패턴을 사용하게 된다.\nsingle thread환경에서 사용되는 경우에는 아무런 문제가 없지만, Multi thread환경에서\nsingleton객체에 접근 시 초기화 관련하여 문제가 있다. 보통 Singleton객체를 얻는 Static메서드는 getInstance( )로 작명하는게 일반적이다. 단순하게 문제를 해결하고자 한다면, 메서드에 synchronized 키워드만 추가해도 무방하다.\n하지만, 이는 하는 역할에 비해서 동기화 오버헤드가 심하다는 단점이 있다. 간단하게 설명하면, 객체가 필요할 때로 초기화를 미루는 것이다.\npublic class Singleton { private Singleton() {} public static Singleton getInstance() { return LazyHolder.INSTANCE; } private static class LazyHolder { private static final Singleton INSTANCE = new Singleton(); }\n}\n처음 singleton로딩 시에는 LazyHolder클래스의 변수가 없기 때문에 초기화 하지 않는다.\nLazyHolder클래스는 singleton클래스의 getInstance( ) 메서드가 참조되는 순간 class가 로딩되며 초기화 된다.Class를 로딩하고 초기화하는 시점은 thread-safe가 보장되기 때문에, 성능과 안정성을 모두 보장하는 훌륭한 방법이다.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Service의 순환참조를 막는 방법?","level":1,"id":"Service의_순환참조를_막는_방법?_0"},{"heading":"순서를 지켜야하는 service호출이있을때, 컨트롤러에서 서비스를 차례대로 호출하는것이 아니라 서비스를 주입받는 서비스를 만들어 호출하는 이유?","level":3,"id":"순서를_지켜야하는_service호출이있을때,_컨트롤러에서_서비스를_차례대로_호출하는것이_아니라_서비스를_주입받는_서비스를_만들어_호출하는_이유?_0"},{"heading":"Java에서는 두 가지 방법으로 문자열을 만들 수 있다.","level":1,"id":"Java에서는_두_가지_방법으로_문자열을_만들_수_있다._0"},{"heading":"Maven VS Gradle","level":1,"id":"Maven_VS_Gradle_0"},{"heading":"Maven","level":3,"id":"Maven_0"},{"heading":"Gradle","level":3,"id":"Gradle_0"},{"heading":"Gradle이 Maven보다 좋은점","level":2,"id":"Gradle이_Maven보다_좋은점_0"},{"heading":"Multi Thread환경에서의 Singleton","level":1,"id":"Multi_Thread환경에서의_Singleton_0"},{"heading":"그렇다면 singleton객체를 생성하는 로직을 어떻게 thread safe하게 적용할 수 있을까?","level":5,"id":"그렇다면_singleton객체를_생성하는_로직을_어떻게_thread_safe하게_적용할_수_있을까?_0"},{"heading":"LazyHolder","level":3,"id":"LazyHolder_0"}],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:%EA%B8%B0%ED%83%80"],"author":"","coverImageURL":"","fullURL":"study/프로그래밍/🐞-etc.html","pathToRoot":"../..","attachments":[],"createdTime":1739844790888,"modifiedTime":1739940336586,"sourceSize":3872,"sourcePath":"study/프로그래밍/🐞 etc.md","exportPath":"study/프로그래밍/🐞-etc.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"study/프로그래밍/📭-server.html":{"title":"📭 Server","icon":"","description":"<a href=\".?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\".?query=tag:Server\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Server\">#Server</a>\n서버에 일을 분산시켜주는 역할을 한다. Random 랜덤분배 Least loaded 가장 적은양의 작업을 처리하고 있는 서버에게 요청 할당 Round Robin 순서를 정하여 돌아가며 작업 분배 layer4 : 데이터의 내용을 보지 않고 IP주소 및 TCP/UDP정보에 따라 단순히 분배를 해준다\nlayer7 : 서버가 하는 역할이 분리되어 있는 환경에서 데이터의 내용을 보고 각기 맞는 역할을 하는 서버에게 분배\n로드밸런서는 클라이언트가 요청을 보내야 할 서버를 골라야하는 부담을 덜어주며, 로드 밸런서에게 할당된 vIP(가상IP)로 요청을 보내기만 하면 로드 밸런서에서 알아서 작업을 나눠준다.\n서버에서는 적절한 로드 밸런서를 사용하면 들어오는 요청이 여러 장비에 분산되어 처리량이 늘어나고 응답 시간이 줄어드는 효과를 기대할 수 있다. 웹서버가 클라이언트의 요청에 의해 웹페이지에 대한 응답 결과를 돌려줬을때,\n클라이언트의 화면에는 랜더링해야하는 수많은 이미지가 필요하다.\n이 이미지를 웹서버가 전부 주려면 데이터의 용량이 무거워서 서버에 부하가 걸리게 되는데,,\n따라서 웹서버는 이미지를 대신 건내주는 CDN에게 요청한다는 개념이다. CDN은 일반적으로 용량이 큰 컨텐츠 데이터를 빠른속도로 제공하기 위해 사용자와 가까운곳에 분산되어 있는 데이터 저장 서버이다. push CDN : 서버에서 컨텐츠가 업로드 되거나, 변경되었을 때 모두 반영하는 방식\npull CDN : 클라이언트가 요청할 때마다 컨텐츠가 CDN에 새로 저장되는 방식\n두 방식 모두 장단점이 있다.\nPush방식은 모든 컨텐츠를 갖고 있기 때문에 웹서버에 요청할 일이 없지만 유지하는데 필요한 용량과 비용이 크고,\nPull방식은 요청이 들어왔을 때 컨텐츠가 있다면 즉각 응답하지만, 그렇지 않을때 웹서버에 요청해야하는 부담이 있다.<br><img alt=\"Pasted image 20240603173517.png\" src=\"사진-및-문서/pasted-image-20240603173517.png\" target=\"_self\">하지만, MSA의 경우 각 서비스마다 다른 데이터베이스를 사용하는 것이 일반적이고, 이를 하나의 데이터베이스 트렌젝션으로 처리하는 것은 기술적으로 어렵고, 처리한다 해도 긴 트렌젝션이 발생하기 때문에 효용도 적다.<br>\n<img alt=\"Pasted image 20240603180042.png\" src=\"사진-및-문서/pasted-image-20240603180042.png\" target=\"_self\">\ntcc는 분산된 REST 시스템들 간의 트랜젝션을 HTTP와 REST원칙으로 접근하여 해결하는 방법이다.\nREST API 호출은 한 번에 끝내는 것이 아니라, 2번의 걸쳐서(Try / Confirm) 진행하게 된다.\n트렌젝션의 All-or-Nothing을 TCC의 REST API를 호출을 시도(Try)하고 전부 확정(Confirm)하거나 전부 취소(Cancel)하는 것으로 구현된다.\nSpring RestTemplate을 사용하여 HTTP 요청(POST)을 보냈을 때, try 요청의 경우 정상적인 HTTP응답(HttpStatus.CREATED)를 받으면 HTTP BODY에는 JSON형태로 Confirm하게 하거나 Cancel 할 수 있는 URL이 담겨 있다. 여기서 Service에서 반환받은 값을 기준으로 Confirm 할지 Cancel할지 선택하게 된다.\n중요한 것은 여기서 실제로 데이터베이스 테이블에 변경이 있는것 이 아닌, Confirm되었을때 그때 처리가 된다. 여기서 받은 반환값을 토대로 Service에서는 resource 필드(JSON)을 역질렬화 하고 이를 사용하여 그때 실제로 데이터베이스에 있는 테이블을 변경하게 된다. Try는 리소스를 사용하기 전에 예약하는 것이다. 만약 4.구매 주문 생성에서 Try만 하고, 실패했다면 REST로 통신은 기다리고 있던(Try만 한 상태) 두 API에는 Confirm이 전달되지 않아 예약만 된 상태로 남아있게 된다. 예약된 상태는 특정 리소스를 점유하고 있다는 의미이며, 리소스를 점유하고 있는 동안에는 다른 API에서 해당 리소스를 사용하는 것은 제한된다. 따라서, 4. 행위에서 Try만 하고 실패했다면, 예약한 리소스까지 해제해주어야 한다. 분산된 환경에서 리소스를 해제하는 것은 쉬운 문제가 아닌데, TCC매커니즘에서는 Cancel과 Timeout 두가지 방법으로 예약된 리소스를 해제한다.<br>\n<img alt=\"Pasted image 20240604102140.png\" src=\"사진-및-문서/pasted-image-20240604102140.png\" target=\"_self\"> REST커뮤니케이션 관전에서 자세하게 설명하면,\nTCC REST API Consumer(여기선 OrderService)가 Try요청\nTCC REST API Provider (여기선 StockService/PaymentService)는 응답으로 Confirm하거나 Cancel할 수 있는 URI를 반환\n이를 사용하여 API Consumer는 DELETE HTTP Method로 예약한 리소스에 대한 해제를 요청한다.\n<br><img alt=\"Pasted image 20240604144026.png\" src=\"사진-및-문서/pasted-image-20240604144026.png\" target=\"_self\">\n클라이언트가 주문을하고, OrderService는 StockService와 PaymentService로 Try한다.\n그리고 구매 주문을 생성 후 Confirm하였다. StockService는 재고 처리에 성공을 한 반면, PaymentService는 결제에 실패한다.\n이경우에는 어떻게 일관성을 유지할 수 있을까? 관계형 데이터베이스에서 트랜젝션을 처리할 때에는 데이터 적합성을 보장해야 하기 때문에 엄격한 일관성 모델을 사용한다.\n하지만 결제시스템 하나의 문제로 모든 비즈니스가 멈추게 되는 문제가 발생한다.(보통은 멈추는게 맞다) StockService와 PaymentService는 OrderService로부터 받은 Confirm요청을 Queue나 Log파일에 큐잉 하고, 이를 비동기적으로 처리한다. Confirm처리 과정에서 오류가 나는 경우 계속해서 재시도하여 결국(언젠가) 처리하게 한다. 이렇게 단기적으로 일관성을 잃더라도(클라이언트 입장에서는 성공했다고 느끼지만, 실제 결제처리가 되지 않았을 수도 있다.) 결국에서는 일관성을 유지하는 모델을 결과적 일관성 이라고 한다. 단, 결과적 일관성 모델은 단기적으로 일관성을 잃어버렸을 때를 대비한 화면 처리 등이 필요하다. ex) 아마존에서 전자책을 구입한 후, 결제 과정이 진행되었고 이후 카드가 정상처리되지 않는 메일을 받아, 2일후에 제대로 결제처리를 하였다. ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Load Balancer란??","level":1,"id":"Load_Balancer란??_0"},{"heading":"많이 사용하는 로드 밸런서의 종류는 Layer4 와 Layer7이다.","level":3,"id":"많이_사용하는_로드_밸런서의_종류는_Layer4_와_Layer7이다._0"},{"heading":"CND(Content Delivery Network)란??","level":1,"id":"CND(Content_Delivery_Network)란??_0"},{"heading":"동작 방식","level":3,"id":"동작_방식_0"},{"heading":"REST 기반의 트랜잭션","level":1,"id":"REST_기반의_트랜잭션_0"},{"heading":"모놀리틱 아키텍처에서는 일반적으로 데이터베이스의 트렌젝션에 의존한다.","level":3,"id":"모놀리틱_아키텍처에서는_일반적으로_데이터베이스의_트렌젝션에_의존한다._0"},{"heading":"TCC ( Try-Confirm/Cancel)","level":2,"id":"TCC_(_Try-Confirm/Cancel)_0"},{"heading":"@RestController를 사용하여 HTTP POST Method와 연결할 수 있다.","level":3,"id":"@RestController를_사용하여_HTTP_POST_Method와_연결할_수_있다._0"},{"heading":"이후 @PutMapping을 사용하여 HTTP PUT Method와 연결된다.","level":3,"id":"이후_@PutMapping을_사용하여_HTTP_PUT_Method와_연결된다._0"},{"heading":"예약한 리소스 문제","level":2,"id":"예약한_리소스_문제_0"},{"heading":"엄격한 일관성과 결과적 일관성","level":2,"id":"엄격한_일관성과_결과적_일관성_0"},{"heading":"엄격한 일관성","level":4,"id":"엄격한_일관성_0"},{"heading":"결과적 일관성","level":4,"id":"결과적_일관성_0"}],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:Server"],"author":"","coverImageURL":"","fullURL":"study/프로그래밍/📭-server.html","pathToRoot":"../..","attachments":["사진-및-문서/pasted-image-20240603173517.png","사진-및-문서/pasted-image-20240603180042.png","사진-및-문서/pasted-image-20240604102140.png","사진-및-문서/pasted-image-20240604144026.png"],"createdTime":1739844706654,"modifiedTime":1739940359739,"sourceSize":6972,"sourcePath":"study/프로그래밍/📭 Server.md","exportPath":"study/프로그래밍/📭-server.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"study/프로그래밍/🗒-database.html":{"title":"🗒 DataBase","icon":"","description":"<a href=\".?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\".?query=tag:DB\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#DB\">#DB</a> <a href=\".?query=tag:DataBase\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#DataBase\">#DataBase</a>\n간단히 설명하면 \"여러 쿼리를 한번에 실행하는 것\" 이다.\nSQL의 Function과 비슷해 보이지만 차이가 있다.\nfunction : 클라이언트에서 처리, 리턴값 필수, 리턴값은 한개만 반환 가능\n프로시저 : 서버로 보내서 처리, 리턴값 선택, 리컨값 여러개 가능\n속도면에서는 함수에 비해 프로시저가 더 빠르다.\n그렇기 때문에 프로시저같은 경우는 실행,처리를 할때 주로 사용하고, 함수는 간단한 계산이나 수치 결과를 나타낼 때 사용한다.\n하나의 요청으로 여러 SQL문을 실행 할 수 있음\n네트워크 소요 시간을 줄일 수 있음(여러개의 쿼리를 처리하는 시점에서 네트워크 부하를 줄임)\n보수성이 뛰어나다\n개발 업무를 구분하여 개발할 수 있다.(DB관련 처리를 API처럼 만들어 사용가능) 재사용성이 낮다(DB버전 별 구문/규칙과 호환성이 다르기 때문)\n처리 성능이 좋지 않다(MySQL스토어드 프로그램 처리 성능이 낮다)\n<br><img alt=\"Pasted image 20240610171904.png\" src=\"사진-및-문서/pasted-image-20240610171904.png\" target=\"_self\">\n파라미터 선언은 프로시저명() 안에서 선언하고, SQL문과 변수는 BEGIN - END 안에서 작성한다.\nSELECT사용시 반드시, 조회한 컬럼의 값을 INTO로 변수 안에 넣어주어야 한다.\n프로시저안에서 사용하는 SQL문은 세미콜론(;)으로 문장 끝을 맺어주어야 한다.\nif, case, loop 문을 사용할 수 있다.\n프로시저내에서 다른 프로시저를 호출 할 수 있다.\n- 커넥션이란 어플리케이션과 데이터베이스 서버간의 통신 링크를 뜻한다. 애플리케이션이 쿼리를 실행하고, 데이터를 검색하고, 데이터베이스에서 트랜젝션을 수행 할 수 있는 세션을\n설정하는데 사용된다.\n말그대로 애플리케이션과 DB를 연결하는 통신링크이며, 이가 모여있는것을 커넥션 풀 이라고 한다.\n매번 연결하고 끊고 하는것 보다 커넥션풀에 등록하는 것이 성능적인 향상을 기대할 수 있기 때문이다. 테이블 간에 중복된 데이터를 허용하지 않는다는 기본 목표를 갖는다. 중복된 데이터를 허용하지 않음으로 써 무결성 을 유지할 수 있다. DB의 저장 용량 또한 줄일 수 있다.\n데이터 테이블을 분해하여 이상현상이 발생할 가능성을 줄이고, 확장/수정시 구조 변경을\n최소화 할 수 있다. 릴레이션의 분해로 인해 Join연산이 늘어날 수 있다. 쿼리시 응답시간이 느려질 수 있다. 데이터의 중복속성을 최대한 제거하는 것 이기때문에, 속성이 하나의 테이블에 집약되므로\n데이터 용량이 최소화 되어 상황에따라 처리속도가 빨라질 수도 있고, 느려질 수도 있다.\n만약 조인이 만연하여 속도저하가 발생하게 된다면 반정규화를 통해 속도를 개선할 수 있다. 테이블의 컬럼이 원자값(하나의 값)을 갖도록 테이블을 분해하는 것이다.\n각 컬럼의 순서가 상관이 없어야한다.\n하나의 컬럼은 같은 종류의 타입을 가져야 한다.<br>\n<img alt=\"Pasted image 20240531103441.png\" src=\"사진-및-문서/pasted-image-20240531103441.png\" target=\"_self\">\n원자값을 갖도록 컬럼을 나눈다.<br>\n<img alt=\"Pasted image 20240531103549.png\" src=\"사진-및-문서/pasted-image-20240531103549.png\" target=\"_self\"> 제 1 정규화를 진행한 테이블에 대해 \"완전 함수 종속\"을 만족하도록 테이블을 분해하는 것이다.\n여기서 완전 함수 종속이란, 기본키의 부분집합이 결정자가 되어선 안된다는 것을 의미한다.\n즉, 부분적 종속을 없애는 것이다.\n<br><img alt=\"Pasted image 20240531105228.png\" src=\"사진-및-문서/pasted-image-20240531105228.png\" target=\"_self\">\n해당 테이블의 기본키는 (학생번호, 강좌이름)으로 복합키 이다.\n성적은 (학생번호, 강좌이름)인 기본키가 결정하지만,\n강의실은 기본키의 부분집합인 강좌이름이 결정하게 된다.즉, 부분집합이 결정자가 되지 않도록 테이블을 분리시키는 것으로 완전 함수 종속을 만족시킬 수 있다.<br>\n<img alt=\"Pasted image 20240531105241.png\" src=\"사진-및-문서/pasted-image-20240531105241.png\" target=\"_self\">\n제2 정규화를 진행한 테이블에 대해 \"이행적 종속\"을 없애도록 테이블을 분해하는 것이다.\n여기서 이행적 종속이란 A -&gt; B , B -&gt; C 가 성립할때, A -&gt; C 가 성립되는 것을 의미한다.<br>\n<img alt=\"Pasted image 20240531104351.png\" src=\"사진-및-문서/pasted-image-20240531104351.png\" target=\"_self\">\n다음의 경유 이행적 종속상태 로 말할 수 있다.\n그 경우 테이블을 분리하여 데이터 변경시에 다른 데이터까지 변경되는 상황을 막을 수 있다.<br>\n<img alt=\"Pasted image 20240531104418.png\" src=\"사진-및-문서/pasted-image-20240531104418.png\" target=\"_self\">\n제3 정규화를 좀 더 강화한 것이라 생각하면 된다.\nBCNF정규화란 제3 정규화를 진행한 테이블에 대해 모든 결정자가 후보키가 되도록\n테이블을 분해하는 것을 말한다.\n<br><img alt=\"Pasted image 20240531104751.png\" src=\"사진-및-문서/pasted-image-20240531104751.png\" target=\"_self\">\n특수 수강 테이블에서 기본키는 (학생번호, 특강이름)이다. 그리고 기본키는 교수를 결정하고 있다.\n또한, 여기서 교수는 특강이름을 결정하고있다.문제는 교수가 특강이름을 결정하는 결정자 이지만, 후보키가 아니다.\n그렇기 때문에 BCNF 정규화를 만족시키기 위해서는 테이블을 분해하여 아래와 같이 분리할 수 있다.<br><img alt=\"Pasted image 20240531104803.png\" src=\"사진-및-문서/pasted-image-20240531104803.png\" target=\"_self\">\n컬럼값의 중복을 제거하는것이다. 중복을 제거하기 위해 분해할 수 있을만큼 최대한 분해하는 것이다. 그 이상 정규화를 진행하면 오히려 정규화의 단점이 더 커지기 때문이다.\n세션2에서 동시에 같은 데이터를 수정하게 되면 여러가지 문제가 발생한다.\n이런문제를 방지하기 위해, 세션이 트렌젝션을 시작하고 데이터를 수정하는 동안에 커밋이나 롤백 전까지\n다른세션에서 해당 데이터를 수정할 수 없게 막아야 한다. 이런 문제를 해결하기 위해 DB에서는\nLOCK 락 이라는 개념을 제공한다.\n락은 언제 사용하는가? : 트렌젝션 종료 시점까지 해당 데이터를 다른 곳에서 변경하지 못하도록 강제로 막아야 할 때 사용한다.\n일반적인 조회는 락을 사용하지 않는다.\n락 타임아웃(다른 세션이 데이터를 점유하고 있을때 대기시간이 초과된 경우)에는 익셉션이 발생하게 된다.\n인덱스 : 단일데이터 단위인 도큐먼트(document)를 모아놓은 집합을 인덱스(index)라고 한다.\n색인 : 데이터를 Elasticsearch에 저장하는 행위\n샤드 : 인덱스는 기본적으로 샤드(shard)라는 단위로 분리되고, 각 노드에 분산되어 저장된다 (검색의 기본단위는 샤드이다.)<br>\n<img alt=\"Pasted image 20240828104032.png\" src=\"사진-및-문서/pasted-image-20240828104032.png\" target=\"_self\">\n데이터를 범위나 카테고리로 나누어 관리하는 기법을 파티셔닝 이라고 한다. 인덱스를 생성할 때, 처음 생성된 샤드를 프라이머리 샤드, 복제본은 리플리카 라고 부른다. 예를 들어 한 인덱스가 5개의 샤드로 구성되어있고, 클러스터가 4개의 노드로 구성되어있다고 가정하면,\n각각 5개의 프라이머리 샤드와 복제본, 총 10개의 샤드들이 전체 노드에 골고루 분산되어 저장된다.<br>\n<img alt=\"Pasted image 20240828104728.png\" src=\"사진-및-문서/pasted-image-20240828104728.png\" target=\"_self\">\n노드가 1개만 존재한다면 복제본은 생성되지 않는다. Elasticsearch는 아무리 작은 클러스터라도 최소 3개의 노드로 구성할 것을 권장하고 있다. 이렇게 프라이머리 샤드와 리플리카를 통해 Elasticsearch는 운영 중에 노드가 유실되어도 데이터를 잃어버리지 않고, 데이터 가용성과 무결성을 보장하게 된다. 샤드는 여러 서버에 분산되어 병렬 및 병행으로 검색되므로, 인덱스가 같던 다르던 상관이 없다.\n검색의 기본 단위는 샤드이기 때문이다. 따라서 인덱스를 나누는 것은 운영의 편의성을 고려할 때 선택하는 방법이다.\n전체색인을 할 경우 인덱스 1개가 7억건 이라면 색인이 모두 끝날때 까지 몇시간이 걸리게 된다.\n그 와중에 데이터에 변경이 있게 된다면 전체 색인 후 일괄적용이 들어가게 될텐데, 대기시간이 길어질 수록 일괄적용 시간도 함께 늘어나게 된다.\n결국 더 빠른 색인을 위해서는 하나의 인덱스를 여러개로 나누너 병행처리를 시키도록 해야한다. 다나와 에서는 상품DB특성상 카테고리군 별로 인덱스를 나누고 있다. 이때의 장점은 특정 카테고리만 검색할때 해당 인덱스만 검색하면 되므로, 검색 속도가 현저히 감소하게 된다. 일반적인 시스템 로그와 같은 로그성 문서는 색인을 하고 나면 수정이 필요없는 정적 컨텐츠인 반면\n상품문서같은 경우 색인이 끝나도 계속 갱신되어야 하는 살아있는 동적 컨텐츠이다. 따라서 동적색인에 원할하고, 검색성능도 높은 설계를 요구한다.\n트렌젝션\n- 데이터베이스의 상태를 변화시키기 위해 수행하는 작업의 단위트렌젝션매니저\n- Spring에서 제공하는 트렌젝션 관리 기능과 JPA를 연결하는 역할을 수행.@Transactional\n- 클래스나 메서드에 삽입하면, AOP레벨(프록시를 사용하여)에서 트렌젝션매니저를 이용한 동작을 공통으로 적용.앤티티매니저\n- 영속성 컨텍스트를 관리하는 인터페이스\n- 엔티티의 저장/수정/삭제/조회 작업을 수행\n- 스레드 세이프하지 않으므로 한트레젝션 내에서만 사용\n- 앤티티매니저펙토리는 스레드세이프하므로 공유 가능영속성컨텍스트\n- JPA의 엔티티를 관리하는 1차 캐시 역할을 하는 메모리 공간\n- 엔티티와 DB데이터간의 상태 동기화를 책임\n- 1차캐싱 / 변경 감지 / 지연 로딩 의 특징을 갖는다\n- 지연로딩 : 관계된 엔티티를 실제로 필요할때만 가져오며, 변경점을 한번만 commit한다스냅샷\n- DB스냅샷 :\n- 트렌젝션이 시작될때 생성된다.\n- 독립적인 데이터베이스 복사본으로, 원본데이터 변경과 무관하다.\n- 고급 격리 수준(REPEATABLE READ, SERIALIZABLE)에서 MVCC(Multi-Version Concurrency Control)를 구현할 때 사용한다.\n- 물리적인 복사본이 아닌, 논리적으로 매 쿼리마다 동적으로 가공이 되는 방식이다.\n- 앤티티매니저_스냅샷 :\n- 엔티티가 영속성 컨텍스트에 로드될 때 생성된다.\n- 엔티티의 초기 상태를 저장하여 변경 감지에 사용된다.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"프로시저란?","level":1,"id":"프로시저란?_0"},{"heading":"프로시저를 사용하는 이유","level":3,"id":"프로시저를_사용하는_이유_0"},{"heading":"프로시저의 단점","level":3,"id":"프로시저의_단점_0"},{"heading":"DB Connection이란 무엇일까?","level":1,"id":"DB_Connection이란_무엇일까?_0"},{"heading":"DataBase 정규화  과정","level":1,"id":"DataBase_정규화_과정_0"},{"heading":"정규화란?","level":2,"id":"정규화란?_0"},{"heading":"장점","level":2,"id":"장점_0"},{"heading":"단점","level":2,"id":"단점_0"},{"heading":"제 1 정규화","level":3,"id":"제_1_정규화_0"},{"heading":"제 2 정규화","level":3,"id":"제_2_정규화_0"},{"heading":"제3 정규화","level":3,"id":"제3_정규화_0"},{"heading":"BCNF 정규화","level":3,"id":"BCNF_정규화_0"},{"heading":"제4 정규화는 다치 종속을 없애는것이다","level":3,"id":"제4_정규화는_다치_종속을_없애는것이다_0"},{"heading":"제5 정규화는 조인 종속을 없애는것이다.","level":3,"id":"제5_정규화는_조인_종속을_없애는것이다._0"},{"heading":"보통 정규화는 BCNF정규화 까지만 진행하는 경우가 많다.","level":4,"id":"보통_정규화는_BCNF정규화_까지만_진행하는_경우가_많다._0"},{"heading":"Dual 테이블이란??","level":1,"id":"Dual_테이블이란??_0"},{"heading":"오라클 자체에서 제공되는 테이블","level":2,"id":"오라클_자체에서_제공되는_테이블_0"},{"heading":"간단하게 함수를 이용해서 계산결과값을 확인할 때 사용하는 테이블","level":2,"id":"간단하게_함수를_이용해서_계산결과값을_확인할_때_사용하는_테이블_0"},{"heading":"오직 한 행, 한 컬럼 만을 담고 있는 Dummy 테이블이다.","level":3,"id":"오직_한_행,_한_컬럼_만을_담고_있는_Dummy_테이블이다._0"},{"heading":"Lock ( 데이터베이스 락 ) 이란?","level":1,"id":"Lock_(_데이터베이스_락_)_이란?_0"},{"heading":"세션1이 트렌젝션을 시작하고 데이터를 수정하는 동안 아직 커밋을 수행하지 않았는데,","level":2,"id":"세션1이_트렌젝션을_시작하고_데이터를_수정하는_동안_아직_커밋을_수행하지_않았는데,_0"},{"heading":"엘라스틱서치 인덱스와 샤드 분할","level":1,"id":"엘라스틱서치_인덱스와_샤드_분할_0"},{"heading":"프라이머리 샤드와 복제본(Replica)","level":2,"id":"프라이머리_샤드와_복제본(Replica)_0"},{"heading":"검색시 샤드와 인덱스","level":3,"id":"검색시_샤드와_인덱스_0"},{"heading":"색인시 인덱스","level":3,"id":"색인시_인덱스_0"},{"heading":"결론","level":2,"id":"결론_0"},{"heading":"트렌젝션 / DB스냅샷 / 앤티티매니저 / 영속성컨텍스트 / JPA","level":1,"id":"트렌젝션_/_DB스냅샷_/_앤티티매니저_/_영속성컨텍스트_/_JPA_0"},{"heading":"각각의 정의","level":2,"id":"각각의_정의_0"}],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:DB","?query=tag:DataBase"],"author":"","coverImageURL":"","fullURL":"study/프로그래밍/🗒-database.html","pathToRoot":"../..","attachments":["사진-및-문서/pasted-image-20240610171904.png","사진-및-문서/pasted-image-20240531103441.png","사진-및-문서/pasted-image-20240531103549.png","사진-및-문서/pasted-image-20240531105228.png","사진-및-문서/pasted-image-20240531105241.png","사진-및-문서/pasted-image-20240531104351.png","사진-및-문서/pasted-image-20240531104418.png","사진-및-문서/pasted-image-20240531104751.png","사진-및-문서/pasted-image-20240531104803.png","사진-및-문서/pasted-image-20240828104032.png","사진-및-문서/pasted-image-20240828104728.png"],"createdTime":1739844411985,"modifiedTime":1739940271405,"sourceSize":11872,"sourcePath":"study/프로그래밍/🗒 DataBase.md","exportPath":"study/프로그래밍/🗒-database.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"study/프로그래밍/🧰-devops.html":{"title":"🧰 DevOps","icon":"","description":"<a href=\".?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\".?query=tag:DevOps\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#DevOps\">#DevOps</a> <a href=\".?query=tag:CI/CD\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#CI/CD\">#CI/CD</a>\n애플리케이션을 실행하는데 필요한 모든 구성 요소와 기능을 갖춘 소프트웨어이다.\n전체 실행(runtime)환경에서 애플리케이션을 패키징하고 격리할 수 있는 기술이다. 컨테이너화 된 애플리케이션은 환경(개발/테스트/프로덕션)에 쉽게 이동할 수 있다. 컨테이너 파이프라인에 보안을 구축하고 인프라를 보호하여 컨테이너의 안정성, 확장성, 신뢰성을 보장할 수 있다. 일관된 행동과 기능으로, 퍼블릭/프라이빗/클라우드 간에 쉽게 이동이 가능하다. 담당 영역을 분리하여 개발 팀과 운영 팀간의 충돌을 줄일 수 있다.\n오픈기술을 기반으로 하기 때문에, 최신 기술을 활용하여 다양하고 강력한 기술의 제품을 채택할 수 있다.\nex) docker / k8s 등등\n클라우드 네이티브 개발 방식에 필요한 기반 기술을 제공한다. 전사적으로 배포를 관리할 수 있는 방법이다.\nk8s(쿠버네티스)는 컨테이너 작업을 자동화하는 오픈소스 플랫폼이다.\n컨테이너화 된 애플리케이션을 배포하고 확장하는데 수동 프로세스를 필요로 하지 않는다.\ndocker는 전통적인 LXC와 다르다. docker도 처음에는 LXC기반으로 개발되었지만 이후, 이러한 종속관계에서 벗어났다.\nLXC는 경량/가상화 기술은 뛰어났지만 사용자환경은 그에 미치지 못햇다.\n하지만 docker는 컨테이너를 실행하는 것 이상의 다양한 생성/구축/이미지전송 등의 프로세스 관리를 용이하게 해준다.\n- 젠킨스는 지속적 통합(CI)및 지속적 배포(CD)도구로, 개발 프로세스의 빌드, 테스트, 배포 등을 자동화하고 관리해주는 도구이다. 개발자들이 작성한 코드를 중앙 저장소에 자주 통합하고, 자동화된 빌드와\n테스트를 통해 문제를 빠르게 발견하고 해결할 수 있게 해주는것. 모든 변경사항을 자동화된 테스트와 빌드를 거친 후 실제 서버에 자동으로\n배포하는 기술. ( 현제 HF서비스에서는 ArgoCD를 사용하여 진행한다. ) 이러한 구조를 통해 다양한 환경에서 동시에 빌드와 테스트를 수행할 수 있으며,\n부하 분삭 및 확장성을 제공한다. 젠킨스는 소스코드관리(SCM)시스템과 통합하여 변경사항이 발견될때\n자동으로 빌드 및 테스트를 실행할 수 있다.\n웹훅이나 폴링 방식을 사용하여 scm시스템에서 변경사항을 감지하고\n해당작업을 트리거한다. 젠킨스는 빌드 및 테스트작업이 완료되면 해당결과와 로그를 저장한다.\n이를 통해 빌드 실패의 원인을 찾거나 테스트 결과를 검토할수 있다. 젠킨스는 빌드, 테스트 및 배포 과정에서 발생하는 로그와 메트릭을 수집하고\n분석하여 성능문제, 장애, 최적화 포인트 등을 식별할 수 있다. 개발자가 소스코드 변경사항을 SCM 시스템에 푸시한다. 젠킨스는 웹훅이나 폴링 방식을 통해 변경사항을 감지하고 Jenkinsfile에 정의된 파이프라인을 실행한다. 젠킨스는 마스터노드에서 슬레이브 노드로 작업을 할당하고 슬레이브 노드에서 빌드, 테스트 , 배포 작업을 수행한다. 각 단계에서 필요의 경우, 플러그인을 사용하여 다양한 도구와 통합하여작업을 수행할 수 있다. 작업이 완료되면 젠킨스는 결과와 로그를 저장하고 개발자에게 알림을 전송한다. Linux 컨테이너를 만들고 사용할 수 있도록 하는 컨테이너화 기술이다. 컨테이너를 매우 가벼운 모듈식 가상 머신처럼 다룰 수 있으며, 컨테이너를 구축, 배포, 복사, 이동 등 유연하게 사용할 수 있도록 도와준다. 애플리케이션을 클라우드에 최적화 하도록 지원한다. 커널과 네임스페이스 등 Linux의 기능을 사용하여 프로세스를 분리함으로 써, 독립적으로 실행할 수 있도록 한다.\n개별적으로 실행하여 인프라를 더 효과적으로 활용하고 개별시스템을 사용할 때와 동일한 보안을 유지할 수 있도록 한다.\n이미지 기반 배포 모델을 제공하여, 여러 환경에서 종속 항목과 손쉽게 공유 할 수 있다. 모듈성 컨테이너화에 대한 docker의 접근방식은 전체 애플리케이션을 분해하지 않고도 업데이트 또는 복구를 가능하게 한다 계층 및 이미지 버전제어 docker의 이미지파일은 일련의 계층으로 구성되며 이러한 계층들은 단일 이미지로 결합된다.\n이러한 이미지 계층을 재사용하여 구축 속도가 빠르며, 각 계층화에는 버전 제어가 가능하다. 롤백 롤백 기능을 제공하여 이전 이미지 버전으로 롤백이 가능하다. 신속한 배포 이전에는 하드웨어 확보, 실행, 프로비저닝, 테스트 하는데에 몇일이 걸렸으나, docker기반의 컨테이너는 배포 시간을 몇 초로 줄일 수 있다. 도커는 애플리케이션 뿐만 아니라, 실행에 필요한 시스템 환경을 모아서 컨테이너로 관리한다. 이것을 Docker Image라고 한다. 이 이미지로 만든 컨테이너는 도커가 설치된 곳이라면 어디든 똑같이 작동함을 보장한다. 개발자가 커밋할때마다, Jenkins와 같은 CI( 지속적 통합 )툴이 해당 소스를 도커 이미지로 빌드하고, 이미지 레파지토리에서 이미지를 버전별로 관리한다. 해당 이미지를 배포 하면, 독립적으로 동작하기 때문에 CD( 지속적인 배포 )또한 가능하게 된다. 이러한 특징은 MSA와도 잘 맞는데, 각각의 서비스를 컨테이너로 배포하는 것이다. 쿠버네티스는 \"컨테이너화된 애플리케이션\"을 배포, 관리, 확장 할때 수반되는 다수의 \"수동 프로세스를 자동화\"하는 오픈소스 \"컨테이너 오케스트레이션 플랫폼\"이다.\n1. 프로비저닝 및 배포\n2. 구성 및 일정 조정\n3. 리소스 할당\n4. 컨테이너 가용성 체크\n5. 로드밸런싱 기반 컨테이너 스케일링\n6. 트래픽 라우팅\n7. 컨테이너 상세 모니터링\n8. 컨테이너 간 상호작용 및 보안 클러스터 컨트롤 플레인 및 하나 이상의 컴퓨팅 머신 또는 노드를 뜻한다. 컨트롤 플레인 쿠버네티스 노드를 제어하는 프로세스의 컬렉션. 여기에 모든 태스크 할당이 시작된다. kubelet 노드에서 실행되며, 컨테이너 매니패스트를 읽고, 정의된 컨테이너가 실행중인지 확인한다. 포드(Pod) 단일 노드에 배포된 하나 이상의 컨테이너 그룹. 포드에 있는 모든 컨테이너는 IP주소.호스트 이름, 기타 리소스 등을 공유한다. 작동 중인 쿠버네티스 배포를 클러스터라고 한다. 클러스터는 컨테이너를 실행하는 호스트 그룹으로, 컨트롤 플레인과 컴퓨팅머신의 2개 부분으로 시각화 할 수 있다. Docker는 쿠버네티스가 오케스트레이션하는 컨테이너의 런타임으로 사용할 수 있다. 쿠버네티스가 노드에 대해 pod을 예약하면 해당 노드의 kubelet(각 컨테이너의 실행을 보장하는 서비스)가 지정된 컨테이너를 실행하도록 Docker에 명령한다. 이후, kubelet은 Docker로 부터, 지속적으로 상태를 수집하고 컨트롤 플레인에서 해당 정보를 집계한다.\n** 한줄 요약 : docker는 k8s가 시키는데로(이미짜여진대로, 자동으로) 컨테이너를 실행한다.- DevOps(개발과 운영을 통합하여 효율성,협력,안정성을 개선하는 개발/운영 방법론)의 실천 방법중 하나로, 애플리케이션 배포와 운영에 관련된 모든요소를 Git에서 관리(Opertation)한다는 뜻이다.\n- Git의 버전관리 시스템과 운영환경간의 일관성을 유지하여 소프트웨어간의 불일치 문제를\n해결할 수 있다.\n- GitOps를 구현하기 위한 도구 중 하나로, k8s애플리케이션의 자동배포(CD)를 위한 오픈소스 도구 이다.\nk8s클러스터에 배포된 애플리케이션의 CD를 담당한다.\n- Git저장소에서 변경사항을 감지하여 자동으로 k8s클러스터에 애플리케이션을 배포한다. 쿠버네티스는 클러스터 안에서 컨테이너 애플리케이션이나 네트워크 설정, 배치 실행을 하는 Job등\n리소스를 작성한다. 이와 같은 구체적인 설정 정보를 파일로 관리하는데,\n이것이 매니페스트파일(manifest file)이라고 한다.\nJSON이나 YALM 파일로 작성되며, 오브젝트를 생성하기 위해 필요한 파일이기도 하다. local브랜치에서 작업 후 각(dev/stg/prod)프로젝트로 소스를 통합(merge)한다.\njar, 메니페스트 file 등 소스,배포에 필요한 파일들 이미지 화 Jenkin에서 이미지화된 배포에 필요한 파일,소스들을 ArgoCD로 Pull한다. Jenkins에서 받은 이미지파일과 매니패스트파일을 기반으로 실제 서버에 배포한다.\n<br><img alt=\"Pasted image 20240531162124.png\" src=\"사진-및-문서/pasted-image-20240531162124.png\" target=\"_self\">\n두가지 모두 소스코드 저장소 호스팅 플랫폼이며, 기술적 기반을 깃(Git)으로 삼는다는 점에서 비슷하다.\n기본 기능은 같지만, 서비스의 초점이 조금 다른곳에 맞추어져 있다. 깃허브와 깃랩의 가장 큰 차이점은 데브옵스 요소에 있다. 즉 깃랩은 젠킨스와 아르고와 같은 CI/CD 도구들을 사용하지 않아도 자체적으로 파이프라인을 구성하여 간단하고 빠른 배포가 가능하다. 하지만 우리는 깃랩은 사용하지만, 깃랩CI/CD는 사용하고 있지 않은 상태이다. 그덕에 신속한 배포가 가능하고, 문제 발생시 이전 버전으로 신속하게 복원할 수 있다. 프로덕션과 스테이징의 분기가 최소한으로 있으며, 이러한 여러 다중 분기 접근방식은 여러단계의 테스트로 안정적인 유지가 가능하게 한다. 한편 이러한 이유로 병합및 수정시 코드 검토가 까다로워진다.\n<br><img alt=\"Pasted image 20240722180706.png\" src=\"사진-및-문서/pasted-image-20240722180706.png\" target=\"_self\">\nELK란 elastic / logstash / kibana 의 앞글자를 딴 시슷템으로\n데이터를 수집, 처리, 조회 하는데 특화되어있는 시스템이다. 인덱스란 ? - 단일 데이터 단위를 도큐먼트라고 하며, 이 도큐먼트를 모아놓은 집합을 인덱스라고 한다. 인덱스 용량이 증가함에 따라 운영부담과 비용이 크게 증가한다.\n튜닝을 통한 안정화에 한계가 있다. 수평 확장이 가능하다 가용성 높은 다중 테넌트 로그 집계가 가능하다 로그에 대한 메타데이터만 인덱싱한다. 즉 레이블을 기반으로 구축되어있다. 로그 내용을 색인화 하는것이 아닌, 레이블 세트를 색인화 하기 때문에 데이터 량을 감소시킬 수 있다. 검색시 레이블 기반으로만 조회하고, 레이블과 매칭된 압축된 로그 데이터를 가져와 사용한다. 풀텍스트 검색시 기존 ELK대비 느리다.\n쿼리언어를 새로이 학습해야한다.\n레퍼런스가 부족하다.\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"컨테이너란 무엇일까?","level":1,"id":"컨테이너란_무엇일까?_0"},{"heading":"장점","level":2,"id":"장점_0"},{"heading":"컨테이너 오케스트레이션이란?","level":2,"id":"컨테이너_오케스트레이션이란?_0"},{"heading":"Docker와 Linux Container 의 차이?","level":2,"id":"Docker와_Linux_Container_의_차이?_0"},{"heading":"젠킨스(Jenkins)는 정확히 무엇을 도와주는 녀석일까?","level":1,"id":"젠킨스(Jenkins)는_정확히_무엇을_도와주는_녀석일까?_0"},{"heading":"CI(Continuous Integration) 지속적인 통합","level":3,"id":"CI(Continuous_Integration)_지속적인_통합_0"},{"heading":"CD(Continuous Deployment) 지속적인 배포","level":3,"id":"CD(Continuous_Deployment)_지속적인_배포_0"},{"heading":"젠킨스의 주요 기능","level":1,"id":"젠킨스의_주요_기능_0"},{"heading":"1. 젠킨스는 마스터노드와 슬레이브노드로 구성된다","level":2,"id":"1._젠킨스는_마스터노드와_슬레이브노드로_구성된다_0"},{"heading":"2. SCM트리거 및 웹훅","level":2,"id":"2._SCM트리거_및_웹훅_0"},{"heading":"3. 결과 및 로그저장","level":2,"id":"3._결과_및_로그저장_0"},{"heading":"4. 로그 및 메트릭 수집 및 분석","level":2,"id":"4._로그_및_메트릭_수집_및_분석_0"},{"heading":"젠킨스의 동작원리","level":1,"id":"젠킨스의_동작원리_0"},{"heading":"Docker에 대한 자세한 설명","level":1,"id":"Docker에_대한_자세한_설명_0"},{"heading":"docker컨테이너의 실행방식","level":2,"id":"docker컨테이너의_실행방식_0"},{"heading":"장점","level":3,"id":"장점_1"},{"heading":"Docker의 특징","level":2,"id":"Docker의_특징_0"},{"heading":"k8s(쿠버네티스)에 대한 자세한 설명","level":1,"id":"k8s(쿠버네티스)에_대한_자세한_설명_0"},{"heading":"컨테이너 오케스트레이션이 하는일","level":4,"id":"컨테이너_오케스트레이션이_하는일_0"},{"heading":"쿠버네티스 주요 구성 요소","level":3,"id":"쿠버네티스_주요_구성_요소_0"},{"heading":"k8s클러스터란?","level":2,"id":"k8s클러스터란?_0"},{"heading":"K8S와 Docker의 관계","level":2,"id":"K8S와_Docker의_관계_0"},{"heading":"GitOps란?","level":1,"id":"GitOps란?_0"},{"heading":"Argo CD란?","level":1,"id":"Argo_CD란?_0"},{"heading":"쿠버네티스의 매니페스트 파일이란?","level":1,"id":"쿠버네티스의_매니페스트_파일이란?_0"},{"heading":"현재 HF서비스의 CI/CD과정","level":1,"id":"현재_HF서비스의_CI/CD과정_0"},{"heading":"1. Git에서 Commit / push하여 소스통합","level":2,"id":"1._Git에서_Commit_/_push하여_소스통합_0"},{"heading":"2. Jenkins에서 Git 소스 Build,Test&amp;Publish 후 이미지화 (CI)","level":2,"id":"2._Jenkins에서_Git_소스_Build,Test&Publish_후_이미지화_(CI)_0"},{"heading":"3. Docker에서 이미지 정보 받은 후 ArgoCD로 이미지 Pull","level":2,"id":"3._Docker에서_이미지_정보_받은_후_ArgoCD로_이미지_Pull_0"},{"heading":"4. ArgoCD로 이미지파일 K8S에 배포 (CD)","level":2,"id":"4._ArgoCD로_이미지파일_K8S에_배포_(CD)_0"},{"heading":"5. K8S(쿠버네티스)에서 이미지파일 Docker를 통해 실행(서버실행)","level":2,"id":"5._K8S(쿠버네티스)에서_이미지파일_Docker를_통해_실행(서버실행)_0"},{"heading":"각 과정에서 오류 및 예외 사항들을 찾고 대응 할 수 있도록","level":3,"id":"각_과정에서_오류_및_예외_사항들을_찾고_대응_할_수_있도록_0"},{"heading":"로그를 제공한다.","level":3,"id":"로그를_제공한다._0"},{"heading":"elastic 에서도 동작중인 서버의 모든 로그를 검색, 필터링 할 수 있다. 하나의 trace_id로 묶인 트렌젝션 단위를 기준으로 오류를 찾고 대응할 수 있다.","level":4,"id":"elastic_에서도_동작중인_서버의_모든_로그를_검색,_필터링_할_수_있다._하나의_trace_id로_묶인_트렌젝션_단위를_기준으로_오류를_찾고_대응할_수_있다._0"},{"heading":"Git Lab(깃랩) / Git Hub(깃허브) 차이","level":1,"id":"Git_Lab(깃랩)_/_Git_Hub(깃허브)_차이_0"},{"heading":"1. DevOps(데브옵스)","level":2,"id":"1._DevOps(데브옵스)_0"},{"heading":"깃랩은 지속적 통합(CI)/지속적 배포(CD)와 데브옵스 워크플로우를 내장하고 있다.","level":3,"id":"깃랩은_지속적_통합(CI)/지속적_배포(CD)와_데브옵스_워크플로우를_내장하고_있다._0"},{"heading":"반면, 깃허브는 사용작 원하는 CI/CD도구를 직접 통합해야한다.","level":3,"id":"반면,_깃허브는_사용작_원하는_CI/CD도구를_직접_통합해야한다._0"},{"heading":"2. 브랜치의 병합과 분리","level":2,"id":"2._브랜치의_병합과_분리_0"},{"heading":"깃허브에서는 브랜치 전략이라는 말이 있을만큼 새 브랜칭와 마스터 브랜치와의 병합이 용이하다.","level":3,"id":"깃허브에서는_브랜치_전략이라는_말이_있을만큼_새_브랜칭와_마스터_브랜치와의_병합이_용이하다._0"},{"heading":"깃랩의 워크플로우는 변경한 각 세트를 마스터 브랜치와 별도의 안정적인 브랜치로 생성한다.","level":3,"id":"깃랩의_워크플로우는_변경한_각_세트를_마스터_브랜치와_별도의_안정적인_브랜치로_생성한다._0"},{"heading":"Hello CI-CD","level":1,"id":"Hello_CI-CD_0"},{"heading":"Grafana Loki 란?","level":1,"id":"Grafana_Loki_란?_0"},{"heading":"우리가 기존에 사용하던 ELK","level":2,"id":"우리가_기존에_사용하던_ELK_0"},{"heading":"Elastic search는 강력한 검색 및 쿼리 기능을 제공하여 다양한 조건으로 로그를 검색하고원하는 데이터를 쉽게 추출할 수 있다.","level":3,"id":"Elastic_search는_강력한_검색_및_쿼리_기능을_제공하여_다양한_조건으로_로그를_검색하고원하는_데이터를_쉽게_추출할_수_있다._0"},{"heading":"Logstash는 다양한 데이터 형식을 수집하고 변환할 수 있는 기능제공한다.","level":3,"id":"Logstash는_다양한_데이터_형식을_수집하고_변환할_수_있는_기능제공한다._0"},{"heading":"ELK 서비스의 한계점","level":2,"id":"ELK_서비스의_한계점_0"},{"heading":"Loki의 장점","level":2,"id":"Loki의_장점_0"},{"heading":"Loki의 한계","level":2,"id":"Loki의_한계_0"},{"heading":"결론 : 기존 ELK대비 높은 압출률을 가진 구조로, 로그를 오랫동안 보관하기에도 용의하며 확장에 유리하다.","level":4,"id":"결론_기존_ELK대비_높은_압출률을_가진_구조로,_로그를_오랫동안_보관하기에도_용의하며_확장에_유리하다._0"}],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:DevOps","?query=tag:CI/CD"],"author":"","coverImageURL":"","fullURL":"study/프로그래밍/🧰-devops.html","pathToRoot":"../..","attachments":["사진-및-문서/pasted-image-20240531162124.png","사진-및-문서/pasted-image-20240722180706.png"],"createdTime":1739844345143,"modifiedTime":1739940309962,"sourceSize":14356,"sourcePath":"study/프로그래밍/🧰 DevOps.md","exportPath":"study/프로그래밍/🧰-devops.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"study/note-ci_cd/🟣-obsidian-정적호스팅-cicd-과정.html":{"title":"🟣 Obsidian 정적호스팅 CICD 과정","icon":"","description":"<a href=\".?query=tag:블로그\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#블로그\">#블로그</a> <a href=\".?query=tag:연동\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#연동\">#연동</a> <a href=\".?query=tag:CI/CD\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#CI/CD\">#CI/CD</a> <a href=\".?query=tag:옵시디언\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#옵시디언\">#옵시디언</a> <a href=\".?query=tag:Git\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Git\">#Git</a> <a href=\".?query=tag:Netlify\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Netlify\">#Netlify</a> 먼저 옵시디언(Obsidian)에 대한 정보를 확인하고 싶다면.현재 보고있는 해당 사이트는 Obsidian앱의 지속적인 통합(CI), 지속적인 배포(CD)를 통해 구현된 사이트이다.\n아주 기본적인 셋팅이므로, 이후 커스텀은 각자의 취향대로 진행하면 될 것이다.\nWAS가 아닌 WEB 정적 호스팅을 위한 셋팅이다.\n<br><img alt=\"Pasted image 20250218151731.png\" src=\"사진-및-문서/pasted-image-20250218151731.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250218151806.png\" src=\"사진-및-문서/pasted-image-20250218151806.png\" target=\"_self\">\n이후 해당 위치에 Git을 생성해 줄 것이다.\n<br><img alt=\"Pasted image 20250218152044.png\" src=\"사진-및-문서/pasted-image-20250218152044.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250218152103.png\" src=\"사진-및-문서/pasted-image-20250218152103.png\" target=\"_self\">\n이전 생성한 옵시디언 폴더로 이동한다.\n&gt; cd C:\\이하경로\\obsidian\\TEST\n<br><img alt=\"Pasted image 20250218153131.png\" src=\"사진-및-문서/pasted-image-20250218153131.png\" target=\"_self\">\n깃 파일 생성\n해당 과정전 pc에 Git이 설치되어 있어야한다. (방법은 알아서)\n&gt; git init\n<br><img alt=\"Pasted image 20250218153319.png\" src=\"사진-및-문서/pasted-image-20250218153319.png\" target=\"_self\">\n깃 레포에 연결\n&gt; git remote add origin https://github.com/LeeTaeSung0628/obsidian_Test.git\n<br><img alt=\"Pasted image 20250218153445.png\" src=\"사진-및-문서/pasted-image-20250218153445.png\" target=\"_self\">\n옵시디언 레포에 올리기\n&gt; git add . &gt; git commit -m \"initial commit\" &gt; git push -u origin master\n<br><img alt=\"Pasted image 20250218153543.png\" src=\"사진-및-문서/pasted-image-20250218153543.png\" target=\"_self\"><img alt=\"Pasted image 20250218153553.png\" src=\"사진-및-문서/pasted-image-20250218153553.png\" target=\"_self\" style=\"width: 700px; max-width: 100%;\">여기까지 따라왔다면, 옵시디언 파일을 git 레포지토리에 저장하는 것 까지 마칠 수 있다.<br><img alt=\"Pasted image 20250218151330.png\" src=\"사진-및-문서/pasted-image-20250218151330.png\" target=\"_self\" style=\"width: 1050px; max-width: 100%;\">\n옵시디언의 Git플러그인이다. 기본적인 커밋 푸시 및 셋팅이 가능하다.\n기능은 제한적이기 때문에, GitDesktop이나, Cmd에서 직접 Git을 셋팅하는것을 추천한다.\n이후 셋팅이 완료되었을 때 배포 자동화를 위해 사용하면 편리하다.\n<br><img alt=\"Pasted image 20250218153814.png\" src=\"사진-및-문서/pasted-image-20250218153814.png\" target=\"_self\" style=\"width: 775px; max-width: 100%;\"><img alt=\"Pasted image 20250218153858.png\" src=\"사진-및-문서/pasted-image-20250218153858.png\" target=\"_self\">\n이전에 생성한 깃 파일의 주소가 들어가면 된다.\nC:\\Users\\경로\\obsidian\\TEST\\.git\n<br><img alt=\"Pasted image 20250218154352.png\" src=\"사진-및-문서/pasted-image-20250218154352.png\" target=\"_self\" style=\"width: 875px; max-width: 100%;\">\n또한 설정에서 오토 커밋/푸시/풀 설정을 통해 지속 적인 통합 셋팅이 가능하다.<br>\n<img alt=\"Pasted image 20250218154433.png\" src=\"사진-및-문서/pasted-image-20250218154433.png\" target=\"_self\" style=\"width: 725px; max-width: 100%;\">\n옵시디언은 캐쉬파일로 인한 충돌이 잦기 때문에 상세히 설정하는 것을 추천한다.<br><img alt=\"Pasted image 20250218154615.png\" src=\"사진-및-문서/pasted-image-20250218154615.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250218154633.png\" src=\"사진-및-문서/pasted-image-20250218154633.png\" target=\"_self\">\n정상적으로 푸시 완료.<br>\n<img alt=\"Pasted image 20250218154647.png\" src=\"사진-및-문서/pasted-image-20250218154647.png\" target=\"_self\"> 해당 Git 레포는 옵시디언의 마크다운(md파일)자체를 저장하고 관리하는 레포다.\n정적 컨텐츠 호스팅을 위한 레포지토리를 추가적으로 생성하여 줄 것이다. 여러 방법이 있지만, md파일을 기반으로 배포가능한 형태의 HTML파일을 생성해주는 플러그인을 사용할 것이다.<br>\n<img alt=\"Pasted image 20250218155524.png\" src=\"사진-및-문서/pasted-image-20250218155524.png\" target=\"_self\">\n다양한 옵션을 지원하지만, 오늘은 기본적인 기능만 설명하겠다.\nControl + P -&gt; export 를 검색\n<br><img alt=\"Pasted image 20250218160328.png\" src=\"사진-및-문서/pasted-image-20250218160328.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250218160359.png\" src=\"사진-및-문서/pasted-image-20250218160359.png\" target=\"_self\">\n폴더 생성 후 익스포트 한다.\n이때 처음엔 index페이지를 생성하고, 추후 삭제하는 것을 추천(Netlify는 index가 필수)<br>\n<img alt=\"Pasted image 20250218160428.png\" src=\"사진-및-문서/pasted-image-20250218160428.png\" target=\"_self\"><img alt=\"Pasted image 20250218160532.png\" src=\"사진-및-문서/pasted-image-20250218160532.png\" target=\"_self\">\n하댕 디렉토리에 정상적으로 생성된것을 볼 수 있다. 배포용 HTML파일 레포지토리<br>\n<img alt=\"Pasted image 20250218160956.png\" src=\"사진-및-문서/pasted-image-20250218160956.png\" target=\"_self\"> Netlify 정적 호스팅 서비스를 사용하여 Git 레포를 배포하겠다.\n<br><a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.netlify.com/\" target=\"_self\">https://www.netlify.com/</a> 위 사이트로 접속하여 로그인 한 후, 깃 레포에 Netlify서비스를 적용한다.\n1.깃허브를 선택한다.<br>\n<img alt=\"Pasted image 20250218161424.png\" src=\"사진-및-문서/pasted-image-20250218161424.png\" target=\"_self\" style=\"width: 750px; max-width: 100%;\">\n2.배포용 옵시디언 레포를 선택한 후, SAVE를 누른다.<br>\n<img alt=\"Pasted image 20250218161515.png\" src=\"사진-및-문서/pasted-image-20250218161515.png\" target=\"_self\">\n3.site_name을 설정하고 Deploy를 누른다.<br>\n<img alt=\"Pasted image 20250218161728.png\" src=\"사진-및-문서/pasted-image-20250218161728.png\" target=\"_self\">\n정적웹사이트를 위한 셋팅으로 이외의 값은 공란으로 두어도 무방하다. 그리고 기다리면...<br>\n<img alt=\"Pasted image 20250218161824.png\" src=\"사진-및-문서/pasted-image-20250218161824.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250218161847.png\" src=\"사진-및-문서/pasted-image-20250218161847.png\" target=\"_self\"> ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"개요","level":1,"id":"개요_0"},{"heading":"→ <strong>여기로</strong> <a data-href=\"🎵 Obsidian\" href=\"🎵 Obsidian\" class=\"internal-link\" target=\"_blank\" rel=\"noopener nofollow\">🎵 Obsidian</a>","level":1,"id":"→_**여기로**_[[🎵_Obsidian]]_0"},{"heading":"목차","level":1,"id":"목차_0"},{"heading":"1. 지속적인 통합","level":2,"id":"1._지속적인_통합_0"},{"heading":"1.1 옵시디언과 Git 연동","level":3,"id":"1.1_옵시디언과_Git_연동_0"},{"heading":"1.2 Git자동 배포 셋팅","level":3,"id":"1.2_Git자동_배포_셋팅_0"},{"heading":"2. 지속적인 배포","level":2,"id":"2._지속적인_배포_0"},{"heading":"2.1 옵시디언 배포파일 생성/배포","level":3,"id":"2.1_옵시디언_배포파일_생성/배포_0"},{"heading":"2.2 Netlify와 Git 연동","level":3,"id":"2.2_Netlify와_Git_연동_0"},{"heading":"3. 배포 확인","level":2,"id":"3._배포_확인_0"},{"heading":"1. 지속적인 통합","level":2,"id":"1._지속적인_통합_1"},{"heading":"1.1 옵시디언과 Git 연동","level":3,"id":"1.1_옵시디언과_Git_연동_1"},{"heading":"옵시디언 파일을 생성하면, 다음과 같은 화면을 볼 수 있다.","level":4,"id":"옵시디언_파일을_생성하면,_다음과_같은_화면을_볼_수_있다._0"},{"heading":"Git repository 생성하기","level":4,"id":"Git_repository_생성하기_0"},{"heading":"옵시디언과 Git 레포 연동하기","level":4,"id":"옵시디언과_Git_레포_연동하기_0"},{"heading":"1.2 Git자동 배포 셋팅","level":3,"id":"1.2_Git자동_배포_셋팅_1"},{"heading":"이전에 생성한 옵시디언 app에서 Git플러그인을 설치한다.","level":4,"id":"이전에_생성한_옵시디언_app에서_Git플러그인을_설치한다._0"},{"heading":"설치후 플러그인 셋팅 → 깃 디렉토리를 설정해주자.","level":4,"id":"설치후_플러그인_셋팅_→_깃_디렉토리를_설정해주자._0"},{"heading":"연결이 완료되면 우측에서 변경사항 및 간단한 커밋/푸시/풀 동작이 가능하다.","level":4,"id":"연결이_완료되면_우측에서_변경사항_및_간단한_커밋/푸시/풀_동작이_가능하다._0"},{"heading":"해당 디렉토리에 <em>.gitignore</em> 파일 및 세부적인 git셋팅은 자유롭게 진행하면 된다.","level":5,"id":"해당_디렉토리에_*.gitignore*_파일_및_세부적인_git셋팅은_자유롭게_진행하면_된다._0"},{"heading":"푸시 테스트","level":4,"id":"푸시_테스트_0"},{"heading":"2. 지속적인 배포","level":2,"id":"2._지속적인_배포_1"},{"heading":"2.1 옵시디언 배포파일 생성/배포","level":3,"id":"2.1_옵시디언_배포파일_생성/배포_1"},{"heading":"옵시디언 배포파일 생성하기","level":4,"id":"옵시디언_배포파일_생성하기_0"},{"heading":"이렇게 생성한 배포용 파일은 <code>1. 지속적인 통합</code>과 같은 방법으로 깃에 올리면 된다.","level":4,"id":"이렇게_생성한_배포용_파일은_`1._지속적인_통합`과_같은_방법으로_깃에_올리면_된다._0"},{"heading":"2.2 Netlify와 Git 연동","level":3,"id":"2.2_Netlify와_Git_연동_1"}],"links":["?query=tag:%EB%B8%94%EB%A1%9C%EA%B7%B8","?query=tag:%EC%97%B0%EB%8F%99","?query=tag:CI/CD","?query=tag:%EC%98%B5%EC%8B%9C%EB%94%94%EC%96%B8","?query=tag:Git","?query=tag:Netlify","study/프로그래밍/🎵-obsidian.html#_0"],"author":"","coverImageURL":"","fullURL":"study/note-ci_cd/🟣-obsidian-정적호스팅-cicd-과정.html","pathToRoot":"../..","attachments":["사진-및-문서/pasted-image-20250218151731.png","사진-및-문서/pasted-image-20250218151806.png","사진-및-문서/pasted-image-20250218152044.png","사진-및-문서/pasted-image-20250218152103.png","사진-및-문서/pasted-image-20250218153131.png","사진-및-문서/pasted-image-20250218153319.png","사진-및-문서/pasted-image-20250218153445.png","사진-및-문서/pasted-image-20250218153543.png","사진-및-문서/pasted-image-20250218153553.png","사진-및-문서/pasted-image-20250218151330.png","사진-및-문서/pasted-image-20250218153814.png","사진-및-문서/pasted-image-20250218153858.png","사진-및-문서/pasted-image-20250218154352.png","사진-및-문서/pasted-image-20250218154433.png","사진-및-문서/pasted-image-20250218154615.png","사진-및-문서/pasted-image-20250218154633.png","사진-및-문서/pasted-image-20250218154647.png","사진-및-문서/pasted-image-20250218155524.png","사진-및-문서/pasted-image-20250218160328.png","사진-및-문서/pasted-image-20250218160359.png","사진-및-문서/pasted-image-20250218160428.png","사진-및-문서/pasted-image-20250218160532.png","사진-및-문서/pasted-image-20250218160956.png","사진-및-문서/pasted-image-20250218161424.png","사진-및-문서/pasted-image-20250218161515.png","사진-및-문서/pasted-image-20250218161728.png","사진-및-문서/pasted-image-20250218161824.png","사진-및-문서/pasted-image-20250218161847.png"],"createdTime":1739783693575,"modifiedTime":1739940347957,"sourceSize":6009,"sourcePath":"study/note CI_CD/🟣 Obsidian 정적호스팅 CICD 과정.md","exportPath":"study/note-ci_cd/🟣-obsidian-정적호스팅-cicd-과정.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"},"index.html":{"title":"index","icon":"","description":"<a href=\".?query=tag:home\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#home\">#home</a> <a href=\".?query=tag:index\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#index\">#index</a> <a href=\".?query=tag:blog\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#blog\">#blog</a> <br><a data-tooltip-position=\"top\" aria-label=\"https://git.io/typing-svg\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://git.io/typing-svg\" target=\"_self\"></a><img alt=\"Typing SVG\" src=\"https://readme-typing-svg.demolab.com?font=Fira+Code&amp;pause=1000&amp;color=36A9F7&amp;random=false&amp;width=435&amp;lines=%EC%97%AC%EA%B8%B0%EB%8A%94+%EA%B3%B5%EB%B6%80%ED%95%98%EA%B3%A0%2C+%EA%B8%B0%EB%A1%9D%ED%95%98%EB%8A%94+%EA%B3%B3%EC%9E%85%EB%8B%88%EB%8B%A4\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\">\n<br><a data-href=\"🟣 Obsidian 정적호스팅 CICD 과정\" href=\"study/note-ci_cd/🟣-obsidian-정적호스팅-cicd-과정.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🟣 Obsidian 정적호스팅 CICD 과정</a> <br><a data-href=\"🖱 Spring Batch 트러블 슈팅\" href=\"project/hello-batch/🖱-spring-batch-트러블-슈팅.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🖱 Spring Batch 트러블 슈팅</a>\n<br><a data-href=\"🖱 Spring Batch 트러블 슈팅 부록\" href=\"project/hello-batch/🖱-spring-batch-트러블-슈팅-부록.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🖱 Spring Batch 트러블 슈팅 부록</a>\n<br><a data-href=\"🖱 Spring Batch 구조 드로잉\" href=\"project/hello-batch/🖱-spring-batch-구조-드로잉.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🖱 Spring Batch 구조 드로잉</a> <br><a data-href=\"👩‍👧‍👦 유입 통계 APP__SPRING AOP에 관하여\" href=\"project/hello-marketing/👩‍👧‍👦-유입-통계-app__spring-aop에-관하여.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">👩‍👧‍👦 유입 통계 APP__SPRING AOP에 관하여</a>\n<br><a data-href=\"👩‍👧‍👦 유입 통계 ADMIN용 테이블 설계 과정\" href=\"project/hello-marketing/👩‍👧‍👦-유입-통계-admin용-테이블-설계-과정.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">👩‍👧‍👦 유입 통계 ADMIN용 테이블 설계 과정</a> <br><a data-href=\"☕JAVA , OOP\" href=\"study/프로그래밍/☕java-,-oop.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">☕JAVA , OOP</a>\n<br><a data-href=\"🍃 Spring\" href=\"study/프로그래밍/🍃-spring.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🍃 Spring</a>\n<br><a data-href=\"🧰 DevOps\" href=\"study/프로그래밍/🧰-devops.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🧰 DevOps</a>\n<br><a data-href=\"🗒 DataBase\" href=\"study/프로그래밍/🗒-database.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🗒 DataBase</a>\n<br><a data-href=\"📭 Server\" href=\"study/프로그래밍/📭-server.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">📭 Server</a>\n<br><a data-href=\"🎵 Obsidian\" href=\"study/프로그래밍/🎵-obsidian.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🎵 Obsidian</a>\n<br><a data-href=\"🐞 etc\" href=\"study/프로그래밍/🐞-etc.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🐞 etc</a> <br><a data-href=\"🥈 필기 1과목 - 소프트웨어 설계\" href=\"study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥈 필기 1과목 - 소프트웨어 설계</a>\n<br><a data-href=\"🥈 필기 2과목 - 소프트웨어 개발\" href=\"study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥈 필기 2과목 - 소프트웨어 개발</a>\n<br><a data-href=\"🥈 필기 3과목 - 데이터베이스 구축\" href=\"study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥈 필기 3과목 - 데이터베이스 구축</a>\n<br><a data-href=\"🥈 필기 4과목 - 프로그래밍 언어 활용\" href=\"study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥈 필기 4과목 - 프로그래밍 언어 활용</a>\n<br><a data-href=\"🥈 필기 5과목 - 정보시스템 구축관리\" href=\"study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥈 필기 5과목 - 정보시스템 구축관리</a> <br><a data-href=\"🥇 정보처리 기사 실기 키워드\" href=\"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#_0\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥇 정보처리 기사 실기 키워드</a>\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Hi, there <img height=\"25\" width=\"25\" alt=\"Hand with Fingers Splayed Light Skin Tone\" src=\"https://raw.githubusercontent.com/Tarikul-Islam-Anik/Animated-Fluent-Emojis/master/Emojis/Hand%20gestures/Hand%20with%20Fingers%20Splayed%20Light%20Skin%20Tone.png\" referrerpolicy=\"no-referrer\">","level":3,"id":"Hi,_there_<img_src=\"https//raw.githubusercontent.com/Tarikul-Islam-Anik/Animated-Fluent-Emojis/master/Emojis/Hand%20gestures/Hand%20with%20Fingers%20Splayed%20Light%20Skin%20Tone.png\"_alt=\"Hand_with_Fingers_Splayed_Light_Skin_Tone\"_width=\"25\"_height=\"25\"_/>_0"},{"heading":"🌍<strong>Obsidian</strong> 배포 과정","level":1,"id":"🌍**Obsidian**_배포_과정_0"},{"heading":"💻 프로젝트","level":1,"id":"💻_프로젝트_0"},{"heading":"<em>Spring Batch</em>","level":2,"id":"*Spring_Batch*_0"},{"heading":"트러블 슈팅","level":3,"id":"트러블_슈팅_0"},{"heading":"<em>hello marketing</em>","level":2,"id":"*hello_marketing*_0"},{"heading":"유입통계","level":3,"id":"유입통계_0"},{"heading":"📕 공부","level":1,"id":"📕_공부_0"},{"heading":"<em>프로그래밍</em>","level":2,"id":"*프로그래밍*_0"},{"heading":"<em>자격증</em>","level":2,"id":"*자격증*_0"},{"heading":"정보처리기사 필기","level":3,"id":"정보처리기사_필기_0"},{"heading":"정보처리기사 실기","level":3,"id":"정보처리기사_실기_0"}],"links":["?query=tag:home","?query=tag:index","?query=tag:blog","study/note-ci_cd/🟣-obsidian-정적호스팅-cicd-과정.html#_0","project/hello-batch/🖱-spring-batch-트러블-슈팅.html#_0","project/hello-batch/🖱-spring-batch-트러블-슈팅-부록.html#_0","project/hello-batch/🖱-spring-batch-구조-드로잉.html#_0","project/hello-marketing/👩‍👧‍👦-유입-통계-app__spring-aop에-관하여.html#_0","project/hello-marketing/👩‍👧‍👦-유입-통계-admin용-테이블-설계-과정.html#_0","study/프로그래밍/☕java-,-oop.html#_0","study/프로그래밍/🍃-spring.html#_0","study/프로그래밍/🧰-devops.html#_0","study/프로그래밍/🗒-database.html#_0","study/프로그래밍/📭-server.html#_0","study/프로그래밍/🎵-obsidian.html#_0","study/프로그래밍/🐞-etc.html#_0","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#_0","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#_0","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#_0","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#_0","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#_0","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#_0"],"author":"","coverImageURL":"","fullURL":"index.html","pathToRoot":".","attachments":[],"createdTime":1739779810544,"modifiedTime":1739940503092,"sourceSize":1590,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown"}},"fileInfo":{"project/hello-batch/🖱-spring-batch-구조-드로잉.html":{"createdTime":1739843285680,"modifiedTime":1739844018493,"sourceSize":57706,"sourcePath":"project/hello Batch/🖱 Spring Batch 구조 드로잉.md","exportPath":"project/hello-batch/🖱-spring-batch-구조-드로잉.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"excalidraw","data":null},"project/hello-batch/🖱-spring-batch-트러블-슈팅.html":{"createdTime":1739842773924,"modifiedTime":1739940469478,"sourceSize":24667,"sourcePath":"project/hello Batch/🖱 Spring Batch 트러블 슈팅.md","exportPath":"project/hello-batch/🖱-spring-batch-트러블-슈팅.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"project/hello-batch/🖱-spring-batch-트러블-슈팅-부록.html":{"createdTime":1739842890772,"modifiedTime":1739940476089,"sourceSize":8808,"sourcePath":"project/hello Batch/🖱 Spring Batch 트러블 슈팅 부록.md","exportPath":"project/hello-batch/🖱-spring-batch-트러블-슈팅-부록.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"project/hello-marketing/👩‍👧‍👦-유입-통계-admin용-테이블-설계-과정.html":{"createdTime":1739783488509,"modifiedTime":1739940415967,"sourceSize":2997,"sourcePath":"project/hello marketing/👩‍👧‍👦 유입 통계 ADMIN용 테이블 설계 과정.md","exportPath":"project/hello-marketing/👩‍👧‍👦-유입-통계-admin용-테이블-설계-과정.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"project/hello-marketing/👩‍👧‍👦-유입-통계-app__spring-aop에-관하여.html":{"createdTime":1739783337843,"modifiedTime":1739940414777,"sourceSize":16027,"sourcePath":"project/hello marketing/👩‍👧‍👦 유입 통계 APP__SPRING AOP에 관하여.md","exportPath":"project/hello-marketing/👩‍👧‍👦-유입-통계-app__spring-aop에-관하여.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html":{"createdTime":1739777477564,"modifiedTime":1739940405412,"sourceSize":43617,"sourcePath":"study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 키워드.md","exportPath":"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html":{"createdTime":1739783025899,"modifiedTime":1739940377445,"sourceSize":21277,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 1과목 - 소프트웨어 설계.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html":{"createdTime":1739783025899,"modifiedTime":1739940386004,"sourceSize":11697,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 2과목 - 소프트웨어 개발.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html":{"createdTime":1739783025899,"modifiedTime":1739940388501,"sourceSize":11304,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 3과목 - 데이터베이스 구축.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html":{"createdTime":1739783025899,"modifiedTime":1739940390716,"sourceSize":25213,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 4과목 - 프로그래밍 언어 활용.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html":{"createdTime":1739783043089,"modifiedTime":1739940403179,"sourceSize":21274,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 5과목 - 정보시스템 구축관리.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"study/프로그래밍/☕java-,-oop.html":{"createdTime":1739844224869,"modifiedTime":1739940343419,"sourceSize":36011,"sourcePath":"study/프로그래밍/☕JAVA , OOP.md","exportPath":"study/프로그래밍/☕java-,-oop.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"study/프로그래밍/🍃-spring.html":{"createdTime":1739844578975,"modifiedTime":1739940260396,"sourceSize":46695,"sourcePath":"study/프로그래밍/🍃 Spring.md","exportPath":"study/프로그래밍/🍃-spring.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"study/프로그래밍/🎵-obsidian.html":{"createdTime":1739863713458,"modifiedTime":1739940350374,"sourceSize":5641,"sourcePath":"study/프로그래밍/🎵 Obsidian.md","exportPath":"study/프로그래밍/🎵-obsidian.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"study/프로그래밍/🐞-etc.html":{"createdTime":1739844790888,"modifiedTime":1739940336586,"sourceSize":3872,"sourcePath":"study/프로그래밍/🐞 etc.md","exportPath":"study/프로그래밍/🐞-etc.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"study/프로그래밍/📭-server.html":{"createdTime":1739844706654,"modifiedTime":1739940359739,"sourceSize":6972,"sourcePath":"study/프로그래밍/📭 Server.md","exportPath":"study/프로그래밍/📭-server.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"study/프로그래밍/🗒-database.html":{"createdTime":1739844411985,"modifiedTime":1739940271405,"sourceSize":11872,"sourcePath":"study/프로그래밍/🗒 DataBase.md","exportPath":"study/프로그래밍/🗒-database.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"study/프로그래밍/🧰-devops.html":{"createdTime":1739844345143,"modifiedTime":1739940309962,"sourceSize":14356,"sourcePath":"study/프로그래밍/🧰 DevOps.md","exportPath":"study/프로그래밍/🧰-devops.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"study/note-ci_cd/🟣-obsidian-정적호스팅-cicd-과정.html":{"createdTime":1739783693575,"modifiedTime":1739940347957,"sourceSize":6009,"sourcePath":"study/note CI_CD/🟣 Obsidian 정적호스팅 CICD 과정.md","exportPath":"study/note-ci_cd/🟣-obsidian-정적호스팅-cicd-과정.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"index.html":{"createdTime":1739779810544,"modifiedTime":1739940503092,"sourceSize":1590,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":0,"backlinks":[],"type":"markdown","data":null},"site-lib/scripts/graph-wasm.wasm":{"createdTime":1739934503535,"modifiedTime":1739934503222.14,"sourceSize":23655,"sourcePath":"","exportPath":"site-lib/scripts/graph-wasm.wasm","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"site-lib/fonts/94f2f163d4b698242fef.otf":{"createdTime":1739940655636,"modifiedTime":1739940655636,"sourceSize":66800,"sourcePath":"","exportPath":"site-lib/fonts/94f2f163d4b698242fef.otf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/72505e6a122c6acd5471.woff2":{"createdTime":1739940655637,"modifiedTime":1739940655637,"sourceSize":104232,"sourcePath":"","exportPath":"site-lib/fonts/72505e6a122c6acd5471.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/2d5198822ab091ce4305.woff2":{"createdTime":1739940655637,"modifiedTime":1739940655637,"sourceSize":104332,"sourcePath":"","exportPath":"site-lib/fonts/2d5198822ab091ce4305.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/c8ba52b05a9ef10f4758.woff2":{"createdTime":1739940655637,"modifiedTime":1739940655637,"sourceSize":98868,"sourcePath":"","exportPath":"site-lib/fonts/c8ba52b05a9ef10f4758.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cb10ffd7684cd9836a05.woff2":{"createdTime":1739940655638,"modifiedTime":1739940655638,"sourceSize":106876,"sourcePath":"","exportPath":"site-lib/fonts/cb10ffd7684cd9836a05.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/b5f0f109bc88052d4000.woff2":{"createdTime":1739940655638,"modifiedTime":1739940655638,"sourceSize":105804,"sourcePath":"","exportPath":"site-lib/fonts/b5f0f109bc88052d4000.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cbe0ae49c52c920fd563.woff2":{"createdTime":1739940655638,"modifiedTime":1739940655638,"sourceSize":106108,"sourcePath":"","exportPath":"site-lib/fonts/cbe0ae49c52c920fd563.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/535a6cf662596b3bd6a6.woff2":{"createdTime":1739940655639,"modifiedTime":1739940655639,"sourceSize":111708,"sourcePath":"","exportPath":"site-lib/fonts/535a6cf662596b3bd6a6.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/70cc7ff27245e82ad414.ttf":{"createdTime":1739940655639,"modifiedTime":1739940655639,"sourceSize":192740,"sourcePath":"","exportPath":"site-lib/fonts/70cc7ff27245e82ad414.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/454577c22304619db035.ttf":{"createdTime":1739940655641,"modifiedTime":1739940655641,"sourceSize":161376,"sourcePath":"","exportPath":"site-lib/fonts/454577c22304619db035.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/52ac8f3034507f1d9e53.ttf":{"createdTime":1739940655646,"modifiedTime":1739940655646,"sourceSize":191568,"sourcePath":"","exportPath":"site-lib/fonts/52ac8f3034507f1d9e53.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/05b618077343fbbd92b7.ttf":{"createdTime":1739940655642,"modifiedTime":1739940655642,"sourceSize":155288,"sourcePath":"","exportPath":"site-lib/fonts/05b618077343fbbd92b7.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2":{"createdTime":1739940655635,"modifiedTime":1739940655635,"sourceSize":7876,"sourcePath":"","exportPath":"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/media/6155340132a851f6089e.svg":{"createdTime":1739940655635,"modifiedTime":1739940655635,"sourceSize":315,"sourcePath":"","exportPath":"site-lib/media/6155340132a851f6089e.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/media/2308ab1944a6bfa5c5b8.svg":{"createdTime":1739940655636,"modifiedTime":1739940655636,"sourceSize":278,"sourcePath":"","exportPath":"site-lib/media/2308ab1944a6bfa5c5b8.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/html/file-tree-content.html":{"createdTime":1739940655872,"modifiedTime":1739940655872,"sourceSize":16035,"sourcePath":"","exportPath":"site-lib/html/file-tree-content.html","showInTree":false,"treeOrder":0,"backlinks":[],"type":"html","data":null},"site-lib/scripts/webpage.js":{"createdTime":1739934504020,"modifiedTime":1739934504020,"sourceSize":101494,"sourcePath":"","exportPath":"site-lib/scripts/webpage.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/graph-wasm.js":{"createdTime":1739934504020,"modifiedTime":1739934504020,"sourceSize":12885,"sourcePath":"","exportPath":"site-lib/scripts/graph-wasm.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/graph-render-worker.js":{"createdTime":1739934504020,"modifiedTime":1739934504020,"sourceSize":5681,"sourcePath":"","exportPath":"site-lib/scripts/graph-render-worker.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/media/favicon.png":{"createdTime":1739940655563,"modifiedTime":1739940655563,"sourceSize":1105,"sourcePath":"","exportPath":"site-lib/media/favicon.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/styles/obsidian.css":{"createdTime":1739940655693,"modifiedTime":1739940655693,"sourceSize":162817,"sourcePath":"","exportPath":"site-lib/styles/obsidian.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/other-plugins.css":{"createdTime":1739934653834,"modifiedTime":1739934653834,"sourceSize":2352,"sourcePath":"","exportPath":"site-lib/styles/other-plugins.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/theme.css":{"createdTime":1739934504183,"modifiedTime":1739934504183,"sourceSize":39271,"sourcePath":"","exportPath":"site-lib/styles/theme.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/global-variable-styles.css":{"createdTime":1739940655620,"modifiedTime":1739940655620,"sourceSize":460,"sourcePath":"","exportPath":"site-lib/styles/global-variable-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/supported-plugins.css":{"createdTime":1739940655695,"modifiedTime":1739940655695,"sourceSize":5972,"sourcePath":"","exportPath":"site-lib/styles/supported-plugins.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/main-styles.css":{"createdTime":1739934504044,"modifiedTime":1739934504044,"sourceSize":19129,"sourcePath":"","exportPath":"site-lib/styles/main-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"사진-및-문서/output-(9).png":{"createdTime":1739842929649,"modifiedTime":1739424429383,"sourceSize":156393,"sourcePath":"사진 및 문서/output (9).png","exportPath":"사진-및-문서/output-(9).png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/output-(1).png":{"createdTime":1739842929644,"modifiedTime":1739424429378,"sourceSize":145878,"sourcePath":"사진 및 문서/output (1).png","exportPath":"사진-및-문서/output-(1).png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250102181842.png":{"createdTime":1739783575073,"modifiedTime":1739424429304,"sourceSize":30146,"sourcePath":"사진 및 문서/Pasted image 20250102181842.png","exportPath":"사진-및-문서/pasted-image-20250102181842.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20241224144309.png":{"createdTime":1739839894811,"modifiedTime":1739424429296,"sourceSize":65503,"sourcePath":"사진 및 문서/Pasted image 20241224144309.png","exportPath":"사진-및-문서/pasted-image-20241224144309.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20241226111559.png":{"createdTime":1739839894815,"modifiedTime":1739424429298,"sourceSize":55022,"sourcePath":"사진 및 문서/Pasted image 20241226111559.png","exportPath":"사진-및-문서/pasted-image-20241226111559.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20241226152219.png":{"createdTime":1739839894817,"modifiedTime":1739424429298,"sourceSize":5000,"sourcePath":"사진 및 문서/Pasted image 20241226152219.png","exportPath":"사진-및-문서/pasted-image-20241226152219.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20241226171158.png":{"createdTime":1739783575051,"modifiedTime":1739424429299,"sourceSize":37765,"sourcePath":"사진 및 문서/Pasted image 20241226171158.png","exportPath":"사진-및-문서/pasted-image-20241226171158.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png":{"createdTime":1739783573850,"modifiedTime":1739424428406,"sourceSize":99317,"sourcePath":"사진 및 문서/do-messenger_screenshot_2025-02-10_15_04_45.png","exportPath":"사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/do-messenger_screenshot_2025-02-10_17_10_58.png":{"createdTime":1739783573853,"modifiedTime":1739424428407,"sourceSize":122009,"sourcePath":"사진 및 문서/do-messenger_screenshot_2025-02-10_17_10_58.png","exportPath":"사진-및-문서/do-messenger_screenshot_2025-02-10_17_10_58.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240603173517.png":{"createdTime":1739844879943,"modifiedTime":1739424428650,"sourceSize":35221,"sourcePath":"사진 및 문서/Pasted image 20240603173517.png","exportPath":"사진-및-문서/pasted-image-20240603173517.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240603180042.png":{"createdTime":1739844879946,"modifiedTime":1739424428651,"sourceSize":54764,"sourcePath":"사진 및 문서/Pasted image 20240603180042.png","exportPath":"사진-및-문서/pasted-image-20240603180042.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240604102140.png":{"createdTime":1739844879948,"modifiedTime":1739424428652,"sourceSize":70352,"sourcePath":"사진 및 문서/Pasted image 20240604102140.png","exportPath":"사진-및-문서/pasted-image-20240604102140.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240604144026.png":{"createdTime":1739844879949,"modifiedTime":1739424428653,"sourceSize":65753,"sourcePath":"사진 및 문서/Pasted image 20240604144026.png","exportPath":"사진-및-문서/pasted-image-20240604144026.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218145702.png":{"createdTime":1739863854050,"modifiedTime":1739858222077,"sourceSize":27774,"sourcePath":"사진 및 문서/Pasted image 20250218145702.png","exportPath":"사진-및-문서/pasted-image-20250218145702.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218145823.png":{"createdTime":1739863854052,"modifiedTime":1739858303156,"sourceSize":178936,"sourcePath":"사진 및 문서/Pasted image 20250218145823.png","exportPath":"사진-및-문서/pasted-image-20250218145823.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218151731.png":{"createdTime":1739863854055,"modifiedTime":1739859451768,"sourceSize":36657,"sourcePath":"사진 및 문서/Pasted image 20250218151731.png","exportPath":"사진-및-문서/pasted-image-20250218151731.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218151806.png":{"createdTime":1739863854057,"modifiedTime":1739859486188,"sourceSize":23625,"sourcePath":"사진 및 문서/Pasted image 20250218151806.png","exportPath":"사진-및-문서/pasted-image-20250218151806.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218152044.png":{"createdTime":1739863854062,"modifiedTime":1739859644718,"sourceSize":46477,"sourcePath":"사진 및 문서/Pasted image 20250218152044.png","exportPath":"사진-및-문서/pasted-image-20250218152044.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218152103.png":{"createdTime":1739863854063,"modifiedTime":1739859663830,"sourceSize":47581,"sourcePath":"사진 및 문서/Pasted image 20250218152103.png","exportPath":"사진-및-문서/pasted-image-20250218152103.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218153131.png":{"createdTime":1739863854065,"modifiedTime":1739860291108,"sourceSize":5662,"sourcePath":"사진 및 문서/Pasted image 20250218153131.png","exportPath":"사진-및-문서/pasted-image-20250218153131.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218153319.png":{"createdTime":1739863854066,"modifiedTime":1739860399141,"sourceSize":4846,"sourcePath":"사진 및 문서/Pasted image 20250218153319.png","exportPath":"사진-및-문서/pasted-image-20250218153319.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218153445.png":{"createdTime":1739863854070,"modifiedTime":1739860485474,"sourceSize":3834,"sourcePath":"사진 및 문서/Pasted image 20250218153445.png","exportPath":"사진-및-문서/pasted-image-20250218153445.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218153543.png":{"createdTime":1739863854071,"modifiedTime":1739860543611,"sourceSize":51007,"sourcePath":"사진 및 문서/Pasted image 20250218153543.png","exportPath":"사진-및-문서/pasted-image-20250218153543.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218153553.png":{"createdTime":1739863854073,"modifiedTime":1739860553053,"sourceSize":36756,"sourcePath":"사진 및 문서/Pasted image 20250218153553.png","exportPath":"사진-및-문서/pasted-image-20250218153553.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218151330.png":{"createdTime":1739863854053,"modifiedTime":1739859210349,"sourceSize":323323,"sourcePath":"사진 및 문서/Pasted image 20250218151330.png","exportPath":"사진-및-문서/pasted-image-20250218151330.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218153814.png":{"createdTime":1739863854075,"modifiedTime":1739860694285,"sourceSize":94156,"sourcePath":"사진 및 문서/Pasted image 20250218153814.png","exportPath":"사진-및-문서/pasted-image-20250218153814.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218153858.png":{"createdTime":1739863854077,"modifiedTime":1739860738867,"sourceSize":18633,"sourcePath":"사진 및 문서/Pasted image 20250218153858.png","exportPath":"사진-및-문서/pasted-image-20250218153858.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218154352.png":{"createdTime":1739863854079,"modifiedTime":1739861032727,"sourceSize":32120,"sourcePath":"사진 및 문서/Pasted image 20250218154352.png","exportPath":"사진-및-문서/pasted-image-20250218154352.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218154433.png":{"createdTime":1739863854079,"modifiedTime":1739861073109,"sourceSize":71085,"sourcePath":"사진 및 문서/Pasted image 20250218154433.png","exportPath":"사진-및-문서/pasted-image-20250218154433.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218154615.png":{"createdTime":1739863854079,"modifiedTime":1739861175610,"sourceSize":19734,"sourcePath":"사진 및 문서/Pasted image 20250218154615.png","exportPath":"사진-및-문서/pasted-image-20250218154615.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218154633.png":{"createdTime":1739863854079,"modifiedTime":1739861193533,"sourceSize":7603,"sourcePath":"사진 및 문서/Pasted image 20250218154633.png","exportPath":"사진-및-문서/pasted-image-20250218154633.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218154647.png":{"createdTime":1739863854079,"modifiedTime":1739861207274,"sourceSize":79039,"sourcePath":"사진 및 문서/Pasted image 20250218154647.png","exportPath":"사진-및-문서/pasted-image-20250218154647.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218155524.png":{"createdTime":1739863854079,"modifiedTime":1739861724018,"sourceSize":72167,"sourcePath":"사진 및 문서/Pasted image 20250218155524.png","exportPath":"사진-및-문서/pasted-image-20250218155524.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218160328.png":{"createdTime":1739863854079,"modifiedTime":1739862208474,"sourceSize":15278,"sourcePath":"사진 및 문서/Pasted image 20250218160328.png","exportPath":"사진-및-문서/pasted-image-20250218160328.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218160359.png":{"createdTime":1739863854079,"modifiedTime":1739862239425,"sourceSize":15865,"sourcePath":"사진 및 문서/Pasted image 20250218160359.png","exportPath":"사진-및-문서/pasted-image-20250218160359.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218160428.png":{"createdTime":1739863854096,"modifiedTime":1739862268957,"sourceSize":43414,"sourcePath":"사진 및 문서/Pasted image 20250218160428.png","exportPath":"사진-및-문서/pasted-image-20250218160428.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218160532.png":{"createdTime":1739863854099,"modifiedTime":1739862332221,"sourceSize":16755,"sourcePath":"사진 및 문서/Pasted image 20250218160532.png","exportPath":"사진-및-문서/pasted-image-20250218160532.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218160956.png":{"createdTime":1739863854101,"modifiedTime":1739862596018,"sourceSize":71694,"sourcePath":"사진 및 문서/Pasted image 20250218160956.png","exportPath":"사진-및-문서/pasted-image-20250218160956.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218161424.png":{"createdTime":1739863854104,"modifiedTime":1739863222819,"sourceSize":88775,"sourcePath":"사진 및 문서/Pasted image 20250218161424.png","exportPath":"사진-및-문서/pasted-image-20250218161424.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218161515.png":{"createdTime":1739863854106,"modifiedTime":1739863222820,"sourceSize":66971,"sourcePath":"사진 및 문서/Pasted image 20250218161515.png","exportPath":"사진-및-문서/pasted-image-20250218161515.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218161728.png":{"createdTime":1739863854109,"modifiedTime":1739863222821,"sourceSize":36864,"sourcePath":"사진 및 문서/Pasted image 20250218161728.png","exportPath":"사진-및-문서/pasted-image-20250218161728.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218161824.png":{"createdTime":1739863854112,"modifiedTime":1739863222822,"sourceSize":81212,"sourcePath":"사진 및 문서/Pasted image 20250218161824.png","exportPath":"사진-및-문서/pasted-image-20250218161824.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20250218161847.png":{"createdTime":1739863854114,"modifiedTime":1739863222823,"sourceSize":57171,"sourcePath":"사진 및 문서/Pasted image 20250218161847.png","exportPath":"사진-및-문서/pasted-image-20250218161847.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240531162124.png":{"createdTime":1739844879942,"modifiedTime":1739424428649,"sourceSize":142328,"sourcePath":"사진 및 문서/Pasted image 20240531162124.png","exportPath":"사진-및-문서/pasted-image-20240531162124.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240722180706.png":{"createdTime":1739844880028,"modifiedTime":1739424428938,"sourceSize":191141,"sourcePath":"사진 및 문서/Pasted image 20240722180706.png","exportPath":"사진-및-문서/pasted-image-20240722180706.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240610171904.png":{"createdTime":1739844879954,"modifiedTime":1739424428655,"sourceSize":48061,"sourcePath":"사진 및 문서/Pasted image 20240610171904.png","exportPath":"사진-및-문서/pasted-image-20240610171904.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240531103441.png":{"createdTime":1739844879928,"modifiedTime":1739424428629,"sourceSize":13085,"sourcePath":"사진 및 문서/Pasted image 20240531103441.png","exportPath":"사진-및-문서/pasted-image-20240531103441.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240531103549.png":{"createdTime":1739844879930,"modifiedTime":1739424428629,"sourceSize":13731,"sourcePath":"사진 및 문서/Pasted image 20240531103549.png","exportPath":"사진-및-문서/pasted-image-20240531103549.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240531105228.png":{"createdTime":1739844879938,"modifiedTime":1739424428647,"sourceSize":68992,"sourcePath":"사진 및 문서/Pasted image 20240531105228.png","exportPath":"사진-및-문서/pasted-image-20240531105228.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240531105241.png":{"createdTime":1739844879940,"modifiedTime":1739424428648,"sourceSize":74304,"sourcePath":"사진 및 문서/Pasted image 20240531105241.png","exportPath":"사진-및-문서/pasted-image-20240531105241.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240531104351.png":{"createdTime":1739844879931,"modifiedTime":1739424428630,"sourceSize":47662,"sourcePath":"사진 및 문서/Pasted image 20240531104351.png","exportPath":"사진-및-문서/pasted-image-20240531104351.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240531104418.png":{"createdTime":1739844879933,"modifiedTime":1739424428631,"sourceSize":27661,"sourcePath":"사진 및 문서/Pasted image 20240531104418.png","exportPath":"사진-및-문서/pasted-image-20240531104418.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240531104751.png":{"createdTime":1739844879935,"modifiedTime":1739424428631,"sourceSize":24466,"sourcePath":"사진 및 문서/Pasted image 20240531104751.png","exportPath":"사진-및-문서/pasted-image-20240531104751.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240531104803.png":{"createdTime":1739844879937,"modifiedTime":1739424428632,"sourceSize":35445,"sourcePath":"사진 및 문서/Pasted image 20240531104803.png","exportPath":"사진-및-문서/pasted-image-20240531104803.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240828104032.png":{"createdTime":1739844880154,"modifiedTime":1739424429090,"sourceSize":89251,"sourcePath":"사진 및 문서/Pasted image 20240828104032.png","exportPath":"사진-및-문서/pasted-image-20240828104032.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240828104728.png":{"createdTime":1739844880156,"modifiedTime":1739424429091,"sourceSize":123190,"sourcePath":"사진 및 문서/Pasted image 20240828104728.png","exportPath":"사진-및-문서/pasted-image-20240828104728.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240611144129.png":{"createdTime":1739844879956,"modifiedTime":1739424428657,"sourceSize":167252,"sourcePath":"사진 및 문서/Pasted image 20240611144129.png","exportPath":"사진-및-문서/pasted-image-20240611144129.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240605160336.png":{"createdTime":1739844879953,"modifiedTime":1739424428654,"sourceSize":84155,"sourcePath":"사진 및 문서/Pasted image 20240605160336.png","exportPath":"사진-및-문서/pasted-image-20240605160336.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240723134224.png":{"createdTime":1739844880035,"modifiedTime":1739424428974,"sourceSize":33317,"sourcePath":"사진 및 문서/Pasted image 20240723134224.png","exportPath":"사진-및-문서/pasted-image-20240723134224.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"사진-및-문서/pasted-image-20240723134333.png":{"createdTime":1739844880037,"modifiedTime":1739424428975,"sourceSize":27480,"sourcePath":"사진 및 문서/Pasted image 20240723134333.png","exportPath":"사진-및-문서/pasted-image-20240723134333.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/rss.xml":{"createdTime":1739940714607,"modifiedTime":1739940714607,"sourceSize":90943,"sourcePath":"","exportPath":"site-lib/rss.xml","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null}},"sourceToTarget":{"project/hello Batch/🖱 Spring Batch 구조 드로잉.md":"project/hello-batch/🖱-spring-batch-구조-드로잉.html","project/hello Batch/🖱 Spring Batch 트러블 슈팅.md":"project/hello-batch/🖱-spring-batch-트러블-슈팅.html","project/hello Batch/🖱 Spring Batch 트러블 슈팅 부록.md":"project/hello-batch/🖱-spring-batch-트러블-슈팅-부록.html","project/hello marketing/👩‍👧‍👦 유입 통계 ADMIN용 테이블 설계 과정.md":"project/hello-marketing/👩‍👧‍👦-유입-통계-admin용-테이블-설계-과정.html","project/hello marketing/👩‍👧‍👦 유입 통계 APP__SPRING AOP에 관하여.md":"project/hello-marketing/👩‍👧‍👦-유입-통계-app__spring-aop에-관하여.html","study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 키워드.md":"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html","study/정보처리기사/정보처리기사 필기/🥈 필기 1과목 - 소프트웨어 설계.md":"study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html","study/정보처리기사/정보처리기사 필기/🥈 필기 2과목 - 소프트웨어 개발.md":"study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html","study/정보처리기사/정보처리기사 필기/🥈 필기 3과목 - 데이터베이스 구축.md":"study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html","study/정보처리기사/정보처리기사 필기/🥈 필기 4과목 - 프로그래밍 언어 활용.md":"study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html","study/정보처리기사/정보처리기사 필기/🥈 필기 5과목 - 정보시스템 구축관리.md":"study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html","study/프로그래밍/☕JAVA , OOP.md":"study/프로그래밍/☕java-,-oop.html","study/프로그래밍/🍃 Spring.md":"study/프로그래밍/🍃-spring.html","study/프로그래밍/🎵 Obsidian.md":"study/프로그래밍/🎵-obsidian.html","study/프로그래밍/🐞 etc.md":"study/프로그래밍/🐞-etc.html","study/프로그래밍/📭 Server.md":"study/프로그래밍/📭-server.html","study/프로그래밍/🗒 DataBase.md":"study/프로그래밍/🗒-database.html","study/프로그래밍/🧰 DevOps.md":"study/프로그래밍/🧰-devops.html","study/note CI_CD/🟣 Obsidian 정적호스팅 CICD 과정.md":"study/note-ci_cd/🟣-obsidian-정적호스팅-cicd-과정.html","index.md":"index.html","":"site-lib/rss.xml","사진 및 문서/output (9).png":"사진-및-문서/output-(9).png","사진 및 문서/output (1).png":"사진-및-문서/output-(1).png","사진 및 문서/Pasted image 20250102181842.png":"사진-및-문서/pasted-image-20250102181842.png","사진 및 문서/Pasted image 20241224144309.png":"사진-및-문서/pasted-image-20241224144309.png","사진 및 문서/Pasted image 20241226111559.png":"사진-및-문서/pasted-image-20241226111559.png","사진 및 문서/Pasted image 20241226152219.png":"사진-및-문서/pasted-image-20241226152219.png","사진 및 문서/Pasted image 20241226171158.png":"사진-및-문서/pasted-image-20241226171158.png","사진 및 문서/do-messenger_screenshot_2025-02-10_15_04_45.png":"사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png","사진 및 문서/do-messenger_screenshot_2025-02-10_17_10_58.png":"사진-및-문서/do-messenger_screenshot_2025-02-10_17_10_58.png","사진 및 문서/Pasted image 20240603173517.png":"사진-및-문서/pasted-image-20240603173517.png","사진 및 문서/Pasted image 20240603180042.png":"사진-및-문서/pasted-image-20240603180042.png","사진 및 문서/Pasted image 20240604102140.png":"사진-및-문서/pasted-image-20240604102140.png","사진 및 문서/Pasted image 20240604144026.png":"사진-및-문서/pasted-image-20240604144026.png","사진 및 문서/Pasted image 20250218145702.png":"사진-및-문서/pasted-image-20250218145702.png","사진 및 문서/Pasted image 20250218145823.png":"사진-및-문서/pasted-image-20250218145823.png","사진 및 문서/Pasted image 20250218151731.png":"사진-및-문서/pasted-image-20250218151731.png","사진 및 문서/Pasted image 20250218151806.png":"사진-및-문서/pasted-image-20250218151806.png","사진 및 문서/Pasted image 20250218152044.png":"사진-및-문서/pasted-image-20250218152044.png","사진 및 문서/Pasted image 20250218152103.png":"사진-및-문서/pasted-image-20250218152103.png","사진 및 문서/Pasted image 20250218153131.png":"사진-및-문서/pasted-image-20250218153131.png","사진 및 문서/Pasted image 20250218153319.png":"사진-및-문서/pasted-image-20250218153319.png","사진 및 문서/Pasted image 20250218153445.png":"사진-및-문서/pasted-image-20250218153445.png","사진 및 문서/Pasted image 20250218153543.png":"사진-및-문서/pasted-image-20250218153543.png","사진 및 문서/Pasted image 20250218153553.png":"사진-및-문서/pasted-image-20250218153553.png","사진 및 문서/Pasted image 20250218151330.png":"사진-및-문서/pasted-image-20250218151330.png","사진 및 문서/Pasted image 20250218153814.png":"사진-및-문서/pasted-image-20250218153814.png","사진 및 문서/Pasted image 20250218153858.png":"사진-및-문서/pasted-image-20250218153858.png","사진 및 문서/Pasted image 20250218154352.png":"사진-및-문서/pasted-image-20250218154352.png","사진 및 문서/Pasted image 20250218154433.png":"사진-및-문서/pasted-image-20250218154433.png","사진 및 문서/Pasted image 20250218154615.png":"사진-및-문서/pasted-image-20250218154615.png","사진 및 문서/Pasted image 20250218154633.png":"사진-및-문서/pasted-image-20250218154633.png","사진 및 문서/Pasted image 20250218154647.png":"사진-및-문서/pasted-image-20250218154647.png","사진 및 문서/Pasted image 20250218155524.png":"사진-및-문서/pasted-image-20250218155524.png","사진 및 문서/Pasted image 20250218160328.png":"사진-및-문서/pasted-image-20250218160328.png","사진 및 문서/Pasted image 20250218160359.png":"사진-및-문서/pasted-image-20250218160359.png","사진 및 문서/Pasted image 20250218160428.png":"사진-및-문서/pasted-image-20250218160428.png","사진 및 문서/Pasted image 20250218160532.png":"사진-및-문서/pasted-image-20250218160532.png","사진 및 문서/Pasted image 20250218160956.png":"사진-및-문서/pasted-image-20250218160956.png","사진 및 문서/Pasted image 20250218161424.png":"사진-및-문서/pasted-image-20250218161424.png","사진 및 문서/Pasted image 20250218161515.png":"사진-및-문서/pasted-image-20250218161515.png","사진 및 문서/Pasted image 20250218161728.png":"사진-및-문서/pasted-image-20250218161728.png","사진 및 문서/Pasted image 20250218161824.png":"사진-및-문서/pasted-image-20250218161824.png","사진 및 문서/Pasted image 20250218161847.png":"사진-및-문서/pasted-image-20250218161847.png","사진 및 문서/Pasted image 20240531162124.png":"사진-및-문서/pasted-image-20240531162124.png","사진 및 문서/Pasted image 20240722180706.png":"사진-및-문서/pasted-image-20240722180706.png","사진 및 문서/Pasted image 20240610171904.png":"사진-및-문서/pasted-image-20240610171904.png","사진 및 문서/Pasted image 20240531103441.png":"사진-및-문서/pasted-image-20240531103441.png","사진 및 문서/Pasted image 20240531103549.png":"사진-및-문서/pasted-image-20240531103549.png","사진 및 문서/Pasted image 20240531105228.png":"사진-및-문서/pasted-image-20240531105228.png","사진 및 문서/Pasted image 20240531105241.png":"사진-및-문서/pasted-image-20240531105241.png","사진 및 문서/Pasted image 20240531104351.png":"사진-및-문서/pasted-image-20240531104351.png","사진 및 문서/Pasted image 20240531104418.png":"사진-및-문서/pasted-image-20240531104418.png","사진 및 문서/Pasted image 20240531104751.png":"사진-및-문서/pasted-image-20240531104751.png","사진 및 문서/Pasted image 20240531104803.png":"사진-및-문서/pasted-image-20240531104803.png","사진 및 문서/Pasted image 20240828104032.png":"사진-및-문서/pasted-image-20240828104032.png","사진 및 문서/Pasted image 20240828104728.png":"사진-및-문서/pasted-image-20240828104728.png","사진 및 문서/Pasted image 20240611144129.png":"사진-및-문서/pasted-image-20240611144129.png","사진 및 문서/Pasted image 20240605160336.png":"사진-및-문서/pasted-image-20240605160336.png","사진 및 문서/Pasted image 20240723134224.png":"사진-및-문서/pasted-image-20240723134224.png","사진 및 문서/Pasted image 20240723134333.png":"사진-및-문서/pasted-image-20240723134333.png"},"featureOptions":{"backlinks":{"featureId":"backlinks","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"Backlinks","featurePlacement":{"selector":".footer","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""}},"tags":{"featureId":"tags","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"","featurePlacement":{"selector":".header .data-bar","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"showInlineTags":true,"showFrontmatterTags":true,"info_showInlineTags":{"show":true,"name":"","description":"Show tags defined inside the document at the top of the page.","placeholder":""},"info_showFrontmatterTags":{"show":true,"name":"","description":"Show tags defined in the frontmatter of the document at the top of the page.","placeholder":""}},"alias":{"featureId":"aliases","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"","featurePlacement":{"selector":".header .data-bar","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""}},"properties":{"featureId":"properties","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"Properties","featurePlacement":{"selector":".header","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"info_hideProperties":{"show":true,"name":"","description":"A list of properties to hide from the properties view","placeholder":""}},"fileNavigation":{"featureId":"file-navigation","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"LTS_Blog","featurePlacement":{"selector":"#left-sidebar-content","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"info_includePath":{"show":false,"name":"","description":"","placeholder":""},"showCustomIcons":false,"showDefaultFolderIcons":false,"showDefaultFileIcons":false,"defaultFolderIcon":"lucide//folder","defaultFileIcon":"lucide//file","defaultMediaIcon":"lucide//file-image","exposeStartingPath":true,"info_showCustomIcons":{"show":true,"name":"","description":"Show custom icons for files and folders","placeholder":""},"info_showDefaultFolderIcons":{"show":true,"name":"","description":"Show a default icon of a folder for every folder in the tree","placeholder":""},"info_showDefaultFileIcons":{"show":true,"name":"","description":"Show a default icon of a file for every file in the tree","placeholder":""},"info_defaultFolderIcon":{"show":true,"name":"","description":"The icon to use for folders. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_defaultFileIcon":{"show":true,"name":"","description":"The icon to use for files. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_defaultMediaIcon":{"show":true,"name":"","description":"The icon to use for media files. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_exposeStartingPath":{"show":true,"name":"","description":"Whether or not to show the current file in the file tree when the page is first loaded","placeholder":""},"includePath":"site-lib/html/file-tree.html"},"search":{"featureId":"search","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"검색..","featurePlacement":{"selector":"#left-sidebar .topbar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""}},"outline":{"featureId":"outline","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"Outline","featurePlacement":{"selector":"#right-sidebar-content","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"startCollapsed":true,"minCollapseDepth":"2","info_startCollapsed":{"show":true,"name":"","description":"Should the outline start collapsed?","placeholder":""},"info_minCollapseDepth":{"show":true,"name":"","description":"Only allow outline items to be collapsed if they are at least this many levels deep in the tree.","placeholder":"","dropdownOptions":{"1":1,"2":2,"No Collapse":100}}},"themeToggle":{"featureId":"theme-toggle","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"","featurePlacement":{"selector":"#right-sidebar .topbar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""}},"graphView":{"featureId":"graph-view","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"그래프 뷰","featurePlacement":{"selector":"#right-sidebar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"showOrphanNodes":true,"showAttachments":false,"allowGlobalGraph":true,"allowExpand":true,"attractionForce":1,"linkLength":15,"repulsionForce":80,"centralForce":2,"edgePruning":100,"minNodeRadius":3,"maxNodeRadius":7,"info_showOrphanNodes":{"show":true,"name":"","description":"Show nodes that are not connected to any other nodes.","placeholder":""},"info_showAttachments":{"show":true,"name":"","description":"Show attachments like images and PDFs as nodes in the graph.","placeholder":""},"info_allowGlobalGraph":{"show":true,"name":"","description":"Allow the user to view the global graph of all nodes.","placeholder":""},"info_allowExpand":{"show":true,"name":"","description":"Allow the user to pop-out the graph view to take up the whole screen","placeholder":""},"info_attractionForce":{"show":true,"name":"","description":"How much should linked nodes attract each other? This will make the graph appear more clustered.","placeholder":""},"info_linkLength":{"show":true,"name":"","description":"How long should the links between nodes be? The shorter the links the more connected nodes will cluster together.","placeholder":""},"info_repulsionForce":{"show":true,"name":"","description":"How much should nodes repel each other? This will make disconnected parts more spread out.","placeholder":""},"info_centralForce":{"show":true,"name":"","description":"How much should nodes be attracted to the center? This will make the graph appear more dense and circular.","placeholder":""},"info_edgePruning":{"show":true,"name":"","description":"Edges with a length above this threshold will not be rendered, however they will still contribute to the simulation. This can help large tangled graphs look more organised. Hovering over a node will still display these links.","placeholder":""},"info_minNodeRadius":{"show":true,"name":"","description":"How small should the smallest nodes be? The smaller a node is the less it will attract other nodes.","placeholder":""},"info_maxNodeRadius":{"show":true,"name":"","description":"How large should the largest nodes be? Nodes are sized by how many links they have. The larger a node is the more it will attract other nodes. This can be used to create a good grouping around the most important nodes.","placeholder":""}},"sidebar":{"featureId":"sidebar","enabled":true,"unavailable":false,"alwaysEnabled":false,"allowResizing":true,"allowCollapsing":true,"rightDefaultWidth":"30em","leftDefaultWidth":"20em","info_allowResizing":{"show":true,"name":"","description":"Whether or not to allow the sidebars to be resized","placeholder":""},"info_allowCollapsing":{"show":true,"name":"","description":"Whether or not to allow the sidebars to be collapsed","placeholder":""},"info_rightDefaultWidth":{"show":true,"name":"","description":"The default width of the right sidebar","placeholder":""},"info_leftDefaultWidth":{"show":true,"name":"","description":"The default width of the left sidebar","placeholder":""}},"customHead":{"featureId":"custom-head","enabled":true,"unavailable":false,"alwaysEnabled":false,"displayTitle":"","featurePlacement":{"selector":"head","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"info_includePath":{"show":false,"name":"","description":"","placeholder":""},"sourcePath":"","info_sourcePath":{"show":true,"name":"","description":"The local path to the source .html file which will be included.","placeholder":"","fileInputOptions":{"makeRelativeToVault":true,"browseButton":true}},"includePath":"site-lib/html/custom-head.html"},"document":{"featureId":"obsidian-document","enabled":true,"unavailable":false,"alwaysEnabled":true,"allowFoldingLists":true,"allowFoldingHeadings":true,"documentWidth":"65em","info_allowFoldingLists":{"show":true,"name":"","description":"Whether or not to allow lists to be folded","placeholder":""},"info_allowFoldingHeadings":{"show":true,"name":"","description":"Whether or not to allow headings to be folded","placeholder":""},"info_documentWidth":{"show":true,"name":"","description":"The width of the document","placeholder":""}},"rss":{"featureId":"obsidian-document","enabled":true,"unavailable":false,"alwaysEnabled":false,"siteUrl":"","siteName":"Vault_md_public","authorName":"","info_siteUrl":{"show":true,"name":"","description":"The url that this site will be hosted at","placeholder":"https://example.com/mysite"},"info_siteName":{"show":true,"name":"","description":"The name of the vault / exported site","placeholder":""},"info_authorName":{"show":true,"name":"","description":"The name of the author of the site","placeholder":""}}},"modifiedTime":1739940655695,"siteName":"Vault_md_public","vaultName":"Vault_md_public","exportRoot":"","baseURL":"","pluginVersion":"1.9.0-3b","themeName":"","bodyClasses":"publish css-settings-manager show-inline-title show-ribbon is-focused","hasFavicon":false}