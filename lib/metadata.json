{"createdTime":1741657605062,"shownInTree":["issue_troubleshooting/⏰-script-로딩-지연-이슈.html","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html","lectur/🏫-강의.html","lectur/1.-객체-지향-설계와-스프링.html","lectur/2.-스프링-핵심-원리-이해.html","project/hello-batch/✏-chunk_partitioning-batch-구조-드로잉.html","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html","project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html","project/note-ci_cd/⛈-obsidian-aws연동.html","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html","project/💻-프로젝트.html","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html","study/커리큘럼/🆕-dev-커리큘럼.html","study/coding-test/👽-algorithm.html","study/coding-test/🤠-coding-test-풀이-모음.html","study/cs/☕-java-,-oop.html","study/cs/🍃-spring.html","study/cs/🎩-devops.html","study/cs/🐞-etc.html","study/cs/📔-database.html","study/cs/📭-server.html","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html","study/dev-seminar/🔹-tdd에-대하여.html","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html","study/dev-seminar/🪕-jpa-에-대한-고찰.html","study/📕-공부.html","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html","tools/aws/🍊-aws-ec2란.html","tools/aws/🍌-elastic-ip(탄력적-ip)란.html","tools/docker/🐋-docker.html","tools/docker/📘-springboot-&-docker-+-reids-연동.html","tools/🎵-obsidian.html","tools/🪓-도구.html","index.html"],"attachments":["사진-및-문서/pasted-image-20250225161448.png","사진-및-문서/pasted-image-20250307172522.png","사진-및-문서/pasted-image-20250218151731.png","사진-및-문서/pasted-image-20250218151806.png","사진-및-문서/pasted-image-20250218152044.png","사진-및-문서/pasted-image-20250218152103.png","사진-및-문서/pasted-image-20250218153131.png","사진-및-문서/pasted-image-20250218153319.png","사진-및-문서/pasted-image-20250218153445.png","사진-및-문서/pasted-image-20250218153543.png","사진-및-문서/pasted-image-20250218153553.png","사진-및-문서/pasted-image-20250218151330.png","사진-및-문서/pasted-image-20250218153814.png","사진-및-문서/pasted-image-20250218153858.png","사진-및-문서/pasted-image-20250218154352.png","사진-및-문서/pasted-image-20250218154433.png","사진-및-문서/pasted-image-20250218154615.png","사진-및-문서/pasted-image-20250218154633.png","사진-및-문서/pasted-image-20250218154647.png","사진-및-문서/pasted-image-20250218155524.png","사진-및-문서/pasted-image-20250218160328.png","사진-및-문서/pasted-image-20250218160359.png","사진-및-문서/pasted-image-20250218160428.png","사진-및-문서/pasted-image-20250218160532.png","사진-및-문서/pasted-image-20250218160956.png","사진-및-문서/pasted-image-20250218161424.png","사진-및-문서/pasted-image-20250218161515.png","사진-및-문서/pasted-image-20250218161728.png","사진-및-문서/pasted-image-20250218161824.png","사진-및-문서/pasted-image-20250218161847.png","사진-및-문서/pasted-image-20250218161937.png","사진-및-문서/pasted-image-20250218162355.png","사진-및-문서/do-messenger_screenshot_2025-02-19_16_19_04.png","사진-및-문서/pasted-image-20250219154331.png","사진-및-문서/pasted-image-20250219154315.png","사진-및-문서/pasted-image-20241224144309.png","사진-및-문서/pasted-image-20241226111559.png","사진-및-문서/pasted-image-20250102160223.png","사진-및-문서/pasted-image-20241226152219.png","사진-및-문서/pasted-image-20241226171158.png","사진-및-문서/pasted-image-20241230135801.png","사진-및-문서/pasted-image-20250102160213.png","사진-및-문서/pasted-image-20250226145129.png","사진-및-문서/pasted-image-20250220144552.png","사진-및-문서/output-(9).png","사진-및-문서/pasted-image-20241206113120.png","사진-및-문서/회사-은행-서비스1111.png","사진-및-문서/spring-batch-tasklet-예치금-잔액-비교-1.png","사진-및-문서/spring-batch-tasklet-예치금-잔액-비교-잘못된-차액발생-인식-타임라인.png","사진-및-문서/output-(1).png","사진-및-문서/pasted-image-20241217150339.png","사진-및-문서/pasted-image-20241219145746.png","사진-및-문서/output-(9)-1.png","사진-및-문서/output-(10).png","사진-및-문서/do-messenger_screenshot_2024-12-23_14_40_21.png","사진-및-문서/pasted-image-20241224093159.png","사진-및-문서/pasted-image-20241224093207.png","사진-및-문서/pasted-image-20241224093225.png","사진-및-문서/pasted-image-20250305173344.png","사진-및-문서/pasted-image-20250305175924.png","사진-및-문서/pasted-image-20241213102128.png","사진-및-문서/pasted-image-20250304170347.png","사진-및-문서/pasted-image-20250304170412.png","사진-및-문서/pasted-image-20250304171240.png","사진-및-문서/pasted-image-20241213102229.png","사진-및-문서/pasted-image-20241213143101.png","사진-및-문서/pasted-image-20241213143217.png","사진-및-문서/pasted-image-20241213103503.png","사진-및-문서/pasted-image-20241105110415.png","사진-및-문서/pasted-image-20250227140437.png","사진-및-문서/pasted-image-20250227140620.png","사진-및-문서/pasted-image-20241105110637.png","사진-및-문서/pasted-image-20241105110713.png","사진-및-문서/pasted-image-20241107115602.png","사진-및-문서/pasted-image-20241107115830.png","사진-및-문서/pasted-image-20241107121044.png","사진-및-문서/pasted-image-20241107121202.png","사진-및-문서/pasted-image-20241107121939.png","사진-및-문서/pasted-image-20250227114750.png","사진-및-문서/pasted-image-20250227114826.png","사진-및-문서/pasted-image-20250227115004.png","사진-및-문서/pasted-image-20250227115015.png","사진-및-문서/pasted-image-20250227115158.png","사진-및-문서/pasted-image-20250227115148.png","사진-및-문서/pasted-image-20250227121009.png","사진-및-문서/pasted-image-20250227121046.png","사진-및-문서/pasted-image-20250227121942.png","사진-및-문서/pasted-image-20250227122010.png","사진-및-문서/pasted-image-20250227122736.png","사진-및-문서/output-(14).png","사진-및-문서/pasted-image-20250304121056.png","사진-및-문서/pasted-image-20250304121009.png","사진-및-문서/pasted-image-20250304121455.png","사진-및-문서/pasted-image-20250304121338.png","사진-및-문서/pasted-image-20240610171904.png","사진-및-문서/pasted-image-20240531103441.png","사진-및-문서/pasted-image-20240531103549.png","사진-및-문서/pasted-image-20240531105228.png","사진-및-문서/pasted-image-20240531105241.png","사진-및-문서/pasted-image-20240531104351.png","사진-및-문서/pasted-image-20240531104418.png","사진-및-문서/pasted-image-20240531104751.png","사진-및-문서/pasted-image-20240531104803.png","사진-및-문서/pasted-image-20240828104032.png","사진-및-문서/pasted-image-20240828104728.png","사진-및-문서/pasted-image-20250228150552.png","사진-및-문서/pasted-image-20250102181842.png","사진-및-문서/pasted-image-20250221112429.png","사진-및-문서/pasted-image-20250221114856.png","사진-및-문서/pasted-image-20250221114901.png","사진-및-문서/pasted-image-20250221114932.png","사진-및-문서/pasted-image-20250221114945.png","사진-및-문서/pasted-image-20250221114951.png","사진-및-문서/pasted-image-20250221114959.png","사진-및-문서/pasted-image-20250221115004.png","사진-및-문서/pasted-image-20250221115010.png","사진-및-문서/pasted-image-20250221115019.png","사진-및-문서/pasted-image-20250221115024.png","사진-및-문서/pasted-image-20250221115030.png","사진-및-문서/pasted-image-20250221115035.png","사진-및-문서/pasted-image-20250221115040.png","사진-및-문서/pasted-image-20250221115046.png","사진-및-문서/pasted-image-20250221115052.png","사진-및-문서/pasted-image-20250221115058.png","사진-및-문서/pasted-image-20250221115102.png","사진-및-문서/pasted-image-20250221115117.png","사진-및-문서/pasted-image-20250221115122.png","사진-및-문서/pasted-image-20250221115129.png","사진-및-문서/pasted-image-20250221115132.png","사진-및-문서/pasted-image-20250221115136.png","사진-및-문서/pasted-image-20250221115140.png","사진-및-문서/pasted-image-20250221115146.png","사진-및-문서/pasted-image-20250221115151.png","사진-및-문서/pasted-image-20250221115157.png","사진-및-문서/pasted-image-20250221115201.png","사진-및-문서/pasted-image-20250221115214.png","사진-및-문서/pasted-image-20250221115220.png","사진-및-문서/pasted-image-20250221115224.png","사진-및-문서/pasted-image-20250221115228.png","사진-및-문서/pasted-image-20250221115232.png","사진-및-문서/pasted-image-20250221114152.png","사진-및-문서/pasted-image-20250221114208.png","사진-및-문서/pasted-image-20250221114220.png","사진-및-문서/pasted-image-20250221114306.png","사진-및-문서/pasted-image-20250221114324.png","사진-및-문서/pasted-image-20250221114327.png","사진-및-문서/pasted-image-20250221114334.png","사진-및-문서/pasted-image-20250221114339.png","사진-및-문서/pasted-image-20250221114345.png","사진-및-문서/pasted-image-20250221114353.png","사진-및-문서/pasted-image-20250221114400.png","사진-및-문서/pasted-image-20250221114406.png","사진-및-문서/pasted-image-20250221114411.png","사진-및-문서/pasted-image-20250221114423.png","사진-및-문서/pasted-image-20250221114428.png","사진-및-문서/pasted-image-20250221114434.png","사진-및-문서/pasted-image-20250221114439.png","사진-및-문서/pasted-image-20250221114443.png","사진-및-문서/pasted-image-20250221114501.png","사진-및-문서/pasted-image-20250221114448.png","사진-및-문서/pasted-image-20250221114522.png","사진-및-문서/pasted-image-20250221114527.png","사진-및-문서/pasted-image-20250221114531.png","사진-및-문서/pasted-image-20250221114535.png","사진-및-문서/pasted-image-20250221114539.png","사진-및-문서/pasted-image-20250221114543.png","사진-및-문서/pasted-image-20250221114600.png","사진-및-문서/pasted-image-20250221114605.png","사진-및-문서/pasted-image-20250221114610.png","사진-및-문서/pasted-image-20250221114616.png","사진-및-문서/pasted-image-20250221114621.png","사진-및-문서/pasted-image-20250221114628.png","사진-및-문서/pasted-image-20250221114633.png","사진-및-문서/pasted-image-20250221114638.png","사진-및-문서/pasted-image-20250221114644.png","사진-및-문서/pasted-image-20250221114648.png","사진-및-문서/pasted-image-20250221114743.png","사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png","사진-및-문서/do-messenger_screenshot_2025-02-10_17_10_58.png","사진-및-문서/do-messenger_screenshot_2025-02-11_13_47_16.png","사진-및-문서/do-messenger_screenshot_2025-02-11_15_32_34.png","사진-및-문서/do-messenger_screenshot_2025-02-11_16_31_10.png","사진-및-문서/do-messenger_screenshot_2025-02-12_14_04_58.png","사진-및-문서/pasted-image-20250218145702.png","사진-및-문서/pasted-image-20250218145823.png","사진-및-문서/pasted-image-20250110144021.png","사진-및-문서/pasted-image-20241206140739.png","사진-및-문서/pasted-image-20241206140822.png","사진-및-문서/pasted-image-20241220113308.png","사진-및-문서/pasted-image-20241220113315.png","사진-및-문서/pasted-image-20240531162124.png","사진-및-문서/pasted-image-20240722180706.png","사진-및-문서/pasted-image-20240611144129.png","사진-및-문서/pasted-image-20240605160336.png","사진-및-문서/pasted-image-20240723134224.png","사진-및-문서/pasted-image-20240723134333.png","사진-및-문서/pasted-image-20240603173517.png","사진-및-문서/pasted-image-20240603180042.png","사진-및-문서/pasted-image-20240604102140.png","사진-및-문서/pasted-image-20240604144026.png","사진-및-문서/pasted-image-20250110101642.png","사진-및-문서/pasted-image-20250110103409.png","사진-및-문서/pasted-image-20250110122312.png","사진-및-문서/pasted-image-20250122111223.png","lib/html/custom-head-content.html","lib/scripts/graph-wasm.wasm","lib/fonts/94f2f163d4b698242fef.otf","lib/fonts/72505e6a122c6acd5471.woff2","lib/fonts/2d5198822ab091ce4305.woff2","lib/fonts/c8ba52b05a9ef10f4758.woff2","lib/fonts/cb10ffd7684cd9836a05.woff2","lib/fonts/b5f0f109bc88052d4000.woff2","lib/fonts/cbe0ae49c52c920fd563.woff2","lib/fonts/535a6cf662596b3bd6a6.woff2","lib/fonts/70cc7ff27245e82ad414.ttf","lib/fonts/454577c22304619db035.ttf","lib/fonts/52ac8f3034507f1d9e53.ttf","lib/fonts/05b618077343fbbd92b7.ttf","lib/fonts/4bb6ac751d1c5478ff3a.woff2","lib/media/6155340132a851f6089e.svg","lib/media/2308ab1944a6bfa5c5b8.svg","lib/html/file-tree.html","lib/scripts/webpage.js","lib/scripts/graph-view.js","lib/scripts/graph-wasm.js","lib/scripts/graph-render-worker.js","lib/scripts/tinycolor.js","lib/scripts/pixi.js","lib/scripts/minisearch.js","lib/media/favicon.png","lib/scripts/graph-data.js","lib/styles/obsidian.css","lib/styles/other-plugins.css","lib/styles/theme.css","lib/styles/global-variable-styles.css","lib/styles/supported-plugins.css","lib/styles/main-styles.css","lib/metadata.json","lib/search-index.json"],"allFiles":["lib/html/custom-head-content.html","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html","lectur/🏫-강의.html","study/📕-공부.html","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html","tools/🪓-도구.html","사진-및-문서/pasted-image-20250307172522.png","index.html","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html","project/💻-프로젝트.html","lectur/2.-스프링-핵심-원리-이해.html","사진-및-문서/pasted-image-20250305175924.png","사진-및-문서/pasted-image-20250305173344.png","lectur/1.-객체-지향-설계와-스프링.html","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html","issue_troubleshooting/⏰-script-로딩-지연-이슈.html","study/cs/📔-database.html","사진-및-문서/pasted-image-20250304171240.png","사진-및-문서/pasted-image-20250304170412.png","사진-및-문서/pasted-image-20250304170347.png","사진-및-문서/pasted-image-20250304121455.png","사진-및-문서/pasted-image-20250304121338.png","사진-및-문서/pasted-image-20250304121056.png","사진-및-문서/pasted-image-20250304121009.png","project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html","사진-및-문서/pasted-image-20250228150552.png","tools/aws/🍌-elastic-ip(탄력적-ip)란.html","사진-및-문서/pasted-image-20250227140620.png","사진-및-문서/pasted-image-20250227140437.png","사진-및-문서/output-(14).png","사진-및-문서/pasted-image-20250227122736.png","사진-및-문서/pasted-image-20250227122010.png","사진-및-문서/pasted-image-20250227121942.png","사진-및-문서/pasted-image-20250227121046.png","사진-및-문서/pasted-image-20250227121009.png","사진-및-문서/pasted-image-20250227115158.png","사진-및-문서/pasted-image-20250227115148.png","사진-및-문서/pasted-image-20250227115015.png","사진-및-문서/pasted-image-20250227115004.png","사진-및-문서/pasted-image-20250227114826.png","사진-및-문서/pasted-image-20250227114750.png","project/note-ci_cd/⛈-obsidian-aws연동.html","사진-및-문서/pasted-image-20250226145129.png","사진-및-문서/pasted-image-20250225161448.png","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html","tools/aws/🍊-aws-ec2란.html","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html","tools/docker/📘-springboot-&-docker-+-reids-연동.html","tools/docker/🐋-docker.html","study/coding-test/👽-algorithm.html","사진-및-문서/pasted-image-20250221115201.png","사진-및-문서/pasted-image-20250221115214.png","사진-및-문서/pasted-image-20250221115220.png","사진-및-문서/pasted-image-20250221115224.png","사진-및-문서/pasted-image-20250221115228.png","사진-및-문서/pasted-image-20250221115232.png","사진-및-문서/pasted-image-20250221115157.png","사진-및-문서/pasted-image-20250221115151.png","사진-및-문서/pasted-image-20250221115140.png","사진-및-문서/pasted-image-20250221115146.png","사진-및-문서/pasted-image-20250221115136.png","사진-및-문서/pasted-image-20250221115132.png","사진-및-문서/pasted-image-20250221115129.png","사진-및-문서/pasted-image-20250221115122.png","사진-및-문서/pasted-image-20250221115117.png","사진-및-문서/pasted-image-20250221115102.png","사진-및-문서/pasted-image-20250221115058.png","사진-및-문서/pasted-image-20250221115052.png","사진-및-문서/pasted-image-20250221115046.png","사진-및-문서/pasted-image-20250221115040.png","사진-및-문서/pasted-image-20250221115035.png","사진-및-문서/pasted-image-20250221115030.png","사진-및-문서/pasted-image-20250221115024.png","사진-및-문서/pasted-image-20250221115010.png","사진-및-문서/pasted-image-20250221115019.png","사진-및-문서/pasted-image-20250221115004.png","사진-및-문서/pasted-image-20250221114951.png","사진-및-문서/pasted-image-20250221114959.png","사진-및-문서/pasted-image-20250221114945.png","사진-및-문서/pasted-image-20250221114932.png","사진-및-문서/pasted-image-20250221114901.png","사진-및-문서/pasted-image-20250221114856.png","사진-및-문서/pasted-image-20250221114527.png","사진-및-문서/pasted-image-20250221114531.png","사진-및-문서/pasted-image-20250221114535.png","사진-및-문서/pasted-image-20250221114539.png","사진-및-문서/pasted-image-20250221114543.png","사진-및-문서/pasted-image-20250221114600.png","사진-및-문서/pasted-image-20250221114605.png","사진-및-문서/pasted-image-20250221114610.png","사진-및-문서/pasted-image-20250221114616.png","사진-및-문서/pasted-image-20250221114621.png","사진-및-문서/pasted-image-20250221114628.png","사진-및-문서/pasted-image-20250221114633.png","사진-및-문서/pasted-image-20250221114638.png","사진-및-문서/pasted-image-20250221114644.png","사진-및-문서/pasted-image-20250221114648.png","사진-및-문서/pasted-image-20250221114743.png","사진-및-문서/pasted-image-20250221114522.png","사진-및-문서/pasted-image-20250221114501.png","사진-및-문서/pasted-image-20250221114406.png","사진-및-문서/pasted-image-20250221114411.png","사진-및-문서/pasted-image-20250221114423.png","사진-및-문서/pasted-image-20250221114428.png","사진-및-문서/pasted-image-20250221114434.png","사진-및-문서/pasted-image-20250221114439.png","사진-및-문서/pasted-image-20250221114443.png","사진-및-문서/pasted-image-20250221114448.png","사진-및-문서/pasted-image-20250221114353.png","사진-및-문서/pasted-image-20250221114400.png","사진-및-문서/pasted-image-20250221114345.png","사진-및-문서/pasted-image-20250221114339.png","사진-및-문서/pasted-image-20250221114327.png","사진-및-문서/pasted-image-20250221114334.png","사진-및-문서/pasted-image-20250221114152.png","사진-및-문서/pasted-image-20250221114208.png","사진-및-문서/pasted-image-20250221114220.png","사진-및-문서/pasted-image-20250221114306.png","사진-및-문서/pasted-image-20250221114324.png","사진-및-문서/pasted-image-20250221112429.png","study/coding-test/🤠-coding-test-풀이-모음.html","사진-및-문서/pasted-image-20250220144552.png","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html","study/커리큘럼/🆕-dev-커리큘럼.html","tools/🎵-obsidian.html","study/dev-seminar/🪕-jpa-에-대한-고찰.html","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html","study/dev-seminar/🔹-tdd에-대하여.html","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html","사진-및-문서/do-messenger_screenshot_2025-02-19_16_19_04.png","사진-및-문서/pasted-image-20250219154331.png","사진-및-문서/pasted-image-20250219154315.png","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html","study/cs/🎩-devops.html","study/cs/🍃-spring.html","study/cs/📭-server.html","study/cs/🐞-etc.html","study/cs/☕-java-,-oop.html","사진-및-문서/pasted-image-20250218162355.png","사진-및-문서/pasted-image-20250218161847.png","사진-및-문서/pasted-image-20250218161937.png","사진-및-문서/pasted-image-20250218161824.png","사진-및-문서/pasted-image-20250218161728.png","사진-및-문서/pasted-image-20250218161515.png","사진-및-문서/pasted-image-20250218161424.png","사진-및-문서/pasted-image-20250218160956.png","사진-및-문서/pasted-image-20250218160532.png","사진-및-문서/pasted-image-20250218160428.png","사진-및-문서/pasted-image-20250218160359.png","사진-및-문서/pasted-image-20250218160328.png","사진-및-문서/pasted-image-20250218155524.png","사진-및-문서/pasted-image-20250218154647.png","사진-및-문서/pasted-image-20250218154633.png","사진-및-문서/pasted-image-20250218154615.png","사진-및-문서/pasted-image-20250218154433.png","사진-및-문서/pasted-image-20250218154352.png","사진-및-문서/pasted-image-20250218153858.png","사진-및-문서/pasted-image-20250218153814.png","사진-및-문서/pasted-image-20250218153553.png","사진-및-문서/pasted-image-20250218153543.png","사진-및-문서/pasted-image-20250218153445.png","사진-및-문서/pasted-image-20250218153319.png","사진-및-문서/pasted-image-20250218153131.png","사진-및-문서/pasted-image-20250218152103.png","사진-및-문서/pasted-image-20250218152044.png","사진-및-문서/pasted-image-20250218151806.png","사진-및-문서/pasted-image-20250218151731.png","사진-및-문서/pasted-image-20250218151330.png","사진-및-문서/pasted-image-20250218145823.png","사진-및-문서/pasted-image-20250218145702.png","project/hello-batch/✏-chunk_partitioning-batch-구조-드로잉.html","사진-및-문서/회사-은행-서비스1111.png","사진-및-문서/output-(9).png","사진-및-문서/output-(9)-1.png","사진-및-문서/output-(10).png","사진-및-문서/output-(1).png","사진-및-문서/do-messenger_screenshot_2024-12-23_14_40_21.png","사진-및-문서/spring-batch-tasklet-예치금-잔액-비교-잘못된-차액발생-인식-타임라인.png","사진-및-문서/spring-batch-tasklet-예치금-잔액-비교-1.png","사진-및-문서/pasted-image-20250122111223.png","사진-및-문서/pasted-image-20250110144021.png","사진-및-문서/pasted-image-20250110103409.png","사진-및-문서/pasted-image-20250110122312.png","사진-및-문서/pasted-image-20250110101642.png","사진-및-문서/pasted-image-20250102181842.png","사진-및-문서/pasted-image-20250102160223.png","사진-및-문서/pasted-image-20250102160213.png","사진-및-문서/pasted-image-20241230135801.png","사진-및-문서/pasted-image-20241226171158.png","사진-및-문서/pasted-image-20241226111559.png","사진-및-문서/pasted-image-20241226152219.png","사진-및-문서/pasted-image-20241224144309.png","사진-및-문서/pasted-image-20241224093225.png","사진-및-문서/pasted-image-20241224093159.png","사진-및-문서/pasted-image-20241224093207.png","사진-및-문서/pasted-image-20241220113315.png","사진-및-문서/pasted-image-20241219145746.png","사진-및-문서/pasted-image-20241220113308.png","사진-및-문서/pasted-image-20241217150339.png","사진-및-문서/pasted-image-20241213143217.png","사진-및-문서/pasted-image-20241213143101.png","사진-및-문서/pasted-image-20241213103503.png","사진-및-문서/pasted-image-20241213102229.png","사진-및-문서/pasted-image-20241213102128.png","사진-및-문서/pasted-image-20241206140822.png","사진-및-문서/pasted-image-20241206140739.png","사진-및-문서/pasted-image-20241206113120.png","사진-및-문서/pasted-image-20241107121939.png","사진-및-문서/pasted-image-20241107121202.png","사진-및-문서/pasted-image-20241107121044.png","사진-및-문서/pasted-image-20241107115830.png","사진-및-문서/pasted-image-20241107115602.png","사진-및-문서/pasted-image-20241105110713.png","사진-및-문서/pasted-image-20241105110637.png","사진-및-문서/pasted-image-20241105110415.png","사진-및-문서/pasted-image-20240828104728.png","사진-및-문서/pasted-image-20240828104032.png","사진-및-문서/pasted-image-20240723134333.png","사진-및-문서/pasted-image-20240723134224.png","사진-및-문서/pasted-image-20240722180706.png","사진-및-문서/pasted-image-20240611144129.png","사진-및-문서/pasted-image-20240610171904.png","사진-및-문서/pasted-image-20240605160336.png","사진-및-문서/pasted-image-20240604144026.png","사진-및-문서/pasted-image-20240604102140.png","사진-및-문서/pasted-image-20240603180042.png","사진-및-문서/pasted-image-20240603173517.png","사진-및-문서/pasted-image-20240531162124.png","사진-및-문서/pasted-image-20240531105241.png","사진-및-문서/pasted-image-20240531105228.png","사진-및-문서/pasted-image-20240531104803.png","사진-및-문서/pasted-image-20240531104418.png","사진-및-문서/pasted-image-20240531104751.png","사진-및-문서/pasted-image-20240531104351.png","사진-및-문서/pasted-image-20240531103441.png","사진-및-문서/pasted-image-20240531103549.png","사진-및-문서/do-messenger_screenshot_2025-02-12_14_04_58.png","사진-및-문서/do-messenger_screenshot_2025-02-11_16_31_10.png","사진-및-문서/do-messenger_screenshot_2025-02-11_15_32_34.png","사진-및-문서/do-messenger_screenshot_2025-02-11_13_47_16.png","사진-및-문서/do-messenger_screenshot_2025-02-10_17_10_58.png","사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png","lib/scripts/graph-wasm.wasm","lib/fonts/94f2f163d4b698242fef.otf","lib/fonts/72505e6a122c6acd5471.woff2","lib/fonts/2d5198822ab091ce4305.woff2","lib/fonts/c8ba52b05a9ef10f4758.woff2","lib/fonts/cb10ffd7684cd9836a05.woff2","lib/fonts/b5f0f109bc88052d4000.woff2","lib/fonts/cbe0ae49c52c920fd563.woff2","lib/fonts/535a6cf662596b3bd6a6.woff2","lib/fonts/70cc7ff27245e82ad414.ttf","lib/fonts/454577c22304619db035.ttf","lib/fonts/52ac8f3034507f1d9e53.ttf","lib/fonts/05b618077343fbbd92b7.ttf","lib/fonts/4bb6ac751d1c5478ff3a.woff2","lib/media/6155340132a851f6089e.svg","lib/media/2308ab1944a6bfa5c5b8.svg","lib/html/file-tree.html","lib/scripts/webpage.js","lib/scripts/graph-view.js","lib/scripts/graph-wasm.js","lib/scripts/graph-render-worker.js","lib/scripts/tinycolor.js","lib/scripts/pixi.js","lib/scripts/minisearch.js","lib/media/favicon.png","lib/scripts/graph-data.js","lib/styles/obsidian.css","lib/styles/other-plugins.css","lib/styles/theme.css","lib/styles/global-variable-styles.css","lib/styles/supported-plugins.css","lib/styles/main-styles.css"],"webpages":{"issue_troubleshooting/⏰-script-로딩-지연-이슈.html":{"title":"⏰ Script 로딩 지연 이슈","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:Script\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Script</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:로딩지연\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#로딩지연</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:성능개선\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#성능개선</a> <br> <a href=\"http://lts.kr?query=tag:Script\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Script\">#Script</a> <a href=\"http://lts.kr?query=tag:로딩지연\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#로딩지연\">#로딩지연</a> <a href=\"http://lts.kr?query=tag:성능개선\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#성능개선\">#성능개선</a><br><img alt=\"Pasted image 20241105110415.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241105110415.png\" style=\"width: 575px; max-width: 100%;\" target=\"_self\"><br>mainLayout은 Contents loading 후 Script를 호출하기 때문에, 특정 정적 오브젝트의 로딩이 완전히 마무리 될때 까지 실행되지 않음.<br>\n=&gt; ex) 상품이 로딩되지 않은 상태로 최대 20초 가량을 대기 하게 됨<br>\n<img alt=\"Pasted image 20250227140437.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250227140437.png\" style=\"width: 600px; max-width: 100%;\" target=\"_self\">\n<br><img alt=\"Pasted image 20250227140620.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250227140620.png\" target=\"_self\"><br>icon(아이콘)\n<br>font(폰트)\n<br> 현재 원인이 되는 외부자원(이미지/CSS)가 로딩되기 이전에 이벤트를 트리거 할 수 있다.<br>\n이때, HTML DOM 트리가 준비 된 후(HTML 템플릿이 준비된 후)에 실행되기 때문에 modelAndView.addObject()로 전달한 데이터를 확정적으로 받아올 수 있다.<br>\n<br>기존 메인 진입 소요시간 case 1 (로컬)<br>\n<img alt=\"Pasted image 20241105110637.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241105110637.png\" style=\"width: 500px; max-width: 100%;\" target=\"_self\"><br>\n23초\n<br>\n<br>기존 메인 진입 소요시간 case 2 (로컬)<br>\n<img alt=\"Pasted image 20241105110713.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241105110713.png\" style=\"width: 500px; max-width: 100%;\" target=\"_self\"><br>\n22초\n<br>\n<br>기존 메인 진입 소요시간 case 1 (운영)<br>\n<img alt=\"Pasted image 20241107115602.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241107115602.png\" style=\"width: 475px; max-width: 100%;\" target=\"_self\"><br>\n21초\n<br>\n<br>기존 메인 진입 소요시간 case 2 (운영)<br>\n<img alt=\"Pasted image 20241107115830.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241107115830.png\" style=\"width: 475px; max-width: 100%;\" target=\"_self\"><br>\n21초\n<br>\n<br>변경된 메인 진입 소요시간 case 1 (로컬)<br>\n<img alt=\"Pasted image 20241107121044.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241107121044.png\" style=\"width: 500px; max-width: 100%;\" target=\"_self\"><br>\n0.201초\n<br>\n<br>변경된 메인 진입 소요시간 case 2 (로컬)<br>\n<img alt=\"Pasted image 20241107121202.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241107121202.png\" style=\"width: 500px; max-width: 100%;\" target=\"_self\"><br>\n0.297초\n<br>\n<br>변경된 메인 진입 소요시간 case 3 (로컬)<br>\n<img alt=\"Pasted image 20241107121939.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241107121939.png\" style=\"width: 500px; max-width: 100%;\" target=\"_self\"><br>\n0.232초\n<br>\n리로드 후 스크립트(상품 리스트)로드 시까지\n<br>기존 투자하기 소요시간 case 1<br>\n<img alt=\"Pasted image 20250227114750.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250227114750.png\" target=\"_self\"><br>\n22.4초<br>\n<img alt=\"Pasted image 20250227114826.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250227114826.png\" target=\"_self\">\n<br>\n<br>기존 투자하기 소요시간 case 2<br>\n<img alt=\"Pasted image 20250227115004.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250227115004.png\" target=\"_self\"><br>\n22.6초<br>\n<img alt=\"Pasted image 20250227115015.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250227115015.png\" target=\"_self\">\n<br>\n<br>기존 투자하기 소요시간 case 3<br>\n<img alt=\"Pasted image 20250227115158.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250227115158.png\" target=\"_self\"><br>\n22.5초<br>\n<img alt=\"Pasted image 20250227115148.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250227115148.png\" target=\"_self\">\n<br>\n<br>변경 투자하기 소요시간 case 1<br>\n<img alt=\"Pasted image 20250227121009.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250227121009.png\" style=\"width: 500px; max-width: 100%;\" target=\"_self\"><br>\n0.373초\n<br>\n<br>변경 투자하기 소요시간 case 2<br>\n<img alt=\"Pasted image 20250227121046.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250227121046.png\" style=\"width: 500px; max-width: 100%;\" target=\"_self\"><br>\n0.362초\n<br>\n<br>변경 투자하기 소요시간 case 3<br>\n<img alt=\"Pasted image 20250227121942.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250227121942.png\" style=\"width: 475px; max-width: 100%;\" target=\"_self\"><br>\n0.360초\n<br><img alt=\"Pasted image 20250227122010.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250227122010.png\" target=\"_self\"><br><img alt=\"Pasted image 20250227122736.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250227122736.png\" target=\"_self\"><br>\n<br>aceat.js?advid=1954816599 - 에이스트레이더<br>\n<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://cdn.nhnace.com/libs/aceat.js?advid=195481\" target=\"_self\">https://cdn.nhnace.com/libs/aceat.js?advid=195481</a>\n<br>synchronizer.js - 네이버 관련 서버<br>\n<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://ssl.pstatic.net/melona/libs/gfp-nac-module/synchronizer.js\" target=\"_self\">https://ssl.pstatic.net/melona/libs/gfp-nac-module/synchronizer.js</a>\n<br>collect?en=page_view&amp;dr=localhost&amp;dl=http%... - 구글<br>\n<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.google.com/ccm/collect\" target=\"_self\">https://www.google.com/ccm/collect</a>... - 구글\n<br>869613409/?random=1740626824235&amp;cv=11&amp;f...<br>\n<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.google.com/pagead/1p\" target=\"_self\">https://www.google.com/pagead/1p</a>...\n<br>869613409/?random=1740626824235&amp;cv=11&amp;f... <br>869613409/?random=1110219531&amp;cv=11&amp;fst=... <br>\n내부망 사용으로 인한 요청 실패, 중요 데이터 없음.\n<br><img alt=\"output (14).png\" src=\"http://lts.kr/사진-및-문서/output-(14).png\" target=\"_self\"><br>Main 페이지: 기존 21~23초 → 0.201~0.297초로 약 99% 속도 향상<br>\nProductList 페이지: 기존 22.4~22.6초 → 0.360~0.373초로 약 98% 속도 향상<br>\n<br>정상 투자 확인<br>\n<img alt=\"Pasted image 20250304121056.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250304121056.png\" style=\"width: 475px; max-width: 100%;\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250304121009.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250304121009.png\" style=\"width: 475px; max-width: 100%;\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250304121455.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250304121455.png\" style=\"width: 475px; max-width: 100%;\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250304121338.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250304121338.png\" style=\"width: 500px; max-width: 100%;\" target=\"_self\">","aliases":[],"tags":["#Script","#로딩지연","#성능개선"],"headers":[{"heading":"⏰ Script 로딩 지연 이슈","level":1,"id":"⏰ Script 로딩 지연 이슈"},{"heading":"원인","level":1,"id":"원인"},{"heading":"- 특정 정적오브젝트의 로딩 지연","level":2,"id":"-_특정_정적오브젝트의_로딩_지연"},{"heading":"로딩 지연 오브젝트","level":1,"id":"로딩_지연_오브젝트"},{"heading":"수정","level":1,"id":"수정"},{"heading":"document.addEventListener('DOMContentLoaded', function())","level":4,"id":"document.addEventListener('DOMContentLoaded',_function())"},{"heading":"DOMContentLoaded 리스너를 사용하게 된다면,","level":2,"id":"DOMContentLoaded_리스너를_사용하게_된다면,"},{"heading":"Case","level":1,"id":"Case"},{"heading":"APP main 진입시","level":2,"id":"APP_**main**_진입시"},{"heading":"Local","level":3,"id":"Local"},{"heading":"prod","level":3,"id":"prod"},{"heading":"변경 후 case","level":1,"id":"변경_후_case"},{"heading":"APP 투자하기 진입시","level":2,"id":"APP_**투자하기**_진입시"},{"heading":"변경 후","level":1,"id":"변경_후"},{"heading":"main.html 템플릿이 완료됨과 동시에 출력이 가눙하다","level":4,"id":"main.html_템플릿이_완료됨과_동시에_출력이_가눙하다"},{"heading":"스크립트 데이터 로드 실패 검증","level":1,"id":"스크립트_데이터_로드_실패_검증"},{"heading":"👵기존 로직 로드","level":2,"id":"👵기존_로직_로드"},{"heading":"🍼변경 후 로직 로드","level":2,"id":"🍼변경_후_로직_로드"},{"heading":"❌ 실패한 요청 목록","level":2,"id":"❌_**실패한_요청_목록**"},{"heading":"성능 요약 📊","level":1,"id":"성능_요약_📊"},{"heading":"✅ 성능 데이터 (단위: 초)","level":2,"id":"✅_성능_데이터_(단위_초)"}],"backlinks":[],"links":["?query=tag:Script","?query=tag:%EB%A1%9C%EB%94%A9%EC%A7%80%EC%97%B0","?query=tag:%EC%84%B1%EB%8A%A5%EA%B0%9C%EC%84%A0","https://cdn.nhnace.com/libs/aceat.js?advid=195481","https://ssl.pstatic.net/melona/libs/gfp-nac-module/synchronizer.js","https://www.google.com/ccm/collect","https://www.google.com/pagead/1p","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#⏰ Script 로딩 지연 이슈","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#원인","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#-_특정_정적오브젝트의_로딩_지연","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#로딩_지연_오브젝트","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#수정","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#document.addEventListener('DOMContentLoaded',_function())","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#DOMContentLoaded_리스너를_사용하게_된다면,","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#Case","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#APP_**main**_진입시","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#Local","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#prod","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#변경_후_case","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#APP_**투자하기**_진입시","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#변경_후","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#main.html_템플릿이_완료됨과_동시에_출력이_가눙하다","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#스크립트_데이터_로드_실패_검증","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#👵기존_로직_로드","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#🍼변경_후_로직_로드","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#❌_**실패한_요청_목록**","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#성능_요약_📊","issue_troubleshooting/⏰-script-로딩-지연-이슈.html#✅_성능_데이터_(단위_초)"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/issue_troubleshooting/⏰-script-로딩-지연-이슈.html","pathToRoot":"..","createdTime":1740732986345,"modifiedTime":1741077398363,"sourceSize":4413,"sourcePath":"Issue_TroubleShooting/⏰ Script 로딩 지연 이슈.md","exportPath":"issue_troubleshooting/⏰-script-로딩-지연-이슈.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20241105110415.png","사진-및-문서/pasted-image-20250227140437.png","사진-및-문서/pasted-image-20250227140620.png","사진-및-문서/pasted-image-20241105110637.png","사진-및-문서/pasted-image-20241105110713.png","사진-및-문서/pasted-image-20241107115602.png","사진-및-문서/pasted-image-20241107115830.png","사진-및-문서/pasted-image-20241107121044.png","사진-및-문서/pasted-image-20241107121202.png","사진-및-문서/pasted-image-20241107121939.png","사진-및-문서/pasted-image-20250227114750.png","사진-및-문서/pasted-image-20250227114826.png","사진-및-문서/pasted-image-20250227115004.png","사진-및-문서/pasted-image-20250227115015.png","사진-및-문서/pasted-image-20250227115158.png","사진-및-문서/pasted-image-20250227115148.png","사진-및-문서/pasted-image-20250227121009.png","사진-및-문서/pasted-image-20250227121046.png","사진-및-문서/pasted-image-20250227121942.png","사진-및-문서/pasted-image-20250227122010.png","사진-및-문서/pasted-image-20250227122736.png","사진-및-문서/output-(14).png","사진-및-문서/pasted-image-20250304121056.png","사진-및-문서/pasted-image-20250304121009.png","사진-및-문서/pasted-image-20250304121455.png","사진-및-문서/pasted-image-20250304121338.png"]},"issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html":{"title":"⚔ StckOverflow 이슈와 QueryDSL","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:Spring\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Spring</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:StckOverflow\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#StckOverflow</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:QueryDSL\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#QueryDSL</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:JPA\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#JPA</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:DB\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#DB</a> <br> <a href=\"http://lts.kr?query=tag:Spring\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Spring\">#Spring</a> <a href=\"http://lts.kr?query=tag:StckOverflow\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#StckOverflow\">#StckOverflow</a> <a href=\"http://lts.kr?query=tag:QueryDSL\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#QueryDSL\">#QueryDSL</a> <a href=\"http://lts.kr?query=tag:JPA\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#JPA\">#JPA</a> <a href=\"http://lts.kr?query=tag:DB\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#DB\">#DB</a><br>\n<br> <img alt=\"Pasted image 20250307172522.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250307172522.png\" target=\"_self\">\n<br>\n<br>\nHello에서는 특별한 상황이 아닌 이상, JPA - QueryDSL 방식으로 코드를 통일하고 있다.<br>\n-&gt; QueryDSL: Type-Safe) 동적 SQL을 작성할 수 있도록 도와주는 Java 기반의 ORM(Query Builder)<br>\n가독성이 뛰어나며, 컴파일 시점에 오류 검출 가능 <br>\nBooleanExpression은 QueryDSL에서 제공하는 동적 쿼리 조합 기능이다.<br>\nex) <br>import com.querydsl.core.types.dsl.BooleanExpression;\nimport com.querydsl.jpa.impl.JPAQueryFactory;\nimport java.util.List; public List&lt;User&gt; findUsersByConditions(String name, Integer age) { QUser user = QUser.user; JPAQueryFactory queryFactory = new JPAQueryFactory(entityManager); BooleanExpression predicate = user.isNotNull(); // 기본 조건 (항상 참) if (name != null) { predicate = predicate.and(user.name.eq(name)); } if (age != null) { predicate = predicate.and(user.age.gt(age)); } return queryFactory.selectFrom(user) .where(predicate) .fetch();\n} <br>새로운 BooleanExpression 객체를 반환한다.<br>\n<br>함수형 조합 : 함수처럼 동적 쿼리 조합을 관리 할 수 있다.(여러 개의 조건을 동적으로 조합 가능)\n<br>스레드 안정성 : 불변객체로 생성되므로, 여러 스레드에서 동시에 사용하더라도 안전하다.\n<br>BooleanExpression expr1 = user.name.like(\"A%\");\nBooleanExpression expr2 = expr1.and(user.age.gt(20));\n<br>BooleanExpression은 위에서 설명한 바와 같이, Immutable(불변)객체이다.<br>\n이 때, 위와같이 and/or 연상을 호출하면, 기존 객체를 변경하는 것이 아닌, 새로운 객체를 만들어 낸다.<br>해당 연산은 연쇄적으로 새로운 객체를 생성하며, 깊이가 n이 되는 트리(Tree)구조가 형성된다.<br>\nor() / and() 연산을 할 때마다 기존 객체를 참조하는 새로운 객체가 생성됨.<br>StckOverflow가 발생하게 되는 것이다.<br>import com.querydsl.core.BooleanBuilder;\nimport com.querydsl.core.types.dsl.BooleanExpression;\nimport java.util.List; public BooleanExpression buildPredicateEfficiently(List&lt;String&gt; patterns) { QUser user = QUser.user; BooleanBuilder builder = new BooleanBuilder(); // 동적 조건을 쌓는 도구 for (String pattern : patterns) { builder.or(user.name.like(pattern + \"%\")); // 재귀 호출 없이 추가 } return builder;\n}\n<br>BooleanBuilder는 객체를 생성할 때, 내부적으로 BooleanExpression을 List 형태로 관리하게 된다.\n<br>따라서, 불필요한 재귀 호출 없이 메모리를 효율적으로 사용할 수 있다.\n<br>List&lt;String&gt; names = List.of(\"A\", \"B\", \"C\"); List&lt;User&gt; users = queryFactory .selectFrom(user) .where(user.name.in(names)) .fetch(); <br>리스트(Set, List, 배열) 데이터를 한 번에 비교\n<br>B-tree 인덱스를 활용하여 더 효율적인 검색 가능\n<br>대량 데이터를 비교할 때 성능이 더 좋음\n<br>하지만!<br>WHERE IN절은 값의 일치(Equality Check, =)만을 지원하기 때문에, Like연산과 같은 패턴 매칭을 이용하기 위해선 BooleanBuilder를 사용해야한다.\n<br>다중 컬럼 비교가 불가능하기 떄문에, 2개 이상의 컬럼을 비교하려면 BooleanBuilder를 사용해야한다.\n<br>","aliases":[],"tags":["#Spring","#StckOverflow","#QueryDSL","#JPA","#DB"],"headers":[{"heading":"⚔ StckOverflow 이슈와 QueryDSL","level":1,"id":"⚔ StckOverflow 이슈와 QueryDSL"},{"heading":"정말 오랜만에 보는 StckOverflow","level":1,"id":"정말_오랜만에_보는_`StckOverflow`"},{"heading":"원인 분석 전 사전지식","level":1,"id":"원인_분석_전_사전지식"},{"heading":"predicate.and(condition) 또는 predicate.or(condition)을 호출하면,","level":3,"id":"`predicate.and(condition)`_또는_`predicate.or(condition)`을_호출하면,"},{"heading":"BooleanExpression이 사용된 이유","level":2,"id":"BooleanExpression이_사용된_이유"},{"heading":"StckOverflow 발생 이유?","level":1,"id":"StckOverflow_발생_이유?"},{"heading":"이때, JVM의 한정된 스텍의 크기를 초과하는 스텍(Tree)구조가 쌓이게 된다면,","level":3,"id":"이때,_JVM의_한정된_스텍의_크기를_초과하는_스텍(Tree)구조가_쌓이게_된다면,"},{"heading":"해결방법?","level":1,"id":"해결방법?"},{"heading":"방법 1. BooleanBuilder 활용 (QueryDSL 제공)","level":2,"id":"방법_1._`BooleanBuilder`_활용_(QueryDSL_제공)"},{"heading":"비교 분석","level":3,"id":"비교_분석"},{"heading":"방법 2. WHERE IN 사용","level":1,"id":"방법_2._`WHERE_IN`_사용"},{"heading":"BooleanBuilder vs WHERE IN 성능 비교","level":3,"id":"BooleanBuilder_vs_WHERE_IN_성능_비교"},{"heading":"결론","level":1,"id":"결론"},{"heading":"- 쿼리를 작성할때, 해당 쿼리의 목적을 정확히 파악하고 최선의 성능과 안정성을 고려하려 설계하도록,","level":4,"id":"-_쿼리를_작성할때,_해당_쿼리의_목적을_정확히_파악하고_최선의_성능과_안정성을_고려하려_설계하도록,"},{"heading":"항상 고민하자.","level":4,"id":"항상_고민하자."}],"backlinks":[],"links":["?query=tag:Spring","?query=tag:StckOverflow","?query=tag:QueryDSL","?query=tag:JPA","?query=tag:DB","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html#⚔ StckOverflow 이슈와 QueryDSL","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html#정말_오랜만에_보는_`StckOverflow`","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html#원인_분석_전_사전지식","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html#`predicate.and(condition)`_또는_`predicate.or(condition)`을_호출하면,","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html#BooleanExpression이_사용된_이유","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html#StckOverflow_발생_이유?","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html#이때,_JVM의_한정된_스텍의_크기를_초과하는_스텍(Tree)구조가_쌓이게_된다면,","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html#해결방법?","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html#방법_1._`BooleanBuilder`_활용_(QueryDSL_제공)","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html#비교_분석","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html#방법_2._`WHERE_IN`_사용","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html#BooleanBuilder_vs_WHERE_IN_성능_비교","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html#결론","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html#-_쿼리를_작성할때,_해당_쿼리의_목적을_정확히_파악하고_최선의_성능과_안정성을_고려하려_설계하도록,","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html#항상_고민하자."],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html","pathToRoot":"..","createdTime":1740733661950,"modifiedTime":1741574975039,"sourceSize":5733,"sourcePath":"Issue_TroubleShooting/⚔ StckOverflow 이슈와 QueryDSL.md","exportPath":"issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20250307172522.png"]},"issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html":{"title":"🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:SQL\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#SQL</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Lock\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Lock</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:개선\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#개선</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:이슈\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#이슈</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:세미나\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#세미나</a> <br> <a href=\"http://lts.kr?query=tag:SQL\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SQL\">#SQL</a> <a href=\"http://lts.kr?query=tag:Lock\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Lock\">#Lock</a> <a href=\"http://lts.kr?query=tag:개선\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#개선\">#개선</a> <a href=\"http://lts.kr?query=tag:이슈\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#이슈\">#이슈</a> <a href=\"http://lts.kr?query=tag:세미나\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#세미나\">#세미나</a><br>\n<br>투자자 투자실행 시 순서보장X <br>Lock해제와 정합성 이슈 <br>헬로의 투자 서비스는 다음과 같다.<br>특정 scf / 주택담보대출 상품에 대해 투자자를 모집한다.\n<br>투자자들은 특정시간에 open되는 상품에 일괄적으로 투자신청을한다. <br>이때, 각 회원별로 \"투자 신청 기록\"을 진행한다.\n<br>투자신청 기록이란, P2PCenter(금융결제원) API를 통해 유효성(투자기록 / 투자한도)을 조회하여 투자적합여부를 체크하고 기록하는것을 말한다. <br>회원별 검증 및 투자금 계산을 마치면 정상 투자가 진행된다.\n<br>이때, 투자신청 기록 로직에서 Lock기법이 적용되어있다.<br>\n<br>\nLock기법은 여러 요청이 같은 리소스에 접근하려 할 때, 한 번에 하나의 요청만을 처리하도록 막는 기법이다. <br>\n데이터 정합성이 무엇보다 중요한 서비스에서 충돌을 방지하여 일관성을 효과적으로 유지하기 위함이다. <br>\n헬로 서비스의 경우, 회원 idx로 lock을 유지하여 성능과 안정성 확보<br>\n-상품별 한도 / 투자자 일별 투자상한 / 투자 금액 / 예치금 등 정합성이 무엇보다 우선시 되는 데이터들이 포함 <br>(JVM 레벨 Lock)<br>import org.springframework.stereotype.Service; @Service\npublic class SynchronizedLockService { private int counter = 0; public synchronized void increment() { counter++; System.out.println(Thread.currentThread().getName() + \" - 현재 카운트: \" + counter); }\n} <br>JVM레벨에서 동작하므로, 분산환경에서는 동작 X, 성능 빠름\n<br>(DB를 활용하여 Lock구현)<br>CREATE TABLE lock_table ( id INT PRIMARY KEY, locked BOOLEAN NOT NULL DEFAULT FALSE\n);\n<br> @Transactional public void doSomethingWithLock() { // 행 잠금 (SELECT FOR UPDATE) jdbcTemplate.queryForObject(\"SELECT * FROM lock_table WHERE id = 1 FOR UPDATE\", (rs, rowNum) -&gt; rs.getInt(\"id\")); System.out.println(Thread.currentThread().getName() + \" - 데이터베이스 Lock 획득!\"); try { Thread.sleep(5000); // 작업 수행 } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(Thread.currentThread().getName() + \" - 작업 완료!\"); }\n<br>DB만으로 구현 가능, 트렌젝션 격리레벨에 따라 멀티인스턴스(분산환경)에서 정합성 보장 가능\n<br>모든 요청이 DB lock을 기다리므로 속도 느림(lock이 해제될때 까지 대기), 데드락 가능성있음<br>\n-&gt; 레디션 락은 블록킹하지 않고, Polling방식으로 재시도 가능.<br>\n커넥션 pool 미 소유 및 TTL로 데드락 방지\n<br>\n<br>설계 방법에 따라, 강한 일관성 유지 가능하지만, 추가적인 설계/개발이 필요.\n<br>높은 트래픽을 감당할 수 있음. (동시요청)\n<br>수평적 확장에 용이(스케일 아웃)\n<br>\n<br>설계 방법에 따라, lock / 대기열 모두 일관성(데이터 정합성)을 유지할 수 있지만,<br>\nlock 기법 사용시 추가적인 셋팅 없이 쉽게 일관성 및 실시간 처리를 구현할 수 있기에 채택되었다.\n<br>\n<br>동시성 이슈를 해결하고자.\n<br>동시성 이슈란? <br>문맥에 따라 조금씩 차이는 있겠지만<br>\n여기서는 '여러 스레드가 동시에 공유 자원에 접근할 때 발생하는 문제'<br>\n로 정의하겠다. <br>동시성 이슈를 대응해야할 곳.<br>모집금액과, 상품 별 동일 차주 투자 한도를 넘지 않게 상품의 동시성 이슈\n<br>p2p투자한도와 예치금 한도를 넘지 않게 회원별 동시성 이슈\n<br>우리는 외부은행에 투자자,대출자 돈을 모두 맡겨두고 운영(신탁 운영)중이다.<br>한도를 금결원 api를 통해 매번 체크\n<br>실제 돈이 빠져나가는 시점은, 모든 투자기록을 마친 후, 대출을 실행하는 시점에서 돈을 가져간다.<br>회원별 동시성\n<br>세마포어 뮤텍스 비관적락 등 여러 방법론이 있지만, 우리는 redisson lock을 사용하였다.<br>k8s를 통해 여러 server를 띄워놓는 분산환경이기 때문.\n<br>먼저, 헬로 투자하기 서비스는 redisson lock을 사용한다.<br>Lock testLock = redissonClient.getLock(\"affterProcessorLock-\" + Idx);\ntestLock.tryLock(4, 4, TimeUnit.SECONDS);\n// ...투자 로직\ntestLock.unlock();\n<br>\n<br>Redis기반의 분산 락 구현체이다.\n<br>멀티 서버 환겨에서 동시성 문제를 해결하기 위해 사용된다.\n<br>여러개의 애플리케이션 인스턴스가 동일한 공유자원에 접근할 때, 중복 처리나 데잍터 불일치 문제를 방지해준다.\n<br>단일 서버 환경에서는 synchronized, 일반 Lock을 통해 임계 구역을 보호할 수 있다.<br>\n하지만, 멀티서버(분산 시스템) 환경에서는 이런<br>\n임계구역(Critical Section) : 여러 프로세스 또는 스레드가 공유 자원(Shared Resource) 에 접근하는 코드 영역\n<br>\n<br>분산 환경에서의 동시성 문제를 효과적으로 해결하기 위함\n<br>싱글스레드 큐 방식의 Redis는 왜 순서를 보장하지 않는가?<br>Redis가 lock을 관리하는 과정 자체는 싱글 스레드 큐 방식이다.<br>\n허나, Redisson Lock은 비동기 이벤트 기반의 락 처리 방식을 사용한다.\n<br>즉, 락을 흭득하려는 프로세스는 우선순위가 없는 경쟁적락방식이다.\n<br>정보\nFIFO 방식의 \"공정 락(Fair Lock)\"또한 지원하여 원하는 바 사용 가능하다. <br>대기열 방식이라고 봐도 되겠다. <br>\n<br>여러 클라이언트(서버 또는 스레드)가 동시에 같은 락을 요청할 수 있음.\n<br>가장 먼저 Redis에 락을 설정한 클라이언트가 락을 획득(경쟁 방식).\n<br>락을 획득한 클라이언트가 해제해야 다른 클라이언트가 락을 획득 가능.\n<br>락이 만료되거나 자동 연장(Watchdog)되면서 동작.\n<br>이러한 동작 방식 때문에, Starvation(기아 현상)이 야기되는 문제가 있다.<br>기아현상이란, 고부하 환경에서 락을 흭득하려는 클라이언트가 많으면, 후순위 요청이 계속해서 무시될 가능성이 생기긴다.<br>\n즉, A투자자가 먼저 투자를 하였음에도 불구하고 그 다음에 실행한 투자자 B,C가 먼저 처리될 수 있다는것이다.<br>그리고 실제 운영 환경에서 해당 경우를 심심치 않게 찾아볼 수 있다.<br>최대 30초 이상 대기상태에서 기다린 인원이 있음.<br>\n-&gt; 그러나 평균 속도는 대기열에 비해 굉장히 빠르다.(추가적인 대기열(FIFO 큐)이 없기 때문에 락 획득 속도가 빠름)\n<br>해당 질문에 대한 답은,<br>\n분산환경에서 고부하 api통신, I/O 작업을 수행하며 적절한 퍼포먼스를 유지하기 위한 타협점 이라고 볼 수 있다.<br>\n<br>상품을 미리 열어, 투자 금액 데이터를 쌓는 원리.\n<br>해당 방법을 사용하면 데이터 정합성 및 속도를 보장받을 수 있다.\n<br>\n<br>투자자 입장에서는 투자 완료 이후 취소 통보를 받을 수 있음. <br>투자자 개인 한도는 금융결제위원회에서 관리하며, 타 업체의 한도와 공유되어 중복투자로인한 취소 가능성\n<br>상품 투자 한도 초과로 인한 취소가능성<br>\n해당 경우에 재 투자를 받아야 할 경우도 생김 <br>\n사내 정책의 문제 또한 존재하기 때문에, 모든 부분에서 완벽하기란 쉽지 않아 보인다.\n<br>\n<br>lock이 풀리는 이유?\n<br>\n<br>현재 설정으로, Redisson Lock은 4sec의 TTL을 갖는다.<br>\n이때, 외부응답 지연으로 TTL을 초과해 버리게 된다면, lock을 해제함과 동시성이 깨질 수 있는 가능성이 있다.\n<br>어쩨서??<br>A, B 상품에 대하여, 단일 투자자가 투자를 했을 때<br>\nA상품에 대한 투자를 완료처리하여 ( 원래였으면 lock처리될 )예치금 차감이 되지 않은 상태에서 락이 풀려버린다면?<br>\nB상품에 대한 투자도 정상처리가 되어버린다.\n<br>\n<br>매 투자 건 별로 조회하는 개인별 투자한도를 redis로 관리하여, 투자건별 속도 개선을 목표로함.<br>\n한계 : 투자 건 별 TTL초과 확률을 줄일 수는 있으나, 외부에 의존적인 투자구조 상 100% 해결할 수는 없음\n<br>(1번 이슈와 같은 해결 방법)<br>상품을 미리 열어, 투자 금액 데이터를 쌓는 원리.\n<br>해당 방법을 사용하면 데이터 정합성 및 경합을위한 락 사용 불필요\n<br>결론\n현재 신탁 운영으로 인한 한도 데이터를 직접관리하지 못하는 문제와,<br>\n보수적인 운영상의 방침으로 큰 구조 개선을 힘들어 보임\n현재는 리펙토링을 통해 lock에 묶여있는 로직을 단순화 하는것에 만족해야겠음.","aliases":[],"tags":["#SQL","#Lock","#개선","#이슈","#세미나"],"headers":[{"heading":"🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안","level":1,"id":"🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안"},{"heading":"DB관련 공부 정리 ◀","level":1,"id":"DB관련_공부_정리_◀"},{"heading":"📔 DataBase","level":3,"id":"[[📔_DataBase]]"},{"heading":"투자 서비스에서 어떤 이슈가 있는가?","level":1,"id":"투자_서비스에서_어떤_이슈가_있는가?"},{"heading":"상품 투자 서비스 구성","level":1,"id":"상품_투자_서비스_구성"},{"heading":"대기열 대신 Lock기법이 사용된 이유","level":1,"id":"대기열_대신_Lock기법이_사용된_이유"},{"heading":"lock","level":3,"id":"lock"},{"heading":"ex1) java synchronized 키워드 사용","level":4,"id":"ex1)_java_`synchronized`_키워드_사용"},{"heading":"ex2) Database Lock","level":4,"id":"ex2)_Database_Lock"},{"heading":"대기열","level":3,"id":"대기열"},{"heading":"결론","level":4,"id":"결론"},{"heading":"scf의 상품 특성과 이해","level":1,"id":"scf의_상품_특성과_이해"},{"heading":"락을 잡아놓고(lock안에서의 서비스로직) api통신을 하는이유?","level":3,"id":"락을_잡아놓고(lock안에서의_서비스로직)_api통신을_하는이유?"},{"heading":"redisson lock 사용이유","level":1,"id":"redisson_lock_사용이유"},{"heading":"레디션 락(redisson lock)이란?","level":4,"id":"레디션_락(redisson_lock)이란?"},{"heading":"결론","level":3,"id":"결론"},{"heading":"이슈","level":1,"id":"이슈"},{"heading":"1.투자자 별 투자완료까지의 순서를 보장하지 못한다.","level":2,"id":"1.투자자_별_투자완료까지의_순서를_보장하지_못한다."},{"heading":"기본 Redisson Lock의 동작 방식","level":3,"id":"기본_Redisson_Lock의_동작_방식"},{"heading":"위에서는 일관성/안정성을 위해 대기열을 포기하고 lock을 사용했다며?","level":3,"id":"*위에서는_일관성/안정성을_위해_대기열을_포기하고_lock을_사용했다며?*"},{"heading":"해결 방안","level":2,"id":"해결_방안"},{"heading":"주식 체결과 같이 상품을 미리 열어 주문을 받고, 투자자 별 한도대로 투자를 시행","level":4,"id":"주식_체결과_같이_상품을_미리_열어_주문을_받고,_투자자_별_한도대로_투자를_시행"},{"heading":"한계","level":4,"id":"한계"},{"heading":"이슈","level":1,"id":"이슈"},{"heading":"2.Lock해제와 정합성 이슈","level":2,"id":"2.Lock해제와_정합성_이슈"},{"heading":"lock으로 묶여있는 한 서비스 로직 내에, 다수의 외부 통신이 포함되어 있음.","level":3,"id":"lock으로_묶여있는_한_서비스_로직_내에,_다수의_외부_통신이_포함되어_있음."},{"heading":"해결 방안","level":2,"id":"해결_방안"},{"heading":"1. 서비스로직 단순화","level":4,"id":"1._서비스로직_단순화"},{"heading":"2. 먼저 투자를 받은 후, 데이터 순서대로 한도별 투자처리","level":4,"id":"2._먼저_투자를_받은_후,_데이터_순서대로_한도별_투자처리"}],"backlinks":[],"links":["?query=tag:SQL","?query=tag:Lock","?query=tag:%EA%B0%9C%EC%84%A0","?query=tag:%EC%9D%B4%EC%8A%88","?query=tag:%EC%84%B8%EB%AF%B8%EB%82%98","study/cs/📔-database.html","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#DB관련_공부_정리_◀","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#[[📔_DataBase]]","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#투자_서비스에서_어떤_이슈가_있는가?","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#상품_투자_서비스_구성","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#대기열_대신_Lock기법이_사용된_이유","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#lock","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#ex1)_java_`synchronized`_키워드_사용","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#ex2)_Database_Lock","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#대기열","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#결론","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#scf의_상품_특성과_이해","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#락을_잡아놓고(lock안에서의_서비스로직)_api통신을_하는이유?","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#redisson_lock_사용이유","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#레디션_락(redisson_lock)이란?","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#결론","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#이슈","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#1.투자자_별_투자완료까지의_순서를_보장하지_못한다.","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#기본_Redisson_Lock의_동작_방식","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#*위에서는_일관성/안정성을_위해_대기열을_포기하고_lock을_사용했다며?*","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#해결_방안","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#주식_체결과_같이_상품을_미리_열어_주문을_받고,_투자자_별_한도대로_투자를_시행","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#한계","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#이슈","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#2.Lock해제와_정합성_이슈","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#lock으로_묶여있는_한_서비스_로직_내에,_다수의_외부_통신이_포함되어_있음.","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#해결_방안","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#1._서비스로직_단순화","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html#2._먼저_투자를_받은_후,_데이터_순서대로_한도별_투자처리"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html","pathToRoot":"..","createdTime":1740733250038,"modifiedTime":1741571757986,"sourceSize":10291,"sourcePath":"Issue_TroubleShooting/🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안.md","exportPath":"issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html","showInTree":true,"treeOrder":0,"attachments":[]},"issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html":{"title":"🚦 Spring Batch(스레드와 트렌젝션) 트러블슈팅","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:트러블슈팅\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#트러블슈팅</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:EntityManager\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#EntityManager</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Transaction\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Transaction</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:트렌젝션\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#트렌젝션</a> <br> <a href=\"http://lts.kr?query=tag:트러블슈팅\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#트러블슈팅\">#트러블슈팅</a> <a href=\"http://lts.kr?query=tag:EntityManager\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#EntityManager\">#EntityManager</a> <a href=\"http://lts.kr?query=tag:Transaction\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Transaction\">#Transaction</a> <a href=\"http://lts.kr?query=tag:트렌젝션\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#트렌젝션\">#트렌젝션</a><br>청크사이즈가 다름에도 처리속도가 똑같은 이유가 뭘까?<br>** Chunk 방식의 Batch에서 ChunkSize란, 한 트렌젝션 내에서 처리할 컬럼(DTO/모델)의 개수이다.<br>즉, ChunkSize가 작을수록 데이터 I/O작업 및 Overhead(데이터 읽기/쓰기, 트랜잭션 시작 및 종료 등)가 증가하여 총 실행시간이 길어져야한다.<br>청크 사이즈별 실행시간 측정 데이터\n<br>grid-size:12 / chunk-size:30\n-\n3분 22.856초\n3분 23.096초 grid-size:12 / chunk-size:20\n-\n3분 23.546초\n3분 23.784초 grid-size:12 / chunk-size:10\n-\n3분 24.243초\n3분 22.389초\n3분 24.667초\n3분 24.789초 grid-size:12 / chunk-size:5\n-\n3분 24.953초\n3분 24.353초\n<br>\n<br>배치 서비스 로직의 일부\n<br>dtoList.stream().parallel() .forEach(dto -&gt; {});\n<br>스레드 확인\n<br>} } IntStream.range(1, 10) .parallel() .forEach(i -&gt; System.out.println(Thread.currentThread().getName() + \" - \" + i)); }\n} - 출력\nForkJoinPool.commonPool-worker-3 - 3\nForkJoinPool.commonPool-worker-1 - 1\nForkJoinPool.commonPool-worker-2 - 2\nForkJoinPool.commonPool-worker-0 - 4\n... <br>\n<br>별도의 셋팅이 없이 parallel() 구문을 사용하여 병렬 처리를 진행한다면,<br>\n1.데이터를 작은 단위(Chunk)로 분할<br>\n- 예를 들어, 1000개의 데이터를 4개의 스레드에서 처리한다고 하면, ForkJoinPool은 데이터를 여러 개의 Task로 나눈다.<br>\n2.Worker Thread들이 분할된 작업을 병렬로 실행<br>\n- 각 스레드는 자신이 맡은 작업을 처리하고, 남는 작업이 있다면 다른 스레드의 작업을 훔쳐(Work-Stealing) 가져와 실행한다.<br>\n3.최종적으로 결과를 합쳐서 반환<br>\n- 모든 작업이 완료되면 병렬 처리된 결과가 하나로 합쳐진다<br>\n- ForkJoinPool이란?\nJava에서 제공하는 병렬 작업을 최적화하는 스레드 풀로써,<br>\nWork-Stealing 알고리즘을 사용하여 유휴스레드를 최소화하고 CPU 활용도를 극대화하는 기법이다. <br>해당 과정에서 ForkJoinPool은 작업을 여러 개의 워커 스레드(ForkJoinPool-worker-*)에서 실행하기 때문에 Spring의 ThreadLocal 기반 트랜잭션이 전파되지 않는다.<br>\n<br>청크의 내부 서비스로직에서의 동작 효율을 위해 병렬처리를 사용했으나, ForkJoinPool기반의 정확한 동작원리를 충분히 고려하지 않아 발생한 이슈이다.\n<br>해당 부분은 일반적인 forEach문으로 변경함으로써 이슈를 해결할 수 있었다.\n<br>특히, 멀티스레드를 다룰 때에는 병렬처리를 함에 있어 주의를 필요로 함을 깨달았다.<br>반복 TEST 중.. 커넥션풀 Time Out 문제??<br><img alt=\"Pasted image 20241213102128.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241213102128.png\" target=\"_self\"><br>SHOW VARIABLES LIKE 'max_connections'; //최대 개수\nSHOW STATUS LIKE 'Threads_connected'; //사용중인 개수\n<br><img alt=\"Pasted image 20250304170347.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250304170347.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250304170412.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250304170412.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250304171240.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250304171240.png\" target=\"_self\"><br>운영 DB의 커넥션 pool은 충분한 상태로 보인다. <br>정보\n처음 몇 번간은 정상실행 되지만, 반복 테스트 중 스레드 풀 점유 대기 타임아웃이 발생했다.\n<br>배치를 완료한 이후에, 스레드 풀(히카리 풀)을 정상 반환하는지 확인.\n<br><img alt=\"Pasted image 20241213102229.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241213102229.png\" style=\"width: 750px; max-width: 100%;\" target=\"_self\"><br>Step이 마무리될때, 적어도 Job이 마무리 될때, entityManager를 클로즈 시키는것이 자명한데, 어째서 커넥션풀이 해제되지 않는가??<br><img alt=\"Pasted image 20241213143101.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241213143101.png\" target=\"_self\"><br>코드를 뜯어보자...\n주의\n엔티티 매니저는 클로즈 될 때, 트렌젝션이 살아있다면 그 트렌젝션이 종료될때까지 기다린다.\n<img alt=\"Pasted image 20241213143217.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241213143217.png\" target=\"_self\"> <br>protected void doReadPage() { ... if (startIndex &gt;= totalRecords) { initResults(); // 빈 결과로 초기화 tx.commit(); return; } ...\n<br><img alt=\"Pasted image 20241213103503.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241213103503.png\" target=\"_self\"><br>\n<br>엔티티 메니저는 진짜 메니저가 아니다. 힘이 없다. 트렌젝션 메니저가 진짜 메니저다.\n<br>그저 영속성 컨텍스트만 관리하는 녀석. 변경감지만 하는 녀석.","aliases":[],"tags":["#트러블슈팅","#EntityManager","#Transaction","#트렌젝션"],"headers":[{"heading":"🚦 Spring Batch(스레드와 트렌젝션) 트러블슈팅","level":1,"id":"🚦 Spring Batch(스레드와 트렌젝션) 트러블슈팅"},{"heading":"프로젝트 보러가기 ◀","level":1,"id":"프로젝트_보러가기_◀"},{"heading":"🏹 예치금 차액 비교 Spring Batch 리펙토링","level":3,"id":"[[🏹_예치금_차액_비교_Spring_Batch_리펙토링]]"},{"heading":"첫 번째 이슈","level":1,"id":"<font_color=\"#9bbb59\">첫_번째_이슈</font>"},{"heading":"▶ 유의미한 차이를 보기어렵다.","level":1,"id":"▶_*유의미한_차이를_보기어렵다.*"},{"heading":"트러블 슈팅","level":2,"id":"<font_color=\"#9bbb59\">트러블_슈팅</font>"},{"heading":"예상 - 트렌젝션이 분리가 정상적으로 되지 않았나?","level":4,"id":"예상_-_트렌젝션이_분리가_정상적으로_되지_않았나?"},{"heading":"원인이 무엇일까?","level":3,"id":"원인이_무엇일까?"},{"heading":"해당 코드가 문제가 될까?","level":2,"id":"해당_코드가_문제가_될까?"},{"heading":"결론","level":1,"id":"결론"},{"heading":"두 번째 이슈","level":1,"id":"<font_color=\"#9bbb59\">두_번째_이슈</font>"},{"heading":"DB 커넥션 풀 개수 확인","level":3,"id":"DB_커넥션_풀_개수_확인"},{"heading":"배치를 반복할 수록 커넥션 엑티브된 커넥션 풀 개수가 점점 늘어나는 모습","level":4,"id":"배치를_반복할_수록_커넥션_엑티브된_*커넥션_풀_개수가_점점_늘어나는*_모습"},{"heading":"원인?","level":2,"id":"원인?"},{"heading":"- 앤티티 매니저가 클로즈 되었음에도 커넥션풀을 물고있는 모습.","level":4,"id":"-_앤티티_매니저가_클로즈_되었음에도_커넥션풀을_물고있는_모습."},{"heading":"수정 후","level":2,"id":"수정_후"},{"heading":"정상적으로 커넥션 풀이 점유 해제된 모습","level":3,"id":"정상적으로_커넥션_풀이_점유_해제된_모습"},{"heading":"결론","level":1,"id":"결론"}],"backlinks":[],"links":["?query=tag:%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85","?query=tag:EntityManager","?query=tag:Transaction","?query=tag:%ED%8A%B8%EB%A0%8C%EC%A0%9D%EC%85%98","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#🚦 Spring Batch(스레드와 트렌젝션) 트러블슈팅","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#프로젝트_보러가기_◀","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#[[🏹_예치금_차액_비교_Spring_Batch_리펙토링]]","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#<font_color=\"#9bbb59\">첫_번째_이슈</font>","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#▶_*유의미한_차이를_보기어렵다.*","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#<font_color=\"#9bbb59\">트러블_슈팅</font>","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#예상_-_트렌젝션이_분리가_정상적으로_되지_않았나?","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#원인이_무엇일까?","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#해당_코드가_문제가_될까?","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#결론","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#<font_color=\"#9bbb59\">두_번째_이슈</font>","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#DB_커넥션_풀_개수_확인","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#배치를_반복할_수록_커넥션_엑티브된_*커넥션_풀_개수가_점점_늘어나는*_모습","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#원인?","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#-_앤티티_매니저가_클로즈_되었음에도_커넥션풀을_물고있는_모습.","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#수정_후","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#정상적으로_커넥션_풀이_점유_해제된_모습","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html#결론"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html","pathToRoot":"..","createdTime":1740733171557,"modifiedTime":1741077442587,"sourceSize":5286,"sourcePath":"Issue_TroubleShooting/🚦 Spring Batch(스레드와 트렌젝션) 트러블슈팅.md","exportPath":"issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20241213102128.png","사진-및-문서/pasted-image-20250304170347.png","사진-및-문서/pasted-image-20250304170412.png","사진-및-문서/pasted-image-20250304171240.png","사진-및-문서/pasted-image-20241213102229.png","사진-및-문서/pasted-image-20241213143101.png","사진-및-문서/pasted-image-20241213143217.png","사진-및-문서/pasted-image-20241213103503.png"]},"lectur/🏫-강의.html":{"title":"🏫 강의","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:강의\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#강의</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:모음\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#모음</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:lectur\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#lectur</a> <br> <a href=\"http://lts.kr?query=tag:강의\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#강의\">#강의</a> <a href=\"http://lts.kr?query=tag:모음\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#모음\">#모음</a> <a href=\"http://lts.kr?query=tag:lectur\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#lectur\">#lectur</a><br>강의\n강의를 수강하며, 정리한 내용 모음집 입니다.\n<br>정보\ninflearn - SpringCoreBasic.김영한 님의 강의 입니다.\n<br> <br> <br> <br> <br>","aliases":[],"tags":["#강의","#모음","#lectur"],"headers":[{"heading":"🏫 강의","level":1,"id":"🏫 강의"},{"heading":"🐊 Spring Core","level":2,"id":"🐊_*Spring_Core*"},{"heading":"1. 객체 지향 설계와 스프링","level":3,"id":"[[1._객체_지향_설계와_스프링]]"},{"heading":"2. 스프링 핵심 원리 이해","level":3,"id":"[[2._스프링_핵심_원리_이해]]"},{"heading":"3. 스프링 컨테이너와 스프링 빈","level":3,"id":"[[3._스프링_컨테이너와_스프링_빈]]"},{"heading":"4. 싱글톤 컨테이너","level":3,"id":"[[4._싱글톤_컨테이너]]"},{"heading":"5. 컴포넌트 스캔","level":3,"id":"[[5._컴포넌트_스캔]]"},{"heading":"6. 의존관계 자동 주입","level":3,"id":"[[6._의존관계_자동_주입]]"},{"heading":"7. 빈 생명주기 콜백","level":3,"id":"[[7._빈_생명주기_콜백]]"},{"heading":"8. 빈 스포크","level":3,"id":"[[8._빈_스포크]]"}],"backlinks":[],"links":["?query=tag:%EA%B0%95%EC%9D%98","?query=tag:%EB%AA%A8%EC%9D%8C","?query=tag:lectur","lectur/1.-객체-지향-설계와-스프링.html","lectur/2.-스프링-핵심-원리-이해.html","3. 스프링 컨테이너와 스프링 빈","4. 싱글톤 컨테이너","5. 컴포넌트 스캔","6. 의존관계 자동 주입","7. 빈 생명주기 콜백","8. 빈 스포크","lectur/🏫-강의.html#🏫 강의","lectur/🏫-강의.html#🐊_*Spring_Core*","lectur/🏫-강의.html#[[1._객체_지향_설계와_스프링]]","lectur/🏫-강의.html#[[2._스프링_핵심_원리_이해]]","lectur/🏫-강의.html#[[3._스프링_컨테이너와_스프링_빈]]","lectur/🏫-강의.html#[[4._싱글톤_컨테이너]]","lectur/🏫-강의.html#[[5._컴포넌트_스캔]]","lectur/🏫-강의.html#[[6._의존관계_자동_주입]]","lectur/🏫-강의.html#[[7._빈_생명주기_콜백]]","lectur/🏫-강의.html#[[8._빈_스포크]]"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/lectur/🏫-강의.html","pathToRoot":"..","createdTime":1740115400228,"modifiedTime":1741591509697,"sourceSize":553,"sourcePath":"lectur/🏫 강의.md","exportPath":"lectur/🏫-강의.html","showInTree":true,"treeOrder":0,"attachments":[]},"lectur/1.-객체-지향-설계와-스프링.html":{"title":"1. 객체 지향 설계와 스프링","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:SpringCoreBasic\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#SpringCoreBasic</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:SPRING\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#SPRING</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:lectur\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#lectur</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:강의\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#강의</a> <br> <a href=\"http://lts.kr?query=tag:SpringCoreBasic\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SpringCoreBasic\">#SpringCoreBasic</a> <a href=\"http://lts.kr?query=tag:SPRING\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SPRING\">#SPRING</a> <a href=\"http://lts.kr?query=tag:lectur\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#lectur\">#lectur</a> <a href=\"http://lts.kr?query=tag:강의\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#강의\">#강의</a><br>스프링이 제공하는 핵심 가치와 원리를 제대로 파악하고 사용한다.<br>객체 지향 프로그래밍\n<br>단순 레퍼런스 문서 설명이 아닌, 이유와 핵심원리\n<br>스프링의 본질에 대해 깊은 이해 -&gt; 객체지향 설계의 본질을 이해\n<br>2000년대 초반<br>\nEJB(enterprise java Beans) -&gt; spring / JAP 를 짬뽕해놓은 기술이 탄생<br>Java진영에서 표준으로 개발한 기술\n<br>컨테이너 기술\n<br>설정에 의한 트렌젝션 기술\n<br>분산 기술\n<br>엔티티 빈 : ORM기술 중 하나\n<br>가격이 매우 비쌌음 수천만원 짜리 Server도 존재했었음\n<br>단점 <br>어렵고\n<br>복잡하고\n<br>느리다\n<br>POJO - 오래된 방식의 자바 오브젝트, 그냥 이걸로 돌아가자는 말이 나올 정도였다.<br>두 명의 사람이 EJB에 환멸을 느끼고, 오픈소스를 만든다.<br>\n<br>EJB 컨테이너의 대체\n<br>단순함의 승리\n<br>현재 사실상의 표준 기술\n<br>\n<br>EJB의 엔티티빈 기술을 대체\n<br>JPA 새로운 표준 정의\n<br> EJB 엔티티 빈 -&gt; 하이버네이트 -&gt; JPA(같은 사람이 거의 하이버네이트와 비슷하게 만든 JAVA표준)<br>JPA - 표준 인터페이스<br>\n하이버네이트 - 80% 이상의 점유율을 차지하는 JAP 구현체<br>\n<br>2002 로드 존슨 책 출간\n<br>EJB의 문제점 지적\n<br>EJB없이 고품질의 확장 가능한 애플리케이션을 개발할 수 있음을 보여줌\n<br>30,000라인 이상의 기반 기술을 예제코드로 선보임\n<br>BeanFactory, applicationContext, POJO, DI, IoC(제어의 역전)\n<br>책 출간 이후 '유겐 휠러', '얀 카로프'가 로드 존슨에게 오픈소스 프로젝트를 제안하여<br>\n만들어진 것이 SPRING( EBJ 겨울을 넘어 새로운 시작이라는 뜻 )<br>1.0 - xml<br>\n2.0 - xml 편의기능<br>\n3.0 - 자바 코드로 설정<br>\n4.0 - 자바8<br>\nboot 1.0 - 기존 스프링의 복잡한 셋팅/설정을 개선<br>\n5.0 / boot 2.0 - 리엑티브 프로그래밍 지원<br>\n...<br>예전 스프링은 설정이 절반이다 라고 할 정도로 설정이 힘들었다.\n<br>필수<br>스프링 프레임워크\n<br>스프링 부트\n<br>선택<br>스프링 데이터 - noSQL, RDB 등 CRUD를 편리하게 도와줌\n<br>스프링 세션\n<br>스프링 시큐리티\n<br>스프링 레스트 독스 - API문서화, 테스트를 편리하게 도와줌\n<br>스프링 배치 - 배치 처리 특화 기술\n<br>스프링 클라우드 - 클라우드..\n<br>\n<br>핵심기술 - 스프링 DI 컨테이너 / AOP / 이벤트\n<br>웹 기술 - 스프링 MVC / 스프링 Web Flux\n<br>데이터 - 트렌젝션 / JDBC / ORM / xml\n<br>기술통합 - 캐시, 이메일, 원격, 스케줄링\n<br>테스트 - 스프링기반 테스트\n<br>언어 - 코틀린, 그루비\n<br>\n<br>\n스프링을 편리하게 사용할 수 있도록 지원, 최근에는 스텐다드로 사용 <br>\n단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성<br>\n-Tomcat같은 웹 서버를 내장하여 별도의 웹 서버 설치 불필요 <br>\n손쉬운 빌드 구성을 위한 starter 종속성 제공 <br>\n스프링과 3rd parth 라이브러리 자동 구성 <br>메이저 외부 라이브러리 버전 자동 체크/다운 <br>\n메트릭, 상태 확인, 외부 구성 같은 프로덕션 준비 기능 제공 <br>\n관례에 의한 간결한 설정 <br>문맥에 따라 다르게 사용된다.<br>스프링 DI 컨테이너 기술\n<br>스프링 프레임워크\n<br>스프링 부트, 프레임워크 등 모두 포함한 생태계\n<br>\n<br>자바 언어 기반의 프레임워크\n<br>자바 언어의 가장 큰 특징 - 객체 지향 언어\n<br>스프링은 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크\n<br>스프링은 좋은 객체 지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크⭐\n<br>\n<br>\n컴퓨터 프로그래밍을 명령어의 목록으로 보는 시각에서 벗어나, 여러개의 독립된 단위,<br>\n즉, 객체 들의 모임으로 파악하고자 하는것이다. <br>\n각각의 객체는 메시지를 주고받고, 데이터를 처리할 수 있다.(협력) <br>\n객체지향 프로그래밍은 유연하고 변경용이하게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용된다. <br>\n<br>레고 블럭 조립하듯,\n<br>컴퓨터 부품 갈아 끼우듯,\n<br>컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법.<br>\n=&gt; 다형성\n<br>\n<br>자동차의 역할 (인터페이스)\n<br>자동차 구현 K3, 모델3, 아반떼 등 (class, 구현체)\n<br>운전자는 역할(인터페이스)만을 따르면 모든 자동차를 이용할 수 있다.<br>\n즉, 클라이언트에 영향을 주지 않고 새로운 기능을 구현할 수 있다.<br>유연하고, 변경에 용이한 것!!<br>ex) 정렬 알고리즘, 할인 정책 등등<br>\n<br>클라이언트는 대상의 역할(인타페이스)만 알면 된다.\n<br>클라이언트는 구현 대상의 내부구조를 몰라도 된다.\n<br>클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다.\n<br>클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.\n<br>\n<br>오버라이딩은 자바의 기본 문법\n<br>오버라이딩 된 메서드가 실행\n<br>다형성으로 인터페이스를 구현한 객체를 실행 시점에 유연하게 변경 가능\n<br>물론, 클래스 상속 관계도 다형성/오버라이딩 적용가능(권장안함)\n<br>\n<br>인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있다.\n<br>다형성의 본질을 이해하려면 협력이라는 객체사이의 관계에서 시작해야함.\n<br>클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있다.\n<br>확장 가능한 설계\n<br>\n<br>역할(인터페이스) 자체가 변하면, 클라이언트, 서버 모두에 큰 변경이 발생한다.\n<br>\n<br>다형성이 가장 중요하다!\n<br>스프링은 다형성을 극대화해서 이용할 수 있게 도와준다.\n<br>스프링에서 이야기하는 IoC, DI는 다형성을 활용해서 역할과 구현을 편리하게 다룰 수있도록 지원한다.\n<br>스프링을 사용하면 마치 레고 블럭 조립하듯 구현을 편리하게 변경할 수 있다.\n<br>\n<br>클린코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리한것.\n<br>SRP: 단일 책임 원칙(single responsibility principle)\n<br>OCP: 개방-폐쇄 원칙 (Open/closed principle)\n<br>LSP: 리스코프 치환 원칙 (Liskov substitution principle)\n<br>ISP: 인터페이스 분리 원칙 (Interface segregation principle)\n<br>DIP: 의존관계 역전 원칙 (Dependency inversion principle)\n<br>\n<br>한 클래스는 하나의 책임만 가져야 한다.\n<br>중요한 기준은 변경이다.\n<br>변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른것.\n<br>UI변경, 객체의 생성과 사용을 분리\n<br>\n<br>확장에는 열려있으나, 변경에는 닫혀있어야 한다.\n<br>다형성을 잘 활용하여야 한다.\n<br>인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현\n<br>역할과 구현의 분리\n<br>\t- MemberService 클라이언트가 구현 클래스를 직접 선택 MemberRepository m = new MemoryMemberRepository(); //기존 코드 //DIP 위반 MemberRepository m = new JdbcMemberRepository(); //변경 코드 //DIP 위반\n<br>구현 객체를 변경하려면 클라이언트 코드를 변경해야 한다.\n<br>분명 다형성을 사용했지만 OCP 원칙을 지킬 수 없다. -&gt; 클라이언트가 기존코드를 변경해야한다.<br>\n-&gt; 객체를 생성하고, 연관관계를 맺어주는 별도의 조립, 설정자가 필요하다 : 스프링 컨테이너 / DI, IoC <br>\n<br>프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다\n<br>하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것\n<br>다형성을 지원하기 위 한 원칙, 인터페이스를 구현한 구현체는 믿고 사용하려면, 이 원칙이 필요하다.\n<br>단순히 컴파일에 성공하는 것을 넘어서는 이야기\n<br>ex) 자동차 인터페이스의 엑셀은 앞으로 가라는 기능, 뒤로 가게 구현하면 LSP 위반<br>\n<br>특정 클라이언트를 위한 인터페이스 여러 개가, 범용 인터페이스 하나보다 낫다\n<br>자동차 인터페이스 -&gt; 운전 인터페이스, 정비 인터페이스로 분리\n<br>사용자 클라이언트 -&gt; 운전자 클라이언트, 정비사 클라이언트로 분리\n<br>분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음\n<br>인터페이스가 명확해지고, 대체 가능성이 높아진다.\n<br>\n<br>프로그래머는 “추상화에 의존해야지, 구체화에 의존하면 안된다.”\n<br>구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻\n<br>역할(Role)에 의존하게 해야 한다는 것과 같다.\n<br>구현체에 의존하게 되면 변 경이 아주 어려워진다\n<br>\n그런데 OCP에서 설명한 MemberService는 인터페이스에 의존하지만, 구현 클래스도 동시에 의존한다.\n<br>MemberService 클라이언트가 구현 클래스를 직접 선택<br>MemberRepository m = new MemoryMemberRepository(); //DIP 위반\n<br>그럼 인터페이스만 사용하면 구현체가 없는데 어떻게 위반을 안해?<br>\n<br>다형성 만으로는 쉽게 부품을 갈아 끼우듯이 개발할 수 없다.\n<br>다형성 만으로는 구현 객체를 변경할 때 클라이언트 코드도 함께 변경된다.\n<br>다형성 만으로는 OCP, DIP를 지킬 수 없다.\n<br>뭔가 더 필요하다.\n<br>\n<br>\n스프링은 다음 기술로 다형성 + OCP, DIP를 가능하게 지원<br>\nDI(Dependency Injection): 의존관계, 의존성 주입<br>\nDI 컨테이너 제공 <br>\n클라이언트 코드의 변경 없이 기능 확장 <br>\n쉽게 부품을 교체하듯이 개발 <br>\n<br>순수하게 자바로 OCP, DIP 원칙들을 지키면서 개발을 해보면, 결국 스프링 프레임워크를 만들게 된다.<br>\n(더 정확히는 DI 컨테이너)\n<br>\n<br>하지만 인터페이스를 도입하면 추상화라는 비용이 발생한다.\n<br>기능을 확장할 가능성이 없다면, 구체 클래스를 직접 사용하고,<br>\n향후 꼭 필요할 때 리팩터 링해서 인터페이스를 도입하는 것도 방법이다","aliases":[],"tags":["#SpringCoreBasic","#SPRING","#lectur","#강의"],"headers":[{"heading":"객체 지향 설계와 스프링","level":1,"id":"1. 객체 지향 설계와 스프링"},{"heading":"자바 진영의 추운 겨울과 스프링의 탄생","level":1,"id":"자바_진영의_추운_겨울과_스프링의_탄생"},{"heading":"EJB 지옥","level":2,"id":"EJB_지옥"},{"heading":"스프링 프레임워크와 하이버네이트","level":2,"id":"스프링_프레임워크와_하이버네이트"},{"heading":"스프링","level":3,"id":"스프링"},{"heading":"하이버네이트","level":3,"id":"하이버네이트"},{"heading":"순서","level":4,"id":"순서"},{"heading":"스프링의 역사","level":1,"id":"스프링의_역사"},{"heading":"릴리즈","level":2,"id":"릴리즈"},{"heading":"Spring","level":1,"id":"Spring"},{"heading":"스프링 프레임 워크 핵심기술","level":1,"id":"스프링_프레임_워크_핵심기술"},{"heading":"스프링 부트","level":1,"id":"스프링_부트"},{"heading":"스프링 단어?","level":1,"id":"스프링_단어?"},{"heading":"핵심 개념 / 컨셉","level":1,"id":"핵심_개념_/_컨셉"},{"heading":"객체 지향 프로그래밍","level":1,"id":"객체_지향_프로그래밍"},{"heading":"변경에 용이?","level":3,"id":"변경에_용이?"},{"heading":"다형성의 실세계 비유","level":1,"id":"다형성의_실세계_비유"},{"heading":"역할과 구현을 분리","level":3,"id":"역할과_구현을_분리"},{"heading":"자바 언어의 다형성","level":2,"id":"자바_언어의_다형성"},{"heading":"다형성의 본질","level":2,"id":"다형성의_본질"},{"heading":"한계","level":2,"id":"한계"},{"heading":"그래서, 인터페이스를 안정적으로 잘 설계하는 것이 중요하다.","level":4,"id":"그래서,_인터페이스를_안정적으로_잘_설계하는_것이_중요하다."},{"heading":"스프링과 객체 지향","level":1,"id":"스프링과_객체_지향"},{"heading":"SOLID","level":2,"id":"SOLID"},{"heading":"SRP: 단일 책임 원칙","level":3,"id":"SRP_단일_책임_원칙"},{"heading":"OCP: 개방-폐쇄 원칙⭐","level":3,"id":"OCP_개방-폐쇄_원칙⭐"},{"heading":"문제점","level":4,"id":"문제점"},{"heading":"LSP: 리스코프 치환 원칙","level":3,"id":"LSP_리스코프_치환_원칙"},{"heading":"ISP: 인터페이스 분리 원칙","level":3,"id":"ISP_인터페이스_분리_원칙"},{"heading":"DIP: 의존관계 역전 원칙⭐","level":3,"id":"DIP_의존관계_역전_원칙⭐"},{"heading":"정리⭐","level":1,"id":"정리⭐"},{"heading":"다시 스프링으로","level":1,"id":"다시_스프링으로"},{"heading":"스프링이 없던 시절","level":3,"id":"스프링이_없던_시절"},{"heading":"실무 고민","level":2,"id":"실무_고민"}],"backlinks":[],"links":["?query=tag:SpringCoreBasic","?query=tag:SPRING","?query=tag:lectur","?query=tag:%EA%B0%95%EC%9D%98","lectur/1.-객체-지향-설계와-스프링.html#1. 객체 지향 설계와 스프링","lectur/1.-객체-지향-설계와-스프링.html#자바_진영의_추운_겨울과_스프링의_탄생","lectur/1.-객체-지향-설계와-스프링.html#EJB_지옥","lectur/1.-객체-지향-설계와-스프링.html#스프링_프레임워크와_하이버네이트","lectur/1.-객체-지향-설계와-스프링.html#스프링","lectur/1.-객체-지향-설계와-스프링.html#하이버네이트","lectur/1.-객체-지향-설계와-스프링.html#순서","lectur/1.-객체-지향-설계와-스프링.html#스프링의_역사","lectur/1.-객체-지향-설계와-스프링.html#릴리즈","lectur/1.-객체-지향-설계와-스프링.html#Spring","lectur/1.-객체-지향-설계와-스프링.html#스프링_프레임_워크_핵심기술","lectur/1.-객체-지향-설계와-스프링.html#스프링_부트","lectur/1.-객체-지향-설계와-스프링.html#스프링_단어?","lectur/1.-객체-지향-설계와-스프링.html#핵심_개념_/_컨셉","lectur/1.-객체-지향-설계와-스프링.html#객체_지향_프로그래밍","lectur/1.-객체-지향-설계와-스프링.html#변경에_용이?","lectur/1.-객체-지향-설계와-스프링.html#다형성의_실세계_비유","lectur/1.-객체-지향-설계와-스프링.html#역할과_구현을_분리","lectur/1.-객체-지향-설계와-스프링.html#자바_언어의_다형성","lectur/1.-객체-지향-설계와-스프링.html#다형성의_본질","lectur/1.-객체-지향-설계와-스프링.html#한계","lectur/1.-객체-지향-설계와-스프링.html#그래서,_인터페이스를_안정적으로_잘_설계하는_것이_중요하다.","lectur/1.-객체-지향-설계와-스프링.html#스프링과_객체_지향","lectur/1.-객체-지향-설계와-스프링.html#SOLID","lectur/1.-객체-지향-설계와-스프링.html#SRP_단일_책임_원칙","lectur/1.-객체-지향-설계와-스프링.html#OCP_개방-폐쇄_원칙⭐","lectur/1.-객체-지향-설계와-스프링.html#문제점","lectur/1.-객체-지향-설계와-스프링.html#LSP_리스코프_치환_원칙","lectur/1.-객체-지향-설계와-스프링.html#ISP_인터페이스_분리_원칙","lectur/1.-객체-지향-설계와-스프링.html#DIP_의존관계_역전_원칙⭐","lectur/1.-객체-지향-설계와-스프링.html#정리⭐","lectur/1.-객체-지향-설계와-스프링.html#다시_스프링으로","lectur/1.-객체-지향-설계와-스프링.html#스프링이_없던_시절","lectur/1.-객체-지향-설계와-스프링.html#실무_고민"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/lectur/1.-객체-지향-설계와-스프링.html","pathToRoot":"..","createdTime":1740116090884,"modifiedTime":1741163322925,"sourceSize":11487,"sourcePath":"lectur/1. 객체 지향 설계와 스프링.md","exportPath":"lectur/1.-객체-지향-설계와-스프링.html","showInTree":true,"treeOrder":0,"attachments":[]},"lectur/2.-스프링-핵심-원리-이해.html":{"title":"2. 스프링 핵심 원리 이해","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:SpringCoreBasic\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#SpringCoreBasic</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:SPRING\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#SPRING</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:lectur\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#lectur</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:강의\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#강의</a> <br> <a href=\"http://lts.kr?query=tag:SpringCoreBasic\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SpringCoreBasic\">#SpringCoreBasic</a> <a href=\"http://lts.kr?query=tag:SPRING\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SPRING\">#SPRING</a> <a href=\"http://lts.kr?query=tag:lectur\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#lectur\">#lectur</a> <a href=\"http://lts.kr?query=tag:강의\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#강의\">#강의</a><br>스타터 사이트 : <a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://start.spring.io/\" target=\"_self\">https://start.spring.io/</a><br>\n<img alt=\"Pasted image 20250305173344.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250305173344.png\" style=\"width: 625px; max-width: 100%;\" target=\"_self\"><br>\n별도의 의존관계는 추가하지 않음<br><img alt=\"Pasted image 20250305175924.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250305175924.png\" target=\"_self\">","aliases":[],"tags":["#SpringCoreBasic","#SPRING","#lectur","#강의"],"headers":[{"heading":"스프링 핵심 원리 이해","level":1,"id":"2. 스프링 핵심 원리 이해"},{"heading":"스프링 부트 스타터 사이트로 이동해서 스프링 프로젝트 생성","level":1,"id":"스프링_부트_스타터_사이트로_이동해서_스프링_프로젝트_생성"},{"heading":"JDK 버전 맞춰주기","level":2,"id":"JDK_버전_맞춰주기"}],"backlinks":[],"links":["?query=tag:SpringCoreBasic","?query=tag:SPRING","?query=tag:lectur","?query=tag:%EA%B0%95%EC%9D%98","https://start.spring.io/","lectur/2.-스프링-핵심-원리-이해.html#2. 스프링 핵심 원리 이해","lectur/2.-스프링-핵심-원리-이해.html#스프링_부트_스타터_사이트로_이동해서_스프링_프로젝트_생성","lectur/2.-스프링-핵심-원리-이해.html#JDK_버전_맞춰주기"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/lectur/2.-스프링-핵심-원리-이해.html","pathToRoot":"..","createdTime":1741159406082,"modifiedTime":1741165171235,"sourceSize":375,"sourcePath":"lectur/2. 스프링 핵심 원리 이해.md","exportPath":"lectur/2.-스프링-핵심-원리-이해.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20250305173344.png","사진-및-문서/pasted-image-20250305175924.png"]},"project/hello-batch/✏-chunk_partitioning-batch-구조-드로잉.html":{"title":"✏ Chunk_Partitioning Batch 구조 드로잉","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:excalidraw\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#excalidraw</a> <br> balancePartitionedJobbalanceInitializeStepbalancePartitionStepbalanceSendSnsStepbalanceResetSteppartitionerpartitionHandlerStepExecutionContextReaderprocesserwriterdtochuck sizeSlaveStep-no: 2SlaveStep-no: gridSize balanceQueueResponnse QueueProcessed ItemsProcessed Itemstotal DataProcessed ItemsProcessed ItemsworkingProcessed ItemsProcessed ItemsProcessed ItemsProcessed ItemsSlaveStep-no: 1gridSize - 1gridSize - 2partiton thread-no: 1partiton thread-no: 2partiton thread-no: gridSize totalRecords+ datagridSizeContorllerjobParameters(read only)jobParameters - gridSize - startDate - endDateJob Schedulerexcutedto List(chuck size)dto Listdto Listdto Listdto Listdto Listdto Listdto Listdto ListThe restdto ListfinishedfinishedworkingworkingdtotriggerJobExecutionContextgrid size","aliases":[],"tags":["excalidraw"],"headers":[],"backlinks":[],"links":[],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/project/hello-batch/✏-chunk_partitioning-batch-구조-드로잉.html","pathToRoot":"../..","createdTime":1739843285680,"modifiedTime":1739844018493,"sourceSize":57706,"sourcePath":"project/hello Batch/✏ Chunk_Partitioning Batch 구조 드로잉.md","exportPath":"project/hello-batch/✏-chunk_partitioning-batch-구조-드로잉.html","showInTree":true,"treeOrder":0,"attachments":[]},"project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html":{"title":"🏹 예치금 차액 비교 Spring Batch 리펙토링","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:프로젝트\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#프로젝트</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:개발\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#개발</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:SPRING\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#SPRING</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Batch\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Batch</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Partitioning\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Partitioning</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Chunk\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Chunk</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:성능개선\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#성능개선</a> <br> <a href=\"http://lts.kr?query=tag:프로젝트\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#프로젝트\">#프로젝트</a> <a href=\"http://lts.kr?query=tag:개발\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#개발\">#개발</a> <a href=\"http://lts.kr?query=tag:SPRING\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SPRING\">#SPRING</a> <a href=\"http://lts.kr?query=tag:Batch\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Batch\">#Batch</a> <a href=\"http://lts.kr?query=tag:Partitioning\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Partitioning\">#Partitioning</a> <a href=\"http://lts.kr?query=tag:Chunk\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Chunk\">#Chunk</a> <a href=\"http://lts.kr?query=tag:성능개선\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#성능개선\">#성능개선</a> <br>기존 예치금 차액비교 Batch의 Tasklet방식의 배치의 단점을 보완하는 chunk 방식의 배치를 구현하고,<br>\n나아가 다른 기능의 Batch에도 효과적으로 빠르게 적용할 수 있는재사용성/유지보수성 높은 코드, 선례를 만들기 위함이다.<br>\n<br>Chunk, Partioning방식을 Job을 추가 개발 (기존 balanceJob 유지)\n<br>당분간 두 Job을 병행하면서 비교\n<br>추가한 Job 기능에 문제없다면 기존 balanceJob 삭제\n<br><img alt=\"회사 은행 서비스1111.png\" src=\"http://lts.kr/사진-및-문서/회사-은행-서비스1111.png\" target=\"_self\"><br>\n<img alt=\"Spring Batch Tasklet 예치금 잔액 비교 1.png\" src=\"http://lts.kr/사진-및-문서/spring-batch-tasklet-예치금-잔액-비교-1.png\" target=\"_self\"><br>\n<img alt=\"Spring Batch Tasklet 예치금 잔액 비교 잘못된 차액발생 인식 타임라인.png\" src=\"http://lts.kr/사진-및-문서/spring-batch-tasklet-예치금-잔액-비교-잘못된-차액발생-인식-타임라인.png\" target=\"_self\"><br>\n<br>평균 소요시간: 약 17.35분\n<br>최대 소요시간: 22분\n<br>최소 소요시간: 12분<br>\n<img alt=\"output (1).png\" src=\"http://lts.kr/사진-및-문서/output-(1).png\" target=\"_self\">\n<br>\n<br>처음 가져온 Point 배치 완료시 까지 계속 물고있다. -&gt; 한 트렌젝션의 범위가 넓다.\n<br>정보 <br>병목이 있진 않으나, 한 배치서비스의 트렌젝션에서 외부 api의 값 변동을 반영하지 못함. <br>\n<br>G5-Point 등은 처음 7시 시점에 묶여있다. 회원별로 실데이터를 건건이 api(신한)를 호출하여 비교한다. 때문에, 7시 이후에 수정된데이터를 실시간으로 반영하지 못한다.\n<br>\n<br>목적 : batch의 step 레벨에서의 스레드 분리 ( 병렬처리 )\n<br>\n<br>독립적인 ExecutionContext가 주어져 상태를 안전하게 관리할 수 있다.\n<br>\n<br>목적 : 각 step내의 트렌젝션 단위 분리\n<br>Reader / Processor / writer 가 역할을 분담\n<br>\n<br>\nPartition 생성: <br>Partition 1 : ID 1 ~ 25 / 대기열1 : ID 101 ~ 125 / 대기열2 : ID 201 ~ 225\n<br>Partition 2 : ID 26 ~ 50 / 대기열 : ID 126 ~ 150 / 대기열2 : ID 226 ~ 250\n<br>Partition 3 : ID 51 ~ 75 / 대기열 : ID 151 ~ 175 / 대기열2 : -\n<br>Partition 4 : ID 76 ~ 100 / 대기열 : ID 176 ~ 200 / 대기열2 : - <br>\n각 Partition에서 Chunk 처리: <br>Partition 1: <br>Chunk 1: ID 1 ~ 10 → 커밋\n<br>Chunk 2: ID 11 ~ 20 → 커밋\n<br>Chunk 3: ID 21 ~ 25 → 커밋 <br>Partition 2: <br>Chunk 1: ID 26 ~ 35 → 커밋\n<br>Chunk 2: ID 36 ~ 45 → 커밋\n<br>Chunk 3: ID 46 ~ 50 → 커밋 <br>나머지 Partition도 동일 방식으로 처리. <br>\n병렬 실행: <br>스레드 풀 크기 = 4이므로 4개의 Partition이 동시에 실행됩니다.\n<br>Partition 처리 순서는 스레드 풀에서 처리되는 순서에 따라 다를 수 있음. <br>\n트랜잭션 관리: <br>각 Partition은 독립적인 트랜잭션을 가짐.\n<br>각 Chunk가 커밋될 때마다 트랜잭션이 종료됨. <br>\n<br>\nPartition 생성: <br>Partition 1 : ID 1 ~ 25 / 대기열1 : ID 101 ~ 125 / 대기열2 : ID 201 ~ 225\n<br>Partition 2 : ID 26 ~ 50 / 대기열 : ID 126 ~ 150 / 대기열2 : ID 226 ~ 250\n<br>Partition 3 : ID 51 ~ 75 / 대기열 : ID 151 ~ 175 / 대기열2 : ID 251 ~ 275\n<br>Partition 4 : ID 76 ~ 100 / 대기열 : ID 176 ~ 200 / 대기열2 : ID 276 ~ 300\n<br>추가 스레드 풀 생성\n<br>Partition 5 : ID 300 ~ 325 / 대기열 : ID 326 ~ 350 / 대기열2 : ID 351 ~ 375\n<br>추가 스레드 풀 생성\n<br>Partition 6 : ID 376 ~ 400 / 대기열 : ID 401 ~ 425 / 대기열2 : ID 426 ~ 450 모든 대기열 소모 및 최대 스레드 풀 도달 =&gt; 작업 중단 및 오류 <br>-&gt; 이로볼때, 쿼리작업보다 api호출작업의 소요시간이 길어보임<br>범위 - 2017-11-07 ~ 2017-12-01\nstartDate=2017-11-07&amp;endDate=2017-12-01 ## 컬럼 개수 - 292개 기존 병렬처리 : 1분 7초\n기존로직 : 6분 32초 t:스레드 개수 / c:각 스레드별 청크 파티션 수 ###### SimpleAsyncTaskExecutor vs ThreadPoolTaskExecutor SimpleAsyncTaskExecutor\ng4/c10 : 1분 41.586초\ng5/c10 : 1분 30.037초\ng5/c3 : 1분 28.997초\ng5/c1 : 1분 29.931초\ng8/c10 : 1분 36.019초\ng10/c1 : 1분 24.529초 - ThreadPoolTaskExecutor\nTh min/maxSize64, g64/c10 : 1분 42.848초\nTh min/maxSize32, g32/c10 : 1분 26.551초 Th min/maxSize16, g16/c10 : 1분 46.753초 / 1분 33.779초 / 2분 25.759초\n1분 11.668초 / 2분 5.773초 / 2분 39.553초 Th min/maxSize32, g8/c20 : 3분 25.743초 Th min/maxSize16, g4/c10 : 2분 29.207초 / 2분 8.004초\n<br>\n<br>Grid사이즈(파티셔닝 갯수) 만큼 스레드 풀 계속 생성\n<br>파티셔닝 갯수가 많아졌을 때, 스레드 생성/소멸에 드는 오버헤드 증가\n<br>\n<br>최소 스레드풀 개수 / 최대 스레드풀 개수 / 대기열 큐 크기 / 유휴 시간 모두 설정가능\n<br>파티셔닝 갯수가 많을 경우, 처리 성능에 맞는 스레드 풀에서 대기작업으로 처리하여 오버헤드 감소\n<br>\n<br>총 처리량 기준 1/n로 각 스레드에 할당시 충분히 감당한 양으로, 대기열을 사용할 필요가 없다.\n<br>\n<br>쿼리 호출 및 페이징 기법 직접 구현\n<br>\n<br>Native Query 형태로 호출하여 자동 페이징\n<br>\n<br>Spring Batch에서는 공식적으로 지원하지 않음\n<br>자동 페이징\n<br>Querydsl형태로 쿼리 호출 가능\n<br>\n<br>기존(헬로)의 Querydsl기반 JPAQuery를 그대로 사용 가능\n<br>자동 페이징\n<br>그 외 Querydsl의 장점 보유\n<br>\n<br>기존 PagingItemReader의 메서드를 오버라이딩 하여 사용하며,<br>\nJPQL이 수행되던 부분에 코드를 수정하였다.\n<br>@Bean @Scope(value = \"step\", proxyMode = ScopedProxyMode.TARGET_CLASS) public QuerydslPagingItemReader&lt;HfbatBankBalanceCheckDto&gt; balanceReader() { ExecutionContext jobContext = Objects.requireNonNull(StepSynchronizationManager.getContext()).getStepExecution().getJobExecution().getExecutionContext(); Date startDate = (Date) jobContext.get(START_DATE_KEY); Date endDate = (Date) jobContext.get(END_DATE_KEY); return new QuerydslPagingItemReader&lt;&gt;( entityManagerFactory, executionOrder, DEFAULT_CHUNK_SIZE, queryFactory -&gt; repository.newFindChangeBalanceMemberList( startDate, endDate )); }\n<br>\n<br>각 파티션 스레드 별 종료 시간이 크게 상이하다. 총 소요시간 기준 최대 약 20% 차이\n<br>적용 한다면, 각 스레드 별로 even하게 작업을 수행하여 총 소요시간을 줄일 수 있을것이라 판단 <br>JOB private static AtomicLong executionOrder = new AtomicLong(0); ... new QuerydslPagingItemReader&lt;&gt;( entityManagerFactory, executionOrder, DEFAULT_CHUNK_SIZE, queryFactory -&gt; repository.newFindChangeBalanceMemberList( startDate, endDate ));\n<br>job 레벨에서의 스레드 세이프한 전역 변수를 생성하였다.\n<br>그 후, 각 파티션 별 리더에 인자값으로 넘긴다.\n<br>long currentExecutionOrder = executionOrder.getAndIncrement(); long startIndex = (currentExecutionOrder) * getPageSize(); int totalRecords = stepContext.getInt(\"totalRecords\"); if (startIndex &gt;= totalRecords) { initResults(); // 빈 결과로 초기화 tx.commit(); return; } int chunkSizeToRead = Math.min(getPageSize(), (int) (totalRecords - startIndex)); // 남은 데이터 크기만큼 읽기 // QueryDSL Query 생성 JPQLQuery&lt;T&gt; query = createQuery() .offset(startIndex) .limit(chunkSizeToRead);\n<br>\n<br>먼저 한 청크단위의 작업을 끝낸 파티션은 그 다음 작업을 즉시 할당받게 된다.\n<br>즉, 총 처리시간 기준 가장 빨리끝난 파티션과 가장 늦게 끝난 파티션의 실행 시간 차이는 최대 한 청크사이즈를 처리하는 시간보다 크지 않게 된다.\n<br>1차 비교 이후 차액이 발생한 녀석들의 List 를 한번 더 검증한 후, =&gt; 추후 변경 됨<br>\n검증된 녀석들을 <br>List&lt;BalanceCheckResultDto&gt; realDiffList= new ArrayList&lt;&gt;();\n<br>최종적인 차액 리스트에 넣는다.<br>writer는 각 프로세서의 리턴으로 받은 녀석들을 하나의 DTO List로 합쳐 메세징 처리를 하게 된다.<br>\n<br>유지보수성이 좋다.\n<br>환경셋팅에 리소스가 많이든다. <br>\n<br>구현 레벨이 가장 쉽다\n<br>DTO(데이터)가 많아질 경우, 큰 리소스를 차지한다.\n<br>\n<br>방법 2.보다는 리소스가 적지만, 문자열 처리 시간이 추가로 소모된다.\n<br>\n<br>높은 쓰기 성능을 갖고있다.\n<br>동시성 문제 없이 다중 스레드에서 사용 가능하다.\n<br>인덱스로 접근이 불가능하다.\n<br>QueueManager클래스를 생성하며 공통으로 사용 가능하도록 하였고,<br>@Slf4j public class QueueManager&lt;T&gt; { protected final ConcurrentLinkedQueue&lt;T&gt; sharedQueue = new ConcurrentLinkedQueue&lt;&gt;(); // 데이터 추가 public void addItemToSharedQueue(T item) { if (item != null) { sharedQueue.add(item); } }\n<br>이를 상속받아 특정 오브젝트를 넘길 수 있도록 하였다.<br>public class BalanceQueue extends QueueManager&lt;BalanceCheckResultDto&gt;{ public List&lt;BalanceCheckResultDto&gt; getDtoFromQueue() { return super.getItemsFromQueue(); } }\n<br><img alt=\"Pasted image 20241217150339.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241217150339.png\" target=\"_self\"><br>리스너에 너무 많은 역할이 부여된 모습\n<br><img alt=\"Pasted image 20241219145746.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241219145746.png\" target=\"_self\"><br>\n<br>StepExecution-Level ExecutionContext <br>\n각 Step에 고유한 ExecutionContext가 생성됩니다. <br>\nStep 내의 Reader, Processor, Writer 등에서 공유됩니다. <br>\n다른 Step과는 공유되지 않습니다. <br>\nbalanceWorkerStep 내에서는 Reader, Processor, Writer가 동일한 ExecutionContext를 공유합니다. <br>\nbalancePartitionStep과 balanceWorkerStep의 ExecutionContext는 서로 독립적입니다. <br>JobExecution-Level ExecutionContext <br>Job 전체에서 공유되며, 모든 Step이 동일한 ExecutionContext에 접근할 수 있습니다.\n<br>JobExecutionContext는 Step 간 데이터 전달이 필요할 때 유용합니다. <br>JobExecutionListener 객체 생성<br>@Slf4j public class JobTimerExecutionListener implements JobExecutionListener { private final String jobName; private long startTime = System.currentTimeMillis(); public JobTimerExecutionListener(String jobName) { this.jobName = jobName; } @Override public void beforeJob(JobExecution var1) { startTime = System.currentTimeMillis(); } @Override public void afterJob(JobExecution var1) { long endTime = System.currentTimeMillis(); long elapsedTime = endTime - startTime; long minutes = (elapsedTime / 1000) / 60; // 밀리초를 분으로 변환 double seconds = (elapsedTime / 1000.0) % 60; // 남은 밀리초를 초로 변환 (소수점 포함) log.info(\"{}-completed: {} ms | {} minutes {} seconds\", jobName, elapsedTime, minutes, seconds); } }\n<br><img alt=\"output (9) 1.png\" src=\"http://lts.kr/사진-및-문서/output-(9)-1.png\" target=\"_self\"><br><img alt=\"output (10).png\" src=\"http://lts.kr/사진-및-문서/output-(10).png\" target=\"_self\"><br><img alt=\"do-messenger_screenshot_2024-12-23_14_40_21.png\" src=\"http://lts.kr/사진-및-문서/do-messenger_screenshot_2024-12-23_14_40_21.png\" target=\"_self\"><br><img alt=\"Pasted image 20241224093159.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241224093159.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20241224093207.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241224093207.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20241224093225.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241224093225.png\" target=\"_self\"><br>","aliases":[],"tags":["#프로젝트","#개발","#SPRING","#Batch","#Partitioning","#Chunk","#성능개선"],"headers":[{"heading":"🏹 예치금 차액 비교 Spring Batch 리펙토링","level":1,"id":"🏹 예치금 차액 비교 Spring Batch 리펙토링"},{"heading":"작업 목적","level":1,"id":"작업_목적"},{"heading":"작업 계획","level":1,"id":"작업_계획"},{"heading":"- 플로우 차트","level":2,"id":"+_**플로우_차트**"},{"heading":"예치금차액비교 Batch Job 기존 소요시간 그래프","level":1,"id":"예치금차액비교_Batch_Job_기존_소요시간_그래프"},{"heading":"2024-10-28 ~ 2024-11-19 (주말제외)","level":2,"id":"2024-10-28_~_2024-11-19_(주말제외)"},{"heading":"문제점 분석","level":1,"id":"문제점_분석"},{"heading":"1. 하나의 트렌젝션으로 동작하며, 실패시 처음부터 재시도 해야함","level":2,"id":"1._하나의_트렌젝션으로_동작하며,_실패시_처음부터_재시도_해야함"},{"heading":"2. 한 트렌젝션내에서 긴 시간을 동작하여, 배치중 일어나는 insert/update(예치금 입금 출금) 건을 감지하지 못함","level":2,"id":"2._한_트렌젝션내에서_긴_시간을_동작하여,_배치중_일어나는_insert/update(예치금_입금_출금)_건을_감지하지_못함"},{"heading":"배치 동작 로직","level":1,"id":"배치_동작_로직"},{"heading":"7:00 -> 회원 개개인 별 비교. 문자는 9시 30분에 예약문자로 오지만, 실제 로직은 7시에 돈다","level":3,"id":"700_->_회원_개개인_별_비교._문자는_9시_30분에_예약문자로_오지만,_실제_로직은_7시에_돈다"},{"heading":"신한API가 main데이터.","level":4,"id":"신한API가_main데이터."},{"heading":"New Batch의 주요 기술 및 목적","level":1,"id":"New_Batch의_주요_기술_및_목적"},{"heading":"Partitioning","level":2,"id":"Partitioning"},{"heading":"프로세스(서비스 로직)단계에서 병렬처리를 하는 것과 어떠한차이가 있는가? ex) parallelStream, CompletableFuture","level":5,"id":"**_프로세스(서비스_로직)단계에서_병렬처리를_하는_것과_어떠한차이가_있는가?_ex)_parallelStream,_CompletableFuture_**"},{"heading":"즉, 파티션 별로 독립적인 SlaveStep을 생성하기 떄문에 Spring Batch의 관리를 받을 수 있다.","level":3,"id":"즉,_파티션_별로_독립적인_SlaveStep을_생성하기_떄문에_Spring_Batch의_관리를_받을_수_있다."},{"heading":"Chunk","level":2,"id":"Chunk"},{"heading":"파티셔닝 흐름","level":1,"id":"파티셔닝_흐름"},{"heading":"ThreadPoolSize : 동시에 실행시킬 스테리드의 개수","level":3,"id":"ThreadPoolSize__동시에_실행시킬_스테리드의_개수"},{"heading":"gridSize : 실제로 제단할 사이즈(작업단위)","level":3,"id":"gridSize__실제로_제단할_사이즈(작업단위)"},{"heading":"QueueCapacity : 대기열 크기","level":3,"id":"QueueCapacity__대기열_크기"},{"heading":"MaxPoolSize : 최대 추가 스레드 풀 개수","level":3,"id":"MaxPoolSize__최대_추가_스레드_풀_개수"},{"heading":"ThreadPoolSize : 4 / gridSize : 25","level":5,"id":"ThreadPoolSize__4__/__gridSize__25"},{"heading":"MaxPoolSize : 4 / QueueCapacity : 2 (대기열크기를 벗어나면 Exception 발생)","level":5,"id":"MaxPoolSize__4_/_QueueCapacity__2_(대기열크기를_벗어나면_Exception_발생)"},{"heading":"0. 250개의 데이터","level":4,"id":"0._250개의_데이터"},{"heading":"데이터가 늘어났을때?","level":3,"id":"데이터가_늘어났을때?"},{"heading":"ThreadPoolSize : 4 / gridSize : 25","level":5,"id":"ThreadPoolSize__4__/__gridSize__25"},{"heading":"MaxPoolSize : 6 / QueueCapacity : 2 (대기열크기를 벗어나면 Exception 발생)","level":5,"id":"MaxPoolSize__6_/_QueueCapacity__2_(대기열크기를_벗어나면_Exception_발생)"},{"heading":"실행 흐름:","level":3,"id":"실행_흐름"},{"heading":"0. 500개의 데이터","level":4,"id":"0._500개의_데이터"},{"heading":"파티셔닝 시 스레드 설정 방식 선택","level":1,"id":"파티셔닝_시_스레드_설정_방식_선택"},{"heading":"어떠한 방식을 적용하는게 속도와 안정성 면에서 효율적일지??","level":3,"id":"어떠한_방식을_적용하는게_속도와_안정성_면에서_효율적일지??"},{"heading":"처리할 컬럼 개수가 적을 때는 청크가 세분화되더라도 부하가 크지 않음.","level":2,"id":"처리할_컬럼_개수가_적을_때는_청크가_세분화되더라도_부하가_크지_않음."},{"heading":"SimpleAsyncTaskExecutor vs ThreadPoolTaskExecutor","level":5,"id":"SimpleAsyncTaskExecutor_vs_ThreadPoolTaskExecutor"},{"heading":"정리","level":3,"id":"정리"},{"heading":"SimpleAsyncTaskExecutor","level":4,"id":"SimpleAsyncTaskExecutor"},{"heading":"ThreadPoolTaskExecutor","level":4,"id":"ThreadPoolTaskExecutor"},{"heading":"1. 예치금 차액 처리 건은 총 컬럼수가 많지 않다.","level":3,"id":"1._예치금_차액_처리_건은_총_컬럼수가_많지_않다."},{"heading":"2. 배치 프로젝트 특성상 동시 작업을 고려하지 않아도 된다.","level":3,"id":"2._배치_프로젝트_특성상_동시_작업을_고려하지_않아도_된다."},{"heading":"따라서, SimpleAsyncTaskExecutor를 통해 관리하는 것이 적합하다고 판단하였다.","level":2,"id":"따라서,_==SimpleAsyncTaskExecutor를==_통해_관리하는_것이_적합하다고_판단하였다."},{"heading":"청크 방식의 정확한 동작 로직","level":1,"id":"청크_방식의_정확한_동작_로직"},{"heading":"1. 리더는 청크사이즈 만큼 반복하며, 각 반복마다 특정범위의 값을 return한다.","level":2,"id":"1._==리더==는_청크사이즈_만큼_반복하며,_각_반복마다_특정범위의_값을_return한다."},{"heading":"2. 프로세서는 청크사이즈와 관계없이 리더가 넘긴 return에 따라 동작을 수행한다.","level":2,"id":"2._==프로세서==는_청크사이즈와_관계없이_리더가_넘긴_return에_따라_동작을_수행한다."},{"heading":"3. 롸이터는 청크사이즈만큼 모이면, 그때 1번 동작한다.","level":2,"id":"3._==롸이터==는_청크사이즈만큼_모이면,_그때_1번_동작한다."},{"heading":"QuerydslPagingItemReader 적용기","level":1,"id":"QuerydslPagingItemReader_적용기"},{"heading":"ItemReader 방식","level":2,"id":"ItemReader_방식"},{"heading":"PagingItemReader 방식","level":2,"id":"PagingItemReader_방식"},{"heading":"QuerydslPagingItemReader (커스텀) 방식","level":2,"id":"QuerydslPagingItemReader_(커스텀)_방식"},{"heading":"QuerydslPagingItemReader 방식 구현 목적","level":3,"id":"QuerydslPagingItemReader_방식_구현_목적"},{"heading":"AbstractPagingItemReader를 상속받는 커스텀 QuerydslPagingItemReader 클래스 생성","level":3,"id":"AbstractPagingItemReader를_상속받는_커스텀_QuerydslPagingItemReader_클래스_생성"},{"heading":"구현된 Reader","level":4,"id":"구현된_Reader"},{"heading":"QuerydslPagingItemReader를 사용하며, 다중스레드 스케줄링 하기","level":1,"id":"QuerydslPagingItemReader를_사용하며,_**다중스레드_스케줄링**_하기"},{"heading":"목적","level":2,"id":"목적"},{"heading":"구현 방법","level":2,"id":"구현_방법"},{"heading":"스레드 세이프한 해당 변수는 각 페이징 리더의 startIndex를 지정 한 후,","level":3,"id":"스레드_세이프한_해당_변수는_각_페이징_리더의_startIndex를_지정_한_후,"},{"heading":"즉시 값을 늘린다. getAndIncrement()","level":3,"id":"즉시_값을_늘린다._getAndIncrement()"},{"heading":"효과","level":2,"id":"효과"},{"heading":"메세징 처리 로직 분리","level":1,"id":"메세징_처리_로직_분리"},{"heading":"1. 로직순서","level":2,"id":"1._로직순서"},{"heading":"메세징 처리할 데이터","level":3,"id":"메세징_처리할_데이터"},{"heading":"스레드 별로 따로 처리되는 녀석들을 processor의 리턴으로 writer에게 넘긴다.","level":3,"id":"스레드_별로_따로_처리되는_녀석들을_processor의_리턴으로_writer에게_넘긴다."},{"heading":"2. 어떻게 메세지(DTO 데이터)를 취합할 것인가?","level":2,"id":"2._어떻게_메세지(DTO_데이터)를_취합할_것인가?"},{"heading":"전역으로 객체를 선언하여 append하는 방식은 스레드 세이프 하지 않기 때문에 배제하였다.","level":5,"id":"전역으로_객체를_선언하여_append하는_방식은_스레드_세이프_하지_않기_때문에_배제하였다."},{"heading":"방법 1. 외부저장소를 사용한다.","level":3,"id":"방법_1._외부저장소를_사용한다."},{"heading":"방법 2. ExecutionContext에 DTO를 직렬화 시켜 저장한다.","level":3,"id":"방법_2._ExecutionContext에_DTO를_직렬화_시켜_저장한다."},{"heading":"방법 3. DTO를 분해하여 기본 데이터만 저장한다.","level":3,"id":"방법_3._DTO를_분해하여_기본_데이터만_저장한다."},{"heading":"방법 4. ConcurrentLinkedQueue 사용 (스레드 안전한 큐 자료구조)","level":3,"id":"방법_4._ConcurrentLinkedQueue_사용_(스레드_안전한_큐_자료구조)"},{"heading":"해당 방법들을 현재 프로젝트와 비교했을 때, 방법 4.가 합리적으로 보인다.","level":4,"id":"해당_방법들을_현재_프로젝트와_비교했을_때,_방법_4.가_합리적으로_보인다."},{"heading":"Listener 역할 분리하고, 재사용 가능하도록 만들자","level":1,"id":"Listener_역할_분리하고,_재사용_가능하도록_만들자"},{"heading":"- Listener에 포함된 초기화 코드 및 로그 로직","level":3,"id":"*_Listener에_포함된_초기화_코드_및_로그_로직"},{"heading":"파티션 핸들러의 grid사이즈를 동적으로 할당하기 위해서 필요한 작업.","level":4,"id":"파티션_핸들러의_grid사이즈를_동적으로_할당하기_위해서_필요한_작업."},{"heading":"파티션 핸들러의 생성 시점을 명확히 한 후에, 리스너에서 주입하던 코드를 STEP으로 분리하였다.","level":2,"id":"파티션_핸들러의_생성_시점을_명확히_한_후에,_리스너에서_주입하던_코드를_STEP으로_분리하였다."},{"heading":"기존 SteoExecution에서 JobExecution으로 하나의 Job에서 공유할 수 있도록 변경하여 gridSize를 다음 Step에서 가져올수 있도록 하였다.","level":5,"id":"기존_SteoExecution에서_JobExecution으로_하나의_Job에서_공유할_수_있도록_변경하여_gridSize를_다음_Step에서_가져올수_있도록_하였다."},{"heading":"비교: JobParameters vs ExecutionContext`","level":3,"id":"비교_JobParameters_vs_ExecutionContext`"},{"heading":"StepExecution vs JobExecution","level":4,"id":"StepExecution_vs_JobExecution"},{"heading":"역할이 분리된 리스너는 재사용을 위해 커스텀 클래스로 생성","level":2,"id":"역할이_분리된_리스너는_재사용을_위해_커스텀_클래스로_생성"},{"heading":"예치금 배치 구조도","level":1,"id":"**예치금_배치_구조도**"},{"heading":"✏ Chunk_Partitioning Batch 구조 드로잉","level":2,"id":"[[✏_Chunk_Partitioning_Batch_구조_드로잉]]"},{"heading":"성과","level":1,"id":"성과"},{"heading":"Batch 총 소요시간 그래프","level":2,"id":"Batch_총_소요시간_그래프"},{"heading":"평균 총 소요시간","level":4,"id":"평균_총_소요시간"},{"heading":"기존로직 : 13.27분","level":5,"id":"기존로직___13.27분"},{"heading":"신규로직 : 4.77분","level":5,"id":"신규로직__4.77분"},{"heading":"1컬럼당 소요시간 그래프","level":2,"id":"1컬럼당_소요시간_그래프"},{"heading":"1컬럼 당 소요시간","level":4,"id":"1컬럼_당_소요시간"},{"heading":"기존로직 : 3.74초","level":5,"id":"기존로직___3.74초"},{"heading":"신규로직 : 0.72초","level":5,"id":"신규로직__0.72초"},{"heading":"grid-size : 6 기준","level":6,"id":"grid-size__6_기준"},{"heading":"기존로직 대비","level":3,"id":"기존로직_대비"},{"heading":"총 소요시간 64.05% 감축","level":3,"id":"==총_소요시간==_**64.05%**_감축"},{"heading":"1컬럼당 처리시간 80.75% 감축","level":3,"id":"==1컬럼당_처리시간==_**80.75%**_감축"},{"heading":"1트렌젝션 최대 처리시간 99.91% 감축","level":3,"id":"==1트렌젝션_최대_처리시간==_**99.91%**_감축"},{"heading":"Grid-Size에 따른 점유 커넥션 풀 및 소요시간","level":1,"id":"Grid-Size에_따른_==점유_커넥션_풀_및_소요시간=="},{"heading":"grid-size를 동적으로 늘려감에 따라 총 소요시간을 더욱 줄일 수 있다.","level":4,"id":"grid-size를_동적으로_늘려감에_따라_==총_소요시간을_더욱_줄일_수_있다==."},{"heading":"API 부하 검증 Elastic APM","level":1,"id":"API_부하_검증_Elastic_APM"},{"heading":"트러블 슈팅 과정 보러가기 ◀","level":1,"id":"<font_color=\"#9bbb59\">트러블_슈팅_과정_보러가기_◀</font>"},{"heading":"🚦 Spring Batch(스레드와 트렌젝션) 트러블슈팅","level":4,"id":"[[🚦_Spring_Batch(스레드와_트렌젝션)_트러블슈팅]]"},{"heading":"데이터 / 부록 ◀","level":4,"id":"데이터_/_부록_◀"},{"heading":"🏹 예치금 차액 비교 Spring Batch 리펙토링 부록","level":4,"id":"[[🏹_예치금_차액_비교_Spring_Batch_리펙토링_부록]]"}],"backlinks":[],"links":["?query=tag:%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8","?query=tag:%EA%B0%9C%EB%B0%9C","?query=tag:SPRING","?query=tag:Batch","?query=tag:Partitioning","?query=tag:Chunk","?query=tag:%EC%84%B1%EB%8A%A5%EA%B0%9C%EC%84%A0","project/hello-batch/✏-chunk_partitioning-batch-구조-드로잉.html","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#🏹 예치금 차액 비교 Spring Batch 리펙토링","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#작업_목적","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#작업_계획","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#+_**플로우_차트**","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#예치금차액비교_Batch_Job_기존_소요시간_그래프","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#2024-10-28_~_2024-11-19_(주말제외)","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#문제점_분석","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#1._하나의_트렌젝션으로_동작하며,_실패시_처음부터_재시도_해야함","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#2._한_트렌젝션내에서_긴_시간을_동작하여,_배치중_일어나는_insert/update(예치금_입금_출금)_건을_감지하지_못함","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#배치_동작_로직","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#700_->_회원_개개인_별_비교._문자는_9시_30분에_예약문자로_오지만,_실제_로직은_7시에_돈다","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#신한API가_main데이터.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#New_Batch의_주요_기술_및_목적","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#Partitioning","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#**_프로세스(서비스_로직)단계에서_병렬처리를_하는_것과_어떠한차이가_있는가?_ex)_parallelStream,_CompletableFuture_**","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#즉,_파티션_별로_독립적인_SlaveStep을_생성하기_떄문에_Spring_Batch의_관리를_받을_수_있다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#Chunk","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#파티셔닝_흐름","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#ThreadPoolSize__동시에_실행시킬_스테리드의_개수","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#gridSize__실제로_제단할_사이즈(작업단위)","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#QueueCapacity__대기열_크기","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#MaxPoolSize__최대_추가_스레드_풀_개수","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#ThreadPoolSize__4__/__gridSize__25","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#MaxPoolSize__4_/_QueueCapacity__2_(대기열크기를_벗어나면_Exception_발생)","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#0._250개의_데이터","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#데이터가_늘어났을때?","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#ThreadPoolSize__4__/__gridSize__25","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#MaxPoolSize__6_/_QueueCapacity__2_(대기열크기를_벗어나면_Exception_발생)","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#실행_흐름","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#0._500개의_데이터","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#파티셔닝_시_스레드_설정_방식_선택","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#어떠한_방식을_적용하는게_속도와_안정성_면에서_효율적일지??","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#처리할_컬럼_개수가_적을_때는_청크가_세분화되더라도_부하가_크지_않음.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#SimpleAsyncTaskExecutor_vs_ThreadPoolTaskExecutor","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#정리","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#SimpleAsyncTaskExecutor","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#ThreadPoolTaskExecutor","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#1._예치금_차액_처리_건은_총_컬럼수가_많지_않다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#2._배치_프로젝트_특성상_동시_작업을_고려하지_않아도_된다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#따라서,_==SimpleAsyncTaskExecutor를==_통해_관리하는_것이_적합하다고_판단하였다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#청크_방식의_정확한_동작_로직","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#1._==리더==는_청크사이즈_만큼_반복하며,_각_반복마다_특정범위의_값을_return한다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#2._==프로세서==는_청크사이즈와_관계없이_리더가_넘긴_return에_따라_동작을_수행한다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#3._==롸이터==는_청크사이즈만큼_모이면,_그때_1번_동작한다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#QuerydslPagingItemReader_적용기","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#ItemReader_방식","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#PagingItemReader_방식","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#QuerydslPagingItemReader_(커스텀)_방식","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#QuerydslPagingItemReader_방식_구현_목적","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#AbstractPagingItemReader를_상속받는_커스텀_QuerydslPagingItemReader_클래스_생성","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#구현된_Reader","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#QuerydslPagingItemReader를_사용하며,_**다중스레드_스케줄링**_하기","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#목적","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#구현_방법","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#스레드_세이프한_해당_변수는_각_페이징_리더의_startIndex를_지정_한_후,","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#즉시_값을_늘린다._getAndIncrement()","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#효과","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#메세징_처리_로직_분리","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#1._로직순서","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#메세징_처리할_데이터","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#스레드_별로_따로_처리되는_녀석들을_processor의_리턴으로_writer에게_넘긴다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#2._어떻게_메세지(DTO_데이터)를_취합할_것인가?","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#전역으로_객체를_선언하여_append하는_방식은_스레드_세이프_하지_않기_때문에_배제하였다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#방법_1._외부저장소를_사용한다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#방법_2._ExecutionContext에_DTO를_직렬화_시켜_저장한다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#방법_3._DTO를_분해하여_기본_데이터만_저장한다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#방법_4._ConcurrentLinkedQueue_사용_(스레드_안전한_큐_자료구조)","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#해당_방법들을_현재_프로젝트와_비교했을_때,_방법_4.가_합리적으로_보인다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#Listener_역할_분리하고,_재사용_가능하도록_만들자","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#*_Listener에_포함된_초기화_코드_및_로그_로직","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#파티션_핸들러의_grid사이즈를_동적으로_할당하기_위해서_필요한_작업.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#파티션_핸들러의_생성_시점을_명확히_한_후에,_리스너에서_주입하던_코드를_STEP으로_분리하였다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#기존_SteoExecution에서_JobExecution으로_하나의_Job에서_공유할_수_있도록_변경하여_gridSize를_다음_Step에서_가져올수_있도록_하였다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#비교_JobParameters_vs_ExecutionContext`","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#StepExecution_vs_JobExecution","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#역할이_분리된_리스너는_재사용을_위해_커스텀_클래스로_생성","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#**예치금_배치_구조도**","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#[[✏_Chunk_Partitioning_Batch_구조_드로잉]]","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#성과","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#Batch_총_소요시간_그래프","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#평균_총_소요시간","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#기존로직___13.27분","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#신규로직__4.77분","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#1컬럼당_소요시간_그래프","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#1컬럼_당_소요시간","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#기존로직___3.74초","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#신규로직__0.72초","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#grid-size__6_기준","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#기존로직_대비","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#==총_소요시간==_**64.05%**_감축","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#==1컬럼당_처리시간==_**80.75%**_감축","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#==1트렌젝션_최대_처리시간==_**99.91%**_감축","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#Grid-Size에_따른_==점유_커넥션_풀_및_소요시간==","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#grid-size를_동적으로_늘려감에_따라_==총_소요시간을_더욱_줄일_수_있다==.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#API_부하_검증_Elastic_APM","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#<font_color=\"#9bbb59\">트러블_슈팅_과정_보러가기_◀</font>","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#[[🚦_Spring_Batch(스레드와_트렌젝션)_트러블슈팅]]","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#데이터_/_부록_◀","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html#[[🏹_예치금_차액_비교_Spring_Batch_리펙토링_부록]]"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html","pathToRoot":"../..","createdTime":1739842773924,"modifiedTime":1741248951797,"sourceSize":20485,"sourcePath":"project/hello Batch/🏹 예치금 차액 비교 Spring Batch 리펙토링.md","exportPath":"project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/회사-은행-서비스1111.png","사진-및-문서/spring-batch-tasklet-예치금-잔액-비교-1.png","사진-및-문서/spring-batch-tasklet-예치금-잔액-비교-잘못된-차액발생-인식-타임라인.png","사진-및-문서/output-(1).png","사진-및-문서/pasted-image-20241217150339.png","사진-및-문서/pasted-image-20241219145746.png","사진-및-문서/output-(9)-1.png","사진-및-문서/output-(10).png","사진-및-문서/do-messenger_screenshot_2024-12-23_14_40_21.png","사진-및-문서/pasted-image-20241224093159.png","사진-및-문서/pasted-image-20241224093207.png","사진-및-문서/pasted-image-20241224093225.png"]},"project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html":{"title":"🏹 예치금 차액 비교 Spring Batch 리펙토링 부록","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:프로젝트\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#프로젝트</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:개발\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#개발</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:SPRING\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#SPRING</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Batch\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Batch</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Partitioning\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Partitioning</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Chunk\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Chunk</a> <br> <a href=\"http://lts.kr?query=tag:프로젝트\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#프로젝트\">#프로젝트</a> <a href=\"http://lts.kr?query=tag:개발\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#개발\">#개발</a> <a href=\"http://lts.kr?query=tag:SPRING\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SPRING\">#SPRING</a> <a href=\"http://lts.kr?query=tag:Batch\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Batch\">#Batch</a> <a href=\"http://lts.kr?query=tag:Partitioning\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Partitioning\">#Partitioning</a> <a href=\"http://lts.kr?query=tag:Chunk\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Chunk\">#Chunk</a><br><img alt=\"output (9).png\" src=\"http://lts.kr/사진-및-문서/output-(9).png\" target=\"_self\"><br>\n<br>현재 예치금 차액 배치의 서비스로직은, 각 파티션에서 실행되며,\n<br>이렇게 실행된 코드는 parallelStream을 사용하여 내부적인 병렬처리를 진행한다.\n<br>해당 로직의 특징은 cpu에 부하를 주는 계산식이 아닌, 단순 I/O (api호출 대기)의 소요시간이 크다.\n<br>\n<br>API 호출 작업 10,000건 처리\n<br>각 호출 응답 시간 200ms\n<br>\n<br>기본 스레드 풀 크기: CPU 코어 수 - 1 (예: 7개의 코어)\n<br>처리 시간 ≈ 작업&nbsp;개수/스레드&nbsp;수×응답&nbsp;시간\\text{작업 개수} / \\text{스레드 수} \\times \\text{응답 시간}작업&nbsp;개수/스레드&nbsp;수×응답&nbsp;시간\n<br>≈10,000/7×200ms\\approx 10,000 / 7 \\times 200ms≈10,000/7×200ms\n<br>≈286초\\approx 286초≈286초\n<br>\n<br>스레드 풀 크기: 100\n<br>처리 시간 ≈ 작업&nbsp;개수/스레드&nbsp;수×응답&nbsp;시간\\text{작업 개수} / \\text{스레드 수} \\times \\text{응답 시간}작업&nbsp;개수/스레드&nbsp;수×응답&nbsp;시간\n<br>≈10,000/100×200ms\\approx 10,000 / 100 \\times 200ms≈10,000/100×200ms\n<br>≈20초\\approx 20초≈20초\n<br>\n<br>CPU 바운드 작업: <br>CPU를 많이 사용하는 작업(예: 복잡한 계산)이면, 코어 수 이상의 스레드를 실행할 경우 컨텍스트 스위칭(스레드 간 전환) 비용이 증가해 성능이 오히려 떨어질 수 있습니다.\n<br>예: 7개의 코어로 100개의 CPU 작업 스레드를 처리하려 하면 병목이 발생. <br>I/O 바운드 작업(API 호출 포함): <br>네트워크 I/O 작업은 대기 시간이 길고, 대기 중에는 CPU를 거의 사용하지 않습니다.\n<br>이 경우 스레드 수 &gt; 코어 수가 유리하며, 100개의 스레드를 실행해도 대부분의 스레드는 대기 상태에 있으므로 CPU 사용량이 낮습니다. <br>69961 ms<br>\n70048 ms<br>\n70396 ms<br>55180 ms<br>\n55036 ms<br>\n55285 ms<br>\n55442 ms<br>71139 ms<br>\n72220 ms<br>64473 ms<br>\n65609 ms<br>미리 파티션 되어있는 데이터의 특성상 한번에 처리되는 양이 많지 않다.\n<br>또한, stream().parallel()은 forkJoinPool에서 효율적으로 관리되며,\n<br>데이터의 동기화 병목을 줄이고, 컨텍스트 전환 횟수를 줄여 더 효율적인 것으로 보임.\n<br>\n<br>stream().parallel() 기능이 효율적이다.\n<br>\n<br>아마도 Where절이 추가되면서 reader의 속도가 크게 올라갓으며, 1번의 호출만을 하기 때문에 더 개선되었을것이다.\n<br>chunk-size:20<br>\n55969 ms<br>chunk-size:20<br>\n54679 ms<br>\n54416 ms<br>기존 : reader에서 넘어온녀석들의(옛날기준 날짜범위 내의 가장최신Point)차액 -&gt; 차액이있는녀석들의 (모든날짜 범위내의 최신 Point)의 차액<br>\n현재 : reader에서 가져온녀석들의(모든날짜범위내의 최신 Point)의 차액<br>=&gt; 옛날기준 날짜범위 내의 가장최신포인트와 실시간 포인트는 다를 경우가 많음. 거기 내에<br>전날의 최신포인트 vs 현재 최신포인트(신한) -&gt; 여기엔 안걸리지만<br>\n현재 최신포인트 vs 현재 최신포인트(신한) -&gt; 여기에는 걸린다.<br>이게 무슨소리인지? <br>보통의 Batch 서비스라면 I/O 작업에 부하가 걸려있겠지만, 현재 예치금 차액 배치는 processor 즉, 예치금 비교 연산에서 큰 리소스를 소모하고있다.\n<br>이에 해당하는 시간 소모를 줄이기 위해 processor(서비스로직) 을 병렬처리 함으로 최종 처리시간 단축을 꾀할 수 있을지에 대한 고민이다.\n<br>이후 설명하겠지만, 내부 병렬처리 로직은 청크의 트렌젝션을 무너뜨릴 가능성이 크므로 지양해야함. <br><img alt=\"Pasted image 20241206113120.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241206113120.png\" target=\"_self\"><br>소요시간 : 1분 9초\n<br>-&gt; 기존 limit절을 이용한 로직보다 속도가 더빠르며,<br>\nJpaPagingReader를 적용한다면 중복 select횟수를 줄여 더 빨라질 것으로 예상된다.<br>결론 : 둘 중 하나<br>#### 292 컬럼\n## Processor 삭제(병렬처리)로직\n#### grid-size:6 / chunk-size:20\n54679 ms\n54416 ms\n## Processor 순차처리(writer만 병렬처리) 로직 #### grid-size:6 / chunk-size:20\n60440 ms\n62271 ms\n#### grid-size:10 / chunk-size:20\n58129 ms\n56723 ms\n#### grid-size:16 / chunk-size:20\n58595 ms\n56314 ms #### grid-size:32 / chunk-size:20\n- SQLTransientConnectionException\n- 스레드풀 점유갯수 초과\n<br>하지만, 이후 청크 방식 Batch의 확장성과 유지보수성을 고려하여 리더,프로세서,라이터 방식으로 구현하기로 정했다.","aliases":[],"tags":["#프로젝트","#개발","#SPRING","#Batch","#Partitioning","#Chunk"],"headers":[{"heading":"🏹 예치금 차액 비교 Spring Batch 리펙토링 부록","level":1,"id":"🏹 예치금 차액 비교 Spring Batch 리펙토링 부록"},{"heading":"parallelStream vs CompletableFuture 서비스의 api호출 로직을 더 효율적으로 관리할 수는 없을까?","level":1,"id":"parallelStream_vs_CompletableFuture_서비스의_api호출_로직을_더_효율적으로_관리할_수는_없을까?"},{"heading":"작업 시나리오","level":4,"id":"**작업_시나리오**"},{"heading":"parallelStream의 성능:","level":4,"id":"**`parallelStream`**의_성능"},{"heading":"CompletableFuture + FixedThreadPool(100)**의 성능:","level":4,"id":"==CompletableFuture==_+_FixedThreadPool(100)**의_성능"},{"heading":"a. 작업의 성격","level":4,"id":"**a._작업의_성격**"},{"heading":"2차 검증로직 삭제 전","level":3,"id":"2차_검증로직_삭제_전"},{"heading":"기존로직","level":2,"id":"기존로직"},{"heading":"2차 검증로직 삭제 후","level":3,"id":"2차_검증로직_삭제_후"},{"heading":"기존 로직","level":2,"id":"기존_로직"},{"heading":"(계산로직 + API호출 로직) - 스레드 고정(20)","level":2,"id":"(계산로직_+_API호출_로직)_-_스레드_고정(20)"},{"heading":"(API호출 로직만 스레드 고정(20)","level":2,"id":"(API호출_로직만_스레드_고정(20)"},{"heading":"결과","level":4,"id":"결과"},{"heading":"QuerydslPagingItemReader를 적용함으로 인하여, 일정한 데이터의 크기를 자동으로 페이징 하기 때문에(Reader는 각 Partition별 1번 작동) 스케줄링이 동작할 수 없다.","level":2,"id":"QuerydslPagingItemReader를_적용함으로_인하여,_일정한_데이터의_크기를_자동으로_페이징_하기_때문에(Reader는_각_Partition별_1번_작동)_스케줄링이_동작할_수_없다."},{"heading":"그럼에도 속도가 더 개선된 이유를 분석해보면 좋을것으로 보인다.","level":3,"id":"그럼에도_속도가_더_개선된_이유를_분석해보면_좋을것으로_보인다."},{"heading":"292Column","level":4,"id":"292Column"},{"heading":"기존 :","level":5,"id":"기존_"},{"heading":"변경후 :","level":5,"id":"변경후_"},{"heading":"2차 검증 삭제시 최종 차액 인원이 다른 이유","level":3,"id":"2차_검증_삭제시_최종_차액_인원이_다른_이유"},{"heading":"현재:281 / 기존:141","level":3,"id":"현재281_/_기존141"},{"heading":"현재차액에 기존차액이 모두 포함되어있음","level":4,"id":"현재차액에_기존차액이_모두_포함되어있음"},{"heading":"시행착오","level":1,"id":"**시행착오**"},{"heading":"Limit을 사용하지 않고 JpaPagingReader를 사용했을 때, 프로세서가 모아서 처리할 수 있는 방법이 있는가?","level":1,"id":"Limit을_사용하지_않고_JpaPagingReader를_사용했을_때,_프로세서가_모아서_처리할_수_있는_방법이_있는가?"},{"heading":"- processor는 reader의 return결과로만 트리거 되기 때문에 방법이 없다.","level":3,"id":"-_==processor==는_==reader==의_return결과로만_트리거_되기_때문에_방법이_없다."},{"heading":"필수가 아니라면, processor의 로직을 writer에 할당하여 청크사이즈로 컨트롤 할수 있지 않을까?","level":2,"id":"필수가_아니라면,_==processor==의_로직을_==writer==에_할당하여_청크사이즈로_컨트롤_할수_있지_않을까?"},{"heading":"reader(dto) -> processor -> writer(dtoList)","level":4,"id":"reader(dto)_->_~~processor~~_->_writer(dtoList)"},{"heading":"- 구현 결과 reader의 return인 dto값을 chunk사이즈 만큼 List dto로 합쳐 일괄 처리가 가능하다.","level":5,"id":"-_구현_결과_==reader==의_return인_dto값을_chunk사이즈_만큼_List_dto로_합쳐_일괄_처리가_가능하다."},{"heading":"우려되는 점은 writer가 데이터 가공의 역할까지 맡는게, 설계 목적에 부합한지 생각해보아야 한다.","level":3,"id":"우려되는_점은_writer가_데이터_가공의_역할까지_맡는게,_설계_목적에_부합한지_생각해보아야_한다."},{"heading":"1. 리더,프로세서 각각 dto 1개 씩 처리 (역할 분담)","level":5,"id":"1._리더,프로세서_각각_dto_1개_씩_처리_(역할_분담)"},{"heading":"2. 프로세서 로직을 제거하여 스레드는 유지하돼, 서비스로직에서 dto list로 내부 병렬처리 로직으로 구현하기","level":5,"id":"2._프로세서_로직을_제거하여_스레드는_유지하돼,_서비스로직에서_dto_list로_내부_병렬처리_로직으로_구현하기"},{"heading":"데이터 상으로는 내부 병렬처리의 승리","level":2,"id":"데이터_상으로는_내부_병렬처리의_승리"}],"backlinks":[],"links":["?query=tag:%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8","?query=tag:%EA%B0%9C%EB%B0%9C","?query=tag:SPRING","?query=tag:Batch","?query=tag:Partitioning","?query=tag:Chunk","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#🏹 예치금 차액 비교 Spring Batch 리펙토링 부록","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#parallelStream_vs_CompletableFuture_서비스의_api호출_로직을_더_효율적으로_관리할_수는_없을까?","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#**작업_시나리오**","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#**`parallelStream`**의_성능","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#==CompletableFuture==_+_FixedThreadPool(100)**의_성능","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#**a._작업의_성격**","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#2차_검증로직_삭제_전","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#기존로직","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#2차_검증로직_삭제_후","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#기존_로직","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#(계산로직_+_API호출_로직)_-_스레드_고정(20)","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#(API호출_로직만_스레드_고정(20)","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#결과","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#QuerydslPagingItemReader를_적용함으로_인하여,_일정한_데이터의_크기를_자동으로_페이징_하기_때문에(Reader는_각_Partition별_1번_작동)_스케줄링이_동작할_수_없다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#그럼에도_속도가_더_개선된_이유를_분석해보면_좋을것으로_보인다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#292Column","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#기존_","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#변경후_","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#2차_검증_삭제시_최종_차액_인원이_다른_이유","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#현재281_/_기존141","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#현재차액에_기존차액이_모두_포함되어있음","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#**시행착오**","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#Limit을_사용하지_않고_JpaPagingReader를_사용했을_때,_프로세서가_모아서_처리할_수_있는_방법이_있는가?","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#-_==processor==는_==reader==의_return결과로만_트리거_되기_때문에_방법이_없다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#필수가_아니라면,_==processor==의_로직을_==writer==에_할당하여_청크사이즈로_컨트롤_할수_있지_않을까?","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#reader(dto)_->_~~processor~~_->_writer(dtoList)","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#-_구현_결과_==reader==의_return인_dto값을_chunk사이즈_만큼_List_dto로_합쳐_일괄_처리가_가능하다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#우려되는_점은_writer가_데이터_가공의_역할까지_맡는게,_설계_목적에_부합한지_생각해보아야_한다.","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#1._리더,프로세서_각각_dto_1개_씩_처리_(역할_분담)","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#2._프로세서_로직을_제거하여_스레드는_유지하돼,_서비스로직에서_dto_list로_내부_병렬처리_로직으로_구현하기","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html#데이터_상으로는_내부_병렬처리의_승리"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html","pathToRoot":"../..","createdTime":1739842890772,"modifiedTime":1741249020914,"sourceSize":6664,"sourcePath":"project/hello Batch/🏹 예치금 차액 비교 Spring Batch 리펙토링 부록.md","exportPath":"project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/output-(9).png","사진-및-문서/pasted-image-20241206113120.png"]},"project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html":{"title":"👩‍👧‍👦 Analytics 공통모듈 ADMIN용 데이터 추출","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:프로젝트\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#프로젝트</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:개발\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#개발</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:SPRING\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#SPRING</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:AOP\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#AOP</a> <br> <a href=\"http://lts.kr?query=tag:프로젝트\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#프로젝트\">#프로젝트</a> <a href=\"http://lts.kr?query=tag:개발\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#개발\">#개발</a> <a href=\"http://lts.kr?query=tag:SPRING\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SPRING\">#SPRING</a> <a href=\"http://lts.kr?query=tag:AOP\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#AOP\">#AOP</a><br>hf_marketing_code<br>hf_marketing_target<br>hf_marketing_hit_log<br><img alt=\"Pasted image 20250102181842.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250102181842.png\" target=\"_self\"><br>=&gt; 해당형태로 컬럼을 고정시키고, 동적으로 유입 수 를 출력한다.<br>-&gt; 그 후 페이지에 뿌려주기<br>Date: 01-02\nAd Type: 구글광고\nTotal Inflow: 4\nTotal Hit: 27\nDetail Information: Page Name: 대출하기 페이지 Hit: 9 Page Name: 한도조회 버튼 Hit: 12 Page Name: 이용안내 페이지 Hit: 6","aliases":[],"tags":["#프로젝트","#개발","#SPRING","#AOP"],"headers":[{"heading":"👩‍👧‍👦 Analytics 공통모듈 ADMIN용 데이터 추출","level":1,"id":"👩‍👧‍👦 Analytics 공통모듈 ADMIN용 데이터 추출"},{"heading":"작업 개요 먼저 보기","level":1,"id":"**작업_개요_먼저_보기**"},{"heading":"->👩‍👧‍👦 marketing Analytics 공통모듈 제작기","level":1,"id":"->[[👩‍👧‍👦_marketing_Analytics_공통모듈_제작기]]"},{"heading":"DB에서 관리? -> ADMIN페이지로 생성?","level":1,"id":"DB에서_관리?_->_ADMIN페이지로_생성?"},{"heading":"1. enum객체의 상수값들을 빌드시에 DB에서 셋팅할 수 있는지?","level":1,"id":"1._enum객체의_상수값들을_빌드시에_DB에서_셋팅할_수_있는지?"},{"heading":"2. pageURL/pageType 과 targetClass/targetMethod/methodParameters중 하나로 특정","level":1,"id":"2._pageURL/pageType_과_targetClass/targetMethod/methodParameters중_하나로_특정"},{"heading":"3. DB 최적화를 진행하자 -> 중복데이터 제거","level":1,"id":"3._DB_최적화를_진행하자_->_중복데이터_제거"},{"heading":"포인트 컷 생성시 DB 호출하여 타겟 메서드 세팅","level":1,"id":"포인트_컷_생성시_DB_호출하여_타겟_메서드_세팅"},{"heading":"ADMIN에서 어떻게 받을것인가?","level":1,"id":"ADMIN에서_어떻게_받을것인가?"},{"heading":"=> 기존 EXCEL로직을 사용하기 위해 service로직에서 row를 병합하여 view에 건내주도록 개발하였다.","level":4,"id":"=>__기존_EXCEL로직을_사용하기_위해_service로직에서_row를_병합하여_view에_건내주도록_개발하였다."},{"heading":"repositoty에서 세부데이터를 List형태로 받을 수 있도록 쿼리 작성","level":1,"id":"repositoty에서_세부데이터를_List형태로_받을_수_있도록_쿼리_작성"}],"backlinks":[],"links":["?query=tag:%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8","?query=tag:%EA%B0%9C%EB%B0%9C","?query=tag:SPRING","?query=tag:AOP","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html","project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html#👩‍👧‍👦 Analytics 공통모듈 ADMIN용 데이터 추출","project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html#**작업_개요_먼저_보기**","project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html#->[[👩‍👧‍👦_marketing_Analytics_공통모듈_제작기]]","project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html#DB에서_관리?_->_ADMIN페이지로_생성?","project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html#1._enum객체의_상수값들을_빌드시에_DB에서_셋팅할_수_있는지?","project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html#2._pageURL/pageType_과_targetClass/targetMethod/methodParameters중_하나로_특정","project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html#3._DB_최적화를_진행하자_->_중복데이터_제거","project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html#포인트_컷_생성시_DB_호출하여_타겟_메서드_세팅","project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html#ADMIN에서_어떻게_받을것인가?","project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html#=>__기존_EXCEL로직을_사용하기_위해_service로직에서_row를_병합하여_view에_건내주도록_개발하였다.","project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html#repositoty에서_세부데이터를_List형태로_받을_수_있도록_쿼리_작성"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html","pathToRoot":"../..","createdTime":1739783488509,"modifiedTime":1740733843766,"sourceSize":3178,"sourcePath":"project/hello marketing/👩‍👧‍👦 Analytics 공통모듈 ADMIN용 데이터 추출.md","exportPath":"project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20250102181842.png"]},"project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html":{"title":"👩‍👧‍👦 marketing Analytics 공통모듈 제작기","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:프로젝트\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#프로젝트</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:개발\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#개발</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:DB\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#DB</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:SPRING\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#SPRING</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:AOP\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#AOP</a> <br> <a href=\"http://lts.kr?query=tag:프로젝트\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#프로젝트\">#프로젝트</a> <a href=\"http://lts.kr?query=tag:개발\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#개발\">#개발</a> <a href=\"http://lts.kr?query=tag:DB\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#DB\">#DB</a> <a href=\"http://lts.kr?query=tag:SPRING\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SPRING\">#SPRING</a> <a href=\"http://lts.kr?query=tag:AOP\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#AOP\">#AOP</a> <br>개요 <br>Hello Service의 유입/동작 통계 모듈의 공통화 작업이다.\n<br>Spring AOP를 사용하여 구성하였다. <br>\n<br>통계 필요 페이지 내에서(front &gt; back)\n<br>\n<br>쿠키 데이터 페이지 별 최초 진입 확인?\\\n<br>\n<br>기존 외부 유입 통계 로직의 단점 해결. <br>확장에 닫혀있음\n<br>디테일한 행동 추적 불가능\n<br>중복 접근자 처리로직의 부재 <br>\n<br>해당 진입시점부터 특정 동작에 대한 모든 타임라인 로그\n<br>\n<br>레디스 가용 메모리에 대한 한계값 산정. -&gt; 아직 적용 X\n<br>\n<br>URL + 함수명 조합\n<br>=&gt; 메인 테이블<br>\n=&gt; 백로직에서 쿠키 데이터 쌓기<br>=&gt; 디테일 테이블 - 타임라인으로 관리 단, 메인테이블에 존재하는 내셕들에 대해서<br>\n=&gt; AOP에서 특정 서비스or메서드orURL로 지정하여 로그 쌀기<br>- 관심사(Aspect)를 분리하여, 각 서비스 메서드에 반복해서 구현하는 것이 아닌, 별도의 Aspect로 관리하여 핵심로직을 공통으로 적용하기 위함이다.\n<br>\n<br>난수 생성 후 물고있기☑ <br>IP로 추적 <br><img alt=\"Pasted image 20241224144309.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241224144309.png\" target=\"_self\"><br>쿠키가 필요한 페이지의 경로가 기본 path와 일치하는 경우(redirect url 이 SP_MARKETING_HIT_TEST1 의 하위 url일 경우)<br>\n에는 명시적으로 표시할 필요가 없지만,<br>AOP에서 Front-end 단의 특정 동작 필터링 하기<br>기존<br>\n<img alt=\"Pasted image 20241226111559.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241226111559.png\" target=\"_self\"><br>\nDB<br>\n<img alt=\"Pasted image 20250102160223.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250102160223.png\" target=\"_self\"><br>\n<br>장점: <br>코드가 간결하고 읽기 쉽다.\n<br>Spring의 AOP 인프라를 사용하여 메서드 인터셉션을 쉽게 구현할 수 있다. <br>단점:\n- 포인트컷 조건은 컴파일 시점에 고정된다.\n- 복잡한 조건이나 동적으로 변경되는 조건을 처리하기 어렵다. -&gt; @Pointcut 등의 조건에 부합하는 Bean객체를 컴파일 시점에 찾아내어 프록시를 감싼다.\n<br>\n<br>동적 생성: <br>런타임에 프록시를 생성하여 포인트컷과 어드바이스를 동적으로 적용.\n<br>StaticMethodMatcherPointcut 또는 DynamicMethodMatcherPointcut을 사용하여 런타임 조건 기반으로 메서드 매칭. <br>장점: <br>런타임 조건에 따라 동적으로 포인트컷 생성 가능.\n<br>복잡한 조건과 동적 필터링을 처리하기 용이.\n<br>Spring AOP가 아닌 순수 Java 프록시 방식도 지원. <br>단점: <br>코드가 복잡해지고 추가 구현이 필요.\n<br>Spring AOP와 동일한 수준의 간결성을 제공하지 않음. <br>-&gt; 해당 프록시 객체를 적용하고 싶은 Bean객체에 매번 생성(등록)해주어야 함.<br>import org.springframework.aop.Pointcut;\nimport org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;\nimport org.springframework.aop.support.DefaultPointcutAdvisor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration; @Configuration\npublic class AopConfig { @Bean public Pointcut customPointcut() { return new CustomPointcut(); } @Bean public CustomAdvice customAdvice() { return new CustomAdvice(); } @Bean public DefaultPointcutAdvisor customAdvisor(Pointcut customPointcut, CustomAdvice customAdvice) { return new DefaultPointcutAdvisor(customPointcut, customAdvice); } @Bean public DefaultAdvisorAutoProxyCreator proxyCreator() { return new DefaultAdvisorAutoProxyCreator(); }\n} <br>\n<br>@Pointcut 방식과 동일한 동작: <br>Spring 컨테이너가 관리하는 모든 빈에 대해 조건을 평가하고 프록시를 자동 생성합니다. <br>프록시를 명시적으로 선언할 필요 없음: <br>ProxyFactory처럼 수동으로 프록시를 생성하지 않아도 됩니다. <br>유연성과 효율성 향상: <br>Spring AOP 인프라를 활용하므로, 관리가 용이하고 런타임 성능이 개선됩니다. <br>\n<br>BeanPostProcessor: <br>DefaultAdvisorAutoProxyCreator는 Spring의 BeanPostProcessor를 구현한 클래스이다.\n<br>Spring 컨테이너는 애플리케이션 컨텍스트에 등록된 모든 BeanPostProcessor를 자동으로 호출하여 빈의 초기화 전후 작업을 수행한다.\n<br>이를 통해, Spring AOP는 빈 생성 단계에서 프록시를 생성하고 조건에 맞는 빈에 대해 어드바이저를 적용. <br>Advisor 탐색: <br>DefaultAdvisorAutoProxyCreator는 Spring 컨텍스트에 등록된 모든 Advisor를 자동으로 탐색한다.\n<br>이는 DefaultAdvisorAutoProxyCreator가 BeanFactory를 통해 컨테이너의 모든 Advisor 타입 빈을 조회하기 때문.\n<br>탐색된 Advisor를 사용하여 각 빈의 메서드와 포인트컷 조건을 매칭. <br>Advisor와 빈의 매칭: <br>빈이 생성될 때, DefaultAdvisorAutoProxyCreator는 해당 빈의 메서드가 어떤 Advisor의 포인트컷 조건에 부합하는지 평가.\n<br>조건에 부합하면, 해당 빈을 프록시 객체로 감싸고, 어드바이스를 연결. <br>위 방법의 문제점? <br>\n<br>이렇게 맵핑이 되어야 하나, 이를 동적으로 탐지하지 못한다.\n<br>/* * EnableAspectJAutoProxy &gt; 프록시 적용시 인터페이스/클래스 여부 자동 판단 * 클래스에 인터페이스가 있으면 JDK 동적 프록시. * 인터페이스가 없으면 CGLIB 프록시. * */@Configuration @EnableAspectJAutoProxy public class AopConfig { @Bean public Pointcut customPointcut() { return new CustomPointcut(); } @Bean public CustomAdvice customAdvice() { return new CustomAdvice(); } @Bean public DefaultPointcutAdvisor customAdvisor(Pointcut customPointcut, CustomAdvice customAdvice) { return new DefaultPointcutAdvisor(customPointcut, customAdvice); } /* * @EnableAspectJAutoProxy를 사용해 등록했기 때문에 불필요. * */ // @Bean // public DefaultAdvisorAutoProxyCreator proxyCreator() { // return new DefaultAdvisorAutoProxyCreator(); // } }\n<br>프록시(Proxy)는 대리자라는 뜻으로, 다른 객체에 대한 인터페이스 역할을 하는 객체를 말합니다. 프로그래밍에서 프록시는 실제 객체에 접근하기 전에 특정 작업(로깅, 보안, 트랜잭션 관리 등)을 수행하거나, 객체에 대한 접근을 제어하는 데 사용됩니다.<br>\n<br>대리 객체: 프록시는 실제 객체에 대한 중간다리 역할을 합니다.\n<br>동작 조정: 프록시는 요청을 가로채서 추가적인 작업을 수행하거나, 요청을 변형한 뒤 실제 객체에 전달할 수 있습니다.\n<br>AOP와 연관: 프록시를 사용하면 코드를 변경하지 않고도 객체의 동작을 확장하거나 변경할 수 있습니다.\n<br>Method Name: loanerLoginPage<br>\njavax.servlet.http.HttpServletRequest<br>\norg.springframework.web.bind.annotation.GetMapping <br><img alt=\"Pasted image 20241226152219.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241226152219.png\" target=\"_self\"><br><img alt=\"Pasted image 20241226171158.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241226171158.png\" target=\"_self\"><br>\n<br>외부링크 최초진입. hitCode, hitUid 발급 및 DB저장\n<br>\n<br>외부링크 재진입. hitCode는 변경될 수 있으므로 \"p\"파라미터로 재발급<br>\n=&gt; hitCode는 매번 재발급 / hitUid는 없을때만 발급\n<br>\n<br>일반사용자 이며, 아무동작 하지 않는다.\n<br>\n<br>외부링크 진입 후 동작. 없는 녀석 새로 발급 및 DB저장\n<br>서비스 저장시 동시성 이슈가 발생할 수 있다?<br>@Override @Transactional public ResponseModel insertMarketingHitLog(String hitCode, String hitUid, String pageUrl, String pageType){ try { Optional&lt;HfMarketingHitLog&gt; existingLog = hfMarketingHitLogRepository.findByHitCodeAndHitUidAndPageUrlAndPageType(hitCode, hitUid, pageUrl, pageType); if (existingLog.isPresent()) { HfMarketingHitLog logToUpdate = existingLog.get(); logToUpdate.setUpdateDate(LocalDateTime.now()); hfMarketingHitLogRepository.save(logToUpdate); return new ResponseModel(ResponseModel.ResponseStatus.SUCCESS); } HfMarketingHitLog hfMarketingHitLog = HfMarketingHitLog.builder() .hitCode(hitCode) .hitUid(hitUid) .pageUrl(pageUrl) .pageType(pageType) .build(); hfMarketingHitLogRepository.save(hfMarketingHitLog); return new ResponseModel(ResponseModel.ResponseStatus.SUCCESS); } catch (Exception e) { return new ResponseModel(ResponseModel.ResponseStatus.FAILED, \"데이터 처리 중 오류 발생\"); } }\n<br>\n<br>여러 쓰레드(또는 트랜잭션)가 findByHitCodeAndHitUidAndPageUrlAndPageType 메서드를 호출하여 동일한 조건의 데이터를 동시에 조회할 수 있다.\n<br>두 쓰레드가 모두 existingLog.isPresent() 조건에서 false를 확인한 후, 동시에 새로운 HfMarketingHitLog 객체를 생성하고 저장하려 하면 데이터 중복 문제가 발생할 수 있다.\n<br>. Lock을 쓰면 되나, 이후 업데이트 로직 삭제(로그 테이블화) 변경으로 처리<br><img alt=\"Pasted image 20241230135801.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241230135801.png\" target=\"_self\"><br>1일의 유효기간을 갖는 uid를 발급하여, 인입코드 / Hit된 기능 주소 / 시간 을 저장한다.\n<br>uid는 외부url로 접근시 발급\n<br>page_url는 코드에 미리 등록 / hit_code는 모두(only 영문+숫자) 수용 가능\n<br><img alt=\"Pasted image 20250102160213.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250102160213.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250102160223.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250102160223.png\" target=\"_self\"><br>\n<br>enum객체에 정의된 메서드를 DB로 전환하여 pointcut에서 해당 클래스, 메서드를 가져와 조건으로 정의\n<br>해당 조건에 부합하는 메서드를 프록시로 전환\n<br>\n<br>api호출을 통해 advice내의 동작은 런타임 환경에서 동적으로 변경이 가능한 것을 확인했다.\n<br>\n<br>런타입 위빙 방식이라고 하더라도, 변경은 불가능하다.\n<br>컴파일 위빙 방식은 컴파일 단계에서 원본 클래스 바이트코드를 변경하여 직접 위빙을 하는 방식이고,<br>\n런타임 위빙은 런타임단계에서 원본 클래스를 변경하지 않고 프록시 객체를 사용하여 교체하는 방식이다.\n<br>=&gt; 해당하는 부분은 리빌드와 큰 차이가 없고, 각 class에 scope를 따로 적용해야했기 때문에 고려하지 않았다.<br>=&gt; 연관성 있는 모든 참조를 수동으로 재설정해야하기 때문에 매우 복잡해진다.<br>\n<br>참조를 갱신하기 위해서는 Java리플렉션을 사용하여 강제로 참조를 갱신하거나, AspectJ의 런타임 위빙 방식을 활용해야 한다.\n<br>따라서, 서버 Kill을 하는 것과 진배 없으며, 권장하지 않는 방법이다.\n<br>이슈\n내부통계기능(AOP)의 진입URL에서 네이버 아날리틱스(외부 통계 프로그램)가 작동하지 않는 이슈\n<br>\n<br>외부 유입통계 페이지의 인입 주소는 일반적인 메인 페이지가 아닌, Gate를 거쳐서(redirect) 동작하게 된다.\n<br>이 때, 진입 referrer에 변동이 생기면서 집계가 되지 않는 오류가 발생한 것으로 보인다.\n<br>\n<br>해당 방법을 사용하여, View단을 추가하여 replace한다면, 처음 진입시 갖고 있는 referrer를 물고 갈수 있지 않을까?\n<br>redirect대신 view단을 통해 진입하도록 만든 후, naver아날리틱스 스크립트를 추가한다.\n<br>한계 : 외부 유입시 불필요한 페이지 방문이 생기게 되고, 유입과정의 시간이 증가한다. 또한, 해당 오류를 100% 해결할지 미지수\n<br>\n<br>해당 방법은 기존 naver아날리틱스를 사용하고 있는 로직을 그대로 사용하는 것이기 때문에 제일 확실하다.\n<br>한계 : 외부유입자가 아닌, 모든 사용자에게 session및 uid체크가 들어가기 때문에 부하가 증가한다.(DB통신은 X)\n<br>\n<br>BEST🖐\n<br>한계 : 네이버 아날리틱스의 내부로직 파악이 불가함\n<br>\n<br>현재 네이버의 내부 로직 파악이 불가하니, View를 추가하여 네이버 스크립트가 물고 가는지 먼저 TEST하도록 하기\n<br>&lt;html xmlns:th=\"http://www/thymeleaf.org\" th:replace=\"layout/mainLayout :: mainLayout('gate loan')\"&gt; &lt;script th:inline=\"javascript\"&gt; $(document).ready(function() { location.href = [[${urls.SP_LOAN}]]; }); &lt;/script&gt;\n<br>mainLayout을 적용하여 해당 페이지에 default script를 적용시켰다.<br>\n결과는 추후 모니터링 예정<br>Quote\nsp/loan기준으로 레퍼러를 https://www-stg.hellofunding.co.kr/sp/loan/gtLoan?p=Z29vZ2xlMXN0 인입페이지 주소를 갖고있는것을 확인했다.\n<br>2025-02-25 14:34:04 [hello-app-staging-7985c4d74f-47qnx] INFO com.hellofintech.hellofunding.common.interceptor.ServiceHandlerInterceptor[mergeIntoVisitCount:187] - referer = https://www-stg.hellofunding.co.kr/sp/loan/gtLoan?p=Z29vZ2xlMXN0\n<br><img alt=\"Pasted image 20250226145129.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250226145129.png\" target=\"_self\"><br>확인 결과이미 sendRedirect 로직에서도 Header의 Referer를 물고있었다.<br>\n어떠한 referrer를 기준으로 집계를 하는지 정확한 파악이 필요하다.\n<br>","aliases":[],"tags":["#프로젝트","#개발","#DB","#SPRING","#AOP"],"headers":[{"heading":"👩‍👧‍👦 marketing Analytics 공통모듈 제작기","level":1,"id":"👩‍👧‍👦 marketing Analytics 공통모듈 제작기"},{"heading":"1. 기존 js 하드코딩 되어있던 통계 로직 SpringAOP 공통화","level":2,"id":"1._기존_**js_하드코딩**_되어있던_통계_로직_**SpringAOP**_공통화"},{"heading":"2. Hit체크 동작 데이터 삽입 후 프록시 등록","level":2,"id":"2._Hit체크_동작_데이터_삽입_후_**프록시_등록**"},{"heading":"3. 상세 인입 정보 저장으로 ADMIN통계 page제작","level":2,"id":"3._상세_인입_정보_저장으로_ADMIN통계_page제작"},{"heading":"목적","level":1,"id":"목적"},{"heading":"데이터 모델 구상","level":1,"id":"*데이터_모델_구상*"},{"heading":"고려사항","level":1,"id":"*고려사항*"},{"heading":"1. 추적을 얼마나 디테일하게 저장할지?","level":2,"id":"1._추적을_얼마나_디테일하게_저장할지?"},{"heading":"2. 디테일한 로그에 대한 부하분산은 어떻게 할지?","level":2,"id":"2._디테일한_로그에_대한_부하분산은_어떻게_할지?"},{"heading":"3. 인입시점이 아닌 동작에대한 unique값을 어떻게 지정할지?","level":2,"id":"3._인입시점이_아닌_동작에대한_unique값을_어떻게_지정할지?"},{"heading":"정리","level":1,"id":"정리"},{"heading":"1. 첫 외부 URL진입 시점엔 controller redirect로직 으로 로그 쌓기 / 쿠키 셋팅 => 이후 AOP 공통로직 화","level":3,"id":"1._첫_외부_URL진입_시점엔_controller_redirect로직_으로_==로그_쌓기==_/_==쿠키_셋팅==_=>_이후_AOP_공통로직_화"},{"heading":"2. 이후 동작에 대해 쿠기값 비교 / AOP 로그 쌓기 공통 실행","level":3,"id":"2._이후_동작에_대해_==쿠기값_비교==_/_==AOP_로그_쌓기_공통_실행=="},{"heading":"Spring AOP 사용 이유","level":2,"id":"**Spring_AOP_사용_이유**"},{"heading":"어떻게 자신의 메인 테이블을 찾을것인가?","level":4,"id":"어떻게_자신의_메인_테이블을_찾을것인가?"},{"heading":"Path를 명시적으로 설정하여 주지 않았을 때, 쿠키가 등록되지 않는 이유","level":1,"id":"Path를_명시적으로_설정하여_주지_않았을_때,_쿠키가_등록되지_않는_이유"},{"heading":"현재는 하위 URL이 아니기 때문에 경로를 명시적으로 설정해주어야 한다.","level":2,"id":"현재는_하위_URL이_아니기_때문에_경로를_명시적으로_설정해주어야_한다."},{"heading":"1. Pointcut 객체에 동적으로 enum에서 미리 선언한 값 execution으로 삽입하기","level":2,"id":"1._Pointcut_객체에_동적으로_enum에서_미리_선언한_값_execution으로_삽입하기"},{"heading":"(이후 ADMIN 관리를 위해 enum객체 -> DB 데이터화 )","level":3,"id":"**(이후_ADMIN_관리를_위해_enum객체_->_DB_데이터화_)**"},{"heading":"@Pointcut 어노테이션은 컴파일 시점에 고정된 문자열로 정의된 포인트컷 표현식을 기반으로 동작한다.","level":1,"id":"`@Pointcut`_어노테이션은_컴파일_시점에_고정된_문자열로_정의된_포인트컷_표현식을_기반으로_동작한다."},{"heading":"이를 해결할 방법은?","level":3,"id":"이를_해결할_방법은?"},{"heading":"프록시 기반 동적 포인트컷 생성방식","level":1,"id":"프록시_기반_동적_포인트컷_생성방식"},{"heading":"customAdvisor를 사용한 동적 포인트컷 생성방식","level":1,"id":"customAdvisor를_사용한_동적_포인트컷_생성방식"},{"heading":"위 코드의 DefaultAdvisorAutoProxyCreator객체가 조건에 부합하는 빈에 대해 자동으로 프록시를 생성하여 Advice를 적용한다.","level":4,"id":"위_코드의_`DefaultAdvisorAutoProxyCreator`객체가_조건에_부합하는_빈에_대해_자동으로_프록시를_생성하여_`Advice`를_적용한다."},{"heading":"DefaultAdvisorAutoProxyCreator는 어떻게 customAdvisor의 조건에 부합하는 빈을 찾나?","level":1,"id":"`DefaultAdvisorAutoProxyCreator`는_어떻게_`customAdvisor`의_조건에_부합하는_빈을_찾나?"},{"heading":"클래스에 인터페이스가 있으면 JDK 동적 프록시, 인터페이스가 없으면 CGLIB 프록시","level":2,"id":"클래스에_인터페이스가_있으면_JDK_동적_프록시,_인터페이스가_없으면_CGLIB_프록시"},{"heading":"@EnableAspectJAutoProxy 어노테이션을 사용한다면, 빈 최초등록시 자동으로 판단하여 해당 프록시 객체를 적용할 수 있다.","level":3,"id":"@EnableAspectJAutoProxy_어노테이션을_사용한다면,_빈_최초등록시_자동으로_판단하여_해당_프록시_객체를_적용할_수_있다."},{"heading":"프록시?","level":1,"id":"프록시?"},{"heading":"프록시(Proxy)란?","level":3,"id":"프록시(Proxy)란?"},{"heading":"핵심 개념:","level":4,"id":"핵심_개념"},{"heading":"StaticMethodMatcherPointcut에서 사용가능한 호출 고유정보","level":1,"id":"StaticMethodMatcherPointcut에서_사용가능한_호출_고유정보"},{"heading":"타겟 클래스 / 메서드명 / 파라미터 / 어노테이션","level":2,"id":"타겟_클래스_/_메서드명_/_파라미터_/_어노테이션"},{"heading":"메서드 검증 포인트 컷 추가 후 빌드 시간","level":2,"id":"메서드_검증_포인트_컷_추가_후_빌드_시간"},{"heading":"ENUM객체에, 고유한 정보를 넣어주면 자동 집계가 시작된다","level":1,"id":"ENUM객체에,_고유한_정보를_넣어주면_자동_집계가_시작된다"},{"heading":"customAdvice에 등록된 invoke함수는 Pointcut의 조건에 부합하는 메서드의 정보만을 가져온다.","level":3,"id":"customAdvice에_등록된_invoke함수는_Pointcut의_조건에_부합하는_메서드의_정보만을_가져온다."},{"heading":"케이스 정리","level":1,"id":"케이스_정리"},{"heading":"1. Pointcut에 있는 메서드이며, \"p\"파라미터가 있을때,","level":2,"id":"1._Pointcut에_있는_메서드이며,_`\"p\"파라미터`가_있을때,"},{"heading":"1.1 현재 쿠키에 hitCode / hitUid 가 없을때","level":3,"id":"1.1_현재_쿠키에_`hitCode`_/_`hitUid`_가_없을때"},{"heading":"1.2 현재 쿠키에 hitCode / hitUid 가 있을때","level":3,"id":"1.2_현재_쿠키에_`hitCode`_/_`hitUid`_가_있을때"},{"heading":"2. Pointcut에 있는 메서드이며,\"p\"파라미터가 없을때,","level":2,"id":"2._Pointcut에_있는_메서드이며,`\"p\"파라미터`가_없을때,"},{"heading":"2.1 현재 쿠키에 hitCode / hitUid 가 둘다 없을때","level":3,"id":"2.1_현재_쿠키에_`hitCode`_/_`hitUid`_가_둘다_없을때"},{"heading":"2.2 현재 쿠키에 hitUid 또는 hitUid 가 있을때","level":3,"id":"2.2_현재_쿠키에_`hitUid`_또는_`hitUid`_가_있을때"},{"heading":"중복 데이터 조회와 저장 사이의 타이밍 차이","level":4,"id":"**중복_데이터_조회와_저장_사이의_타이밍_차이**"},{"heading":"해결방법","level":2,"id":"해결방법"},{"heading":"결과","level":1,"id":"**결과**"},{"heading":"이후 PointCut에서 service 생성자 주입으로, DB에서 값로드 형식으로 변경","level":1,"id":"이후_PointCut에서_service_생성자_주입으로,_DB에서_값로드_형식으로_변경"},{"heading":"ENUM객체에서 DB로 전환","level":1,"id":"ENUM객체에서_DB로_전환"},{"heading":"다음 방법을 통해 DB로 admin과 app을 모두 관리 가능하도록 수정.","level":3,"id":"다음_방법을_통해_DB로_admin과_app을_모두_관리_가능하도록_수정."},{"heading":"고민","level":1,"id":"**고민**"},{"heading":"AOP위빙 방식을 활용해, 동적으로 원하는 시간에 Pointcut에 조건에 해당하는 메서드를 다시 설정할 수 있을까?","level":2,"id":"AOP위빙_방식을_활용해,_동적으로_원하는_시간에_Pointcut에_조건에_해당하는_메서드를_다시_설정할_수_있을까?"},{"heading":"pointcut도 런타임에 변경이 가능하잖아? 런타임 위빙이니까?","level":2,"id":"pointcut도_런타임에_변경이_가능하잖아?_런타임_위빙이니까?"},{"heading":"이때, 런타임단계 라고 하지만 applicationContext가 bean들의 의존성주입을 마치기 이전에 동작하게 된다. 즉, 임의로 나중에 변경할 수 가 없다는 말이다.","level":4,"id":"이때,_==런타임단계==_라고_하지만_applicationContext가_bean들의_의존성주입을_마치기_이전에_동작하게_된다._즉,_임의로_나중에_변경할_수_가_없다는_말이다."},{"heading":"- 그렇기 때문에, pointcut에서 @Autowired를 통해 service를 주입받지 못하였다. *","level":5,"id":"*_그렇기_때문에,_pointcut에서_@Autowired를_통해_service를_주입받지_못하였다._*"},{"heading":"해결방법은 없을까?","level":2,"id":"해결방법은_없을까?"},{"heading":"1. appcontext에서 빈 전체 초기화","level":3,"id":"1._appcontext에서_빈_전체_초기화"},{"heading":"bean을 모두 refresh한다면 의존성이 깨지지 않고 런타입환경에서 AOP를 재적용 할수 있지 않을까?","level":4,"id":"bean을_모두_refresh한다면_의존성이_깨지지_않고_런타입환경에서_AOP를_재적용_할수_있지_않을까?"},{"heading":"2. 원하는 bean객체만 초기화","level":3,"id":"2._원하는_bean객체만_초기화"},{"heading":"의존 관계가 깨지는 영향도를 고려 할 수 없다.","level":4,"id":"의존_관계가_깨지는_영향도를_고려_할_수_없다."},{"heading":"3. Filter를 사용한다.","level":3,"id":"3._Filter를_사용한다."},{"heading":"종단으로 나두는 AOP에서 횡단으로 나누는 필터를 적용한다면 적용 범위가 전체 범위로 확장되어 오버헤드가 크게 증가할 수 있다.","level":4,"id":"종단으로_나두는_AOP에서_횡단으로_나누는_필터를_적용한다면_적용_범위가_전체_범위로_확장되어_오버헤드가_크게_증가할_수_있다."},{"heading":"결론","level":2,"id":"결론"},{"heading":"+ 추가사항","level":1,"id":"*+_추가사항*"},{"heading":"원인?","level":1,"id":"원인?"},{"heading":"해결법?","level":1,"id":"해결법?"},{"heading":"1. redirect -> 하이퍼링크 기반 Replace로 변경하기?","level":3,"id":"1._redirect_->_하이퍼링크_기반_Replace로_변경하기?"},{"heading":"2. 외부유입 페이지를 삭제하고, 메인페이지에서 내부 통계로 변경","level":3,"id":"2._외부유입_페이지를_삭제하고,_메인페이지에서_내부_통계로_변경"},{"heading":"3. 네이버 아날리틱스가 물고있는 Referrer를 찾아 HttpServletResponse에 함께 담아 redirect 하기.","level":3,"id":"3._네이버_아날리틱스가_물고있는_Referrer를_찾아_HttpServletResponse에_함께_담아_redirect_하기."},{"heading":"- 세 해결법 모두 내부망/외부망 분리로 인하여 운영서버에 반영 전, 확실한 테스트가 불가능 하기 때문에 신중한 선택이 필요하다.","level":4,"id":"-_세_해결법_모두_내부망/외부망_분리로_인하여_운영서버에_반영_전,_확실한_테스트가_불가능_하기_때문에_신중한_선택이_필요하다."},{"heading":"방법 1 하이퍼링크 기반 Replace로 변경하기","level":2,"id":"방법_1_하이퍼링크_기반_Replace로_변경하기"},{"heading":"=> 정상적으로 집계 되었다.","level":1,"id":"=>_<font_color=\"#9bbb59\">정상적으로_집계_되었다.</font>"},{"heading":"방법 3 네이버 아날리틱스가 물고있는 Referrer를 찾아 HttpServletResponse에 함께 담아 redirect 하기.","level":1,"id":"방법_3_네이버_아날리틱스가_물고있는_Referrer를_찾아_HttpServletResponse에_함께_담아_redirect_하기."},{"heading":"sp/loan(대출페이지)에서 referrer넘기기","level":1,"id":"sp/loan(대출페이지)에서_referrer넘기기"},{"heading":"[부록]","level":2,"id":"[부록]"},{"heading":"▶ 👩‍👧‍👦 Analytics 공통모듈 ADMIN용 데이터 추출","level":2,"id":"▶_[[👩‍👧‍👦_Analytics_공통모듈_ADMIN용_데이터_추출]]"}],"backlinks":[],"links":["?query=tag:%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8","?query=tag:%EA%B0%9C%EB%B0%9C","?query=tag:DB","?query=tag:SPRING","?query=tag:AOP","project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#👩‍👧‍👦 marketing Analytics 공통모듈 제작기","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#1._기존_**js_하드코딩**_되어있던_통계_로직_**SpringAOP**_공통화","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#2._Hit체크_동작_데이터_삽입_후_**프록시_등록**","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#3._상세_인입_정보_저장으로_ADMIN통계_page제작","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#목적","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#*데이터_모델_구상*","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#*고려사항*","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#1._추적을_얼마나_디테일하게_저장할지?","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#2._디테일한_로그에_대한_부하분산은_어떻게_할지?","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#3._인입시점이_아닌_동작에대한_unique값을_어떻게_지정할지?","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#정리","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#1._첫_외부_URL진입_시점엔_controller_redirect로직_으로_==로그_쌓기==_/_==쿠키_셋팅==_=>_이후_AOP_공통로직_화","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#2._이후_동작에_대해_==쿠기값_비교==_/_==AOP_로그_쌓기_공통_실행==","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#**Spring_AOP_사용_이유**","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#어떻게_자신의_메인_테이블을_찾을것인가?","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#Path를_명시적으로_설정하여_주지_않았을_때,_쿠키가_등록되지_않는_이유","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#현재는_하위_URL이_아니기_때문에_경로를_명시적으로_설정해주어야_한다.","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#1._Pointcut_객체에_동적으로_enum에서_미리_선언한_값_execution으로_삽입하기","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#**(이후_ADMIN_관리를_위해_enum객체_->_DB_데이터화_)**","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#`@Pointcut`_어노테이션은_컴파일_시점에_고정된_문자열로_정의된_포인트컷_표현식을_기반으로_동작한다.","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#이를_해결할_방법은?","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#프록시_기반_동적_포인트컷_생성방식","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#customAdvisor를_사용한_동적_포인트컷_생성방식","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#위_코드의_`DefaultAdvisorAutoProxyCreator`객체가_조건에_부합하는_빈에_대해_자동으로_프록시를_생성하여_`Advice`를_적용한다.","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#`DefaultAdvisorAutoProxyCreator`는_어떻게_`customAdvisor`의_조건에_부합하는_빈을_찾나?","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#클래스에_인터페이스가_있으면_JDK_동적_프록시,_인터페이스가_없으면_CGLIB_프록시","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#@EnableAspectJAutoProxy_어노테이션을_사용한다면,_빈_최초등록시_자동으로_판단하여_해당_프록시_객체를_적용할_수_있다.","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#프록시?","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#프록시(Proxy)란?","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#핵심_개념","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#StaticMethodMatcherPointcut에서_사용가능한_호출_고유정보","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#타겟_클래스_/_메서드명_/_파라미터_/_어노테이션","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#메서드_검증_포인트_컷_추가_후_빌드_시간","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#ENUM객체에,_고유한_정보를_넣어주면_자동_집계가_시작된다","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#customAdvice에_등록된_invoke함수는_Pointcut의_조건에_부합하는_메서드의_정보만을_가져온다.","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#케이스_정리","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#1._Pointcut에_있는_메서드이며,_`\"p\"파라미터`가_있을때,","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#1.1_현재_쿠키에_`hitCode`_/_`hitUid`_가_없을때","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#1.2_현재_쿠키에_`hitCode`_/_`hitUid`_가_있을때","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#2._Pointcut에_있는_메서드이며,`\"p\"파라미터`가_없을때,","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#2.1_현재_쿠키에_`hitCode`_/_`hitUid`_가_둘다_없을때","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#2.2_현재_쿠키에_`hitUid`_또는_`hitUid`_가_있을때","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#**중복_데이터_조회와_저장_사이의_타이밍_차이**","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#해결방법","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#**결과**","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#이후_PointCut에서_service_생성자_주입으로,_DB에서_값로드_형식으로_변경","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#ENUM객체에서_DB로_전환","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#다음_방법을_통해_DB로_admin과_app을_모두_관리_가능하도록_수정.","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#**고민**","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#AOP위빙_방식을_활용해,_동적으로_원하는_시간에_Pointcut에_조건에_해당하는_메서드를_다시_설정할_수_있을까?","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#pointcut도_런타임에_변경이_가능하잖아?_런타임_위빙이니까?","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#이때,_==런타임단계==_라고_하지만_applicationContext가_bean들의_의존성주입을_마치기_이전에_동작하게_된다._즉,_임의로_나중에_변경할_수_가_없다는_말이다.","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#*_그렇기_때문에,_pointcut에서_@Autowired를_통해_service를_주입받지_못하였다._*","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#해결방법은_없을까?","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#1._appcontext에서_빈_전체_초기화","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#bean을_모두_refresh한다면_의존성이_깨지지_않고_런타입환경에서_AOP를_재적용_할수_있지_않을까?","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#2._원하는_bean객체만_초기화","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#의존_관계가_깨지는_영향도를_고려_할_수_없다.","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#3._Filter를_사용한다.","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#종단으로_나두는_AOP에서_횡단으로_나누는_필터를_적용한다면_적용_범위가_전체_범위로_확장되어_오버헤드가_크게_증가할_수_있다.","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#결론","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#*+_추가사항*","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#원인?","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#해결법?","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#1._redirect_->_하이퍼링크_기반_Replace로_변경하기?","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#2._외부유입_페이지를_삭제하고,_메인페이지에서_내부_통계로_변경","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#3._네이버_아날리틱스가_물고있는_Referrer를_찾아_HttpServletResponse에_함께_담아_redirect_하기.","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#-_세_해결법_모두_내부망/외부망_분리로_인하여_운영서버에_반영_전,_확실한_테스트가_불가능_하기_때문에_신중한_선택이_필요하다.","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#방법_1_하이퍼링크_기반_Replace로_변경하기","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#=>_<font_color=\"#9bbb59\">정상적으로_집계_되었다.</font>","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#방법_3_네이버_아날리틱스가_물고있는_Referrer를_찾아_HttpServletResponse에_함께_담아_redirect_하기.","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#sp/loan(대출페이지)에서_referrer넘기기","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#[부록]","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html#▶_[[👩‍👧‍👦_Analytics_공통모듈_ADMIN용_데이터_추출]]"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html","pathToRoot":"../..","createdTime":1739783337843,"modifiedTime":1741567717373,"sourceSize":19371,"sourcePath":"project/hello marketing/👩‍👧‍👦 marketing Analytics 공통모듈 제작기.md","exportPath":"project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20241224144309.png","사진-및-문서/pasted-image-20241226111559.png","사진-및-문서/pasted-image-20250102160223.png","사진-및-문서/pasted-image-20241226152219.png","사진-및-문서/pasted-image-20241226171158.png","사진-및-문서/pasted-image-20241230135801.png","사진-및-문서/pasted-image-20250102160213.png","사진-및-문서/pasted-image-20250226145129.png"]},"project/note-ci_cd/⛈-obsidian-aws연동.html":{"title":"⛈ Obsidian-AWS연동","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:프로젝트\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#프로젝트</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:개발\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#개발</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Hosting\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Hosting</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Obsidian\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Obsidian</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:CI/CD\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#CI/CD</a> <br> <a href=\"http://lts.kr?query=tag:프로젝트\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#프로젝트\">#프로젝트</a> <a href=\"http://lts.kr?query=tag:개발\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#개발\">#개발</a> <a href=\"http://lts.kr?query=tag:Hosting\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Hosting\">#Hosting</a> <a href=\"http://lts.kr?query=tag:Obsidian\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Obsidian\">#Obsidian</a> <a href=\"http://lts.kr?query=tag:CI/CD\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#CI/CD\">#CI/CD</a><br>추가예정.","aliases":[],"tags":["#프로젝트","#개발","#Hosting","#Obsidian","#CI/CD"],"headers":[{"heading":"⛈ Obsidian-AWS연동","level":1,"id":"⛈ Obsidian-AWS연동"}],"backlinks":[],"links":["?query=tag:%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8","?query=tag:%EA%B0%9C%EB%B0%9C","?query=tag:Hosting","?query=tag:Obsidian","?query=tag:CI/CD","project/note-ci_cd/⛈-obsidian-aws연동.html#⛈ Obsidian-AWS연동"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/project/note-ci_cd/⛈-obsidian-aws연동.html","pathToRoot":"../..","createdTime":1740035686504,"modifiedTime":1740558017469,"sourceSize":95,"sourcePath":"project/note CI_CD/⛈ Obsidian-AWS연동.md","exportPath":"project/note-ci_cd/⛈-obsidian-aws연동.html","showInTree":true,"treeOrder":0,"attachments":[]},"project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html":{"title":"👻 Obsidian 정적호스팅 CICD 과정","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:프로젝트\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#프로젝트</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:개발\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#개발</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Hosting\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Hosting</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Obsidian\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Obsidian</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:CI/CD\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#CI/CD</a> <br> <a href=\"http://lts.kr?query=tag:프로젝트\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#프로젝트\">#프로젝트</a> <a href=\"http://lts.kr?query=tag:개발\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#개발\">#개발</a> <a href=\"http://lts.kr?query=tag:Hosting\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Hosting\">#Hosting</a> <a href=\"http://lts.kr?query=tag:Obsidian\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Obsidian\">#Obsidian</a> <a href=\"http://lts.kr?query=tag:CI/CD\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#CI/CD\">#CI/CD</a><br> 먼저 옵시디언(Obsidian)에 대한 정보를 확인하고 싶다면.<br>정보!\n현재 보고있는 해당 사이트는 Obsidian앱의 지속적인 통합(CI), 지속적인 배포(CD)를 구현한 사이트이다. <br>아주 기본적인 셋팅이므로, 이후 커스텀은 각자의 취향대로 진행하면 될 것이다.\n<br>WAS가 아닌 WEB 정적 호스팅을 위한 셋팅이다. <br><img alt=\"Pasted image 20250218151731.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218151731.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250218151806.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218151806.png\" target=\"_self\"><br>이후 해당 위치에 Git을 생성해 줄 것이다.\n<br><img alt=\"Pasted image 20250218152044.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218152044.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250218152103.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218152103.png\" target=\"_self\"><br>\n<br>이전 생성한 옵시디언 폴더로 이동한다.\n<br>&gt; cd C:\\이하경로\\obsidian\\TEST\n<br><img alt=\"Pasted image 20250218153131.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218153131.png\" target=\"_self\"><br>깃 파일 생성<br>\n해당 과정전 pc에 Git이 설치되어 있어야한다. (방법은 알아서)\n<br>&gt; git init\n<br><img alt=\"Pasted image 20250218153319.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218153319.png\" target=\"_self\"><br>깃 레포에 연결\n<br>&gt; git remote add origin https://github.com/LeeTaeSung0628/obsidian_Test.git\n<br><img alt=\"Pasted image 20250218153445.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218153445.png\" target=\"_self\"><br>옵시디언 레포에 올리기\n<br>&gt; git add . &gt; git commit -m \"initial commit\" &gt; git push -u origin master\n<br><img alt=\"Pasted image 20250218153543.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218153543.png\" target=\"_self\"><img alt=\"Pasted image 20250218153553.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218153553.png\" style=\"width: 700px; max-width: 100%;\" target=\"_self\"><br>여기까지 따라왔다면, 옵시디언 파일을 git 레포지토리에 저장하는 것 까지 마칠 수 있다.<br><img alt=\"Pasted image 20250218151330.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218151330.png\" style=\"width: 1050px; max-width: 100%;\" target=\"_self\"><br>\n옵시디언의 Git플러그인이다. 기본적인 커밋 푸시 및 셋팅이 가능하다.<br>기능은 제한적이기 때문에, GitDesktop이나, Cmd에서 직접 Git을 셋팅하는것을 추천한다.\n<br>이후 셋팅이 완료되었을 때 배포 자동화를 위해 사용하면 편리하다.\n<br><img alt=\"Pasted image 20250218153814.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218153814.png\" style=\"width: 775px; max-width: 100%;\" target=\"_self\"><img alt=\"Pasted image 20250218153858.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218153858.png\" target=\"_self\"><br>이전에 생성한 깃 파일의 주소가 들어가면 된다.\n<br>C:\\Users\\경로\\obsidian\\TEST\\.git\n<br><img alt=\"Pasted image 20250218154352.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218154352.png\" style=\"width: 875px; max-width: 100%;\" target=\"_self\"><br>또한 설정에서 오토 커밋/푸시/풀 설정을 통해 지속 적인 통합 셋팅이 가능하다.<br>\n<img alt=\"Pasted image 20250218154433.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218154433.png\" style=\"width: 725px; max-width: 100%;\" target=\"_self\">\n<br>주의\n해당 디렉토리에 .gitignore 파일 및 세부적인 git셋팅은 자유롭게 진행하면 된다.<br>\n옵시디언은 캐쉬파일로 인한 충돌이 잦기 때문에 상세히 설정하는 것을 추천한다.\n<br><img alt=\"Pasted image 20250218154615.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218154615.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250218154633.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218154633.png\" target=\"_self\"><br>정상적으로 푸시 완료.<br>\n<img alt=\"Pasted image 20250218154647.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218154647.png\" target=\"_self\">\n<br>\n<br>해당 Git 레포는 옵시디언의 마크다운(md파일)자체를 저장하고 관리하는 레포다.\n<br>정적 컨텐츠 호스팅을 위한 레포지토리를 추가적으로 생성하여 줄 것이다.\n<br>\n<br>여러 방법이 있지만, md파일을 기반으로 배포가능한 형태의 HTML파일을 생성해주는 플러그인을 사용할 것이다.<br>\n<img alt=\"Pasted image 20250218155524.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218155524.png\" target=\"_self\">\n<br>다양한 옵션을 지원하지만, 오늘은 기본적인 기능만 설명하겠다.\n<br>Control + P -&gt; export 를 검색\n<br><img alt=\"Pasted image 20250218160328.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218160328.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250218160359.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218160359.png\" target=\"_self\"><br>폴더 생성 후 익스포트 한다.\n<br>주의\n이때 처음엔 index페이지를 생성하고, 추후 삭제하는 것을 추천(Netlify는 index가 필수)\n<br><img alt=\"Pasted image 20250218160428.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218160428.png\" target=\"_self\"><img alt=\"Pasted image 20250218160532.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218160532.png\" target=\"_self\"><br>생성한 새 디렉토리에 정상적으로 생성된것을 볼 수 있다.\n<br>\n<br>배포용 HTML파일 레포지토리<br>\n<img alt=\"Pasted image 20250218160956.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218160956.png\" target=\"_self\">\n<br>\n<br>Netlify 정적 호스팅 서비스를 사용하여 Git 레포를 배포하겠다.\n<br><a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.netlify.com/\" target=\"_self\">https://www.netlify.com/</a><br>\n위 사이트로 접속하여 로그인 한 후, 깃 레포에 Netlify서비스를 적용한다.\n1.깃허브를 선택한다.<br>\n<img alt=\"Pasted image 20250218161424.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218161424.png\" style=\"width: 750px; max-width: 100%;\" target=\"_self\"><br>\n2.배포용 옵시디언 레포를 선택한 후, SAVE를 누른다.<br>\n<img alt=\"Pasted image 20250218161515.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218161515.png\" target=\"_self\"><br>\n3.site_name을 설정하고 Deploy를 누른다.<br>\n<img alt=\"Pasted image 20250218161728.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218161728.png\" target=\"_self\"><br>\n정적웹사이트를 위한 셋팅으로 이외의 값은 공란으로 두어도 무방하다. <br>\n그리고 기다리면...<br>\n<img alt=\"Pasted image 20250218161824.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218161824.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250218161847.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218161847.png\" target=\"_self\"> <br>\n<br>배포가 완료되고, 주소를 입력하여 확인이 가능하다.<br>\n<img alt=\"Pasted image 20250218161937.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218161937.png\" target=\"_self\">\n<br>\n<br>커뮤니티 플러그인\n<br>인덱스페이지\n<br>테마\n<br>etc..\n<br>\n<br>본인의 경우에는 로컬 Obsidian에 민감정보를 포함하고 있으므로,<br>\n정적 호스팅 전, public한 Vault 레포지토리를 거쳐 배포되도록 관리하고 있다.<br>\n<img alt=\"Pasted image 20250218162355.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218162355.png\" style=\"width: 875px; max-width: 100%;\" target=\"_self\"> 좌 : 프라이빗 볼트 / 우 : 퍼블릭 볼트 <br>이렇게 사이트 배포가 완료되었다!<br>\n<img alt=\"do-messenger_screenshot_2025-02-19_16_19_04.png\" src=\"http://lts.kr/사진-및-문서/do-messenger_screenshot_2025-02-19_16_19_04.png\" target=\"_self\"><br>주의 <br>현재 Export HTML 1.8.01 버전 기준으로 export된 HTML css에 오류가 있다. <br>BRAT 플러그인을 사용하여 버전 업(베타) 하여 해결<br>\n<img alt=\"Pasted image 20250219154331.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250219154331.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250219154315.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250219154315.png\" target=\"_self\">","aliases":[],"tags":["#프로젝트","#개발","#Hosting","#Obsidian","#CI/CD"],"headers":[{"heading":"👻 Obsidian 정적호스팅 CICD 과정","level":1,"id":"👻 Obsidian 정적호스팅 CICD 과정"},{"heading":"개요","level":1,"id":"개요"},{"heading":"→ 여기로 🎵 Obsidian","level":1,"id":"→_**여기로**_[[🎵_Obsidian]]"},{"heading":"목차","level":1,"id":"목차"},{"heading":"1. 지속적인 통합","level":2,"id":"1._지속적인_통합"},{"heading":"1.1 옵시디언과 Git 연동","level":3,"id":"1.1_옵시디언과_Git_연동"},{"heading":"1.2 Git자동 통합 셋팅","level":3,"id":"1.2_Git자동_통합_셋팅"},{"heading":"2. 지속적인 배포","level":2,"id":"2._지속적인_배포"},{"heading":"2.1 옵시디언 배포파일 생성/배포","level":3,"id":"2.1_옵시디언_배포파일_생성/배포"},{"heading":"2.2 Netlify와 Git 연동","level":3,"id":"2.2_Netlify와_Git_연동"},{"heading":"3. 배포 확인","level":2,"id":"3._배포_확인"},{"heading":"1. 지속적인 통합","level":2,"id":"1._지속적인_통합"},{"heading":"1.1 옵시디언과 Git 연동","level":3,"id":"1.1_옵시디언과_Git_연동"},{"heading":"옵시디언 파일을 생성하면, 다음과 같은 화면을 볼 수 있다.","level":4,"id":"옵시디언_파일을_생성하면,_다음과_같은_화면을_볼_수_있다."},{"heading":"Git repository 생성하기","level":4,"id":"Git_repository_생성하기"},{"heading":"옵시디언과 Git 레포 연동하기","level":4,"id":"옵시디언과_Git_레포_연동하기"},{"heading":"1.2 Git자동 배포 셋팅","level":3,"id":"1.2_Git자동_배포_셋팅"},{"heading":"이전에 생성한 옵시디언 app에서 Git플러그인을 설치한다.","level":4,"id":"이전에_생성한_옵시디언_app에서_Git플러그인을_설치한다."},{"heading":"설치후 플러그인 셋팅 → 깃 디렉토리를 설정해주자.","level":4,"id":"설치후_플러그인_셋팅_→_깃_디렉토리를_설정해주자."},{"heading":"연결이 완료되면 우측에서 변경사항 및 간단한 커밋/푸시/풀 동작이 가능하다.","level":4,"id":"연결이_완료되면_우측에서_변경사항_및_간단한_커밋/푸시/풀_동작이_가능하다."},{"heading":"푸시 테스트","level":4,"id":"푸시_테스트"},{"heading":"2. 지속적인 배포","level":2,"id":"2._지속적인_배포"},{"heading":"2.1 옵시디언 배포파일 생성/배포","level":3,"id":"2.1_옵시디언_배포파일_생성/배포"},{"heading":"옵시디언 배포파일 생성하기","level":4,"id":"옵시디언_배포파일_생성하기"},{"heading":"이렇게 생성한 배포용 파일은 1. 지속적인 통합과 같은 방법으로 깃에 올리면 된다.","level":4,"id":"이렇게_생성한_배포용_파일은_`1._지속적인_통합`과_같은_방법으로_깃에_올리면_된다."},{"heading":"2.2 Netlify와 Git 연동","level":3,"id":"2.2_Netlify와_Git_연동"},{"heading":"3. 배포 확인","level":2,"id":"3._배포_확인"},{"heading":"이후 해당 사항들은 자유로운 커스텀이 가능하다.","level":4,"id":"이후_해당_사항들은_자유로운_커스텀이_가능하다."},{"heading":"참고사항","level":5,"id":"참고사항"},{"heading":"최종","level":1,"id":"최종"},{"heading":"+ 추가","level":1,"id":"*+_추가*"}],"backlinks":[],"links":["?query=tag:%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8","?query=tag:%EA%B0%9C%EB%B0%9C","?query=tag:Hosting","?query=tag:Obsidian","?query=tag:CI/CD","tools/🎵-obsidian.html","https://www.netlify.com/","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#👻 Obsidian 정적호스팅 CICD 과정","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#개요","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#→_**여기로**_[[🎵_Obsidian]]","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#목차","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#1._지속적인_통합","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#1.1_옵시디언과_Git_연동","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#1.2_Git자동_통합_셋팅","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#2._지속적인_배포","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#2.1_옵시디언_배포파일_생성/배포","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#2.2_Netlify와_Git_연동","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#3._배포_확인","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#1._지속적인_통합","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#1.1_옵시디언과_Git_연동","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#옵시디언_파일을_생성하면,_다음과_같은_화면을_볼_수_있다.","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#Git_repository_생성하기","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#옵시디언과_Git_레포_연동하기","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#1.2_Git자동_배포_셋팅","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#이전에_생성한_옵시디언_app에서_Git플러그인을_설치한다.","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#설치후_플러그인_셋팅_→_깃_디렉토리를_설정해주자.","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#연결이_완료되면_우측에서_변경사항_및_간단한_커밋/푸시/풀_동작이_가능하다.","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#푸시_테스트","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#2._지속적인_배포","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#2.1_옵시디언_배포파일_생성/배포","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#옵시디언_배포파일_생성하기","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#이렇게_생성한_배포용_파일은_`1._지속적인_통합`과_같은_방법으로_깃에_올리면_된다.","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#2.2_Netlify와_Git_연동","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#3._배포_확인","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#이후_해당_사항들은_자유로운_커스텀이_가능하다.","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#참고사항","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#최종","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html#*+_추가*"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html","pathToRoot":"../..","createdTime":1739783693575,"modifiedTime":1741573960767,"sourceSize":6394,"sourcePath":"project/note CI_CD/👻 Obsidian 정적호스팅 CICD 과정.md","exportPath":"project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20250218151731.png","사진-및-문서/pasted-image-20250218151806.png","사진-및-문서/pasted-image-20250218152044.png","사진-및-문서/pasted-image-20250218152103.png","사진-및-문서/pasted-image-20250218153131.png","사진-및-문서/pasted-image-20250218153319.png","사진-및-문서/pasted-image-20250218153445.png","사진-및-문서/pasted-image-20250218153543.png","사진-및-문서/pasted-image-20250218153553.png","사진-및-문서/pasted-image-20250218151330.png","사진-및-문서/pasted-image-20250218153814.png","사진-및-문서/pasted-image-20250218153858.png","사진-및-문서/pasted-image-20250218154352.png","사진-및-문서/pasted-image-20250218154433.png","사진-및-문서/pasted-image-20250218154615.png","사진-및-문서/pasted-image-20250218154633.png","사진-및-문서/pasted-image-20250218154647.png","사진-및-문서/pasted-image-20250218155524.png","사진-및-문서/pasted-image-20250218160328.png","사진-및-문서/pasted-image-20250218160359.png","사진-및-문서/pasted-image-20250218160428.png","사진-및-문서/pasted-image-20250218160532.png","사진-및-문서/pasted-image-20250218160956.png","사진-및-문서/pasted-image-20250218161424.png","사진-및-문서/pasted-image-20250218161515.png","사진-및-문서/pasted-image-20250218161728.png","사진-및-문서/pasted-image-20250218161824.png","사진-및-문서/pasted-image-20250218161847.png","사진-및-문서/pasted-image-20250218161937.png","사진-및-문서/pasted-image-20250218162355.png","사진-및-문서/do-messenger_screenshot_2025-02-19_16_19_04.png","사진-및-문서/pasted-image-20250219154331.png","사진-및-문서/pasted-image-20250219154315.png"]},"project/💻-프로젝트.html":{"title":"💻 프로젝트","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:프로젝트\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#프로젝트</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:모음\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#모음</a> <br> <a href=\"http://lts.kr?query=tag:프로젝트\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#프로젝트\">#프로젝트</a> <a href=\"http://lts.kr?query=tag:모음\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#모음\">#모음</a><br>프로젝트\npublic하게 공개할 수 있는 프로젝트의 제작 과정입니다.\n<br>\n<br><a data-href=\"🏹 예치금 차액 비교 Spring Batch 리펙토링\" href=\"http://lts.kr/project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🏹 예치금 차액 비교 Spring Batch 리펙토링</a>⭐\n<br><a data-href=\"🏹 예치금 차액 비교 Spring Batch 리펙토링 부록\" href=\"http://lts.kr/project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🏹 예치금 차액 비교 Spring Batch 리펙토링 부록</a>\n<br><a data-href=\"✏ Chunk_Partitioning Batch 구조 드로잉\" href=\"http://lts.kr/project/hello-batch/✏-chunk_partitioning-batch-구조-드로잉.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">✏ Chunk_Partitioning Batch 구조 드로잉</a>\n<br>\n<br><a data-href=\"👩‍👧‍👦 marketing Analytics 공통모듈 제작기\" href=\"http://lts.kr/project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">👩‍👧‍👦 marketing Analytics 공통모듈 제작기</a>⭐\n<br><a data-href=\"👩‍👧‍👦 Analytics 공통모듈 ADMIN용 데이터 추출\" href=\"http://lts.kr/project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">👩‍👧‍👦 Analytics 공통모듈 ADMIN용 데이터 추출</a>\n<br>\n<br><a data-href=\"👻 Obsidian 정적호스팅 CICD 과정\" href=\"http://lts.kr/project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">👻 Obsidian 정적호스팅 CICD 과정</a>\n<br><a data-href=\"⛈ Obsidian-AWS연동\" href=\"http://lts.kr/project/note-ci_cd/⛈-obsidian-aws연동.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">⛈ Obsidian-AWS연동</a>\n<br>\n<br><a data-href=\"📘 SpringBoot &amp; Docker + Reids 연동\" href=\"http://lts.kr/tools/docker/📘-springboot-&amp;-docker-+-reids-연동.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">📘 SpringBoot &amp; Docker + Reids 연동</a>\n<br><a data-href=\"🌥 aws(EC2)셋팅부터 배포까지\" href=\"http://lts.kr/tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🌥 aws(EC2)셋팅부터 배포까지</a>","aliases":[],"tags":["#프로젝트","#모음"],"headers":[{"heading":"💻 프로젝트","level":1,"id":"💻 프로젝트"},{"heading":"🍃 Spring Batch⭐","level":2,"id":"🍃_*Spring_Batch*⭐"},{"heading":"〽 Spring AOP⭐","level":2,"id":"〽_*Spring_AOP*⭐"},{"heading":"🌍 Obsidian CI/CD","level":1,"id":"🌍_**Obsidian_CI/CD**"},{"heading":"💁 infra settings","level":2,"id":"💁_*infra_settings*"}],"backlinks":[],"links":["?query=tag:%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8","?query=tag:%EB%AA%A8%EC%9D%8C","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html","project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html","project/hello-batch/✏-chunk_partitioning-batch-구조-드로잉.html","project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html","project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html","project/note-ci_cd/⛈-obsidian-aws연동.html","tools/docker/📘-springboot-&-docker-+-reids-연동.html","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html","project/💻-프로젝트.html#💻 프로젝트","project/💻-프로젝트.html#🍃_*Spring_Batch*⭐","project/💻-프로젝트.html#〽_*Spring_AOP*⭐","project/💻-프로젝트.html#🌍_**Obsidian_CI/CD**","project/💻-프로젝트.html#💁_*infra_settings*"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/project/💻-프로젝트.html","pathToRoot":"..","createdTime":1740028413454,"modifiedTime":1741241128511,"sourceSize":763,"sourcePath":"project/💻 프로젝트.md","exportPath":"project/💻-프로젝트.html","showInTree":true,"treeOrder":0,"attachments":[]},"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html":{"title":"🥇 정보처리 기사 실기 키워드","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:정보처리기사\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정보처리기사</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:실기\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#실기</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:키워드\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#키워드</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:정리\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정리</a> <br> <a href=\"http://lts.kr?query=tag:정보처리기사\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정보처리기사\">#정보처리기사</a> <a href=\"http://lts.kr?query=tag:실기\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#실기\">#실기</a> <a href=\"http://lts.kr?query=tag:키워드\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#키워드\">#키워드</a> <a href=\"http://lts.kr?query=tag:정리\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정리\">#정리</a><br>\n<br>시제품을 끊임없이 제작하며 사이클을 반복하는 개발 방법론\n<br>워터폴과 대조적이며, 소프트웨어 개발을 넘어 기업 경영 전반에서 사용되고 있다.\n<br>고객의 변화하는 요구사항과 환경 변화에 능동적인 소프트웨어 개발 방법론\n<br>\n<br>소프트웨어 공학에서 리펙토링(Refactoring)을 하는 목적에 대해 간략히 서술하시오.\n<br>\n리펙토링의 목적은 프로그램을 쉽게 이해하고 수정하여 빠르게 개발할 수 있도록 하기 위함이다.\n<br>\n<br>( 1 ) 요구사항은 시스템이 무엇을 하는지, 어떤 기능을 하는지 등 사용자가 시스템을 통해 제공받기를 원하는 기능이나 시스템이 반드시 수행해야하는 기능을 의미한다.\n<br>( 2 ) 요구사항은 품질이나 제약사항과 관련된 요구사항으로, 시스템의 장비 구성, 성능, 인터페이스, 테스트, 보안 등의 요구사항을 말한다.\n<br>\n<br>UML에 관한 다음 괄호에 공통으로 들어갈 알맞은 용어는?\n<br>( ) 다이어그램은 UML다이어그램중 객체(Object)들을 ( )로 추상화하여 표현하는 다이어그램으로, 대표적인 구조적 다이어그램이다.\n<br>( )는 각각의 객체들이 갖는 속성과 메소드를 표현한 것으로 3개의 구획으로 나눠 이름, 속성, 메서드를 표기한다.\n<br>\n<br>UML은 시스템 분석, 설계, 구현 등 시스템 개발 과정에서 시스템 개발자와 고객 또는 개발자 상호 간의 의사소통이 원활하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어로 사물, ( 1 ), 다이어그램 으로 이루어져있다.\n<br>( 1 )는 사물과 사물사이의 연관성을 표현하는 것으로 연관, 집합, 포함, 일반화 등 다양한 형태의 ( 1 )가 존재한다.\n<br>( 2 )는 UML에 표현되는 사물의 하나로, 객체가 갖는 속성과 동작을 표현한다. 일반적으로 직사각형으로 표현하며, 직사각형 안에 이름, 속성, 동작을 표기한다.\n<br>( 3 )는 ( 2 )와 같은 UML에 표현되는 사물의 하나로, ( 2 )나 컴포넌트의 동작을 모아놓은 것이며, 외부적으로 가시화되는 행동을 표현한다. 단독으로 사용되는 경우는 없으며, ( 3 )구현을 위한 ( 2 )또는 컴포넌트와 함께 사용된다.\n<br>\n<br>관계(Relationship)는 사물과 사물 사이의 연관성을 표현하는 것이다.\n<br>1 - 하나의 사물이 다른 사물에 포함되어 있는 관계로, 전체와 부분으로 구분되어지며, 서로 독립적이다.\n<br>2 - 상위 모듈이 하위 모듈보다 더 일반적인 개념을 가지고 있으며, 하위 모듈이 상위 모듈보다 더 구체적인 개념을 가진다.\n<br>\n[보기]<br>\n-Association(연관 관계) : 객체간의 기본적인 관계를 나타낸다.<br>\n-Dependency(의존 관계) : 한 객체가 다른 객체에 의존하거나 영향을 받는다.<br>\n-Aggregation(집합 관계) : 부분과 전체의 관계를 나타내며, 부분이 독립적으로 존재할 수 있는 경우를 말한다.<br>\n-Realization(실체화 관계) : 인터페이스와 이를 구현하는 클래스 간의 관계<br>\n-Composition(합성 관계) : 집합관계의 특수한 형태로, 부분이 전체와 생명 주기를 공유하며 독립적으로 존재할 수 없는 경우<br>\n-Generalization(일반화 관계) : 상위 클래스와 하위 클래스 간의 관계로, 상속을 통해 일반적인 특성을 공유한다.\n<br>\n<br>UML을 이용한 다이어그램 중 다음 그림에 해당하는 다이어그램을 쓰시오.\n<br>[ ] &lt;&lt;import&gt;&gt; [Security]\nOrder ----------------&gt; +(Credentials) / ( ) +(MDSCrupt)\n<br>\n<br>LOC기법에 의하여 예측된 총 라인 수가 30,000라인, 개발에 참여할 프로그래머가 5명, 프로그래머들의 평균 생산성이 월간 300라인일 때 개발에 소요되는 기간을 계산식과 함께 쓰시오.\n<br>\n<br>데이터베이스 스키마(Schema)에 대해 간략히 서술하시오.\n<br>\n스키마는 데이터베이스의 구조와 제약 조건에 관한 전반적인 명세를 기술한 것이다.\n<br>\n<br>DB 설계에 대한 설명. 괄호를 채우시오\n<br>( 1 ) : 논리적 구조로 표현된 데이터를 디스크 등의 저장장치에 저장할 수 있는 데이터로 변환하는 과정으로, 파일의 저장 구조 및 엑세스 경로를 결정하며, 테이블 정의서 및 명세서가 산출된다.\n<br>( 2 ) : 현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정으로, 개념 스키마 모델링과 트렌젝션 모델링을 수행하며, 요구 조건 명세를 E-R 다이어그램으로 작성한다.\n<br>( 3 ) : 현실의 자료를 특정 DBMS가 지원하는 자료구조로 변환하는 과정으로, 트렌젝션의 인터페이스를 설계하고, 정규화를 통해 스키마를 평가 및 정제한다.\n<br>\n<br>다음은 데이터베이스 구축까지의 과정을 나열한 것이다. 순서대로 괄호를 채우시오. 요구분석 → ( ) → ( ) → ( ) → 구현 <br>\n<br>데이터 모델이 구성 요소에 대한 다음 설명에서 괄호(1, 2)에 들어갈 용어를 쓰시오\n<br>( 1 )은 데이터베이스에 저장된 실제 데이터를 처리하는 작업에 대한 명세서로서 데이터베이스를 조작하는 기본 도구에 해당된다.\n<br>( 2 )는 논리적으로 표현된 객체 타입들 간의 관계로서 데이터의 구성 및 정적 성질을 표현한다.\n<br>제약조건은 데이터베이스에 저장될 수 있는 실제 데이터의 논리적인 제약 조건을 의미한다.\n<br><img alt=\"do-messenger_screenshot_2025-02-10_15_04_45.png\" src=\"http://lts.kr/사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png\" target=\"_self\"><br>\n-다음 E-R다이어그램을 참고하여 괄호(1~5)의 설명에 적합한 요소를 찾아 기호로 표시<br>( 1 ) : 관계 집합을 의미한다.\n<br>( 2 ) : 관계 집합과 속성을 연결한다.\n<br>( 3 ) : 개체 집합을 의미하며, 키로 사용되는 항목에는 밑줄을 표시한다.\n<br>( 4 ) : 관계 집합의 속성을 의미한다.\n<br>( 5 ) : 개체 집합과 집합을 연결한다.\n<br>\n1 → ㄴ<br>\n2 → ㄷ<br>\n3 → ㄱ<br>\n4 → ㄹ<br>\n5 → ㅁ\n<br>-키(Key)에 대한 다음 설명에서 괄호(1, 2)에 들어갈 용어를 쓰시오.<br>키는 데이터베이스에서 조건에 만족하는 튜플을 찾거나 순서대로 정렬할 때 기준이 되는 속성을 말한다.\n<br>슈퍼키는 한 릴레이션 내에 있는 속성들의 집합으로 구성된 키로, 릴레이션을 구성하는 모든 튜플에 대해 ( 1 )을 만족한다.\n<br>후보키(Candidate Key)는 릴레이션을 구성하는 속성들 중에서 튜플을 유일하게 식별하기 위해 사용되는 속성들의 부분집합으로, ( 1 )과 ( 2 )을 만족하는 특징이 있다.\n<br>\n<br>\n관계대수란 관계형 데이터베이스에서 원하는 정보와 그 정보를 검색하기 위해서 어떻게 유도하는가를 기술하는 절차적인 언어이다. 관계 대수에 사용되는 연산은 다음과 같다. <br>\n합집합(UNION)은 두 릴레이션에 존재하는 튜플의 합집합을 구하되, 결과로 생성된 릴레이션에서 중복되는 튜플은 제되는 연산으로, 기호는 ( 1 )이다. <br>\n차집합(DIFFERENCCE)은 두 릴레이션에 존재하는 튜플의 차집합을 구하는 연산으로, 사용하는 기호는 ( 2 )이다. <br>\n교차곱(CARTESIAN PRODUCT)은 두 릴레이션에 있는 튜플들의 순서쌍을 구하는 연산으로, 사용하는 기호는 ( 3 )이다. <br>\n프로젝트(PROJECT)는 주어진 릴레이션에서 송성 리스트(Attribute List)에 제시된 속성 값만을 추출하여 새로운 릴레이션을 만드는 연산으로, 사용하는 기호는 ( 4 )이다. <br>\n조인(JOIN)은 공통 속성을 중심으로 두 개의 릴레이션을 하나로 합쳐서 새로운 릴레이션을 만드는 연산으로, 사용하는 기호는 ( 5 )이다. <br>\n1 → U<br>\n2 → ㅡ<br>\n3 → x<br>\n4 → ㅠ<br>\n5 → |&gt;&lt;|\n<br>\n<br>릴레이션 A, B가 있을 때, 릴레이션 B의조건에 맞는 것들만 릴레이션 A에서 분리하여 프로젝션을 하는 연산은?\n<br>\n<br>( )은 관계 데이터의 연산을 표현하는 방법으로, 관계 데이터 모델의 제안자인 코드(E. F. Codd)가 수학의 술어 해석(Predicate Calculus)에 기반을 두고 관계 데이터베이스를 위해 제안했다.\n<br>원하는 정보가 무엇이라는 것만 정의하는 비절차적 특성을 지니며, 원하는 정보를 정의할 때 계산 수식을 사용한다.\n<br>튜플 해석식을 사용하는 튜플 ( )과 도메인 해석식을 사용하는 도메인 ( )으로 구분된다.\n<br>\n<br>데이터의 중복으로 인해 테이블 조작 시 문제가 발생하는 현상을 이상(Anomaly)이라고 한다. 이상 중 삭제 이상(Deletion Anomaly)에 대해 간략히 서술하시오.\n<br>\n테이블에서 튜플을 삭제할 때 의도와는 상관없는 값들도 함께 삭제되는 현상.\n<br>\n<br>데이터베이스의 이상(Anomaly)의 종류 3가지를 쓰시오.\n<br>\n삽입 이상(Insertion Anomaly)<br>\n삭제 이상(Deletion Anomaly)<br>\n갱신 이상(Update Anomaly)\n<br><img alt=\"do-messenger_screenshot_2025-02-10_17_10_58.png\" src=\"http://lts.kr/사진-및-문서/do-messenger_screenshot_2025-02-10_17_10_58.png\" target=\"_self\"><br>테이블 &lt;R&gt;에서 성적은 기본키인 {학생, 학과}에 대해 ( 1 ) Functional Dependency이다.\n<br>테이블 &lt;R&gt;에서 학년은 기본키인 {학생, 학과} 중 학생만으로 식별이 가능하므로 기본키에 대해 ( 2 ) Functional Dependency이다.\n<br>임이의 테이블에 속성 A, B, C가 있을 떄, A → B이고 B → C일 때 A → C인 관계는 ( 3 )Functional Dependency이다.\n<br> <br>Full\n<br>Partial\n<br>Transitive <br>\n<br>데이터베이스에서 비(반)정규화(Denormalization)의 개념을 서술하시오.\n<br>\n비정규화는 정규화된 데이터 모델을 통합, 중복, 분리 하는 과정으로, 의도적으로 정규화 원칙을 위배하는 행위이다.\n<br>\n<br>데이터베이스의 상태 변화를 일으키는 트렌젝션(Transaction)의 특성\n<br> <br>원자성 : <br>트렌젝션의 연산은 데이터베이스에 모두 반영되도록 완료(Commit)되든지 아니면 전혀 반영되지 않도록 복구(Rollback)되어야 한다. <br>일관성 : <br>트렌젝션이 그 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환한다. <br>독립성 : <br>둘 이상의 트렌젝션이 동시에 병행 실행되는 경우 어느 하나의 트렌젝션 실행중에 다른 트렌젝션의 연산이 끼어들 수 없다. <br>지속성 <br>성공적으로 완료된 트렌젝션의 결과는 시스템이 고장나더라도 영구적으로 반영되어야 한다. <br>\n<br>파일의 구조는 파일을 구성하는 레코드들이 보조기억장치에 편성되는 방식을 의미하는 것으로, 크게 순차, ( ), 해싱으로 구분한다.\n<br>( ) 파일 구조는 &lt;값, 주소&gt; 쌍으로 구성되는 데이터 구조를 활용하여 데이터에 접근하는 방식으로, 자기 디스크서 주로 활용된다.\n<br>\n<br>비상 상황이 발생한 경우 비상사태 또는 업무중단 시점부터 업무가 복구되어 다시 정상 가동 될 때까지의 시간을 의미한다.\n<br>\n<br>접근통제는 데이터가 저장된 객체와 이를 사용하려는 주체 사이의 정보 흐름을 제한하는 것이다. 이러한 접근통제에 관한 기술 중 ( )는 데이터에 접근하는 사용자의 신원에 따라 접근 권한을 부여하여 제어하는 방식으로, 데이터의 소유자가 접근통제 권한을 지정하고 제어한다.\n<br>객체를 생성한 사용자가 생성된 객체에 대한 모든 권한을 부여받고, 부여된 권한을 다른 사용자에게 허가할 수도 있다.\n<br>\n<br>DBMS는 데이터베이스에 치명적인 손실이 발생했을 때 이를 복구하기 위해 데이터베이스의 처리내용이나 이용 상황 등 상태 변화를 시간의 흐름에 따라 기록한 로그를 생성한다.\n<br>( 1 ) : 데이터베이스가 비정상적으로 종료되었을 때, 디스크에 저장된 로그를 분석하여 트렌젝션의 시작(start)과 완료(commit)에 대한 기록이 있는 트렌젝션들의 작업을 재작업 한다. 즉, 로그를 이용하여 해당 데이터 항목에 대해 이전 값을 이후값으로 변경하는 연산이다.\n<br>( 2 ) : 데이터베이스가 비정상적으로 종료되었을 때, 디스크에 저장된 로그를 분석하여 트렌젝션의 시작을 나타는 'start'는 있지만 완료를 나타내는 'commit' 기록이 없는 트렌젝션들이 작업한 내용들을 모두 취소한다. 즉 로그를 이용하여 해당 데이터 항목에 대해 이후 값을 이전 값으로 변경한다.\n<br>\n<br>웹 페이지의 기본 형식인 HTML의 문법이 각 웹 브라우저에서 상호 호환적이지 못한다는 문제와 SGML의 복잡함을 해결하기 위하여 개발된 ( )은 다른 특수한 목적을 갖는 마크업 언어이다.\n<br>원활한 데이터의 연계를 위해 송.수신 시스템 간에 전송되는 데이터가 동일한 구조로 구성될 수 있도록 형태를 정의는 역할을 수행하며, 다음과 같은 특징이 있다.\n<br>\n<br>텍스트 데이터 형식으로 유니코드를 사용하여 전 세계 언어를 지원한다.\n<br>\n<br>대다수의 웹 브라우저가 해석을 위한 번역기(Parser)를 내장하고 있다.\n<br>\n<br>XML문서의 문자들은 마크업과 내용으로 구분된다.\n<br>일반적으로 마크업은 &lt;로 시작하여 &gt;로 끝나는 태그(Tag)를 의미하고, 그 외의 문자열은 내용에 해당한다.\n<br>\n<br>마크업과 내용으로 이루어지는 하나의 요소를 의미한다.\n<br>\n<br>통합 구현과 관련하여 다음 설명의 괄호에 공통으로 들어갈 알맞은 용어는?\n<br>( )는 HTTP, HTTPS, SMTP 등을 사용하여 xml 기반의 메시지를 네트워크상에서 교환하는 프로토콜이다.\n<br>( ) envelope, 헤더, 바디 등이 추가된 xml 문서이다.\n<br>( )는 복잡하고 무거운 구조로 구성되어 있어, ( )보다는 RESTful 프로토콜을 이용하기도 한다.\n<br>\n<br>웹 서비스와 관련된 다음 설명에 해당되는 용어는?\n<br>웹 서비스와 관련된 서식이나 프로토콜 등을 표준적인 방법으로 기술하고 게시하기 위한 언어.\n<br>XML로 작성되며 UDDI의 기초가 된다. SOAP, XML 스키마와 결합하여 인터넷에서 웹 서비스를 제공하기 위해 사용되며, 클라이언트는 이것을 통해 서버에서 어떠한 조작이 가능한지를 파악할 수 있다.\n<br>\n<br>다음 럼바우 데이터 모델링에 대한 설명에서 각 지문(1~3)에 해당하는 모델링을 매칭시키기\n<br>ㄱ. 다수의 프로세스들 간의 자료 흐름을 중심으로 처리 과정을 표현한 모델링<br>\nex) 자료흐름도(DFD)<br>ㄴ. 시간의 흐름에 따른 객체들 간의 제어 흐름, 상호 작용, 동작 순서 등의 동적인 행위를 표현하는 모델링<br>\nex) 상태 변화도(STD), 사건 추적도<br>ㄷ. 시스템에서 요구되는 객체를 찾아내어 속성과 연산 식별 및 객체들 간의 관계를 규정하여 표시하는 모델링<br>\nex) ER 다이어그램(ERD)<br>\n1 → Function(기능)<br>\n2 → Dynamic(동적)<br>\n3 → Information(객체) <br>\n<br>자신이 사용하지 않는 인터페이스와 의존 관계를 맺거나 영향을 받지 않아야 한다는 객체지향 설계 원칙 중 하나다.\n<br>예를 들어 프린터, 펙스, 복사 기능을 가진 복합기의 경우 3가지 기능을 모두 가지 범용 인터페이스보다는, 프린터 인터페이스, 팩스 인터페이스, 복사 인터페이스로 분리함으로써 하나의 기능 변경으로 인해 다른기능이 영향을 받지 않도록 해야한다.\n<br>\n<br>결합도(Coupling)의 종류 중 단순 처리 대상인 데이터만 전달되는 것이 아니라, 어떻게 처리해야 하는지를 결정하는 제어 요소가 전달되는 경우의 결합도를 영문으로 쓰면?\n<br>\n<br>( 1 )는 모듈간의 인터페이스로, 데이터,지역변수 등을 직접 참조하거나 수정할 때의 결합도다.\n<br>( 2 )는 모듈간의 인터페이스로, 배열이나 레코드 등의 자료구조가 전달될 때의 결합도다.\n<br>( 3 )는 모듈간의 인터페이스로, 파라미터가 아닌 모듈 밖에 선언된 전역 변수를 사용하여 전역 변수를 갱신하는 방식으로 상호작용하는 때의 결합도다.\n<br>\n1 → 내용 결합도<br>\n2 → 스탬프 결합도<br>\n3 → 공통 결합도\n<br>\n<br>내부의 요소들이 기능적으로 연관성은 없으나, 순차적으로 실행될 때의 응집도 <br>서로 다른 기능을 수행하지만 동일한 입력과 출력을 사용할 때의 응집도 <br>하나의 기능에 밀접하게 관련되어 있거나 연관되어 있을 때의 응집도 <br>\n1 → 절차적 응집도<br>\n2 → 교환적 응집도<br>\n3 → 기능적 응집도\n<br>\n<br>모듈간 통신 방식을 구현하기 위해 사용되는 대표적인 프로그래밍 인터페이스 집합이다.\n<br>복수의 프로세스를 수행하며 이뤄지는 프로세스 간 통신까지 구현이 가능하다.\n<br>대표적인 메소드에는 공뮤 메모리(Shared Memory), 소켓, 세마포어, 파이프와 네임드 파이프, 메세지 큐잉이 있다.\n<br>\n<br>( )패턴은 객체 생성을 서브 클래스에서 처리하도록 분리하여 캡슐화한 패턴이다.\n<br>상위 클래스에서 인터페이스만 정의하고 실제 생성은 서브 클래스가 담당한다.\n<br>다른 이름으로는 가상 생성자(Virtual Constructor) 패턴 이라고도 한다.\n<br>\n<br>( 1 )패턴은 구현부에서 추상층을 분리하여, 서로가 독립적으로 확장할 수 있도록 구성한 패턴으로, 기능과 구현을 두 개의 별도 클래스로 구현한다는 특징이 있다.\n<br>( 2 )패턴은 한 객체의 상태가 변화하면 객체의 상속된 다른 객체들에게 변화된 상태를 전달하는 패턴으로, 일대다의 의존성을 정의한다. 주로 시스템 간에 이벤트를 생성.발행(Publish)하고, 이를 수신(Subscribe)해야할 떄 이용된다.\n<br>\n1 → Bridge 패턴<br>\n2 → Observer 패턴\n<br>\n<br>디자인 패턴은 모듈 간의 관계 및 인터페이스를 설계할 때 참조할 수 있는 전형적인 해결 방식 또는 예젤를 의미한다. <br>그 중 ( )패턴은 클래스나 객체들이 서로 상호작용하는 방법이나 책임 분배 방법을 정의하는 패턴으로, Interpreter, Observer, Command 등이 그 예에 해당한다.\n<br>\n<br>기업 내 각종 어플리케이션 및 플랫폼 간의 정보 전달, 연계, 통합 등 상호 연동이 가능하게 해주는 솔루션.\n<br>Point-to-Point, Hub&amp;Spoke, Message Bus, Hybrid 등의 다양한 방식으로 구축이 가능한 모듈 연계 방법.\n<br><img alt=\"do-messenger_screenshot_2025-02-11_13_47_16.png\" src=\"http://lts.kr/사진-및-문서/do-messenger_screenshot_2025-02-11_13_47_16.png\" style=\"width: 900px; max-width: 100%;\" target=\"_self\"><br>EAI(Enterprise Application Integration)는 기업 내 비즈니스 간 통합 및 연계성을 증대시켜 효율성 및 각 시스템 간의 확정성(Determinacy)을 높여 준다. EAI의 구축 유형은 위와 같다.\n<br>\n1 → Point-to-Point<br>\n2 → Hub &amp; Spoke\n<br>\n<br>네트워크 트래픽에 대해 IP(Internet Protocol) 계층에서 IP패킷 단위의 데이터 변조 및 은닉 기능을 제공하는 네트워크 계층에서의 보안 통신 규약을 쓰시오.\n<br>\n<br>Kent Beck과 Erich Gamma 등이 개발한 자바 프로그래밍 언어용 유닛 테스트 프레임워크.\n<br>xUnit계열의 한 종류이다. 같은 테스트 코드를 여러 번 작성하지 않게 도와주며, 테스트마다 예상 결과를 기억 할 필요가 없는 자동화된 해법을 제공한다.\n<br>\n<br>사용자 인터페이스 UI(User Interface)의 설계 원칙\n<br>\n직관성 : 누구나 쉽게 이해하고 사용할 수 있어야 한다<br>\n유효성 : 사용자의 목적을 정확하고 완벽하게 달성해야 한다<br>\n학습성 : 누구나 쉽게 배우고 익힐 수 있어야 한다<br>\n유연성 : 사용자의 요구사항을 최대한 수용하고 실수를 최소화해야 한다\n<br>\n<br>애플리케이션 테스트에서 사용되는 살충제 패러독스(Pesticide Paradox)의 개념을 간략히 설명\n<br> <br>살충제 패러독스는 동일한 테스트 케이스로 동일한 테스트를 반복하면 더 이상 결함이 발견되지 않는 현상을 의미한다. <br>\n<br>테스트에 대한 다음 설명에서 각 (1~3)에 해당되는 커버리지(기준)을 찾으시오.\n<br>최소 한번은 모든 문장이 수행되도록 구성하는 검증 기준\n<br>조건식이 참 / 거짓일 때 수행되도록 구성하는 검증 기준\n<br>2번과 달리 조건식에 상관없이 개별 조건이 참 / 거짓일 때 수행되도록 구성하는 검증기준\n<br>\n1 → 구문(문장) 커버리지<br>\n2 → 결정(분기) 커버리지<br>\n3 → 조건 커버리지\n<br>\n<br>소프트웨아가 수행할 특정 기능을 알기 위해서 각 기능이 완전히 작동되는 것을 입증하는 테스트.\n<br>동치 클래스 분해 및 경계값 분석을 이용하는 테스트 기법이다.\n<br><img alt=\"do-messenger_screenshot_2025-02-11_15_32_34.png\" src=\"http://lts.kr/사진-및-문서/do-messenger_screenshot_2025-02-11_15_32_34.png\" target=\"_self\"><br>다음 중 블랙박스 테스트에 속하는 녀석들은?\n<br>\n경계값 분석(Boundary Value Analysis)<br>\n입력값의 경계 부분(최소, 최대값 등)에서 오류가 발생할 가능성이 높다는 점을 이용하여 테스트하는 기법<br>\n동등(동치) 분할(Equivalence Partitioning)<br>\n입력값을 유사한 동작을 하는 그룹으로 나누고 각 그룹에서 대표값을 선택해 테스트하는 기법<br>\n원인-결과 그래프(Cause-Effect Graph)<br>\n그래프를 활용하여 입력 데이터 간의 관계와 출력에 영향을 미치는 상황을 체계적으로 분석한 다음 효용성이 높은 테스트 케이스를 선정하여 검사하는 기법\n<br>\n<br>테스트 기법 중 다음과 같이 평가 점수표를 미리 정해 놓은 후 각 영역에 해당하는 입력 값을 넣고, 예상되는 출력값이 나오는지 실제 값과 비교하는 명세 기밥 테스트 기법을 쓰시오.\n<br><img alt=\"do-messenger_screenshot_2025-02-11_16_31_10.png\" src=\"http://lts.kr/사진-및-문서/do-messenger_screenshot_2025-02-11_16_31_10.png\" style=\"width: 1025px; max-width: 100%;\" target=\"_self\"><br>개발 단계에 따른 애플리케이션 테스트에 대한 다음 V-모델에서 (1~4)에 들어갈 알맞은 테스트를 작성하시오.\n<br>\n1 → 단위 테스트(Unit Test)<br>\n- 코딩 직후 소프트웨어 설계의 최소 단위인 모듈이나 컴포넌트에 초점을 맞춰 수행하는 테스트<br>\n2 → 통합 테스트(Integration Test)<br>\n- 모듈들을 결합하여 하나의 시스템으로 완성시키는 과정에서의 테스트<br>\n3 → 시스템 테스트(System Test)<br>\n4 → 인수 테스트(Acceptance Test)\n<br>\n<br>인수 테스트는 개발한 소프트웨어가 사용자의 요구사항을 충족하는지에 중점을 두고 테스트한다.\n<br>( 1 ) : 선정된 최종 사용자가 여러 명의 사용자 앞에서 행하는 테스트 기법으로, 실제 업무를 가지고 사용자가 직접 테스트한다.\n<br>( 2 ) : 개발자의 장소에서 사용자가 개발자 앞에서 행하는 테스트 기법으로, 테스트는 통제된 환경에서 행해지며, 오류와 사용상의 문제점을 사용자와 개발자가 함께 확인하면서 기록한다.\n<br>\n1 → 베타 테스트(Beta Test)<br>\n2 → 알파 테스트(Alpha Test)\n<br>\n<br>통합 테스트 기법 중, 두 방법에 대한 설명이다.\n<br>상향식 통합 테스트는 미완성이거나 문제가 있는 상위 모듈을 대체할 수 있는 테스트 드라이버가 있다.\n<br>하향식 통합 테스트는 미완성이거나 문제가 있는 하위 모듈을 대체할 수 있는 테스트 ( )가 있어야 한다.\n<br>\n<br>통합 테스트로 인해 변경된 모듈이나 컴포넌트에 새로운 오류가 있는지 확인하는 테스트.\n<br>이미 테스트된 프로그램의 테스팅을 반복하는 것이다.\n<br>수정한 모듈이나 컴포넌트가 다른 부분에 영향을 미치는지, 오류가 생기지 않았는지 테스트하여 새로운 오류가 발생하지 않음을 보증하기 위해 반복 테스트한다.\n<br>\n<br>특정한 몇몇 테스트 케이스의 입력 값들에 대해서만 기대하는 결과를 제공하는 오라클로, 전수 테스트가 불가능한 경우 사용하고, 경계값 및 구간별 예상값 결과 작성시 사용하는 오라클은?\n<br>\n<br>애플리케이션 성능 측정의 지표에 대한 다음 설명을 채우십시오<br>\n( 1 ) - 일정 시간 내에 애플리케이션이 처리하는 일의 양을 의미한다.<br>\n( 2 ) - 애플리케이션에 요청을 던달한 시간부터 응답이 도착할 때까지 걸린 시간을 의미한다.<br>\n( 3 ) - 애플리케이션에 작업을 의뢰한 시간부터 처리가 완료될 떄까지 걸린 시간을 의미한다.<br>\n자원 활용률 - 애플리케이션이 의뢰한 작업을 처리하는 동안의 CPU, 메모리, 네트워크 등의 자원 사용률을 의미.\n<br>\n1 → 처리량(Throughput)<br>\n2 → 응답 시간(Response Time)<br>\n3 → 경과 시간(Turn Around Time)\n<br>\n<br>각각 소스코드 품질 분석에 대한 정의를 작성하세요.\n<br>\n<br>소스 코드의 코딩 스타일, 코드에 설정된 코딩 표준, 코드의 복잡도, 코드에 존재하는 메모리 누수 현상, 스레드 결함 등을 발견하기 위해 사용하는 분석 도구이다.\n<br>\n<br>작성한 소스 코드를 실행하지 않고, 코딩 표준이나 코딩 스타일, 결함 등을 확인하는 코드 분석 도구.\n<br>\n<br>소스 코드를 직접 실행하여 프로그램의 동작이나 반응을 추적하고 보고하는 분석 도구로, 프로그램 모니터링 기능이나 스냅샷 생성 기능을 포함하고 있다.\n<br>\n<br>데이터를 제어하는 DCL의 하나인 GRANT의 기능에 대해 간략히 서술하시오.\n<br>\nGRANT는 데이터베이스 관리자가 데이터베이스 사용자에게 권한을 부여하는 데 사용하는 명령어 이다.\n<br>\n<br>데이터를 제어하는 DCL의 하나인 ROLLBACK에 대해 간략히 서술하시오.\n<br>\nROLLBACK은 트렌젝션이 실패한 경우 작업을 취소하고 이전 상태로 되돌리기 위한 명령어이다.\n<br>\n<br>데이터베이스 보안에서 가용성(Availability)에 대해 간략히 서술하시오.\n<br>\n가용성은 인가받은 사용자는 시스템\n<br>\n<br>보안 위협의 하나인 SQL Injection에 대해 간략히 서술하시오.\n<br>\nSQL Injection은 웹 응용 프로그램에 SQL 구문을 삽입하여 내부 DB서버의 데이터를 유출 및 변조하고 관리자 인증을 우회하는 공격 기법이다.\n<br>\n<br>\n다음은 암호화 알고리즘에 대한 설명이다. 괄호를 채우시오. <br>\n암호화 알고리즘은 패스워드, 주민번호, 은행계좌와 같은 중요 정보를 보호하기 위해 평문을 암호화된 문장으 만드는 절차 또는 방법을 말한다. <br>\n스위스의 라이(Lai)와 메시(Messey)는 1990년 PES를 발표하고, 이후 이를 개선한 IPES를 발표하였다. IPES는 128비트의 Key를 사용하여 64비트 블록을 암호화하는 알고리즘이며 현재는 ( 1 )라고 불린다. <br>\n( 2 )은 국가 안전 보장국(NSA)에서 개발한 암호화 알고리즘으로, 클리퍼 칩(Clipper Chip)이라는 IC 칩에 내장되어 있다. 80비트의 Key를 사용하여 64비트 블록을 암호화하며, 주로 전화기와 같은 음성 통신 장비에 삽입되어 음성 데이터르르 암호화 한다. <br>\n1 → IDEA(Internetional Data Encryption Algorithm)<br>\n2 → Skipjack\n<br>\n<br>무선랜 보안에 사용된 WEP 방식을 보완한 데이터 보안 프로토콜로, 임시 키 무결성 프로토콜이라도 한다.\n<br>WEP의 취약성을 보완하기 위해 암호 알고리즘의 입력 키 길이를 128비트로 늘리고 패킷당 키할당, 키값 재설정 등 키 관리 방식을 개선하였다.\n<br>\n<br>1974년 IBM이 개발하고, 1975년 NBS에 의해 미국의 국가 표준으로 발표된 암호화 알고리즘\n<br>블록 크기는 64비트, 키 길이는 56비트이며, 16회의 라운드를 수행한다.\n<br>컴퓨터 기술이 발달함에 따라 해독이 쉬워지면서 미국의 국가 표준이 2001년 AES로 대체되었다.\n<br>\n<br>2001년 미국 표준 기술 연구소(NIST)에서 발표한 대칭키 암호화 알고리즘이다.\n<br>DES의 한계를 느낀 NIST에서 공모한 후 발표하였다.\n<br>블록 크기는 128비트이며, 키 길이에 따라 128, 192, 256으로 분류된다.\n<br>\n<br>1991년 R.ricest가 MD4를 개서한 암호화 알고리즘으로, 각각의 512비트짜리 입력 메세지 블록에 대해 차례동작한다.\n<br>각 512비트 입력 메시지 블록을 처리하고 나면 128비트 스테이트(stat)의 값이 변하는 암호화 알고리즘이다.\n<br>\n<br>( ) 스푸핑은 로컬 네트워크(LAN)에서 사용하는 ( )프로토콜의 취약점을 이용한 공격 기법으로, 자신의 물리적 주소(MAC)를 변조하여 다른 PC에게 도달해야 하는 데이터 패킷을 가로채거나 방해한다.\n<br>\n<br>아래의 패킷 로그와 같이, 공격자가 패킷의 출발지 주소(Address) 또는 포트를 임의로 변경하여 송신측 IP주소 또는 포트를 동일하게 함으로써, 송신 IP주소가 자신이므로 자신에게 응답을 수행하게 된다.\n<br>자신에 대해 무한히 응답하는 패킷을 계속 전송하여 컴퓨터의 실행 속도를 느리게 하거나 동작을 마비 시켜 서비스 거부 상태에 빠지도록 하는 네워크 공격 유형은?\n<br>\n<br>( 1 )은 컴퓨터 보안에 있어서, 인간 상호 작용의 깊은 신뢰를 바탕으로 사람들을 속여 정상 보안 절차를 깨트리기 위한 비기술적 시스템 침입 수단을 의미한다.\n<br>( 2 )는 특정 목적을 가지고 데이터를 수집하였으나, 이후 활용되지 않고 저장만 되어있는 대량의 데이터를 의미한다. 미래에 사용될 가능성을 고려하여 저장 공간에서 삭제되지 않고 보관되어 있으나, 이는 저장 공간의 낭비뿐만 아니라 보안 위험을 초래할 수도 있다.\n<br>\n1 → 사회 공학(Social Engineering)<br>\n2 → 다크 데이터(Dark Data)\n<br>\n<br>( )은 ‘세션을 가로채다’라는 의미로, 정상적인 연결을 RST패킷을 통해 종료시킨 후 재연결 시 희생자가 아닌 공격자에게 연결하는 공격 기법이다.\n<br>TCP ( )은 공격자가 TCP 3-Way-Handshake과정에 끼어듦으로써 서버와 상호 간의 동기화된 시퀀스 번호를 갖고 인가되지 않은 시스템의 기능을 이용하거나 중요한 정보에 접근할 수 있게 된다.\n<br>\n<br>목표 조직이 자주 방문하는 웹 사이트를 사전에 감염시켜, 목표 조직의 일원이 웹 사이트에 방문했을 때 악성 코드에 감연되게 한다.\n<br>이후에는 감염된 PC를 기반으로 조직의 중요 시스템에 접근하거나 불능으로 만드는 등의 영향력을 행사하는 웹 기반 공격이다.\n<br>\n<br>AAA서버는 사용자의 컴퓨터 자원 접근 처리와 서비스 제공에 있어서의 다음 3가지 기능을 제공하는 서버이다.\n<br>접근하는 사용자의 신원을 검증하는 기능\n<br>신원이 검증된 사용자에게 특정된 권한과 서비스를 허용하는 기능\n<br>사용자가 어떤 종류의 서비스를 이용했고, 얼마만큼의 자원을 사용했는지 기록 및 보관하는 기능\n<br>\n1 → Authentication - 검증<br>\n2 → Authorization - 권한 부여<br>\n3 → Accounting - 기록\n<br>\n<br>다양한 장비에서 발생하는 로그 및 보안 이벤트를 통합하여 관리하는 보안 소룰션으로, 방화벽, IDS, IPS, 웹 방화벽, VPN 등에서 발생한 로그 및 보안 이벤트를 통합하여 관리함으로써 비용 및 자원을 절약할 수 있는 특징이 있다.\n<br>보안 솔루션 간의 상호 연동을 통해 종합적인 보안 관리 체계를 수립할 수 있다.\n<br>\n<br>헝가리안 표기법(Hungarian Notation)에 대해 간략히 서술.\n<br>\n헝가리안 표기법은 변수명 작성시 변수의 자료형을 알 수 있도록 자료형을 의미하는 문자를 포함하여 작성하는 방법.<br>\nex) bool bIsTrue / int nCnt\n<br>\n<br>스니핑(Sniffing)은 사전적 의미로 ‘코를 킁킁 거리다, 냄새를 맡다’이다. 네트워크 보안에서 스니핑에 대한 개념을 간략히 작성.\n<br>\n스니핑은 네트워크의 중간에서 남의 패킷 정보를 도청하는 해킹 유형의 하나로 수동적 공격에 해당한다.\n<br>\n<br>C++에서 생성자에 대해 간략히 서술하시오.\n<br>\n생성자는 객체 변수 생성에 사용되는 메소드로, 객체 변수를 생성하면서 초기화를 수행한다.\n<br>\n<br>1960년대 AT&amp;T 벨(Bell) 연구소가 MIT, GM사와 함께 공동 개발한 운영체제 이다.\n<br>시분할 시스템(Time Sharing System)을 위해 설계된 대화식 운영체제 이다.\n<br>대부분 c언어로 작성되어 있어 이식성이 높으며, 장치/프로세스 간의 호환성이 높다.\n<br>트리 구조의 파일 시스템을 갖는다.\n<br><img alt=\"do-messenger_screenshot_2025-02-12_14_04_58.png\" src=\"http://lts.kr/사진-및-문서/do-messenger_screenshot_2025-02-12_14_04_58.png\" target=\"_self\"><br>\n1 → 준비(Ready)<br>\n2 → 실행(Run)<br>\n3 → 대기(Wait)\n<br>\n<br>HRN 비선점형 스케줄링 우선순위를 구하는 계삭식을 쓰시오.\n<br>\n<br>\n( 1 )는 준비상태 큐에서 기다리고 있는 프로세스들 중에서 실행시간이 가장 짧은 프로세스에게 먼저 CPU를 할당하는 기법이다. 가장 적은 평균 대기 시간을 제공하는 최적 알고리즘이지만, 실행 시간이 긴 프로세스는 실행 시간이 짧은 프로세스에게 할당 순위가 밀려 무한 연기 상태가 발생 될 수 있다. <br>\n( 2 )은 시분할 시스템을 위해 고안된 방식으로, 준비상태 큐에 먼저 들어온 프로세스가 먼저 CPU를 할당받지만 각 프로세스는 시간 할당량 동안만 실행한 후 실행이 완료되지 않으면 다음 프로세스에게 CPU를 넘겨고 준비상태 큐의 가장 뒤로 배치된다. 할당되는 시간이 작을 경우 문맥 교환 및 오버헤드가 자주 발생되어 요청된 작업을 신속히 처리할 수 없다. <br>\n( 3 )는 현재 실행중인 프로세스의 남은 시간과 준비상태 큐에 새로 도착한 프로세스의 실행시간을 비교하 가장 짧은 실행 시간을 요구하는 프로세스에게 CPU를 할당하는 기법으로, 시분할 시스템에 유용하다. 준비상태 큐에 있는 각 프로세스의 실행 시간을 추적하여 보유하고 있어야 하므로 오버헤드가 증가한다. <br>\n1 → SJF(Shortest Job First)<br>\n2 → RR(Round Robin)<br>\n3 → SRT(Shortest Remaining Time)\n<br>\n<br>리눅스 또는 유닉스에서 a.txt 파일에 대해 다음 처리 조건과 같이 권한을 부여하고자 한다.\n<br>사용자에게 읽기,쓰기,실행 권한을 부여한다.\n<br>그룹에게 읽기,실행 권한을 부여한다.\n<br>기타 사용자에게 실행 권한을 부여한다.\n<br>한 줄로 작성하고, 8진법 숫자를 이용한 명령문을 이용한다.\n<br>\n<br>192.168.1.0/24 네트워크를 FLSM 방식으로 3개의 Subnet으로 나누는 방법\n<br>즉, 64개씩 호스트를 할당하면,<br>\n<br>여분의 서브넷 = 192.168.1.192/26\n<br>\n<br>서브넷팅(Subnetting)에 대한 설명\n<br>현재 IP주소가 192.168.1.132이고, 서브넷 마스크가 255.255.255.192 일 때, 네트워크 주소와 사용가능 호스트 개수는?\n<br>\n<br>A Class - 0~127 / 기본 서브넷 - 255.0.0.0 (/8)\n<br>B Class - 128~191 / 기본 서브넷 - 255.255.0.0 (/16)\n<br>C Class - 192~223 / 기본 서브넷 - 255.255.255.0 (/24)\n<br>D Class - 224~239 / 기본 서브넷 - 멀티캐스트 전용 (서브넷 X)\n<br>이 때, 네트워크 개수는 2^2(추가된 1의 개수) = 4개<br>호스트개수는 256 / 4(네트워크 개수) = 64개<br>즉, 이를 표로 나타내면 →<br>여기서 192.168.1.13 는 3번째 네트워크 주소에 속하므로,<br>\n네트워크 주소는 192.168.1.128 이며, 사용 가능 호스트 주소는 네트워크와 브로드캐스트 주소를 뺀 64-2 <br>\n<br>OSI 7 Layer에 대한 설명\n<br>\n물리적으로 연결된 두 개의 인접한 개방 시스템들 간에 신뢰성 있고 효율적인 정보 전송을 할 수 있도록 연결 설정, 데이터 전송, 오류 제어 등의 기능을 수행한다. <br>\n개방 시스템들 간의 네트워크 연결을 관리하며, 경로 제어, 패킷 교환, 트래픽 제어 등의 기능을 수행한다. <br>\n서로 다른 데이터 표현 형태를 갖는 시스템 간의 상호 접속을 위해 필요한 계층으로, 코드변환, 데이터 암호화, 데이터 압축, 구문 검색 등의 기능을 수행한다. <br>\n다양한 전송매체를 통해 비트 스트림을 전송. 전송에 필요한 두 장치 간의 실제 접속과 절단 등 기계적, 전기적, 기능적, 절차적 특성에 대한 규칙을 정의한다. <br>\n1 → 데이터 링크 계층(Data Link Layer)<br>\n2 → 네트워크 계층(Network Layer)<br>\n3 → 표현 계층(Presentation Layer)\n<br>\n<br>심리학자 톰 마릴은 컴퓨터가 메시지를 전달하고, 메시지가 제대로 도착했는지 확인하며, 도착하지 않았을 경우 메시지를 재전송하는 일련의 방법을 ‘기술적 은어’를 뜻하는 ( )이라는 용어로 정의하였다.\n<br>\n<br>프로토콜은 서로다른 기기들 간의 데이터 교환을 원활하게 수행할 수 있도록 표준화 시켜놓은 통신 규약이다. 프로토콜의 기본요소 3가지를 쓰시오.\n<br>\n구문(Syntex)<br>\n의미(Semantics)<br>\n시간(Timing)\n<br>\n<br>( 1 ) : 연결형 통신에서 주로 사용되는 방식으로, 출발지와 목적지의 전송 경로를 미리 연결하여 논리적으로 고정한 후 통신하는 방식\n<br>( 2 ) : 비연결형 통신에서 주로 사용되는 방식으로, 사전에 접속 절차를 수행하지 않고 헤더에 출발지에서 목적지까지의 경로 지정을 위한 충분한 정보를 붙여서 개별적으로 전달하는 방식\n<br>\n1 → 가상 회선(Virtual Circuit)<br>\n2 → 데이터그램(Datagram)\n<br>\n<br>인터넷 환경에서의 호스트 상호 간 통신에서 연결된 네트워크 접속 장치의 물리적 주소인 MAC 주소를 이용하여 IP주소를 찾는 인터넷 계층의 프로토콜로, 역순 주소 결정 프로토콜이라 불린다.\n<br>\nRARP(Reverse Address Resolution protocol)\n<br>\n<br>( )는 한 번의 로그인으로 개인이 가입한 모든 사이트를 이용할 수 있게 해주는 시스템을 말한다.\n<br>개인의 경우, 사이트에 접속하기 위하여 아이디와 패스워드는 물론 이름, 전화번호 등 개인정보를 각 사이트마다 일일이 기록해야 하던 것이 한 번의 작업으로 끝나므로 불편함이 해소되며, 기업에서는 회원에 대한 통합관리가 가능해 마케딩을 극대화시킬 수 있다는 장점이 있다.\n<br>\nSSO(Single Sign On)\n<br>\n<br>재난 및 군사 현장과 같이 별도의 고정된 유선망을 구축할 수 없는 장소에서 모바일 호스트만을 이용하여 구성한 네트워크.\n<br>망을 구성한 후 단기간 사용되는 경우나 유선망을 구성하기 어려운 경우에 적합하다.\n<br>멀티 홉 라우팅 기능을 지원한다.\n<br>\n애드 훅 네트워크(Ad-hoc Network)\n<br>\n<br>우리말로 번역하면 '네트워크 주소 변환'이라는 의미의 영문 3글자 약자이다.\n<br>1개의 정식 IP 주소에 다량의 가상 사설 IP 주소를 할당 및 연결하는 방식이다.\n<br>1개의 IP 주소를 사용해서 외부에 접속할 수 있는 노드는 어느 시점에서 1개만으로 제한되는 문제가 있으나, 이 때에는 IP 마스커레이드(Masquerade)를 이용하면 된다.\n<br>\nNAT(Network Address Translation)\n<br>\n<br>\n정의<br>\n웹상에 존재하는 데이터를 개별 URI로 식별하고, 각 URI에 링크 정보를 부여함으로써 상호 연결된 웹을 지향하는 모형이다.<br>\n링크 기능이 강조된 시맨틱웹의 모형에 속한다고 볼 수 있으며, 팀 버너스 리의 W3C를 중심으로 발전하고있다. <br>\n주요 기능 <br>공개된 데이터를 이용하면 내가 원하는 데이터가 이미 존재하는지, 어디에 존재하는지 알 수 있다.\n<br>URI로 구별되는 데이터 리소스의 자유로운 접근 및 이용이 가능하므로 큰 노력 없이 데이터의 매쉬업이 가능하다.\n<br>내가 만든 데이터가 아니라도 URI를 이용하여 링크만 해주면 이용할 수 있다. <br>\n4대 원칙 <br>통합 자원 식별자(URI)를 사용한다,\n<br>URI는 HTTP 프로토콜을 통해 접근할 수 있어야 한다.\n<br>RDF나 스파클 같은 표준을 사용한다,\n<br>풍부한 링크 정보가 있어야 한다. <br>\nLinked Data와 Open Data를 결합한 용어이다. <br>\nLOD(개방형 링크드 데이터)\n<br>\n<br>경로 제어 프로토콜은 크게 자율 시스템 내부의 라우팅에 사용되는 (①) 와 <br>자율 시스템 간의 라우팅에 사용되는 (②) 로 구분할 수 있다.\n<br>설명 <br>(①) 는 소규모 동종 자율 시스템에서 효율적인 RIP와 대규모 자유 시스템에서 많이 사용되는 (③) 로 나누어진다.\n<br>(③) 는 링크 상태(Link State)를 실시간으로 반영하여 최단 경로로 라우팅을 지원하는 특징이 있다.\n<br>(④) 는 (②) 의 단점을 보완하여 만들어진 라우팅 프로토콜로, 처음 연결될 때는 전체 라우팅 테이블을 교환하고, 이후에는 변환된 정보만을 교환한다. <br>\n<br>BGP\n<br>AS\n<br>HOP\n<br>OSPF\n<br>NAT\n<br>ISP\n<br>EGP\n<br>IGP\n<br> <br>IGP\n<br>EGP\n<br>OSPF\n<br>BGP <br>\n<br>P2P 네트워크를 이용하여 온라인 금융 거래 정보를 온라인 네트워크 참여자(Peer)의 디지털 장비에 분산 저장하는 기술은?\n<br>\n블록체인(Blockchain)\n<br>\n<br>정보 자산을 안전하게 보호하기 위한 보호 절차와 대책으로, 정보보호 관리 체계라고 한다.\n<br>조직에 맞는 정보보호 정책을 수립하고, 위험에 상시 대응하는 여러 보안 대책을 통합 관리한다.\n<br>공공 부문과 민간 기업 부문에서 이것을 평가하고 인증하는 사업을 한국인터넷진흥원(KISA)에서 운영중이다.\n<br>\n<br>( 1 )은 칩 설계 회사인 ARM에서 개발한 기술로, 하나의 프로세서 내에 일반 애플리케이션을 처리하는 일반 구역과, 보안이 필요한 애플리케이션을 처리하는 보안 구역으로 분할하여 관리하는 하드웨어 기반의 보안기술이다.\n<br>( 2 )은 네티즌들이 사이트에 접속할 때 주소를 잘못 입력하거나 철자를 빠뜨리는 실수를 이용하기 위해 이와 유사한 유명 도메인을 미리 등록하는 것으로 URL하이재킹이라고도 한다. <br>\n<br>Pharming\n<br>Typosquatting\n<br>Ransomware\n<br>Tvishing\n<br>Hacktivism\n<br>CSRF\n<br>Trustzone\n<br>Watering Hole\n<br>APT\n<br>Smurfing\n<br> <br>Trustzone\n<br>Typosquatting <br>\n<br>RAID(Redundant Array of Independent Disks)란 여러개의 하드디스크를 조합하여 성능 향상과 데이터 보호기능을 제공하는 기술이다.\n<br> <br>RAID 0: 성능 최우선, 데이터 보호 없음.\n<br>RAID 1: 데이터 안정성 높음, 저장 용량 절반 사용.\n<br>RAID 5: 성능과 안정성 균형, 최소 3개 디스크 필요.\n<br>RAID 6: RAID 5보다 높은 안정성, 최소 4개 디스크 필요.\n<br>RAID 10: RAID 0과 RAID 1의 조합, 고성능과 고안정성 제공. <br>\n<br>오픈 소스 기반 분산 컴퓨팅 플랫폼 이다.\n<br>분산 저장된 데이터들은 클러스터 환경에서 병렬 처리된다.\n<br>일반 PC급 컴퓨터들로 가상화된 대형 스토리지를 형성하고 그 안에 보관된 거대한 데이터 세트를 병렬로 처리할 수 있도록 개발되었다.\n<br>더그 커팅과 마이크 캐퍼렐라가 개발했으며, 구글의 맵리듀스(MapReduce) 엔진을 사용하고 있다.\n<br>\n<br>데이터 마이닝(Data Mining)의 개념을 간략히 서술하시오.\n<br>\n데이터 마이닝은 대량의 데이터를 분석하여 데이터에 내재된 변수 사이의 상호관계를 규명하여 일정한 패턴을 찾아내는 기법이다.\n<br>\n<br>데이터베이스 회복(Recovery) 기법에 관련된 내용.\n<br>( )은 트렌젝션이 데이터를 변경하면, 트렌젝션이 부분 완료되기 전이라도 즉시 실제 DB에 그 내용을 반영하는 기법.\n<br>장애가 발생하여 회복 작업할 경우를 대비하여 갱신된 내용들을 로그에 보관시킨다.\n<br>( )에서 회복 작업을 수행할 경우 Redo와 Undo 모두 수행이 가능하다.\n<br>\n즉각 갱신 기법(Immediate Update)\n<br>\n<br>데이터베이스 병행제어(Concurrency Control) 기법 중 하나로이다.\n<br>접근한 데이터에 대한 연산을 모두 마칠 때 까지 추가적인 접근을 제한함으로써 상호 배타적으로 접근하여 작업을 수행하도록 하는 기법이다.\n<br>\n<br>\n릴리즈 노트는 개발 과정에서 정리된 릴리즈 정보를 고객과 공유하기 위한 문서이다. <br>\n릴리즈 노트는 정확하고 완전한 정보를 기반으로 개발팀에서 직접 현재 시제로 작성해야 한다. <br>\n릴리즈 노트 작성시 노트 이름, 소프트웨어, 릴리즈 버전, 릴리즈 날짜, 릴리즈 노트 날짜, 버전 등이 포함되는 항목은? <br>\n<br>소프트웨어 개발에서의 작업 중 형상 통제에 대해 간략히 서술하시오.\n<br>\n형상 통제는 식별된 형상 항목에 대한 변경 요구를 검토하여 현재의 기준선이 잘 반영될 수 있도록 조정하는 작업이다.\n<br>\n<br>소프트웨어 ( )는 소프트웨어 개발 단계의 각 과정에서 만들어지는 프로그램, 문서, 데이터등을 관리하는 것을 말한다.\n<br>소프트웨어의 개발 과정에서 만들어지는 여러 버전들의 변경사항을 관리하는 일련의 활동이며 이를 지원하는 도구로 Git, SVN 등이 있다.\n<br>\n형상관리(SCM)","aliases":[],"tags":["#정보처리기사","#실기","#키워드","#정리"],"headers":[{"heading":"🥇 정보처리 기사 실기 키워드","level":1,"id":"🥇 정보처리 기사 실기 키워드"},{"heading":"답 : 애자일(Agile)","level":3,"id":"답__**애자일**(Agile)"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : 1 - 기능 / 2 - 비기능","level":3,"id":"답__1_-_**기능**_/_2_-_**비기능**"},{"heading":"답 : 클래스(Class)","level":3,"id":"답__**클래스**(Class)"},{"heading":"답 : 1 - 관계 / 2 - 클래스 / 3 - 인터페이스","level":3,"id":"답__1_-_**관계**_/_2_-_**클래스**_/_3_-_**인터페이스**"},{"heading":"답 : 1 - Aggregation / 2 - Generalization","level":3,"id":"답__1_-_**Aggregation**_/_2_-_**Generalization**"},{"heading":"답 : 패키지 다이어그램(Package Diagram)","level":3,"id":"답__패키지_다이어그램(Package_Diagram)"},{"heading":"계산식 : (30,000 / 300) / 5 = 20","level":3,"id":"계산식__(30,000_/_300)_/_5_=_20"},{"heading":"답 : 20개월","level":3,"id":"답__**20개월**"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : 1 - 물리적 설계 / 2 - 개념적 설계 / 3 - 논리적 설계","level":3,"id":"답__1_-_**물리적**_설계_/_2_-_**개념적**_설계_/_3_-_**논리적**_설계"},{"heading":"답 : 개념적 설계 / 논리적 설계 / 물리적 설계","level":3,"id":"답__**개념**적_설계_/_**논리**적_설계_/_**물리**적_설계"},{"heading":"답 : 1 - 연산 / 2 - 구조","level":3,"id":"답__1_-_**연산**_/_2_-_**구조**"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : 1 - 유일성 / 2 - 최소성","level":3,"id":"답__1_-_**유일성**_/_2_-_**최소성**"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : %","level":3,"id":"답__**%**"},{"heading":"정답 : 관계해석(Relational Calculus)","level":3,"id":"정답__**관계해석**(Relational_Calculus)"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : 색인(Index)","level":3,"id":"답__색인(**Index**)"},{"heading":"답 : RTO(목표복구시간)","level":3,"id":"답__**RTO**(목표복구시간)"},{"heading":"답 : DAC(임의 접근통제)","level":3,"id":"답__**DAC**(임의_접근통제)"},{"heading":"답 : 1 - REDO(재작업) / 2 - UNDO(작업취소)","level":3,"id":"답__1_-_**REDO**(재작업)_/_2_-_**UNDO**(작업취소)"},{"heading":"유니코드 문자(Unicode Text)","level":4,"id":"유니코드_문자(Unicode_Text)"},{"heading":"XML 파서(Parser)","level":4,"id":"XML_파서(Parser)"},{"heading":"마크업(Markup)과 내용(Content)","level":4,"id":"마크업(Markup)과_내용(Content)"},{"heading":"엘리먼트(Element)","level":4,"id":"엘리먼트(Element)"},{"heading":"답 : XML(eXtensible Markup Language)","level":3,"id":"답__**XML**(eXtensible_Markup_Language)"},{"heading":"답 : SOAP(Simple Object Access Protocol)","level":3,"id":"답__**SOAP**(Simple_Object_Access_Protocol)"},{"heading":"답 : WSDL(Web Services Description Language)","level":3,"id":"답__**WSDL**(Web_Services_Description_Language)"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : ISP(인터페이스 분리의 원칙)","level":3,"id":"답__**ISP**(인터페이스_분리의_원칙)"},{"heading":"답 : Control Coupling(제어 결합도)","level":3,"id":"답__**Control_Coupling**(제어_결합도)"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : IPC(Inter-Process Communication)","level":3,"id":"답__**IPC**(Inter-Process_Communication)"},{"heading":"답 : Factory Method 패턴","level":3,"id":"답__**Factory_Method**_패턴"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : 행위(Behavioral)","level":3,"id":"답__**행위**(Behavioral)"},{"heading":"답 : EAI(Enterprise Application Integration)","level":3,"id":"답__**EAI**(Enterprise_Application_Integration)"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : IPSec(Internet Protocol Security)","level":3,"id":"답__**IPSec**(Internet_Protocol_Security)"},{"heading":"답 : JUnit","level":3,"id":"답__**JUnit**"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : 블랙박스 테스트","level":3,"id":"답__**블랙박스_테스트**"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : 동치 분할 검사(Equivalence Partitioning Testing)","level":3,"id":"답__**동치_분할_검사**(Equivalence_Partitioning_Testing)"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : 스텁(Stub)","level":3,"id":"답__**스텁**(Stub)"},{"heading":"답 : Regression(회귀 테스트)","level":3,"id":"답__**Regression**(회귀_테스트)"},{"heading":"답 : 샘플링 오라클(Sampling Oracle)","level":3,"id":"답__**샘플링_오라클**(Sampling_Oracle)"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"소스코드 품질 분석 도구","level":4,"id":"소스코드_품질_분석_도구"},{"heading":"정적분석 도구(Static Analysis)","level":4,"id":"정적분석_도구(Static_Analysis)"},{"heading":"동적분석 도구(Dynamic Analysis)","level":4,"id":"동적분석_도구(Dynamic_Analysis)"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : TKIP","level":3,"id":"답__**TKIP**"},{"heading":"답 : DES(Data Encryption Standard)","level":3,"id":"답__**DES**(Data_Encryption_Standard)"},{"heading":"답 : AES(Advanced Encryption Standard)","level":3,"id":"답__**AES**(Advanced_Encryption_Standard)"},{"heading":"답 : MD5(Message Digest Algorithm 5)","level":3,"id":"답__**MD5**(Message_Digest_Algorithm_5)"},{"heading":"답 : ARP(Address Resolution Protocol)","level":3,"id":"답__**ARP**(Address_Resolution_Protocol)"},{"heading":"source : 192.168.1.200","level":4,"id":"source__192.168.1.200"},{"heading":"destination : 192.168.1.200","level":4,"id":"destination__192.168.1.200"},{"heading":"protocol : 6","level":4,"id":"protocol__6"},{"heading":"src port : 21845","level":4,"id":"src_port__21845"},{"heading":"dst port : 21845","level":4,"id":"dst_port__21845"},{"heading":"답 : LAND Attack(Local Area Network Denial Attack)","level":3,"id":"답__**LAND_Attack**(Local_Area_Network_Denial_Attack)"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : 세션 하이재킹(Session Hijacking)","level":3,"id":"답__**세션_하이재킹**(Session_Hijacking)"},{"heading":"답 : Watering Hole","level":3,"id":"답__**Watering_Hole**"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : SIEM(Security Information & Event Management)","level":3,"id":"답__**SIEM**(Security_Information_&_Event_Management)"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : UNIX","level":3,"id":"답__**UNIX**"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : (대기 시간 + 서비스 시간) / 서비스 시간","level":3,"id":"답__**(대기_시간_+_서비스_시간)_/_서비스_시간**"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"권한은 rwx로, 읽기 - 쓰기 - 실행 순이다.","level":4,"id":"권한은_*rwx*로,_*읽기_-_쓰기_-_실행*_순이다."},{"heading":"순서는 사용자 - 그룹 - 기타사용자 순이다.","level":4,"id":"순서는_*사용자_-_그룹_-_기타사용자*_순이다."},{"heading":"따라서, rwx r-w --x → 111 101 001 → 7 5 1 → chmod 751 a.txt","level":5,"id":"따라서,_*rwx_r-w_--x*_→_*111_101_001*_→_*7_5_1*_→_chmod_751_a.txt"},{"heading":"답 : chmod 751 a.txt","level":3,"id":"답__**chmod_751_a.txt**"},{"heading":"FLSM 방식은 모든 서브넷이 같은 크기로 나누는 방식이다.","level":4,"id":"FLSM_방식은_모든_서브넷이_같은_크기로_나누는_방식이다."},{"heading":"1. 사용가능한 호스트 개수 설정","level":4,"id":"1._사용가능한_호스트_개수_설정"},{"heading":"/24 → 는 서브넷(Subnet) 마스크를 의미한다. 즉 서브넷 마스크는 1의 개수가 24개라는 것으로, 이를 2진수로 표현하면 11111111 11111111 11111111 00000000 이다.","level":5,"id":"/24_→_는_서브넷(Subnet)_마스크를_의미한다._즉_서브넷_마스크는_1의_개수가_24개라는_것으로,_이를_2진수로_표현하면_11111111_11111111_11111111_00000000_이다."},{"heading":"남은 0의 개수(8개 → 2^8) 에서 네트워크&브로드케스트 주소(2개) 제외 = 256-2 = 254","level":5,"id":"남은_0의_개수(8개_→_2^8)_에서_**네트워크&브로드케스트_주소(2개)**_제외_=_256-2_=_254"},{"heading":"2. 서브넷 크기 설정","level":4,"id":"2._서브넷_크기_설정"},{"heading":"3개의 서브넷으로 나눌 때, 반드시 2의 거듭제곱 단위로 나누어야 하므로, 가장 가까운 2의 배수는 4가 된다. 즉, 254 / 4 = 63.5 = 64개 이다.","level":5,"id":"3개의_서브넷으로_나눌_때,_**반드시_2의_거듭제곱_단위로**_나누어야_하므로,_가장_가까운_2의_배수는_4가_된다._즉,_254_/_4_=_63.5_=_**64개**_이다."},{"heading":"1. IP의 앞자리로 Class를 구한다","level":4,"id":"1._IP의_앞자리로_Class를_구한다"},{"heading":"서브넷 마스크가 255.255.255.192라면 111…111 11000000으로 C클래스 기본 서브넷보다 **1의 개수가 2개 많다.","level":5,"id":"**서브넷_마스크가_255.255.255.192**라면_111…111_11000000으로_C클래스_기본_서브넷보다_**1의_개수가_2개_많다."},{"heading":"62개 이다.","level":3,"id":"**62개**_이다."},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : 프로토콜(Protocol)","level":3,"id":"답__**프로토콜(Protocol)**"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"보기","level":4,"id":"보기"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : ISMS","level":3,"id":"답___**ISMS**"},{"heading":"보기","level":4,"id":"보기"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"RAID별 주요 특징 정리","level":3,"id":"RAID별_주요_특징_정리"},{"heading":"답 : 하둡(Haddoop)","level":3,"id":"답__**하둡(Haddoop)**"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 : 로킹(Locking)","level":3,"id":"답__**로킹**(Locking)"},{"heading":"답 : 머릿말(Header)","level":3,"id":"답__**머릿말**(Header)"},{"heading":"답 :","level":3,"id":"답_"},{"heading":"답 :","level":3,"id":"답_"}],"backlinks":[],"links":["?query=tag:%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC","?query=tag:%EC%8B%A4%EA%B8%B0","?query=tag:%ED%82%A4%EC%9B%8C%EB%93%9C","?query=tag:%EC%A0%95%EB%A6%AC","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#🥇 정보처리 기사 실기 키워드","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**애자일**(Agile)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__1_-_**기능**_/_2_-_**비기능**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**클래스**(Class)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__1_-_**관계**_/_2_-_**클래스**_/_3_-_**인터페이스**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__1_-_**Aggregation**_/_2_-_**Generalization**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__패키지_다이어그램(Package_Diagram)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#계산식__(30,000_/_300)_/_5_=_20","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**20개월**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__1_-_**물리적**_설계_/_2_-_**개념적**_설계_/_3_-_**논리적**_설계","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**개념**적_설계_/_**논리**적_설계_/_**물리**적_설계","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__1_-_**연산**_/_2_-_**구조**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__1_-_**유일성**_/_2_-_**최소성**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**%**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#정답__**관계해석**(Relational_Calculus)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__색인(**Index**)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**RTO**(목표복구시간)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**DAC**(임의_접근통제)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__1_-_**REDO**(재작업)_/_2_-_**UNDO**(작업취소)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#유니코드_문자(Unicode_Text)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#XML_파서(Parser)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#마크업(Markup)과_내용(Content)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#엘리먼트(Element)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**XML**(eXtensible_Markup_Language)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**SOAP**(Simple_Object_Access_Protocol)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**WSDL**(Web_Services_Description_Language)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**ISP**(인터페이스_분리의_원칙)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**Control_Coupling**(제어_결합도)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**IPC**(Inter-Process_Communication)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**Factory_Method**_패턴","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**행위**(Behavioral)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**EAI**(Enterprise_Application_Integration)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**IPSec**(Internet_Protocol_Security)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**JUnit**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**블랙박스_테스트**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**동치_분할_검사**(Equivalence_Partitioning_Testing)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**스텁**(Stub)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**Regression**(회귀_테스트)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**샘플링_오라클**(Sampling_Oracle)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#소스코드_품질_분석_도구","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#정적분석_도구(Static_Analysis)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#동적분석_도구(Dynamic_Analysis)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**TKIP**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**DES**(Data_Encryption_Standard)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**AES**(Advanced_Encryption_Standard)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**MD5**(Message_Digest_Algorithm_5)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**ARP**(Address_Resolution_Protocol)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#source__192.168.1.200","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#destination__192.168.1.200","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#protocol__6","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#src_port__21845","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#dst_port__21845","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**LAND_Attack**(Local_Area_Network_Denial_Attack)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**세션_하이재킹**(Session_Hijacking)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**Watering_Hole**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**SIEM**(Security_Information_&_Event_Management)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**UNIX**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**(대기_시간_+_서비스_시간)_/_서비스_시간**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#권한은_*rwx*로,_*읽기_-_쓰기_-_실행*_순이다.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#순서는_*사용자_-_그룹_-_기타사용자*_순이다.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#따라서,_*rwx_r-w_--x*_→_*111_101_001*_→_*7_5_1*_→_chmod_751_a.txt","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**chmod_751_a.txt**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#FLSM_방식은_모든_서브넷이_같은_크기로_나누는_방식이다.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#1._사용가능한_호스트_개수_설정","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#/24_→_는_서브넷(Subnet)_마스크를_의미한다._즉_서브넷_마스크는_1의_개수가_24개라는_것으로,_이를_2진수로_표현하면_11111111_11111111_11111111_00000000_이다.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#남은_0의_개수(8개_→_2^8)_에서_**네트워크&브로드케스트_주소(2개)**_제외_=_256-2_=_254","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#2._서브넷_크기_설정","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#3개의_서브넷으로_나눌_때,_**반드시_2의_거듭제곱_단위로**_나누어야_하므로,_가장_가까운_2의_배수는_4가_된다._즉,_254_/_4_=_63.5_=_**64개**_이다.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#1._IP의_앞자리로_Class를_구한다","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#**서브넷_마스크가_255.255.255.192**라면_111…111_11000000으로_C클래스_기본_서브넷보다_**1의_개수가_2개_많다.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#**62개**_이다.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**프로토콜(Protocol)**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#보기","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답___**ISMS**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#보기","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#RAID별_주요_특징_정리","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**하둡(Haddoop)**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**로킹**(Locking)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답__**머릿말**(Header)","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html#답_"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html","pathToRoot":"../../..","createdTime":1739777477564,"modifiedTime":1740028264015,"sourceSize":52862,"sourcePath":"study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 키워드.md","exportPath":"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png","사진-및-문서/do-messenger_screenshot_2025-02-10_17_10_58.png","사진-및-문서/do-messenger_screenshot_2025-02-11_13_47_16.png","사진-및-문서/do-messenger_screenshot_2025-02-11_15_32_34.png","사진-및-문서/do-messenger_screenshot_2025-02-11_16_31_10.png","사진-및-문서/do-messenger_screenshot_2025-02-12_14_04_58.png"]},"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html":{"title":"🥇 정보처리 기사 실기 프로그래밍-제어문","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:정보처리기사\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정보처리기사</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:실기\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#실기</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:키워드\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#키워드</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:정리\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정리</a> <br> <a href=\"http://lts.kr?query=tag:정보처리기사\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정보처리기사\">#정보처리기사</a> <a href=\"http://lts.kr?query=tag:실기\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#실기\">#실기</a> <a href=\"http://lts.kr?query=tag:키워드\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#키워드\">#키워드</a> <a href=\"http://lts.kr?query=tag:정리\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정리\">#정리</a><br>#include &lt;stdio.h&gt;\nmain() { int s, el = 0; for (int i = 6; i &lt;= 30; i++) { s = 0; for (int j = 1; j &lt;= i / 2; j++) if (i % j == 0) s = s + j; if (s == i) el++; } printf(\"%d\", el);\n}\n<br>j &lt;= i / 2; -&gt; 나머지가 몇이든 버린다.\n<br>하나하나 분석하면, <br>6~30까지 자신의 약수(나누어 떨어지는 수)를 모두 더한다\n<br>모두 더한 수와 자신이 같은지 판단하여 출력한다.\n<br>6과 28이 해당한다.\n<br>public class Test { public static void main(String[] args) { int r = 0; for (int i = 1; i &lt; 999; i++) { if (i % 3 == 0 &amp;&amp; i % 2 == 0) r = i; } System.out.print(r); } }\n<br>1 ~ 998까지\n<br>3으로 나누어 떨어지면서,\n<br>2로도 나누어 떨어지는 녀석 즉, 2와 3의 공배수(6의 배수)\n<br>일때, 가장 큰수(매번 초기화 하므로)를 구한다.\n<br>public class Test { public static void main(String[] args) { int i = 3, k = 1; switch(i) { case 1: k++; case 2: k -= 3; case 3: k = 0; case 4: k += 3; case 5: k -= 10; default: k--; } System.out.print(k); }\n}\n<br>i가 3이므로 case3을 찾아간다.\n<br>break문이 없으므로 그 밑으로 쭉 수행한다\n<br>1234의 역순은 4321이다. 단 1230처럼 0으로 끝나는 정수는 고려하지 않는다.<br>#include &lt;stdio.h&gt; int main() { int number = 1234; int div = 10, result = 0; while (number \"( 1 )\" 0) { result = result * div; result = result + number \"( 2 )\" div; number = number \"( 3 )\" div; } printf(\"%d\", result); }\n<br>한자리수씩 커지면서 바꾸는거다.\n<br>&gt; : 0보다 클때까지 반복한다.\n<br>% : 나머지를 가져온다\n<br>/ : 나누고, 나머지를 버린다.\n<br>첫 사이클\n0\n4\n123\n<br>두 번쨰\n40\n43\n12\n<br>세 번째\n430\n432\n1\n<br>네 번째\n4320\n4321\n0\n<br>public class Test { public static void main(String[] args) { int w = 3, x = 4, y = 3, z = 5; if((w == 2 | w == y) &amp; !(y &gt; z) &amp; (1 == x ^ y != z)) { w = x + y; if(7 == x ^ y != w) System.out.println(w); else System.out.println(x); } else { w = y + z; if(7 == y ^ z != w) System.out.println(w); else System.out.println(z); } } }\n<br>\n&amp; , | -&gt; 비트 연산으로써, 2진법을 비트연산하면 된다. <br>\nx ^ y 연산은 비트 XOR연산으로써,<br>\n001 -&gt; y != z<br>\n000 -&gt; 1 == x<br>\n--- (같으면 0 / 다르면 1)<br>\n001 -&gt; 4 가 된다. <br>a = 100 result = 0 for i in range(1,3): result = a &gt;&gt; i result = result + 1 print(result)\n<br>i = 1,2 수행\n<br>a &gt;&gt; i 는 오른쪽 시프트 연산자로써, a값을 오른쪽으로 i비트 움직인다는 뜻이다.\n<br>파이썬에서 정수는 4Byte이므로, 8bit x 32개 로 계산하면 된다.\n<br>0000 ... 0001100100 -&gt; 100 (4 + 32 + 64)<br>\n시프트 연산을 한번 수행하면<br>\n0000 ... 0000110010 -&gt; 50 (2 + 16 + 32)<br>\n+1 을 하면 51 -&gt; 110011 <br>\n한번 더 수행하면 100을 두칸 시프트 한다<br>\n0000 ... 0000011001 -&gt; 25 (1 + 8 + 16)<br>\n25+1 = 26 <br>파이썬의 print 기본적으로 파이썬의 print는 print(end='\\n') 이 포함된 식이다. (줄바꿈 디펄트)<br>\n즉 print(\"123\", end=' ')로 표현하면 줄바꿈 대신 공백이 삽입된다.\n<br>public class Test { public static void main(String[]args) { int a[] = new int[8]; int i = 0; int n = 10; while( \"( 1 )\" ) { a[i++] = \"( 2 )\"; n /= 2; } for(i = 7; i &gt;= 0; i--) System.out.print(a[i]); } }\n<br>n /= 2;란 n = n / 2랑 동일한 문법이다.\n<br>먼저, 10진수를 2진수로 변환하기 위해서는, 2로 계속해서 나누어, 나머지를 삽입하면된다.<br>10 / 2 = 5(0)\n5 / 2 = 2(1)\n2 / 2 = 1(0) (1)\n10 -&gt; 1010 (8+2) 19 / 2 = 9(1)\n9 / 2 = 4(1)\n4 / 2 = 2(0)\n2 / 2 = 1(0)\n(1)\n19 -&gt; 10011 (16+2+1)\n<br>JAVA는 배열 선언시 초기화를 하지 않으면 0 이 삽입된다<br>\na[i++] = x 를 수행하면 i번째 자리에 값 삽입 후, i값을 증가시킨다.<br>첫번째 조건식에는 n &gt; 0을 넣는다.\n<br>16일때, a[] 배열에는 11001 순서로 들어가게된다.\n<br>n % 2(나머지가 계속 들어간다.)<br>\n10 -&gt; 5 -&gt; 2 -&gt; 1 -&gt; 0(조건식에 부합) 실행 X<br>\n0 1 0 1<br>\na = [0,1,0,1,0,0,0,0]\n<br>를 역순으로 출력하면 1010 이 된다.<br>\n출력은 00001010이 된다.\n<br>","aliases":[],"tags":["#정보처리기사","#실기","#키워드","#정리"],"headers":[{"heading":"🥇 정보처리 기사 실기 프로그래밍-제어문","level":1,"id":"🥇 정보처리 기사 실기 프로그래밍-제어문"},{"heading":"C로 구현된 프로그램을 분석하여 그 실행 결과를 쓰시오","level":1,"id":"C로_구현된_프로그램을_분석하여_그_실행_결과를_쓰시오"},{"heading":"답 : 2","level":3,"id":"답__2"},{"heading":"java로 구현된 프로그램 실행결과를 작성하시오.","level":1,"id":"java로_구현된_프로그램_실행결과를_작성하시오."},{"heading":"답 : 996","level":3,"id":"답__996"},{"heading":"java로 구현된 프로그램 실행결과를 작성하시오.","level":1,"id":"java로_구현된_프로그램_실행결과를_작성하시오."},{"heading":"답 : -8","level":3,"id":"답__-8"},{"heading":"C로 구현된 프로그램을 분석하여 그 실행 결과를 쓰시오.","level":1,"id":"C로_구현된_프로그램을_분석하여_그_실행_결과를_쓰시오."},{"heading":"답 : > , % , /","level":3,"id":"답__>_,_%_,_/"},{"heading":"java로 구현된 프로그램 실행결과를 작성하시오.","level":1,"id":"java로_구현된_프로그램_실행결과를_작성하시오."},{"heading":"답 : 7","level":3,"id":"답__7"},{"heading":"다음 Python으로 구현된 프로그램의 출력을 쓰시오.","level":1,"id":"다음_Python으로_구현된_프로그램의_출력을_쓰시오."},{"heading":"답 : 26","level":3,"id":"답__26"},{"heading":"다음 JAVA코드는 10진수를 2진수로 변환하는 프로그램이다. 빈칸을 채워라","level":1,"id":"다음_JAVA코드는_10진수를_2진수로_변환하는_프로그램이다._빈칸을_채워라"},{"heading":"답 : n > 0 , n % 2","level":3,"id":"답__n_>_0_,_n_%_2"}],"backlinks":[],"links":["?query=tag:%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC","?query=tag:%EC%8B%A4%EA%B8%B0","?query=tag:%ED%82%A4%EC%9B%8C%EB%93%9C","?query=tag:%EC%A0%95%EB%A6%AC","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html#🥇 정보처리 기사 실기 프로그래밍-제어문","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html#C로_구현된_프로그램을_분석하여_그_실행_결과를_쓰시오","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html#답__2","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html#java로_구현된_프로그램_실행결과를_작성하시오.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html#답__996","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html#java로_구현된_프로그램_실행결과를_작성하시오.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html#답__-8","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html#C로_구현된_프로그램을_분석하여_그_실행_결과를_쓰시오.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html#답__>_,_%_,_/","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html#java로_구현된_프로그램_실행결과를_작성하시오.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html#답__7","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html#다음_Python으로_구현된_프로그램의_출력을_쓰시오.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html#답__26","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html#다음_JAVA코드는_10진수를_2진수로_변환하는_프로그램이다._빈칸을_채워라","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html#답__n_>_0_,_n_%_2"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html","pathToRoot":"../../..","createdTime":1741575459595,"modifiedTime":1741592944477,"sourceSize":5238,"sourcePath":"study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 프로그래밍-제어문.md","exportPath":"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html","showInTree":true,"treeOrder":0,"attachments":[]},"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html":{"title":"🥇 정보처리 기사 실기 SQL 문제","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:정보처리기사\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정보처리기사</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:실기\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#실기</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:SQL\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#SQL</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:정리\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정리</a> <br> <a href=\"http://lts.kr?query=tag:정보처리기사\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정보처리기사\">#정보처리기사</a> <a href=\"http://lts.kr?query=tag:실기\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#실기\">#실기</a> <a href=\"http://lts.kr?query=tag:SQL\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SQL\">#SQL</a> <a href=\"http://lts.kr?query=tag:정리\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정리\">#정리</a><br>CREATE TABLE 부서 ( 부서코드 INT PRIMARY KEY, 부서명 VARCHAR(20)\n); CREATE TABLE 직원 ( 직원코드 INT PRIMARY KEY, 부서코드 INT, 직원명 VARCHAR(20), FOREIGN KEY(부서코드) REFERENCES 부서(부서코드) ON DELETE CASCADE\n); INSERT INTO 부서 VALUES(10, '영업부');\nINSERT INTO 부서 VALUES(20, '기획부');\nINSERT INTO 부서 VALUES(30, '개발부'); INSERT INTO 직원 VALUES(1001, 10, '이진수');\nINSERT INTO 직원 VALUES(1002, 10, '곽명경');\nINSERT INTO 직원 VALUES(1003, 20, '김건길');\nINSERT INTO 직원 VALUES(1004, 20, '최민수');\nINSERT INTO 직원 VALUES(1005, 20, '이용광');\nINSERT INTO 직원 VALUES(1006, 30, '한성광');\nINSERT INTO 직원 VALUES(1007, 30, '박미경');\n<br>SELECT DISTINCT COUNT(부서코드) FROM 직원 WHERE 부서코드 = 20;\n<br>결과: 3<br>해설 :<br>DISTINCT(중복 제거)는 부서코드가 아닌 COUNT(부서코드)에 적용되므로, 여전히 부서코드가 20인 컬럼의 수 '3'이 된다.\n<br>DELETE FROM 부서 WHERE 부서코드 = 20;\nSELECT DISTINCT COUNT(부서코드) FROM 직원;\n<br>결과: 4<br>해설 :<br>부서코드가 20인 컬럼을 삭제한 후, 모든 직원테이블의 부서코드 개수를 센다. 이때 DISTINCT(중복 제거)는 COUNT에 적용되므로<br>\n여전히 '4'이다.\n<br>\n<br>DEPT는 '학과'를 뜻한다\n<br>가정: 전기과 학생 50명, 전자과 학생 100명, 전산과 학생 50명<br>SELECT DEPT FROM STUDENT;\n<br>결과: 200<br>SELECT DISTINCT DEPT FROM STUDENT;\n<br>결과: 3<br>해설 :<br>전기/전자/화학 3가지 종류로 이루어진 DEPT 속성의 중복을 제거하면 '3'이 남는다.\n<br>SELECT COUNT(DISTINCT DEPT) FROM STUDENT WHERE DEPT = '전산과';\n<br>결과: 1<br>해설 :<br>전산과인 학생들의 학과를 뽑는다. 이후 해당 학과의 중복을 제거하면 1개만 남게 된다.\n<br>\n<br>'H'제조사의 '단가' 보다 높은 '단가'를 가진 제품의 정보를 조회하는 SQL문이다.\n<br>SELECT 제품명, 단가, 제조사\nFROM 제품\nWHERE 단가 &gt; ( ) (SELECT 단가 FROM 제품 WHERE 제조사 = 'H');\n<br>답: ALL<br>해설 :<br>해당 쿼리는, where절의 하위 질의에 결과를 반영하여 본 질의의 조건에 추가하는 SQL이다.\n<br>만약 서브쿼리에서 'H'제조사의 제품의 단다가 100/200/400 이 나왔다면,\n<br>해당 단가들 보다 높은 단가를 찾기 위해서는 100/200/400을 모두 비교하여야 한다.\n<br>따라서 ALL키워드가 들어간다면 모든 단가를 비교할 수 있다.\n<br>서브쿼리 앞에 아무 키워드도 붙지 않는다면, 서브쿼리가 다중 행일때 오류를 발생시킨다.<br>\n이때, ANY나 ALL 연산자를 사용하여 다중행을 비교할 수 있다.<br>ANY -&gt; 서브쿼리 결과 중 하나라도 참이면 해당 행은 참<br>\nALL -&gt; 서브쿼리 결과 중 모든 것에 참이어야 해당 행은 참<br>TABLE<br>SELECT COUNT(COL2)\nFROM TABLE\nWHERE COL1 IN (2, 3) OR COL2 IN (3, 5);\n<br>결과: 3<br>해설 :<br>COL1 컬럼에 2나 3이 포함되었거나, COL2컬럼에 3이나 5가 포함된 컬럼 (4개)를 찾는다,\n<br>\n<br>여기서 NULL은 COUNT에 집계가 되지 않으므로 답은 '3'이다.\n<br><img alt=\"Pasted image 20250225161448.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250225161448.png\" target=\"_self\"><br>결과 :<br>① TTL - ② 부장 - ③ 대리 - ④ 과장 - ⑤ 차장\n<br>해설 :<br>해당 관계 대수식의 파이는 속성 리스트에 제시된 속성값만을 추출하여 새로운 릴레이션을 만드는 PROJECT연산이다\n<br>따라서, TTL속성이 추출되어 속성명인 TTL부터 모든 속성값이 결과로 나타난다.<br>\n= SELECT TTL FROM EMPLOYEE\n<br>이 연산들은 관계형 데이터베이스의 데이터를 검색하고 변형하는 데 사용됩니다.<br>관계 대수에서 테이블을 하나의 집합(Set)으로 간주하고 수행하는 연산입니다.<br>(단, SQL문은 ISO/IEC 9075 표준을 기반으로 작성하시오.) <br>( 1 ) TABLE 학생 ( 2 ) 주소 VARCHAR(20);\n<br>답 :<br>\n1 -&gt; ALTER<br>\n2 -&gt; ADD<br>해설 :<br>속성을 추가한다 -&gt; 테이블을 수정한다 -&gt; ALTER\n<br>ALTER + ADD 속성 추가.\n<br>\n<br>3, 4학년의 학번, 이름을 조회한다.\n<br>IN 예약어를 사용해야 한다.\n<br>속성명 아래의 괄호는 속성의 자료형을 의미한다.\n<br>정답 :<br>SELECT 학번, 이름 FROM 학생 WHERE 학년 IN (3, 4);\n<br>해설 :<br>IN예약어는 WHERE절과 함께 쓰이며, WHERE 속성 IN (조건,조건,...) 방식으로 사용된다.\n<br>해당 조건을 포함하고 있는 모든 속성이 선택되게 된다.\n<br>student 테이블<br>정답 :<br>CREATE INDEX idx_name ON student(name);\n<br>해설 :<br>인덱스 생성 문법 :<br>\nCREATE INDEX 인덱스명 ON 테이블명(속성);\n<br>(단, 아래의 실행 결과가 되도록 한다.)<br>\n<br>\nWHERE 조건절은 사용할 수 없다. <br>\nGROUP BY는 반드시 포함한다. <br>\n집계함수(Aggregation Function)를 적용한다. <br>\n학과별튜플수 컬럼명을 출력에 Alias(AS)를 활용한다. <br>\n문장 끝의 세미콜론(;)은 생략해도 무방하다. <br>\n인용부호 사용이 필요한 경우 단일 따옴표(' ')를 사용한다.\n정답 : <br>SELECT 학과, COUNT(*) AS 학과별튜플수\nFROM 학생\nGROUP BY 학과;\n<br>&lt;처리 조건&gt;을 참고하여 적합한 SQL문을 작성하시오.<br>\n<br>WHERE문은 사용하지 않는다.\n<br>GROUP BY와 HAVING을 이용한다.\n<br>집계함수(Aggregation Function)를 사용하여 명령문을 구성한다.\n<br>최소점수, 최대점수는 별칭(Alias)을 위한 AS문을 이용한다.\n<br>명령문 마지막의 세미콜론(;)은 생략 가능하다.\n<br>인용 부호가 필요한 경우 작은따옴표(')를 사용한다.\n<br>정답 :<br>SELECT 과목이름, MIN(점수) AS 최소점수, MAX(점수) AS 최대점수 FROM 성적 GROUP BY 과목이름 HAVING AVG(점수) &gt;= 90;\n<br>해설 :<br>과목이름별로 여러 점수의 통계를 내는것 이기 때문에, GROUP BY 과목이름을 사용한다.\n<br>이때, GROUP BY ~ HAVING 조건 을 사용하여, 해당 그릅화된 데이터 중 다음 조건을 만족하는 그룹만 포함한다.\n<br>SELECT COUNT(*) CNT FROM A CROSS JOIN B WHERE A.NAME LIKE B.RULE;\n<br>답 : 4<br>해설 :<br>SELECT COUNT(*) CNT 에서 CNT는 as CNT 가 생략된 형태이다.\n<br>CROSS JOIN이란 카디션 프로덕트(곱)을 수행하는 조인방식으로써,<br>\nA테이블의 모든 행과, B테이블의 모든 행의 모든 가능한 조합을 구한다.\n<br>따라서, 저 중 a.name컬럼이 b.rule을 따르는(like 연산을 했을 때, 참인 결과는)<br>총 4개이다.<br>","aliases":[],"tags":["#정보처리기사","#실기","#SQL","#정리"],"headers":[{"heading":"🥇 정보처리 기사 실기 SQL 문제","level":1,"id":"🥇 정보처리 기사 실기 SQL 문제"},{"heading":"1. 다음과 같이 테이블을 정의하고 튜플을 삽입하였을 때, 각 번호에 SQL문을 실행한 결과를 적으시오.","level":1,"id":"1._다음과_같이_테이블을_정의하고_튜플을_삽입하였을_때,_각_번호에_SQL문을_실행한_결과를_적으시오."},{"heading":"실행 SQL ①","level":3,"id":"실행_SQL_①"},{"heading":"실행 SQL ②","level":3,"id":"실행_SQL_②"},{"heading":"2. 학생(STUDENT) 테이블에서 SQL 실행 결과로 표시되는 튜플의 수를 예측하시오.","level":1,"id":"2._학생(STUDENT)_테이블에서_SQL_실행_결과로_표시되는_*튜플의_수*를_예측하시오."},{"heading":"실행 SQL ①","level":3,"id":"실행_SQL_①"},{"heading":"실행 SQL ②","level":3,"id":"실행_SQL_②"},{"heading":"실행 SQL ③","level":3,"id":"실행_SQL_③"},{"heading":"3. 다음 SQL문에서 괄호 안에 들어갈 알맞은 내용을 작성하시오.","level":1,"id":"3._다음_SQL문에서_괄호_안에_들어갈_알맞은_내용을_작성하시오."},{"heading":"4. 아래 테이블을 기반으로 SQL 실행 결과를 예측하시오.","level":1,"id":"4._아래_테이블을_기반으로_SQL_실행_결과를_예측하시오."},{"heading":"실행 SQL","level":3,"id":"실행_SQL"},{"heading":"5. 다음은 릴레이션에 대해 <관계 대수식>을 수행했을 때 출력되는 <결과>이다. <결과>의 각 칸(①~⑤)에 들어갈 알맞은 답을 쓰시오.","level":1,"id":"5._다음은_`<EMPLOYEE>`_릴레이션에_대해_`<관계_대수식>`을_수행했을_때_출력되는_`<결과>`이다._`<결과>`의_각_칸(①~⑤)에_들어갈_알맞은_답을_쓰시오."},{"heading":"EMPLOYEE 테이블","level":2,"id":"EMPLOYEE_테이블"},{"heading":"결과 테이블","level":2,"id":"결과_테이블"},{"heading":"✅ 1) 순수 관계 연산 (기본 연산)","level":3,"id":"✅_**1)_순수_관계_연산_(기본_연산)**"},{"heading":"✅ 2) 집합 연산 (Set Operations)","level":3,"id":"✅_**2)_집합_연산_(Set_Operations)**"},{"heading":"6. 다음 <속성 정의서>를 참고하여 <학생> 테이블에 대해 20자의 가변 길이를 가진 주소 속성을 추가하는 을 완성하시오.","level":1,"id":"6._다음_`<속성_정의서>`를_참고하여_`<학생>`_테이블에_대해_20자의_가변_길이를_가진_`주소`_속성을_추가하는_`<SQL문>`을_완성하시오."},{"heading":"속성 정의서","level":2,"id":"속성_정의서"},{"heading":"SQL문","level":2,"id":"SQL문"},{"heading":"7. 다음 <학생> 테이블을 참고하여 <처리 조건>에서 요구하는 SQL문을 작성하시오.","level":1,"id":"7._다음_`<학생>`_테이블을_참고하여_`<처리_조건>`에서_요구하는_SQL문을_작성하시오."},{"heading":"학생 테이블","level":2,"id":"학생_테이블"},{"heading":"처리 조건","level":2,"id":"처리_조건"},{"heading":"8. 다음 테이블을 참고하여 name 속성으로 idx_name이라는 인덱스를 생성하는 SQL문을 작성하시오.","level":1,"id":"8._다음_`<student>`_테이블을_참고하여_name_속성으로_idx_name이라는_**인덱스를_생성**하는_SQL문을_작성하시오."},{"heading":"9. 학생 테이블에서 학과별 튜플의 개수를 검색하시오.","level":1,"id":"9._학생_테이블에서_학과별_튜플의_개수를_검색하시오."},{"heading":"<학생> 테이블","level":2,"id":"`<학생>`_테이블"},{"heading":"<실행결과>","level":2,"id":"`<실행결과>`"},{"heading":"<처리 조건>","level":2,"id":"`<처리_조건>`"},{"heading":"10. <성적>` 테이블에서 과목별 점수의 평균이 90점 이상인 과목이름, 최소점수, 최대점수를 검색하고자 한다.","level":1,"id":"10._<성적>`_테이블에서_과목별_점수의_평균이_90점_이상인_과목이름,_최소점수,_최대점수를_검색하고자_한다."},{"heading":"<성적> 테이블","level":2,"id":"`<성적>`_테이블"},{"heading":"<결과>","level":2,"id":"`<결과>`"},{"heading":"<처리 조건>","level":2,"id":"`<처리_조건>`"},{"heading":"11.<A> 테이블과 <B> 테이블을 참고하여 <SQL문>의 실행 결과를 쓰시오.","level":1,"id":"11.`<A>`_테이블과_`<B>`_테이블을_참고하여_`<SQL문>`의_실행_결과를_쓰시오."},{"heading":"<A> 테이블","level":2,"id":"`<A>`_테이블"},{"heading":"<B> 테이블","level":2,"id":"`<B>`_테이블"},{"heading":"<SQL문>","level":2,"id":"`<SQL문>`"}],"backlinks":[],"links":["?query=tag:%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC","?query=tag:%EC%8B%A4%EA%B8%B0","?query=tag:SQL","?query=tag:%EC%A0%95%EB%A6%AC","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#🥇 정보처리 기사 실기 SQL 문제","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#1._다음과_같이_테이블을_정의하고_튜플을_삽입하였을_때,_각_번호에_SQL문을_실행한_결과를_적으시오.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#실행_SQL_①","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#실행_SQL_②","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#2._학생(STUDENT)_테이블에서_SQL_실행_결과로_표시되는_*튜플의_수*를_예측하시오.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#실행_SQL_①","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#실행_SQL_②","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#실행_SQL_③","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#3._다음_SQL문에서_괄호_안에_들어갈_알맞은_내용을_작성하시오.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#4._아래_테이블을_기반으로_SQL_실행_결과를_예측하시오.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#실행_SQL","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#5._다음은_`<EMPLOYEE>`_릴레이션에_대해_`<관계_대수식>`을_수행했을_때_출력되는_`<결과>`이다._`<결과>`의_각_칸(①~⑤)에_들어갈_알맞은_답을_쓰시오.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#EMPLOYEE_테이블","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#결과_테이블","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#✅_**1)_순수_관계_연산_(기본_연산)**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#✅_**2)_집합_연산_(Set_Operations)**","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#6._다음_`<속성_정의서>`를_참고하여_`<학생>`_테이블에_대해_20자의_가변_길이를_가진_`주소`_속성을_추가하는_`<SQL문>`을_완성하시오.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#속성_정의서","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#SQL문","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#7._다음_`<학생>`_테이블을_참고하여_`<처리_조건>`에서_요구하는_SQL문을_작성하시오.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#학생_테이블","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#처리_조건","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#8._다음_`<student>`_테이블을_참고하여_name_속성으로_idx_name이라는_**인덱스를_생성**하는_SQL문을_작성하시오.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#9._학생_테이블에서_학과별_튜플의_개수를_검색하시오.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#`<학생>`_테이블","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#`<실행결과>`","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#`<처리_조건>`","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#10._<성적>`_테이블에서_과목별_점수의_평균이_90점_이상인_과목이름,_최소점수,_최대점수를_검색하고자_한다.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#`<성적>`_테이블","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#`<결과>`","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#`<처리_조건>`","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#11.`<A>`_테이블과_`<B>`_테이블을_참고하여_`<SQL문>`의_실행_결과를_쓰시오.","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#`<A>`_테이블","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#`<B>`_테이블","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html#`<SQL문>`"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html","pathToRoot":"../../..","createdTime":1740464273334,"modifiedTime":1741575034597,"sourceSize":13348,"sourcePath":"study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 SQL 문제.md","exportPath":"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20250225161448.png"]},"study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html":{"title":"🥈 필기 1과목 - 소프트웨어 설계","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:정보처리기사\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정보처리기사</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:필기\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#필기</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:정리\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정리</a> <br> <a href=\"http://lts.kr?query=tag:정보처리기사\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정보처리기사\">#정보처리기사</a> <a href=\"http://lts.kr?query=tag:필기\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#필기\">#필기</a> <a href=\"http://lts.kr?query=tag:정리\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정리\">#정리</a> <br>\n<br>클래스 인터페이스\n<br>명령어(사용자 질의 수)\n<br>데이터 파일\n<br>출력 보고서\n<br>흭공개운유<br>\n<br>네트워크 변화에 신속히 대처할 수 있다.\n<br>거리 벡터 라우팅 프로토콜 이라고 한다.\n<br>멀티캐스팅을 지원한다.\n<br>최단 경로 탐색에 다익스트라 알고리즘을 사용한다.\n<br>\n<br>클래스 설계서\n<br>통합시험 결과서\n<br>프로그램 코드\n<br>사용자 요구사항 정의서\n<br>\n<br>암호화 키와 복호화 키가 동일한 암호화 알고리즘을 뜻한다.\n<br>\n<br>COCOMO\n<br>Putnam\n<br>Function-Point\n<br>PERT\n<br>\n<br>비교적 실행속도 빠르기 때문에, 다양한 암호의 핵심 함수로 사용될 수 있다.\n<br>키 교환을 필요로 하기 때문에, 키를 교환하는 중 탈취가 될 가능성이 있다.\n<br>\n<br>자신만이 보관하는 비밀키를 이용하여 인증, 전자서명 등에 적용이 가능하다.\n<br>- 캡슐화를 통해 모듈화를 강화하고, 설계 및 구현의 변경에 따른 영향을 최소화 함으로써 품질을 향상시킨다.\n<br>- 재사용 가능한 모듈들을 제공함으로써 예산을 절감한다.\n<br>- 다형성을 통한 인터페이스 확장이 가능하여 다양한 형태와 기능을 가진 애플리케이션 개발이 가능하다.\n<br>- 개발자가 관리하고 통제해야 하는 객체들의 제어를 프레임워크에 넘김으로써 생상선을 향상시킴\n<br>\n<br>벨만-포드 알고리즘 사용\n<br>RIP프로토콜 ( 최대 홉 개수 15개 )\n<br>인접 라우터와 주기적으로 정보 교환\n<br>\n<br>다익스트라 알고리즘 사용\n<br>OSPF프로토콜 ( 최대 홉 개수 제한 없음 )\n<br>최단 경로, 최소 지연, 최대 처리량\n<br><a data-href=\"🥈 필기 2과목 - 소프트웨어 개발\" href=\"http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥈 필기 2과목 - 소프트웨어 개발</a>","aliases":[],"tags":["#정보처리기사","#필기","#정리"],"headers":[{"heading":"🥈 필기 1과목 - 소프트웨어 설계","level":1,"id":"🥈 필기 1과목 - 소프트웨어 설계"},{"heading":"침입탐지 시스템(IDS : Intrusion Detection System)에 대한 설명","level":1,"id":"침입탐지_시스템(IDS__Intrusion_Detection_System)에_대한_설명"},{"heading":"이상탐지(Anomaly Detection)기법","level":3,"id":"이상탐지(Anomaly_Detection)기법"},{"heading":"- Behavior, Statistical Detection으로 불리며, 평균적 시스템의 상태 기준으로 비정상적인 행위나 자원의 사용이 감지되면 이를 알려줌","level":4,"id":"-_Behavior,_Statistical_Detection으로_불리며,_평균적_시스템의_상태_기준으로_==비정상적인_행위나_자원의_사용이_감지되면_이를_알려줌=="},{"heading":"- 잘 알려지지 않은 공격 탐지에 적합. 기존 패턴과 급격하게 다른 패턴을 발견하면 침입으로 판단","level":4,"id":"-_잘_알려지지_않은_공격_탐지에_적합._기존_패턴과_급격하게_다른_패턴을_발견하면_침입으로_판단"},{"heading":"오용탐지(Misuse Detection)기법","level":3,"id":"오용탐지(Misuse_Detection)기법"},{"heading":"- Signature Base나 Knowledge Base로 불리며, 미리 입력해둔 공격 패턴이 감지되면 이를 알려줌","level":4,"id":"-_Signature_Base나_Knowledge_Base로_불리며,_==미리_입력해둔_공격_패턴이_감지되면_이를_알려줌=="},{"heading":"- 잘 알려진 시스템의 취약점을 공격하는 패턴의 침입을 탐지 (새로운 패턴의 공격을 막기 어려움)","level":4,"id":"-_잘_알려진_시스템의_취약점을_공격하는_패턴의_침입을_탐지_(새로운_패턴의_공격을_막기_어려움)"},{"heading":"정보 시스템에서 접근통제 방법에 대한 설명","level":1,"id":"정보_시스템에서_접근통제_방법에_대한_설명"},{"heading":"강제접근 통제(MAC) 맥->등급","level":3,"id":"강제접근_통제(MAC)_==맥->등급=="},{"heading":"- 주체와 객체의 등급을 비교하여 접근 권한을 부여하는 방식","level":4,"id":"-_주체와_객체의_**등급을_비교**하여_접근_권한을_부여하는_방식"},{"heading":"임의접근 통제(DAC) 닥 -> 신원","level":3,"id":"임의접근_통제(DAC)_==닥_->_신원=="},{"heading":"- 접근하는 사용자의 신원에 따라 접근 권한을 부여하는 방식","level":4,"id":"-_접근하는_사용자의_**신원에_따라**_접근_권한을_부여하는_방식"},{"heading":"역할기반접근 통제(RBAC)","level":3,"id":"역할기반접근_통제(RBAC)"},{"heading":"- 직무나 직책과 같이 개인의역할에 따라 접근 권한을 부여하는 접근 정책","level":4,"id":"-_직무나_직책과_같이_*개인의역할*에_따라_접근_권한을_부여하는_접근_정책"},{"heading":"사용자계정 컨트롤(UAC)","level":3,"id":"사용자계정_컨트롤(UAC)"},{"heading":"- 프로그램에서 관리자 수준의 권한이 필요한 작업을 수행할 때 사용자에게 알려서 제어할 수 있도록 돕는기능","level":4,"id":"-_프로그램에서_관리자_수준의_권한이_필요한_작업을_수행할_때_*사용자에게_알려서*_제어할_수_있도록_돕는기능"},{"heading":"자료별 접근통제(Data-Label AC)","level":3,"id":"자료별_접근통제(Data-Label_AC)"},{"heading":"- 개별 행, 열에 대해 쓰기 권한, 읽기 권한을 가졌는지를 명확하게 결정하는 제어방식","level":4,"id":"-_개별_행,_열에_대해_쓰기_권한,_읽기_권한을_가졌는지를_명확하게_결정하는_제어방식"},{"heading":"정보시스템에 대한 설명","level":1,"id":"정보시스템에_대한_설명"},{"heading":"- 고가용성 솔루션(HACMP)","level":3,"id":"-_고가용성_솔루션(HACMP)"},{"heading":"1. AIX를 기반으로 한 IBM의 고가용성 솔루션.","level":4,"id":"1._AIX를_기반으로_한_IBM의_고가용성_솔루션."},{"heading":"2. Resource의 중복 또는 공유를 통해 Application의 보호를 가능하게 해줌","level":4,"id":"2._==Resource의_중복_또는_공유를_통해_Application의_보호==를_가능하게_해줌"},{"heading":"3. 같은 데이터를 공유하거나 동시에 access하는 노드들에서 여러개의 Application을 실행하게 해줌","level":4,"id":"3._같은_데이터를_공유하거나_동시에_access하는_노드들에서_여러개의_Application을_실행하게_해줌"},{"heading":"4. 두대 이상의 시스템을 하나의 클러스터로 묶어 한 시스템에서 장애가 발생할 경우 다른 시스템이 자원을 인수할 수 있도록하여 서비스의 중단을 최소화 할 수 있도록 도와주는 솔루션","level":4,"id":"4._==두대_이상의_시스템을_하나의_클러스터로_묶어==_한_시스템에서_장애가_발생할_경우_다른_시스템이_자원을_인수할_수_있도록하여_서비스의_중단을_최소화_할_수_있도록_도와주는_솔루션"},{"heading":"- 점대점 연결 방식(Point to Point Mode)","level":3,"id":"-_점대점_연결_방식(Point_to_Point_Mode)"},{"heading":"1. 네트워크에 있어 물리적으로는 중개 장치를 통과하지 않고 한 지점에서 다른 지점으로 직접가는 채널","level":4,"id":"1._네트워크에_있어_==물리적으로는_중개_장치를_통과하지_않고==_한_지점에서_다른_지점으로_직접가는_채널"},{"heading":"2. 두 스테이션간을 별도의회선을 사용하여 1대1로 연결","level":4,"id":"2._두_스테이션간을_**별도의회선**을_사용하여_1대1로_연결"},{"heading":"3. 전용회선이나 공중 전화 회선을 이용","level":4,"id":"3._==전용회선이나_공중_전화_회선을_이용=="},{"heading":"4. 회선 구성이 간당하고 대용량 전송에 유리","level":4,"id":"4._회선_구성이_간당하고_대용량_전송에_유리"},{"heading":"5. 별도의 회선과 포트에 따른 높은 설치 비용","level":4,"id":"5._별도의_회선과_포트에_따른_==높은_설치_비용=="},{"heading":"네트워크 공격 방법에 대한 설명","level":1,"id":"네트워크_공격_방법에_대한_설명"},{"heading":"Parsing","level":3,"id":"Parsing"},{"heading":"- 하나의 프로그램을 런타임 환경이 실제로 실행할 수 있는 내부 포맷으로 분석하고 변환하는것을 의미","level":4,"id":"-_하나의_프로그램을_런타임_환경이_실제로_실행할_수_있는_내부_포맷으로_분석하고_변환하는것을_의미"},{"heading":"LAN Tapping","level":3,"id":"LAN_Tapping"},{"heading":"- LAN신호를 직접 자신에게 끌어노는 방식의 공격","level":4,"id":"-_LAN신호를_직접_자신에게_끌어노는_방식의_공격"},{"heading":"Switch Jamming","level":3,"id":"Switch_Jamming"},{"heading":"- 스위치의 기능이 방해 받아 정상 동작을 하지 못해 스위치가 더미 허브처럼 작동하게 하는것","level":4,"id":"-_스위치의_기능이_방해_받아_정상_동작을_하지_못해_**스위치가_더미_허브처럼_작동**하게_하는것"},{"heading":"FTP Flooding","level":3,"id":"FTP_Flooding"},{"heading":"- TCP의 3way Handshake 취약점을 이용한 DoS공격으로, 다량의 SYN패킷을 보내 백로그큐를 가득 채우는 공격.","level":4,"id":"-_TCP의_3way_Handshake_취약점을_이용한_DoS공격으로,_**다량의_SYN패킷을_보내_백로그큐를**_가득_채우는_공격."},{"heading":"Smurfing","level":3,"id":"Smurfing"},{"heading":"- IP또는 ICMP의 특성을 악용하여 특정 사이트에 집중적으로데이터를 보내 네트워크 또는 시스템의 상태를 불능으로 만드는 공격.","level":4,"id":"-_IP또는_ICMP의_특성을_악용하여_특정_사이트에_**집중적으로데이터를_보내_네트워크_또는_시스템의_상태를_불능으로**_만드는_공격."},{"heading":"블루투스 공격과 설명","level":1,"id":"블루투스_공격과_설명"},{"heading":"블루버그","level":3,"id":"블루버그"},{"heading":"- 블루투스 장비 사이의 취약한 연결 관리를 이용한 공격","level":4,"id":"-_블루투스_장비_사이의_**취약한_연결_관리를_이용**한_공격"},{"heading":"블루스나프(스나핑)","level":3,"id":"블루스나프(스나핑)"},{"heading":"- 블루투스의 취약점을 활용하여 장비의 파일에 접근하는 공격으로 OPP를 사용하여 정보를 열람","level":4,"id":"-_블루투스의_취약점을_활용하여_장비의_파일에_접근하는_공격으로_**OPP를_사용하여_정보를_열람**"},{"heading":"블루재킹","level":3,"id":"블루재킹"},{"heading":"- 블루투스를 이용해 스팸처럼 명함을 익명으로 띄우는것","level":4,"id":"-_블루투스를_이용해_**스팸처럼_명함을_익명으로_띄우는것**"},{"heading":"간트차트(Gantt Chart)에 대한 설명","level":1,"id":"간트차트(Gantt_Chart)에_대한_설명"},{"heading":"1. 프로젝트를 이루는 소작업 별로 언제 시작되고, 언제 끝나야 하는지 한 눈에 볼 수 있도록 도와준다.","level":3,"id":"1._프로젝트를_이루는_소작업_별로_==언제_시작되고,_언제_끝나야_하는지_한_눈에_볼_수_있도록==_도와준다."},{"heading":"2. 자원 배치 계획에 유용하게 사용된다.","level":3,"id":"2._자원_배치_계획에_유용하게_사용된다."},{"heading":"3. CPM 네트워크로부터 만드는것이 가능하다.","level":3,"id":"3._CPM_네트워크로부터_만드는것이_가능하다."},{"heading":"4. 수평 막대의 길이는 각 작업에 필요한 기간을 나타낸다.","level":3,"id":"4._*수평_막대의_길이*는_각_*작업에_필요한_기간*을_나타낸다."},{"heading":"5. 작업 일정을 한눈에 볼 수 있도록 해주며, 막대그래프를 통해 표현한다.","level":3,"id":"5._*작업_일정*을_한눈에_볼_수_있도록_해주며,_*막대그래프를_통해_표현*한다."},{"heading":"Window파일 저장시스템 FAT / NTFS 에 대한 설명","level":1,"id":"Window파일_저장시스템_FAT_/_NTFS_에_대한_설명"},{"heading":"FAT","level":3,"id":"FAT"},{"heading":"- DOS때 부터 사용되던 윈도의 파일시스템","level":4,"id":"-_DOS때_부터_사용되던_윈도의_파일시스템"},{"heading":"- 저용량에 적합. 호환성이 좋음. 저장가능한 파일의 최대크기는 4GB","level":4,"id":"-_==저용량에_적합==._*호환성이_좋음*._저장가능한_파일의_최대크기는_*4GB*"},{"heading":"NTFS","level":3,"id":"NTFS"},{"heading":"- FAT시스템을 대체하기 위해 개발된 윈도우 파일 시스템","level":4,"id":"-_FAT시스템을_대체하기_위해_개발된_윈도우_파일_시스템"},{"heading":"- 사용자마다 다른 보안 적용 가능. 즉 보안이 FAT보다 뛰어남","level":4,"id":"-_사용자마다_다른_보안_적용_가능._즉_보안이_FAT보다_뛰어남"},{"heading":"- 대용량 저장 가능 및 안정성이 뛰어남","level":4,"id":"-_==대용량_저장_가능_및_안정성이_뛰어남=="},{"heading":"- 저용량 볼륨에서 속도 저하","level":4,"id":"-_==저용량_볼륨에서_속도_저하=="},{"heading":"리눅스에서 umask값을 구하는 방법","level":1,"id":"리눅스에서_umask값을_구하는_방법"},{"heading":"umask는 파일이나 디렉터리의 초기 권한을 설정할때 사용하는 값으로,","level":3,"id":"umask는_파일이나_디렉터리의_초기_권한을_설정할때_사용하는_값으로,"},{"heading":"파일의 경우 666에서 umask값을 뺀 값이다.","level":3,"id":"파일의_경우_==666==에서_umask값을_뺀_값이다."},{"heading":"상향식 비용 산정 기법 중 LOC(원시 코드 라인 수) 기법에 필요한 항목 낙비기","level":1,"id":"상향식_비용_산정_기법_중_LOC(원시_코드_라인_수)_기법에_필요한_항목_==낙비기=="},{"heading":"1. 낙관치","level":3,"id":"1._낙관치"},{"heading":"2. 비관치","level":3,"id":"2._비관치"},{"heading":"3. 기대치","level":3,"id":"3._기대치"},{"heading":"소프트웨어 개발 방법론 중 테일러링(Tailoring)과 관련한 설명","level":1,"id":"소프트웨어_개발_방법론_중_==테일러링==(Tailoring)과_관련한_설명"},{"heading":"1. 프로젝트 상황 특성에 맞게 정의된 소프트웨어 개발 방법론 절차, 사용기법 등을 수정 및 보완하는 작업","level":3,"id":"1._*프로젝트_상황_특성에_맞게*_정의된_소프트웨어_개발_방법론_절차,_사용기법_등을_*수정_및_보완하는_작업*"},{"heading":"2. 관리 측면에서 목적 중 하나는, 최단기간에 안정적인 프로젝트를 진행하기 위한 사전 위험을 식별하고 제거하는 것.","level":3,"id":"2._관리_측면에서_목적_중_하나는,_*최단기간에_안정적인*_프로젝트를_진행하기_위한_사전_위험을_식별하고_제거하는_것."},{"heading":"3. 기술적 측면에서 목적 중 하나는, 프로젝트에 최적화된 기술 요소를 도입하여 프로젝트 특성에 맞는 최적의 기법과 도구를 사용하는것.","level":3,"id":"3._기술적_측면에서_목적_중_하나는,_프로젝트에_최적화된_기술_요소를_도입하여_프로젝트_특성에_맞는_최적의_기법과_도구를_사용하는것."},{"heading":"CMM(Capability Maturity Model) 의 레벨 초관정정최","level":1,"id":"CMM(Capability_Maturity_Model)_의_레벨_==초관정정최=="},{"heading":"- 초기","level":3,"id":"-_초기"},{"heading":"- 관리","level":3,"id":"-_관리"},{"heading":"- 정의","level":3,"id":"-_정의"},{"heading":"- 정량적 관리","level":3,"id":"-_정량적_관리"},{"heading":"- 최적화","level":3,"id":"-_최적화"},{"heading":"PICONET 이란?","level":1,"id":"PICONET_이란?"},{"heading":"- 여러 개의 독립된 통신장치가 UWB(Ultra Wide Band)기술 또는 블루투스 기술을 사용하여 통신망을 형성하는 무선 네트워크 기술","level":3,"id":"-_여러_개의_*독립된_통신장치*가_UWB(Ultra_Wide_Band)기술_또는_블루투스_기술을_사용하여_*통신망을_형성하는_무선_네트워크_기술*"},{"heading":"기능점수(Functional Point)모형에서 비용산정에 이용되는 요소가 아닌것은?","level":1,"id":"기능점수(Functional_Point)모형에서_비용산정에_이용되는_요소가_아닌것은?"},{"heading":"기능점수(FP)모형의 비용산정 요인에는 클래스 인터페이스가 아닌, 필요한 외부 루틴과의 인터페이스 이다.","level":4,"id":"기능점수(FP)모형의_비용산정_요인에는_==클래스_인터페이스가_아닌,_필요한_외부_루틴과의_인터페이스==_이다."},{"heading":"Mesh Network 란?","level":1,"id":"Mesh_Network_란?"},{"heading":"기존 무선 랜의 한계 극복을 위해 등장","level":4,"id":"*기존_무선_랜의_한계_극복*을_위해_등장"},{"heading":"대규모 디바이스의 네트워크 생성에 최적화 된 차세대 이동통신 네트워크","level":4,"id":"*대규모_디바이스*의_네트워크_생성에_최적화_된_*차세대_이동통신_네트워크*"},{"heading":"RIP(Routing Information Protocol)에 대한 설명","level":1,"id":"RIP(Routing_Information_Protocol)에_대한_설명"},{"heading":"1. 거리 벡터 라우팅 프로토콜 이라고도 한다.","level":3,"id":"1._*거리_벡터_라우팅*_프로토콜_이라고도_한다."},{"heading":"2. 소규모 네트워크 환경에 적합하다.","level":3,"id":"2._*소규모*_네트워크_환경에_적합하다."},{"heading":"3. 최대 홉 카운트를 15 이하로 한정한다.","level":3,"id":"3._최대_홉_카운트를_*15_이하*로_한정한다."},{"heading":"4. 최단경로 탐색에 벨만-포드 알고리즘을 사용한다.","level":3,"id":"4._최단경로_탐색에_*벨만-포드*_알고리즘을_사용한다."},{"heading":"나선형 모델의 4가지 주요 활동 계위공고","level":1,"id":"나선형_모델의_4가지_주요_활동_==계위공고=="},{"heading":"1. 계획수림","level":3,"id":"1._계획수림"},{"heading":"2. 위험 분석","level":3,"id":"2._위험_분석"},{"heading":"3. 공학적 개발","level":3,"id":"3._공학적_개발"},{"heading":"4. 고객 평가","level":3,"id":"4._고객_평가"},{"heading":"위 4항목을 순서대로 반복하여 수행한다.","level":4,"id":"위_4항목을_순서대로_반복하여_수행한다."},{"heading":"CMM(Capability Maturity Model)모델의 레벨","level":1,"id":"CMM(Capability_Maturity_Model)모델의_레벨"},{"heading":"1. 초기","level":2,"id":"1._초기"},{"heading":"2. 관리","level":2,"id":"2._관리"},{"heading":"3. 정의","level":2,"id":"3._정의"},{"heading":"4. 정량적 관리","level":2,"id":"4._정량적_관리"},{"heading":"5. 최적화","level":2,"id":"5._최적화"},{"heading":"공개키 암호화 방식에 대한 설명 공개 -> 비대칭","level":1,"id":"공개키_암호화_방식에_대한_설명_`공개_->_비대칭`"},{"heading":"1. 공개키로 암호화된 메세지는, 비밀키를 사용해 복호화 한다.","level":3,"id":"1._*공개키*로_암호화된_메세지는,_*비밀키*를_사용해_복호화_한다."},{"heading":"2. 비대칭 암호기법 이라고도 한다.","level":3,"id":"2._*비대칭*_암호기법_이라고도_한다."},{"heading":"3. 대표적인 기법은 RSA기법이 있다.","level":3,"id":"3._대표적인_기법은_*RSA*기법이_있다."},{"heading":"4. 키 분배가 용이하고, 관리해야 할 키 개수가 적다.","level":3,"id":"4._키_분배가_용이하고,_관리해야_할_키_개수가_적다."},{"heading":"5. 공개키 암호화 알고리즘은 소인수 분해나, 이산대수 등을 사용한다.","level":3,"id":"5._공개키_암호화_알고리즘은_*소인수_분해*나,_*이산대수*_등을_사용한다."},{"heading":"XSS - 크로스사이트 스크립팅 이란?","level":1,"id":"XSS_-_크로스사이트_스크립팅_이란?"},{"heading":"- 웹페이지에 악의적인 스크립트를 포함시켜 사용자 측에서 실행되게 유도함으로써, 정보유출 등의 공격을 유발할 수 있는 취약점","level":2,"id":"-_`웹페이지에_악의적인_스크립트를_포함`시켜_사용자_측에서_실행되게_유도함으로써,_정보유출_등의_공격을_유발할_수_있는_취약점"},{"heading":"SSH(Seccure Shell)에 대한 설명","level":1,"id":"SSH(Seccure_Shell)에_대한_설명"},{"heading":"1. ssh의 기본 네트워크 포트는 22번을 사용한다.","level":3,"id":"1._ssh의_기본_네트워크_포트는_*22번*을_사용한다."},{"heading":"2. 전송되는 데이터는 암호화 된다.","level":3,"id":"2._전송되는_데이터는_암호화_된다."},{"heading":"3. 키를 통한 인증은 클라이언트의 공개키를 서버에 등록해야한다.","level":3,"id":"3._키를_통한_인증은_클라이언트의_*공개키를_서버에_등록*해야한다."},{"heading":"4. 서로 연결되어 있는 컴퓨터 간 원격 명령 실행이나 셀 서비스 등을 수행한다.","level":3,"id":"4._서로_연결되어_있는_컴퓨터_간_원격_명령_실행이나_셀_서비스_등을_수행한다."},{"heading":"필사 오류(Transcription Error)란?","level":1,"id":"필사_오류(Transcription_Error)란?"},{"heading":"임의의 한 자리를 잘못 기입해서 발생하는 오류.","level":2,"id":"임의의_한_자리를_잘못_기입해서_발생하는_오류."},{"heading":"ex) 123456을 123476으로 잘못 기입","level":5,"id":"ex)_`123456`을_`123476`으로_잘못_기입"},{"heading":"N-Screen(엔스크린)이란?","level":1,"id":"N-Screen(엔스크린)이란?"},{"heading":"PC, TV, 휴대폰에서 원하는 콘텐츠를 끊김없이 자유롭게 이용할 수 있는 서비스이다.","level":2,"id":"PC,_TV,_휴대폰에서_원하는_콘텐츠를_끊김없이_자유롭게_이용할_수_있는_서비스이다."},{"heading":"ISO 12207 표준의 기본 생명주기의 주요 프로세스","level":1,"id":"ISO_12207_표준의_기본_생명주기의_주요_프로세스"},{"heading":"1. 획득 프로세스","level":3,"id":"1._획득_프로세스"},{"heading":"2. 공급 프로세스","level":3,"id":"2._공급_프로세스"},{"heading":"3. 개발 프로세스","level":3,"id":"3._개발_프로세스"},{"heading":"4. 운영 프로세스","level":3,"id":"4._운영_프로세스"},{"heading":"5. 유지보수 프로세스","level":3,"id":"5._유지보수_프로세스"},{"heading":"라우팅 프로토콜인 OSPF(Open Shortest Path First)에 대한 설명 중 옳지 않은것?","level":1,"id":"라우팅_프로토콜인_OSPF(Open_Shortest_Path_First)에_대한_설명_중_옳지_않은것?"},{"heading":"거리벡터 라우팅 프로토콜은 RIP(Routing Information Protocol)이다.","level":4,"id":"거리벡터_라우팅_프로토콜은_RIP(Routing_Information_Protocol)이다."},{"heading":"CBD(Component Based Development) SW개발 표준 산출물 중 분석 단계에 해당하는것?","level":1,"id":"CBD(Component_Based_Development)_SW개발_표준_산출물_중_분석_단계에_해당하는것?"},{"heading":"CBD(컴포넌트 기반) SW개발 표준 산출물 중 분석단계에 해당하는 것은 요구사항 정의서이다.","level":4,"id":"CBD(컴포넌트_기반)_SW개발_표준_산출물_중_분석단계에_해당하는_것은_요구사항_정의서이다."},{"heading":"라우터란?","level":1,"id":"==라우터==란?"},{"heading":"서로 다른 네트워크 대역에 있는 호스트를 상호간에 통신할 수 있도록 해주는 네트워크 장비","level":2,"id":"서로_다른_네트워크_대역에_있는_호스트를_상호간에_통신할_수_있도록_해주는_네트워크_장비"},{"heading":"개인키(대칭키) 알고리즘, 블록암호화 방식이라고도 한다.","level":1,"id":"개인키(대칭키)_알고리즘,_블록암호화_방식이라고도_한다."},{"heading":"1. DES","level":3,"id":"1._DES"},{"heading":"2. SEED","level":3,"id":"2._SEED"},{"heading":"3. AES - DES의 보안 문제 해결을 위해 NIST에서 개발한 개인키 암호화 알고리즘","level":3,"id":"3._AES_-_*DES의_보안_문제_해결을_위해_NIST에서_개발한_개인키_암호화_알고리즘*"},{"heading":"4. ARIA","level":3,"id":"4._ARIA"},{"heading":"5. LSFSR","level":3,"id":"5._LSFSR"},{"heading":"6. RC4","level":3,"id":"6._RC4"},{"heading":"IPSec(IP Security)에 대한 설명","level":1,"id":"IPSec(IP_Security)에_대한_설명"},{"heading":"1. 암호화와 복호화 모두 가능한 양방향 암호방식이다.","level":3,"id":"1._암호화와_복호화_모두_가능한_양방향_암호방식이다."},{"heading":"2. ESP는 발신자 인증, 데이터 무결성, 기밀성 모두를 보장한다.","level":3,"id":"2._ESP는_발신자_인증,_데이터_무결성,_기밀성_모두를_보장한다."},{"heading":"3. 운영모드는 Tunnel모드와 Transport모드로 분류된다.","level":3,"id":"3._운영모드는_Tunnel모드와_Transport모드로_분류된다."},{"heading":"4. AH는 발신자 호스트를 인증하고, IP패킷의 무결성을 보장한다.","level":3,"id":"4._AH는_발신자_호스트를_인증하고,_IP패킷의_무결성을_보장한다."},{"heading":"소인수 분해나, 이산대수 등 고유의 방법으로 키를 생성하는 암호화 방식?","level":1,"id":"소인수_분해나,_이산대수_등_고유의_방법으로_키를_생성하는_암호화_방식?"},{"heading":"- 공개키 암호화 방식","level":2,"id":"-_공개키_암호화_방식"},{"heading":"해쉬(Hash)기법에 대한 설명","level":1,"id":"해쉬(Hash)기법에_대한_설명"},{"heading":"1. 임의의 길이의 입력 데이터를 받아 고정된 길이의 해쉬값으로 변환한다.","level":3,"id":"1._임의의_길이의_입력_데이터를_받아_고정된_길이의_해쉬값으로_변환한다."},{"heading":"2. 대표적인 해쉬 알고리즘으로 HAVAL, SHA-1 등이 있다.","level":3,"id":"2._대표적인_해쉬_알고리즘으로_HAVAL,_SHA-1_등이_있다."},{"heading":"3. 해쉬 함수는 일방향 함수이다.","level":3,"id":"3._해쉬_함수는_일방향_함수이다."},{"heading":"소프트웨어 비용 추정 모델이 아닌것은?","level":1,"id":"소프트웨어_비용_추정_모델이_아닌것은?"},{"heading":"PERT는 프로젝트 일정 계획 및 관리에 사용되는 방법론이다.","level":5,"id":"PERT는_프로젝트_일정_계획_및_관리에_사용되는_방법론이다."},{"heading":"비용산정 기법 중 LOC기법이란?","level":1,"id":"비용산정_기법_중_==LOC==기법이란?"},{"heading":"- S/W 각 기능의 원시 코드 라인수의 비관치, 낙관치, 기대치를 측정하여 예측치를 구하고 이를 이용하여 비용을 산정하는 기법.","level":2,"id":"-_S/W_각_기능의_원시_코드_라인수의_비관치,_낙관치,_기대치를_측정하여_예측치를_구하고_이를_이용하여_비용을_산정하는_기법."},{"heading":"Salt(솔트)암호화 기법에 대한 설명","level":1,"id":"Salt(솔트)암호화_기법에_대한_설명"},{"heading":"- 암호 공격을 막기위해 똑같은 패스워드들이 다른 암호값으로 저장되도록 추가되는 값","level":2,"id":"-_암호_공격을_막기위해_똑같은_패스워드들이_다른_암호값으로_저장되도록_추가되는_값"},{"heading":"SSO(Single Sign On)이란?","level":1,"id":"==SSO==(Single_Sign_On)이란?"},{"heading":"- 시스템이 몇 대가 되어도 하나의 시스템에서 인증에 성공하면 다른 시스템에 대한 접근 권한도 얻은 시스템","level":2,"id":"-_시스템이_몇_대가_되어도_하나의_시스템에서_인증에_성공하면_다른_시스템에_대한_접근_권한도_얻은_시스템"},{"heading":"COCOMO 모형에 대한 설명","level":1,"id":"COCOMO_모형에_대한_설명"},{"heading":"1. 보햄이 제안한 것으로, 원시 프로그램의 규모인 LOC(원시 코드 라인 수)에 의한 비용산정 기법이다.","level":3,"id":"1._보햄이_제안한_것으로,_원시_프로그램의_규모인_LOC(원시_코드_라인_수)에_의한_비용산정_기법이다."},{"heading":"조직형(Organic Mode) : 중.소규모 소프트웨어. 5만 라인 이하","level":4,"id":"조직형(Organic_Mode)__중.소규모_소프트웨어._5만_라인_이하"},{"heading":"반 분리형(Semi-Detached Mode) : 트렌젝션처리 시스템, 운영체제 등. 30만 라인 이하","level":4,"id":"반_분리형(Semi-Detached_Mode)__트렌젝션처리_시스템,_운영체제_등._30만_라인_이하"},{"heading":"내장형(Embedded Mode) : 초대형 규모 트렌젝션 처리 시스템 / 미사일 유도 시스템. 30만 라인 이상","level":4,"id":"내장형(Embedded_Mode)__초대형_규모_트렌젝션_처리_시스템_/_미사일_유도_시스템._30만_라인_이상"},{"heading":"비대칭 암호화 방식 중, 소수를 활용한 암호화 알고리즘은?","level":1,"id":"비대칭_암호화_방식_중,_소수를_활용한_암호화_알고리즘은?"},{"heading":"- RSA(Rivest Shamir Adleman)","level":2,"id":"-_RSA(Rivest_Shamir_Adleman)"},{"heading":"암호화 알고리즘에 대한 설명","level":1,"id":"암호화_알고리즘에_대한_설명"},{"heading":"대칭 암호 알고리즘","level":2,"id":"대칭_암호_알고리즘"},{"heading":"비대칭 암호 알고리즘","level":2,"id":"비대칭_암호_알고리즘"},{"heading":"PaaS-TA 파스타 란?","level":1,"id":"PaaS-TA_파스타_란?"},{"heading":"- 국내 IT서비스 경쟁력 강화를 목표로 개발되었으며 인프라 제어 및 관리환경, 실행환경, 개발환경, 서비스환경, 운영환경으로 구성되어있는 개방형 클라우드 플랫폼","level":4,"id":"-_국내_IT서비스_경쟁력_강화를_목표로_개발되었으며_인프라_제어_및_관리환경,_실행환경,_개발환경,_서비스환경,_운영환경으로_구성되어있는_==개방형_클라우드_플랫폼=="},{"heading":"강제 접근통제(MAC : Mandatory Access Control) 이란?","level":1,"id":"강제_접근통제(MAC__Mandatory_Access_Control)_이란?"},{"heading":"- 정보시스템 내에서 어떤 주체가 특정 개체에 접근하려 할 떄 양쪽의 보안 레이블에 기초하여 높은 보안 수준을 요구하는 정보가 낮은 보안수준의 주체에게 노출되지 않도록 하는 접근 제어방법.","level":4,"id":"-_정보시스템_내에서_어떤_주체가_특정_개체에_접근하려_할_떄_양쪽의_보안_레이블에_기초하여_==높은_보안_수준을_요구하는_정보가_낮은_보안수준의_주체에게_노출되지_않도록==_하는_접근_제어방법."},{"heading":"소프트웨어 생명 주기 모델 중 V모델과 관련한 설명","level":1,"id":"소프트웨어_생명_주기_모델_중_V모델과_관련한_설명"},{"heading":"1. 요구사항 -> 분석 -> 설계 -> 구현 단계로 수행되며 각 단계를 테스트와 연결하여 표시한다.","level":3,"id":"1._==요구사항_->_분석_->_설계_->_구현==_단계로_수행되며_각_단계를_테스트와_연결하여_표시한다."},{"heading":"2. Perry에 의해 제안되었으며, 세부적인 테스트 과정으로 구성되어 신뢰도 높은 시스템을 개발하는데 효과적이다","level":3,"id":"2._Perry에_의해_제안되었으며,_세부적인_테스트_과정으로_구성되어_신뢰도_높은_시스템을_개발하는데_효과적이다"},{"heading":"3. 개발 작업과 검증 작업 사이의 관계를 명호가히 들어내 놓은 폭포수 모델의 변형이라고 볼 수 있다.","level":3,"id":"3._개발_작업과_검증_작업_사이의_관계를_명호가히_들어내_놓은_폭포수_모델의_변형이라고_볼_수_있다."},{"heading":"4. 폭포수 모델이 산출물 중심이라면, V모델은 작업과 결과의 검증에 초점을 둔다.","level":3,"id":"4._폭포수_모델이_산출물_중심이라면,_V모델은_작업과_결과의_검증에_초점을_둔다."},{"heading":"웹 크롤링을 지원하는 가장 대표적인 프레임워크는?","level":1,"id":"웹_크롤링을_지원하는_가장_대표적인_프레임워크는?"},{"heading":"- 파이썬의 Scrapy(스크래피)","level":2,"id":"-_파이썬의_Scrapy(스크래피)"},{"heading":"DES(암호화 알고리즘)의 암호화 블록 단위","level":1,"id":"DES(암호화_알고리즘)의_암호화_블록_단위"},{"heading":"- 64비트","level":2,"id":"-_64비트"},{"heading":"DPI(Deep Packet Inspection)이란?","level":1,"id":"DPI(Deep_Packet_Inspection)이란?"},{"heading":"- OSI 7 Layer전 계층의 프로토콜과 패킷 내부의 콘텐츠를 파악하여 침입시도, 해킹등을 탐지하고 트래픽을 조정하기 위한 패킷 분석 기술","level":4,"id":"-_OSI_7_Layer전_계층의_프로토콜과_패킷_내부의_콘텐츠를_파악하여_침입시도,_해킹등을_탐지하고_트래픽을_조정하기_위한_패킷_분석_기술"},{"heading":"테일러링(Tailoring)이란?","level":1,"id":"테일러링(Tailoring)이란?"},{"heading":"- 프로젝트에 최적화 된 개발 방법론을 적용하기 위해 절차, 산출물 등을 적절히 변경하는 활동.","level":5,"id":"-_프로젝트에_최적화_된_개발_방법론을_적용하기_위해_절차,_산출물_등을_적절히_변경하는_활동."},{"heading":"- 프로젝트 상황 및 특성에 맞추어 기존의 방법론, 프로세스 등을 수정하는 것.","level":4,"id":"-_프로젝트_상황_및_특성에_맞추어_기존의_방법론,_프로세스_등을_수정하는_것."},{"heading":"- 예상되는 변화를 충분히 고려하여 진행 필요.","level":4,"id":"-_예상되는_변화를_충분히_고려하여_진행_필요."},{"heading":"CASE(Computer Aided Software Engineering)이란?","level":1,"id":"CASE(Computer_Aided_Software_Engineering)이란?"},{"heading":"- 소프트웨어 개발 과정에서 사용되는 요구 분석, 설계, 구현, 검사 및 디버깅 과정 전체 또는 일부를 컴퓨터와 전용소프트웨어 도구를 사용하여 자동화 하는 것이다.","level":4,"id":"-_소프트웨어_개발_과정에서_사용되는_요구_분석,_설계,_구현,_검사_및_디버깅_과정_전체_또는_일부를_컴퓨터와_전용소프트웨어_도구를_사용하여_자동화_하는_것이다."},{"heading":"1. 객체지향 시스템, 구조적 시스템 등 다양한 시스템에서 활용되는 자동화 도구이다.","level":3,"id":"1._객체지향_시스템,_구조적_시스템_등_다양한_시스템에서_활용되는_자동화_도구이다."},{"heading":"2. 소프트웨어,하드웨어,DB,테스트 등을 통합하여 소프트웨어를 개발하는 환경을 조성한다.","level":3,"id":"2._소프트웨어,하드웨어,DB,테스트_등을_통합하여_소프트웨어를_개발하는_환경을_조성한다."},{"heading":"3. 소프트웨어 생명주기의 전체단계를 연결해 주고 자동화 해주는 통합된 도구를 제공한다.","level":3,"id":"3._소프트웨어_생명주기의_전체단계를_연결해_주고_자동화_해주는_통합된_도구를_제공한다."},{"heading":"4. 소프트웨어 개발 도구와 방법론이 결합된 것이다.","level":3,"id":"4._소프트웨어_개발_도구와_방법론이_결합된_것이다."},{"heading":"그래픽 또한 지원한다.","level":5,"id":"그래픽_또한_지원한다."},{"heading":"Putnam모형이란?","level":1,"id":"Putnam모형이란?"},{"heading":"- 소프트웨어 생명 주기의 전 과정 동안에 사용될 노력의 분포를 가정해주는 모형이다.","level":4,"id":"-_소프트웨어_생명_주기의_전_과정_동안에_사용될_==노력의_분포를_가정==해주는_모형이다."},{"heading":"간트 차트란?","level":1,"id":"간트_차트란?"},{"heading":"- 프로젝트의 각 작업들이 언제 시작하고 언제 종료되는지에 대한 작업 일정을 막대 도표를 이용하여 표시하는 프로젝트 일정표이다.","level":4,"id":"-_프로젝트의_각_작업들이_언제_시작하고_언제_종료되는지에_대한_작업_일정을_막대_도표를_이용하여_표시하는_프로젝트_일정표이다."},{"heading":"1. 시간선(Time-Line) 차트라고도 한다.","level":3,"id":"1._시간선(Time-Line)_차트라고도_한다."},{"heading":"2. 작업경로는 표시할 수 없으며, 계획의 변화에 대한 적응성이 약하다.","level":3,"id":"2._작업경로는_표시할_수_없으며,_계획의_변화에_대한_적응성이_약하다."},{"heading":"3. 주관적 수치에 기울어지기 쉽다.","level":3,"id":"3._주관적_수치에_기울어지기_쉽다."},{"heading":"프레임워크의 특성?","level":1,"id":"프레임워크의_특성?"},{"heading":"1. 모듈화","level":3,"id":"1._모듈화"},{"heading":"2. 재사용성","level":3,"id":"2._재사용성"},{"heading":"3. 확장성","level":3,"id":"3._확장성"},{"heading":"4. 제어의 역전","level":3,"id":"4._제어의_역전"},{"heading":"CSMA/CA 란 무엇인가","level":1,"id":"CSMA/CA_란_무엇인가"},{"heading":"- 무선 랜에서 데이터 전송 시 매체가 비어있음을 확인한 뒤 충돌을 피하기 위해 일정한 시간을 기다린 후 데이터를 전송하는 방법","level":2,"id":"-_무선_랜에서_데이터_전송_시_==매체가_비어있음을_확인한_뒤==_충돌을_피하기_위해_==일정한_시간을_기다린_후==_데이터를_전송하는_방법"},{"heading":"- IEEE 802.3 LAN 에서 사용되는 전송 매체 접속 제어방식이다.","level":2,"id":"-_==IEEE_802.3_LAN==_에서_사용되는_전송_매체_접속_제어방식이다."},{"heading":"SOA(Service Oriented Architecture)서비스지향아키텍처의 계층","level":1,"id":"SOA(Service_Oriented_Architecture)서비스지향아키텍처의_계층"},{"heading":"1. 표현 계층","level":3,"id":"1._표현_계층"},{"heading":"2. 프로세스 계층","level":3,"id":"2._프로세스_계층"},{"heading":"3. 서비스 계층","level":3,"id":"3._서비스_계층"},{"heading":"4. 비즈니스 계층","level":3,"id":"4._비즈니스_계층"},{"heading":"5. 영속 계층","level":3,"id":"5._영속_계층"},{"heading":"라우팅 프로토콜 종류 및 설명","level":1,"id":"라우팅_프로토콜_종류_및_설명"},{"heading":"1. 거리 벡터 라우팅 프로토콜(RIP) - IGP에 속함,내부게이트웨이","level":2,"id":"1._거리_벡터_라우팅_프로토콜(RIP)_-_==IGP에_속함==,==내부게이트웨이=="},{"heading":"2. 링크 상태 라우팅 프로토콜(OSPF)","level":2,"id":"2._링크_상태_라우팅_프로토콜(OSPF)"},{"heading":"SPICE란?","level":1,"id":"SPICE란?"},{"heading":"- ISO/IEC 15504 라고도 한다.","level":3,"id":"-_ISO/IEC_15504_라고도_한다."},{"heading":"- 소프트웨어 품질 및 생산성 향상을 위해 소프트웨어 프로세스를 평가하고 개서하는 국체 표준이다.","level":3,"id":"-_소프트웨어_품질_및_생산성_향상을_위해_소프트웨어_==프로세스를_평가==하고_개서하는_국체_표준이다."},{"heading":"- 기관에서 지정한 요구조건의 만족여부를 개발 조직이 스스로 평가한다.","level":3,"id":"-_기관에서_지정한_요구조건의_만족여부를_개발_조직이_==스스로_평가==한다."},{"heading":"수행 능력 수준 불수관확예최","level":2,"id":"수행_능력_수준_`불수관확예최`"},{"heading":"불완전(0) -> 수행(1) -> 관리(2) -> 확립(3) -> 예측(4) -> 최적화(5)","level":6,"id":"불완전(0)_->_수행(1)_->_관리(2)_->_확립(3)_->_예측(4)_->_최적화(5)"},{"heading":"TCP Wrapper란?","level":1,"id":"TCP_Wrapper란?"},{"heading":"- 어떤 외부 컴퓨터가 접속되면 접속 인가 여부를 점검해서 인가된 경우에는 접속이 허용되고, 그 반대 경우에는 거부할 수 있는 접근제어 유틸리티 이다.","level":4,"id":"-_어떤_*외부_컴퓨터*가_접속되면_**접속_인가_여부를_점검**해서_인가된_경우에는_접속이_허용되고,_그_반대_경우에는_거부할_수_있는_**접근제어_유틸리티**_이다."},{"heading":"세션 하이재킹을 탐지하는 방법","level":1,"id":"세션_하이재킹을_탐지하는_방법"},{"heading":"1. 비동기화 상태 탐지","level":3,"id":"1._비동기화_상태_탐지"},{"heading":"2. ACK Storm 탐지","level":3,"id":"2._ACK_Storm_탐지"},{"heading":"3. 패킷의 유실과 재전송 증가 탐지","level":3,"id":"3._패킷의_유실과_재전송_증가_탐지"},{"heading":"4. 예상치 못한 접속의 리셋 탐지","level":3,"id":"4._예상치_못한_접속의_리셋_탐지"},{"heading":"네트워크 장비에 대한 설명","level":1,"id":"네트워크_장비에_대한_설명"},{"heading":"브라우터(Brouter)","level":2,"id":"브라우터(Brouter)"},{"heading":"- 브릿지와 라우터의 기능으 모두 갖추고 있는 네트워크 장비이다.","level":4,"id":"-_브릿지와_라우터의_기능으_모두_갖추고_있는_네트워크_장비이다."},{"heading":"리피터","level":2,"id":"리피터"},{"heading":"- 전송되는 신호가 전송 선로의 특성 및 외부 충격 등의 요인으로 왜곡되거나 약해질 경우 원래의 신호 형태로 재생하여 다시 전송하는 역할.","level":4,"id":"-_전송되는_신호가_전송_선로의_특성_및_외부_충격_등의_요인으로_*왜곡되거나_약해질_경우_원래의_신호_형태로_재생하여_다시_전송*하는_역할."},{"heading":"브리지","level":2,"id":"브리지"},{"heading":"- LAN과 LAN을 연결하거나, LAN안에서의 컴퓨터 그룹을 연결하는 기능을 수행한다.","level":4,"id":"-_LAN과_LAN을_연결하거나,_LAN안에서의_컴퓨터_그룹을_연결하는_기능을_수행한다."},{"heading":"- 데이터링크 계층 중 MAC계층에서 사용된다.","level":4,"id":"-_*데이터링크_계층*_중_*MAC계층에서_사용된다*."},{"heading":"스위치","level":2,"id":"스위치"},{"heading":"- LAN과 LAN을 연결하여 더 큰 LAN을 만드드는 장치","level":4,"id":"-_LAN과_LAN을_연결하여_더_큰_LAN을_만드드는_장치"},{"heading":"- OSI 7계층 중 데이터링크 계층(2)에서 사용된다.","level":4,"id":"-_OSI_7계층_중_*데이터링크_계층(2)에서_사용된다.*"},{"heading":"라우터","level":2,"id":"라우터"},{"heading":"- LAN과 LAN의 연결 기능에 데이터 전송의 최적경로를 선택할 수 있는 기능을 추가한것","level":4,"id":"-_LAN과_LAN의_연결_기능에_데이터_전송의_*최적경로를_선택할_수_있는_기능*을_추가한것"},{"heading":"- 서로 다른 LAN이나 LAN과 WAN의 연결도 수행한다","level":4,"id":"-_서로_다른_LAN이나_LAN과_WAN의_연결도_수행한다"},{"heading":"- OSI 7계층의 네트워크 계층(3)에 속한다.","level":4,"id":"-_OSI_7계층의_*네트워크_계층(3)에_속한다.*"},{"heading":"루프(폐회로)를 형성하지 않으면서 연결을 설정할 수 있는 알고리즘","level":1,"id":"루프(폐회로)를_형성하지_않으면서_연결을_설정할_수_있는_알고리즘"},{"heading":"- STA(Spanning Tree Algorithm)","level":2,"id":"-_STA(Spanning_Tree_Algorithm)"},{"heading":"SAN(Storage Area Network)란?","level":1,"id":"SAN(**Storage**_Area_Network)란?"},{"heading":"1. 네트워크상에 광채널 스위치의 이점인 고속 전송과 장거리 연결 및 멀티 프로토콜 기능을 활용","level":3,"id":"1._네트워크상에_광채널_스위치의_이점인_*고속_전송*과_**장거리_연결_및_멀티_프로토콜_기능을_활용**"},{"heading":"2. 각기 다른 OS를 가진 여러 기종들이 네트워크상에서 동일 저장장치의 데이터를 공유하게 함으로써, 여러개의 저장장치나 백업장치를 단일화시킨 시스템","level":3,"id":"2._**각기_다른_OS를_가진_여러_기종**들이_네트워크상에서_동일_저장장치의_**데이터를_공유**하게_함으로써,_**여러개의_저장장치나_백업장치를_단일화**시킨_시스템"},{"heading":"nmap 이란??","level":1,"id":"nmap_이란??"},{"heading":"- 서버에 열린 포트 정보를 스캐닝해서 보안 취약점을 찾는데 사용하는 도구이다.","level":2,"id":"-_서버에_열린_포트_정보를_스캐닝해서_보안_취약점을_찾는데_사용하는_도구이다."},{"heading":"Bell-LaPadula Model(벨-라파듈라 모델)에 대한 설명","level":1,"id":"Bell-LaPadula_Model(벨-라파듈라_모델)에_대한_설명"},{"heading":"1. 군대의 보안레벨처럼 정보의 기밀성에 따라 상하 관계가 구분된 정보를 보호하기 위해 사용","level":3,"id":"1._군대의_보안레벨처럼_정보의_기밀성에_따라_상하_관계가_구분된_정보를_보호하기_위해_사용"},{"heading":"2. 자신의 권한보다 낮은 보안 레벨 권한을 가진 경우에는 높은 보안 레벨의 문서를 읽을 수 없고, 자신보다 권한레벨이 낮은 문서만 읽읈 수 있다.","level":3,"id":"2._자신의_권한보다_낮은_보안_레벨_권한을_가진_경우에는_높은_보안_레벨의_문서를_읽을_수_없고,_자신보다_권한레벨이_낮은_문서만_읽읈_수_있다."},{"heading":"3. 자신의 권한보다 높은 보안 레벨의 문서에는 쓰기가 가능하지만, 보아레벨이 낮은 문서의 쓰기 권한은 제한한다.","level":3,"id":"3._자신의_권한보다_높은_보안_레벨의_문서에는_쓰기가_가능하지만,_보아레벨이_낮은_문서의_쓰기_권한은_제한한다."},{"heading":"Secure OS의 보안 기능","level":1,"id":"Secure_OS의_보안_기능"},{"heading":"1. 식별 및 인증","level":3,"id":"1._식별_및_인증"},{"heading":"2. 임의/강제적 접근 통제","level":3,"id":"2._임의/강제적_접근_통제"},{"heading":"3. 객체 재사용 보호","level":3,"id":"3._객체_재사용_보호"},{"heading":"4. 완전한 조정","level":3,"id":"4._완전한_조정"},{"heading":"5. 신뢰 경로","level":3,"id":"5._신뢰_경로"},{"heading":"6. 감사 및 감사기록 축소","level":3,"id":"6._감사_및_감사기록_축소"}],"backlinks":[],"links":["?query=tag:%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC","?query=tag:%ED%95%84%EA%B8%B0","?query=tag:%EC%A0%95%EB%A6%AC","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#🥈 필기 1과목 - 소프트웨어 설계","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#침입탐지_시스템(IDS__Intrusion_Detection_System)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#이상탐지(Anomaly_Detection)기법","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_Behavior,_Statistical_Detection으로_불리며,_평균적_시스템의_상태_기준으로_==비정상적인_행위나_자원의_사용이_감지되면_이를_알려줌==","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_잘_알려지지_않은_공격_탐지에_적합._기존_패턴과_급격하게_다른_패턴을_발견하면_침입으로_판단","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#오용탐지(Misuse_Detection)기법","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_Signature_Base나_Knowledge_Base로_불리며,_==미리_입력해둔_공격_패턴이_감지되면_이를_알려줌==","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_잘_알려진_시스템의_취약점을_공격하는_패턴의_침입을_탐지_(새로운_패턴의_공격을_막기_어려움)","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#정보_시스템에서_접근통제_방법에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#강제접근_통제(MAC)_==맥->등급==","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_주체와_객체의_**등급을_비교**하여_접근_권한을_부여하는_방식","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#임의접근_통제(DAC)_==닥_->_신원==","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_접근하는_사용자의_**신원에_따라**_접근_권한을_부여하는_방식","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#역할기반접근_통제(RBAC)","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_직무나_직책과_같이_*개인의역할*에_따라_접근_권한을_부여하는_접근_정책","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#사용자계정_컨트롤(UAC)","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_프로그램에서_관리자_수준의_권한이_필요한_작업을_수행할_때_*사용자에게_알려서*_제어할_수_있도록_돕는기능","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#자료별_접근통제(Data-Label_AC)","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_개별_행,_열에_대해_쓰기_권한,_읽기_권한을_가졌는지를_명확하게_결정하는_제어방식","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#정보시스템에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_고가용성_솔루션(HACMP)","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._AIX를_기반으로_한_IBM의_고가용성_솔루션.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._==Resource의_중복_또는_공유를_통해_Application의_보호==를_가능하게_해줌","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._같은_데이터를_공유하거나_동시에_access하는_노드들에서_여러개의_Application을_실행하게_해줌","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._==두대_이상의_시스템을_하나의_클러스터로_묶어==_한_시스템에서_장애가_발생할_경우_다른_시스템이_자원을_인수할_수_있도록하여_서비스의_중단을_최소화_할_수_있도록_도와주는_솔루션","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_점대점_연결_방식(Point_to_Point_Mode)","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._네트워크에_있어_==물리적으로는_중개_장치를_통과하지_않고==_한_지점에서_다른_지점으로_직접가는_채널","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._두_스테이션간을_**별도의회선**을_사용하여_1대1로_연결","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._==전용회선이나_공중_전화_회선을_이용==","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._회선_구성이_간당하고_대용량_전송에_유리","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#5._별도의_회선과_포트에_따른_==높은_설치_비용==","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#네트워크_공격_방법에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#Parsing","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_하나의_프로그램을_런타임_환경이_실제로_실행할_수_있는_내부_포맷으로_분석하고_변환하는것을_의미","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#LAN_Tapping","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_LAN신호를_직접_자신에게_끌어노는_방식의_공격","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#Switch_Jamming","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_스위치의_기능이_방해_받아_정상_동작을_하지_못해_**스위치가_더미_허브처럼_작동**하게_하는것","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#FTP_Flooding","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_TCP의_3way_Handshake_취약점을_이용한_DoS공격으로,_**다량의_SYN패킷을_보내_백로그큐를**_가득_채우는_공격.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#Smurfing","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_IP또는_ICMP의_특성을_악용하여_특정_사이트에_**집중적으로데이터를_보내_네트워크_또는_시스템의_상태를_불능으로**_만드는_공격.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#블루투스_공격과_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#블루버그","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_블루투스_장비_사이의_**취약한_연결_관리를_이용**한_공격","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#블루스나프(스나핑)","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_블루투스의_취약점을_활용하여_장비의_파일에_접근하는_공격으로_**OPP를_사용하여_정보를_열람**","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#블루재킹","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_블루투스를_이용해_**스팸처럼_명함을_익명으로_띄우는것**","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#간트차트(Gantt_Chart)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._프로젝트를_이루는_소작업_별로_==언제_시작되고,_언제_끝나야_하는지_한_눈에_볼_수_있도록==_도와준다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._자원_배치_계획에_유용하게_사용된다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._CPM_네트워크로부터_만드는것이_가능하다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._*수평_막대의_길이*는_각_*작업에_필요한_기간*을_나타낸다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#5._*작업_일정*을_한눈에_볼_수_있도록_해주며,_*막대그래프를_통해_표현*한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#Window파일_저장시스템_FAT_/_NTFS_에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#FAT","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_DOS때_부터_사용되던_윈도의_파일시스템","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_==저용량에_적합==._*호환성이_좋음*._저장가능한_파일의_최대크기는_*4GB*","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#NTFS","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_FAT시스템을_대체하기_위해_개발된_윈도우_파일_시스템","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_사용자마다_다른_보안_적용_가능._즉_보안이_FAT보다_뛰어남","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_==대용량_저장_가능_및_안정성이_뛰어남==","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_==저용량_볼륨에서_속도_저하==","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#리눅스에서_umask값을_구하는_방법","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#umask는_파일이나_디렉터리의_초기_권한을_설정할때_사용하는_값으로,","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#파일의_경우_==666==에서_umask값을_뺀_값이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#상향식_비용_산정_기법_중_LOC(원시_코드_라인_수)_기법에_필요한_항목_==낙비기==","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._낙관치","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._비관치","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._기대치","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#소프트웨어_개발_방법론_중_==테일러링==(Tailoring)과_관련한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._*프로젝트_상황_특성에_맞게*_정의된_소프트웨어_개발_방법론_절차,_사용기법_등을_*수정_및_보완하는_작업*","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._관리_측면에서_목적_중_하나는,_*최단기간에_안정적인*_프로젝트를_진행하기_위한_사전_위험을_식별하고_제거하는_것.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._기술적_측면에서_목적_중_하나는,_프로젝트에_최적화된_기술_요소를_도입하여_프로젝트_특성에_맞는_최적의_기법과_도구를_사용하는것.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#CMM(Capability_Maturity_Model)_의_레벨_==초관정정최==","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_초기","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_관리","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_정의","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_정량적_관리","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_최적화","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#PICONET_이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_여러_개의_*독립된_통신장치*가_UWB(Ultra_Wide_Band)기술_또는_블루투스_기술을_사용하여_*통신망을_형성하는_무선_네트워크_기술*","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#기능점수(Functional_Point)모형에서_비용산정에_이용되는_요소가_아닌것은?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#기능점수(FP)모형의_비용산정_요인에는_==클래스_인터페이스가_아닌,_필요한_외부_루틴과의_인터페이스==_이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#Mesh_Network_란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#*기존_무선_랜의_한계_극복*을_위해_등장","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#*대규모_디바이스*의_네트워크_생성에_최적화_된_*차세대_이동통신_네트워크*","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#RIP(Routing_Information_Protocol)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._*거리_벡터_라우팅*_프로토콜_이라고도_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._*소규모*_네트워크_환경에_적합하다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._최대_홉_카운트를_*15_이하*로_한정한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._최단경로_탐색에_*벨만-포드*_알고리즘을_사용한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#나선형_모델의_4가지_주요_활동_==계위공고==","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._계획수림","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._위험_분석","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._공학적_개발","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._고객_평가","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#위_4항목을_순서대로_반복하여_수행한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#CMM(Capability_Maturity_Model)모델의_레벨","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._초기","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._관리","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._정의","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._정량적_관리","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#5._최적화","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#공개키_암호화_방식에_대한_설명_`공개_->_비대칭`","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._*공개키*로_암호화된_메세지는,_*비밀키*를_사용해_복호화_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._*비대칭*_암호기법_이라고도_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._대표적인_기법은_*RSA*기법이_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._키_분배가_용이하고,_관리해야_할_키_개수가_적다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#5._공개키_암호화_알고리즘은_*소인수_분해*나,_*이산대수*_등을_사용한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#XSS_-_크로스사이트_스크립팅_이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_`웹페이지에_악의적인_스크립트를_포함`시켜_사용자_측에서_실행되게_유도함으로써,_정보유출_등의_공격을_유발할_수_있는_취약점","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#SSH(Seccure_Shell)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._ssh의_기본_네트워크_포트는_*22번*을_사용한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._전송되는_데이터는_암호화_된다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._키를_통한_인증은_클라이언트의_*공개키를_서버에_등록*해야한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._서로_연결되어_있는_컴퓨터_간_원격_명령_실행이나_셀_서비스_등을_수행한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#필사_오류(Transcription_Error)란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#임의의_한_자리를_잘못_기입해서_발생하는_오류.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#ex)_`123456`을_`123476`으로_잘못_기입","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#N-Screen(엔스크린)이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#PC,_TV,_휴대폰에서_원하는_콘텐츠를_끊김없이_자유롭게_이용할_수_있는_서비스이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#ISO_12207_표준의_기본_생명주기의_주요_프로세스","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._획득_프로세스","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._공급_프로세스","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._개발_프로세스","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._운영_프로세스","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#5._유지보수_프로세스","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#라우팅_프로토콜인_OSPF(Open_Shortest_Path_First)에_대한_설명_중_옳지_않은것?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#거리벡터_라우팅_프로토콜은_RIP(Routing_Information_Protocol)이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#CBD(Component_Based_Development)_SW개발_표준_산출물_중_분석_단계에_해당하는것?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#CBD(컴포넌트_기반)_SW개발_표준_산출물_중_분석단계에_해당하는_것은_요구사항_정의서이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#==라우터==란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#서로_다른_네트워크_대역에_있는_호스트를_상호간에_통신할_수_있도록_해주는_네트워크_장비","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#개인키(대칭키)_알고리즘,_블록암호화_방식이라고도_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._DES","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._SEED","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._AES_-_*DES의_보안_문제_해결을_위해_NIST에서_개발한_개인키_암호화_알고리즘*","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._ARIA","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#5._LSFSR","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#6._RC4","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#IPSec(IP_Security)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._암호화와_복호화_모두_가능한_양방향_암호방식이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._ESP는_발신자_인증,_데이터_무결성,_기밀성_모두를_보장한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._운영모드는_Tunnel모드와_Transport모드로_분류된다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._AH는_발신자_호스트를_인증하고,_IP패킷의_무결성을_보장한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#소인수_분해나,_이산대수_등_고유의_방법으로_키를_생성하는_암호화_방식?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_공개키_암호화_방식","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#해쉬(Hash)기법에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._임의의_길이의_입력_데이터를_받아_고정된_길이의_해쉬값으로_변환한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._대표적인_해쉬_알고리즘으로_HAVAL,_SHA-1_등이_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._해쉬_함수는_일방향_함수이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#소프트웨어_비용_추정_모델이_아닌것은?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#PERT는_프로젝트_일정_계획_및_관리에_사용되는_방법론이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#비용산정_기법_중_==LOC==기법이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_S/W_각_기능의_원시_코드_라인수의_비관치,_낙관치,_기대치를_측정하여_예측치를_구하고_이를_이용하여_비용을_산정하는_기법.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#Salt(솔트)암호화_기법에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_암호_공격을_막기위해_똑같은_패스워드들이_다른_암호값으로_저장되도록_추가되는_값","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#==SSO==(Single_Sign_On)이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_시스템이_몇_대가_되어도_하나의_시스템에서_인증에_성공하면_다른_시스템에_대한_접근_권한도_얻은_시스템","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#COCOMO_모형에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._보햄이_제안한_것으로,_원시_프로그램의_규모인_LOC(원시_코드_라인_수)에_의한_비용산정_기법이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#조직형(Organic_Mode)__중.소규모_소프트웨어._5만_라인_이하","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#반_분리형(Semi-Detached_Mode)__트렌젝션처리_시스템,_운영체제_등._30만_라인_이하","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#내장형(Embedded_Mode)__초대형_규모_트렌젝션_처리_시스템_/_미사일_유도_시스템._30만_라인_이상","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#비대칭_암호화_방식_중,_소수를_활용한_암호화_알고리즘은?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_RSA(Rivest_Shamir_Adleman)","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#암호화_알고리즘에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#대칭_암호_알고리즘","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#비대칭_암호_알고리즘","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#PaaS-TA_파스타_란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_국내_IT서비스_경쟁력_강화를_목표로_개발되었으며_인프라_제어_및_관리환경,_실행환경,_개발환경,_서비스환경,_운영환경으로_구성되어있는_==개방형_클라우드_플랫폼==","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#강제_접근통제(MAC__Mandatory_Access_Control)_이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_정보시스템_내에서_어떤_주체가_특정_개체에_접근하려_할_떄_양쪽의_보안_레이블에_기초하여_==높은_보안_수준을_요구하는_정보가_낮은_보안수준의_주체에게_노출되지_않도록==_하는_접근_제어방법.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#소프트웨어_생명_주기_모델_중_V모델과_관련한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._==요구사항_->_분석_->_설계_->_구현==_단계로_수행되며_각_단계를_테스트와_연결하여_표시한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._Perry에_의해_제안되었으며,_세부적인_테스트_과정으로_구성되어_신뢰도_높은_시스템을_개발하는데_효과적이다","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._개발_작업과_검증_작업_사이의_관계를_명호가히_들어내_놓은_폭포수_모델의_변형이라고_볼_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._폭포수_모델이_산출물_중심이라면,_V모델은_작업과_결과의_검증에_초점을_둔다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#웹_크롤링을_지원하는_가장_대표적인_프레임워크는?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_파이썬의_Scrapy(스크래피)","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#DES(암호화_알고리즘)의_암호화_블록_단위","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_64비트","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#DPI(Deep_Packet_Inspection)이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_OSI_7_Layer전_계층의_프로토콜과_패킷_내부의_콘텐츠를_파악하여_침입시도,_해킹등을_탐지하고_트래픽을_조정하기_위한_패킷_분석_기술","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#테일러링(Tailoring)이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_프로젝트에_최적화_된_개발_방법론을_적용하기_위해_절차,_산출물_등을_적절히_변경하는_활동.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_프로젝트_상황_및_특성에_맞추어_기존의_방법론,_프로세스_등을_수정하는_것.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_예상되는_변화를_충분히_고려하여_진행_필요.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#CASE(Computer_Aided_Software_Engineering)이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_소프트웨어_개발_과정에서_사용되는_요구_분석,_설계,_구현,_검사_및_디버깅_과정_전체_또는_일부를_컴퓨터와_전용소프트웨어_도구를_사용하여_자동화_하는_것이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._객체지향_시스템,_구조적_시스템_등_다양한_시스템에서_활용되는_자동화_도구이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._소프트웨어,하드웨어,DB,테스트_등을_통합하여_소프트웨어를_개발하는_환경을_조성한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._소프트웨어_생명주기의_전체단계를_연결해_주고_자동화_해주는_통합된_도구를_제공한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._소프트웨어_개발_도구와_방법론이_결합된_것이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#그래픽_또한_지원한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#Putnam모형이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_소프트웨어_생명_주기의_전_과정_동안에_사용될_==노력의_분포를_가정==해주는_모형이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#간트_차트란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_프로젝트의_각_작업들이_언제_시작하고_언제_종료되는지에_대한_작업_일정을_막대_도표를_이용하여_표시하는_프로젝트_일정표이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._시간선(Time-Line)_차트라고도_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._작업경로는_표시할_수_없으며,_계획의_변화에_대한_적응성이_약하다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._주관적_수치에_기울어지기_쉽다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#프레임워크의_특성?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._모듈화","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._재사용성","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._확장성","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._제어의_역전","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#CSMA/CA_란_무엇인가","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_무선_랜에서_데이터_전송_시_==매체가_비어있음을_확인한_뒤==_충돌을_피하기_위해_==일정한_시간을_기다린_후==_데이터를_전송하는_방법","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_==IEEE_802.3_LAN==_에서_사용되는_전송_매체_접속_제어방식이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#SOA(Service_Oriented_Architecture)서비스지향아키텍처의_계층","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._표현_계층","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._프로세스_계층","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._서비스_계층","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._비즈니스_계층","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#5._영속_계층","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#라우팅_프로토콜_종류_및_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._거리_벡터_라우팅_프로토콜(RIP)_-_==IGP에_속함==,==내부게이트웨이==","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._링크_상태_라우팅_프로토콜(OSPF)","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#SPICE란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_ISO/IEC_15504_라고도_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_소프트웨어_품질_및_생산성_향상을_위해_소프트웨어_==프로세스를_평가==하고_개서하는_국체_표준이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_기관에서_지정한_요구조건의_만족여부를_개발_조직이_==스스로_평가==한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#수행_능력_수준_`불수관확예최`","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#불완전(0)_->_수행(1)_->_관리(2)_->_확립(3)_->_예측(4)_->_최적화(5)","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#TCP_Wrapper란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_어떤_*외부_컴퓨터*가_접속되면_**접속_인가_여부를_점검**해서_인가된_경우에는_접속이_허용되고,_그_반대_경우에는_거부할_수_있는_**접근제어_유틸리티**_이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#세션_하이재킹을_탐지하는_방법","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._비동기화_상태_탐지","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._ACK_Storm_탐지","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._패킷의_유실과_재전송_증가_탐지","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._예상치_못한_접속의_리셋_탐지","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#네트워크_장비에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#브라우터(Brouter)","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_브릿지와_라우터의_기능으_모두_갖추고_있는_네트워크_장비이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#리피터","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_전송되는_신호가_전송_선로의_특성_및_외부_충격_등의_요인으로_*왜곡되거나_약해질_경우_원래의_신호_형태로_재생하여_다시_전송*하는_역할.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#브리지","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_LAN과_LAN을_연결하거나,_LAN안에서의_컴퓨터_그룹을_연결하는_기능을_수행한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_*데이터링크_계층*_중_*MAC계층에서_사용된다*.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#스위치","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_LAN과_LAN을_연결하여_더_큰_LAN을_만드드는_장치","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_OSI_7계층_중_*데이터링크_계층(2)에서_사용된다.*","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#라우터","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_LAN과_LAN의_연결_기능에_데이터_전송의_*최적경로를_선택할_수_있는_기능*을_추가한것","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_서로_다른_LAN이나_LAN과_WAN의_연결도_수행한다","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_OSI_7계층의_*네트워크_계층(3)에_속한다.*","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#루프(폐회로)를_형성하지_않으면서_연결을_설정할_수_있는_알고리즘","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_STA(Spanning_Tree_Algorithm)","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#SAN(**Storage**_Area_Network)란?","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._네트워크상에_광채널_스위치의_이점인_*고속_전송*과_**장거리_연결_및_멀티_프로토콜_기능을_활용**","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._**각기_다른_OS를_가진_여러_기종**들이_네트워크상에서_동일_저장장치의_**데이터를_공유**하게_함으로써,_**여러개의_저장장치나_백업장치를_단일화**시킨_시스템","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#nmap_이란??","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#-_서버에_열린_포트_정보를_스캐닝해서_보안_취약점을_찾는데_사용하는_도구이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#Bell-LaPadula_Model(벨-라파듈라_모델)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._군대의_보안레벨처럼_정보의_기밀성에_따라_상하_관계가_구분된_정보를_보호하기_위해_사용","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._자신의_권한보다_낮은_보안_레벨_권한을_가진_경우에는_높은_보안_레벨의_문서를_읽을_수_없고,_자신보다_권한레벨이_낮은_문서만_읽읈_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._자신의_권한보다_높은_보안_레벨의_문서에는_쓰기가_가능하지만,_보아레벨이_낮은_문서의_쓰기_권한은_제한한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#Secure_OS의_보안_기능","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#1._식별_및_인증","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#2._임의/강제적_접근_통제","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#3._객체_재사용_보호","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#4._완전한_조정","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#5._신뢰_경로","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html#6._감사_및_감사기록_축소"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html","pathToRoot":"../../..","createdTime":1739783025899,"modifiedTime":1739946883587,"sourceSize":21325,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 1과목 - 소프트웨어 설계.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html","showInTree":true,"treeOrder":0,"attachments":[]},"study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html":{"title":"🥈 필기 2과목 - 소프트웨어 개발","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:정보처리기사\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정보처리기사</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:필기\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#필기</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:정리\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정리</a> <br> <a href=\"http://lts.kr?query=tag:정보처리기사\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정보처리기사\">#정보처리기사</a> <a href=\"http://lts.kr?query=tag:필기\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#필기\">#필기</a> <a href=\"http://lts.kr?query=tag:정리\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정리\">#정리</a> <br>\n<br>프로그램의 하위 모듈에서 상위 모듈 방향으로 통합\n<br>하나의 주요 제어 모듈과 관련된 종속 모듈의 그룹인 클러스터 필요\n<br>\n<br>상위 모듈에서 하위 모듈방향으로 통합\n<br>깊이 우선 통합법, 넓이 우선 통합법 사용\n<br>초기부터 사용자에게 시스템 구조를 보여줌\n<br>\n<br>사용사례를 확장하여 명세하거나 설계 다이어그램, 원시코드, 테스트 케이스 등에 적용할 수 있다.\n<br>복잡한 알고리즘 또는 반복, 실시간 동작, 병행 처리와 같은 기능이나 동작을 이해하려고 할 때 유용하다.\n<br>단순한 테스트 케이스를 이용하여 프로덕트를 수작업으로 수행해 보는 것이다.\n<br>요구사항 명세서 작성자를 포함하여 사전 검토한 후에 짧은 검토 회의를 통해 결함을 발견\n<br>\n<br>요구사항 명세서 작성자를 제외한 다른 검토 전문가들이 요구사항 명세서를 확인하면서 결함을 발견\n<br>9 / 12 / 14 / 25<br>\n<br>기초 경로 검사 -&gt; 화이트 박스 테스트\n<br>동치 클래스 분해\n<br>경계값 분석\n<br>원인 결과 그래프\n<br>- 소프트웨어 품질 평가를 위한 소프트웨어 품질평가 통합모델의 표준\n- `SQuaRE`라고도 한다.\n- 기존 평가모델인 `ISO/IEC9126` 과 `ISO/IEC14598`을 통합하였다.\n<br>- 소프트웨어의 내부 및 외부 품질과 사용 품질에 대한 모델 등, 품질 모델 부분을 다룬다.\n<br>- 소프트웨어의 내부 측정, 외부 측정, 사용품질 측정 등 품직 측정 부분을 다룬다.\n<br>\n<br>특정한 몇몇 테스트 케이스의 입력 값들에 대해서만 기대하는 결과를 제공하는 오라클이다.\n<br>\n<br>모든 테스트 케이스의 입력 값에 대해 기대하는 결과를 제공하는 오라클\n<br>\n<br>특정 테스트 케이스의 입력값에 대해 기대하는 결과를 제공하고, 나머지 입력값들에 대해서는 추정으로 처리\n<br>\n<br>애플리케이션의 변경이 있을 경우 테스트 케이스의 수행 전과 후의 결과값이 동일한지를 확인하는 오라클\n<br><a data-href=\"🥈 필기 3과목 - 데이터베이스 구축\" href=\"http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥈 필기 3과목 - 데이터베이스 구축</a>","aliases":[],"tags":["#정보처리기사","#필기","#정리"],"headers":[{"heading":"🥈 필기 2과목 - 소프트웨어 개발","level":1,"id":"🥈 필기 2과목 - 소프트웨어 개발"},{"heading":"소프트웨어 테스트에서 검증과 확인의 대한 설명","level":1,"id":"소프트웨어_테스트에서_검증과_확인의_대한_설명"},{"heading":"검증(Verification)","level":3,"id":"검증(Verification)"},{"heading":"- 소프트웨어가 요구사항에 부함하게 구현되었음을 보장하는 활동","level":4,"id":"-_소프트웨어가_==요구사항에_부함하게_구현==되었음을_보장하는_활동"},{"heading":"확인(Validation)","level":3,"id":"확인(Validation)"},{"heading":"- 소프트웨어가 고객의 의도에 따라 구현되었음을 보장하는 활동","level":4,"id":"-_소프트웨어가_==고객의_의도에_따라_구현==되었음을_보장하는_활동"},{"heading":"검증 -> 개발자 / 확인 -> 사용자","level":5,"id":"검증_->_개발자_/_확인_->_사용자"},{"heading":"테스트별 특징에 대한 설명","level":1,"id":"테스트별_특징에_대한_설명"},{"heading":"단위 테스트","level":3,"id":"단위_테스트"},{"heading":"- 하나의 '모듈'을 기준으로 독립적으로 진행되는 가장 작은 단위의 테스트","level":4,"id":"-_하나의_=='모듈'==을_기준으로_독립적으로_진행되는_가장_작은_단위의_테스트"},{"heading":"- 내부에 존재하는 논리적인 오류를 검출, 기능이 제대로 수행되는지 점검","level":4,"id":"-_내부에_존재하는_논리적인_오류를_검출,_기능이_제대로_수행되는지_점검"},{"heading":"통합 테스트","level":3,"id":"통합_테스트"},{"heading":"- 모듈을 통합하는 과정에서 '모듈 간의' 호환성을 확인하기 위해 수행되는 테스트","level":4,"id":"-_모듈을_통합하는_과정에서_=='모듈_간의'_호환성==을_확인하기_위해_수행되는_테스트"},{"heading":"시스템 테스트","level":3,"id":"시스템_테스트"},{"heading":"- '완전한 시스템'에 대해 수행하는 테스트. 기능적 비기능적 요구사항을 만족하는지 확인","level":4,"id":"-_=='완전한_시스템'==에_대해_수행하는_테스트._==기능적_비기능적_요구사항==을_만족하는지_확인"},{"heading":"인수 테스트","level":3,"id":"인수_테스트"},{"heading":"- 실제 환경에서 '사용자'가 참여하는 테스트. 요구 분석 명세서에 나타난 사항을 모두 충족하는지, 시스템이 예상대로 동작하는지 사용자 관점에서 확인","level":4,"id":"-_실제_환경에서_=='사용자'==가_참여하는_테스트._요구_분석_명세서에_나타난_사항을_모두_충족하는지,_시스템이_예상대로_동작하는지_사용자_관점에서_확인"},{"heading":"통합 테스트(Integration Test)에 관련한 설명","level":1,"id":"통합_테스트(Integration_Test)에_관련한_설명"},{"heading":"[상향식 통합 테스트]","level":3,"id":"[상향식_통합_테스트]"},{"heading":"[하향식 통합 테스트]","level":3,"id":"[하향식_통합_테스트]"},{"heading":"소프트웨어 공학에서 워크스루(walkthrough)에 대한 설명","level":1,"id":"소프트웨어_공학에서_워크스루(walkthrough)에_대한_설명"},{"heading":"[워크스루]","level":3,"id":"[워크스루]"},{"heading":"[인스펙션]","level":3,"id":"[인스펙션]"},{"heading":"테스트 케이스와 관련된 설명","level":1,"id":"테스트_케이스와_관련된_설명"},{"heading":"프로그램에 결함이 있더라도 입력에 대해 정상적인 결과를 낼 수 있기 때문에 결함을 검사할 수 있는 테스트 케이스를 찾는것이 중요하다","level":3,"id":"프로그램에_결함이_있더라도_입력에_대해_정상적인_결과를_낼_수_있기_때문에_결함을_검사할_수_있는_테스트_케이스를_찾는것이_중요하다"},{"heading":"테스트 케이스 실행이 통과되었는지 실패하였는지 판단하기 위한 기준을 테스트 오라클 이라고 한다.","level":3,"id":"테스트_케이스_실행이_통과되었는지_실패하였는지_판단하기_위한_기준을_테스트_오라클_이라고_한다."},{"heading":"DRM(Digital Right Management) 에 대한 설명","level":1,"id":"==DRM==(Digital_Right_Management)_에_대한_설명"},{"heading":"디지털 콘텐츠의 지적재산권보고, 관리 기능 및 안전한 유통과 배포를 보장하는 솔루션이다.","level":3,"id":"디지털_콘텐츠의_지적재산권보고,_관리_기능_및_안전한_유통과_배포를_보장하는_솔루션이다."},{"heading":"디지털 콘텐츠의 권한통제기술, 사용권한제어 기술, 패키징 기술, 라이선스 관리를 포함한 유통체계이다.","level":3,"id":"디지털_콘텐츠의_권한통제기술,_사용권한제어_기술,_패키징_기술,_라이선스_관리를_포함한_유통체계이다."},{"heading":"디지털 콘텐츠와 디바이스의 사용을 제한하기 위해 하드웨어 제조업자, 저작권자, 출판업자 등이 사용할 수 있는 접근 제어기술이다.","level":3,"id":"디지털_콘텐츠와_디바이스의_사용을_제한하기_위해_하드웨어_제조업자,_저작권자,_출판업자_등이_사용할_수_있는_접근_제어기술이다."},{"heading":"DRM의 구성요소","level":2,"id":"DRM의_구성요소"},{"heading":"1. 콘텐츠 분배자 : 암호화된 콘텐츠를 유통하는 곳/사람","level":4,"id":"1._콘텐츠_분배자__암호화된_콘텐츠를_유통하는_곳/사람"},{"heading":"2. 패키저 : 콘텐츠를 메타데이터와 함께 배포가능한 형태로 묶어 암호화","level":4,"id":"2._패키저__콘텐츠를_메타데이터와_함께_배포가능한_형태로_묶어_암호화"},{"heading":"3. 클리어링 하우스 : 키 관리 및 라이센스 발급 관리","level":4,"id":"3._클리어링_하우스__키_관리_및_라이센스_발급_관리"},{"heading":"4. DRM컨트롤러 : 배포된 콘텐츠의 이용권한을 통제","level":4,"id":"4._DRM컨트롤러__배포된_콘텐츠의_이용권한을_통제"},{"heading":"위험 모니터링이란?","level":1,"id":"위험_모니터링이란?"},{"heading":"위험 요소 징후들에 대하여 계속적으로 인지하는 것","level":3,"id":"위험_요소_징후들에_대하여_계속적으로_인지하는_것"},{"heading":"RCS(Revision Contorol System)","level":1,"id":"==RCS==(Revision_Contorol_System)"},{"heading":"CVS와의 차이점은 소스 파일의 수정을 한 사람만으로 제한한다.","level":3,"id":"CVS와의_차이점은_==소스_파일의_수정을_한_사람만==으로_제한한다."},{"heading":"다수의 사용자가 동시에 파일 수정을 할 수 없도록 파일 잠금 방식으로 버전을 관리하는 도구이다.","level":3,"id":"다수의_사용자가_동시에_파일_수정을_할_수_없도록_==파일_잠금_방식으로_버전을_관리==하는_도구이다."},{"heading":"다른 방향으로 진행된 개발 결과를 합치거나 변경 내용을 추적할 수 있다.","level":3,"id":"다른_방향으로_진행된_개발_결과를_합치거나_변경_내용을_추적할_수_있다."},{"heading":"화이트 박스 테스트에 대한 설명","level":1,"id":"화이트_박스_테스트에_대한_설명"},{"heading":"프로그램 구조를 고려하지 않는 것은 == 블랙박스 테스트 이다.","level":3,"id":"프로그램_구조를_고려하지_않는_것은_==_블랙박스_테스트_이다."},{"heading":"화이트박스 테스트는 정적 분석뿐만 아니라 동적 분석에도 사용될 수 있다.","level":3,"id":"화이트박스_테스트는_정적_분석뿐만_아니라_동적_분석에도_사용될_수_있다."},{"heading":"정적 분석 : 코드를 실행하지 않고 검토하여 문제점을 찾는다.","level":4,"id":"정적_분석__코드를_실행하지_않고_검토하여_문제점을_찾는다."},{"heading":"동적 분석 : 실제로 코드를 실행시켜 테스트를 하기 때문에, 로직의 흐름도를 이용하여 로직 검증을 할 수 있고, 동적 테스트를 통해 실제 실행중인 프로그램의 동작을 검증할 수도 있다.","level":4,"id":"동적_분석__실제로_코드를_실행시켜_테스트를_하기_때문에,_로직의_흐름도를_이용하여_로직_검증을_할_수_있고,_동적_테스트를_통해_실제_실행중인_프로그램의_동작을_검증할_수도_있다."},{"heading":"버블 정렬에 대한 설명","level":1,"id":"버블_정렬에_대한_설명"},{"heading":"버블정렬은 첫위치부터 시작해서 계속해서 오른쪽값과 비교한다. (pass 1)","level":3,"id":"버블정렬은_첫위치부터_시작해서_계속해서_오른쪽값과_비교한다._(pass_1)"},{"heading":"인스펙션(Inspection)의 과정에 대한 설명","level":1,"id":"인스펙션(Inspection)의_과정에_대한_설명"},{"heading":"계획 -> 사전교육 -> 준비 -> 인스펙션 회의 -> 수정 -> 후속조치","level":3,"id":"계획_->_사전교육_->_준비_->_인스펙션_회의_->_수정_->_후속조치"},{"heading":"수정 -> 다시 계획으로","level":3,"id":"수정_->_다시_계획으로"},{"heading":"용어들에 대한 설명","level":1,"id":"용어들에_대한_설명"},{"heading":"Refactoring - 코드의 구조 재조정","level":3,"id":"Refactoring_-_코드의_구조_재조정"},{"heading":"Architecting - 설계관련","level":3,"id":"Architecting_-_설계관련"},{"heading":"Specification - 명세서","level":3,"id":"Specification_-_명세서"},{"heading":"Renewal - 유지보수","level":3,"id":"Renewal_-_유지보수"},{"heading":"단위 테스트(unit Test)와 관련된 설명","level":1,"id":"단위_테스트(unit_Test)와_관련된_설명"},{"heading":"필요 데이터를 인자를 통해 넘게주고, 테스트 완료 후 그 결과값을 받는 역할을 하는 가상의 모듈을 테스트 드라이버라고 한다.","level":3,"id":"필요_데이터를_인자를_통해_넘게주고,_테스트_완료_후_그_결과값을_받는_역할을_하는_가상의_모듈을_테스트_드라이버라고_한다."},{"heading":"반대로 테스트 스텁(test stub)은 인자를 통해 받은 값을 가지고 수행한 후 그 결과를 테스트할 모듈에 넘겨주는 역할을 한다.","level":3,"id":"반대로_테스트_스텁(test_stub)은_인자를_통해_받은_값을_가지고_수행한_후_그_결과를_테스트할_모듈에_넘겨주는_역할을_한다."},{"heading":"테스트 드라이버","level":4,"id":"테스트_드라이버"},{"heading":"- 테스트 대상 하위 모듈을 호출하고, 파라미터 전달, 모듈 테스트 수행 후의 결과 도출","level":5,"id":"-_테스트_대상_하위_모듈을_호출하고,_파라미터_전달,_모듈_테스트_수행_후의_결과_도출"},{"heading":"- 상향식 테스트에 사용됨","level":5,"id":"-_상향식_테스트에_사용됨"},{"heading":"테스트 스텁","level":4,"id":"테스트_스텁"},{"heading":"- 제어 모듈이 호출되는 타 모듈의 기능을 단순히 수행하는 도구","level":5,"id":"-_제어_모듈이_호출되는_타_모듈의_기능을_단순히_수행하는_도구"},{"heading":"- 하향식 테스트에 사용됨","level":5,"id":"-_하향식_테스트에_사용됨"},{"heading":"IDE 도구의 각 기능에 대한 설명","level":1,"id":"IDE_도구의_각_기능에_대한_설명"},{"heading":"Compile - 주어진 언어로 작성된 컴퓨터 프로그램을 다른 언어의 동등한 프로그램으로 변환하는 기능, 고급언어(사람이 인식하는 언어 -> 저급언어(기계어)","level":3,"id":"Compile_-_주어진_언어로_작성된_컴퓨터_프로그램을_다른_언어의_동등한_프로그램으로_변환하는_기능,_고급언어(사람이_인식하는_언어_->_저급언어(기계어)"},{"heading":"JSON에 대한 설명","level":1,"id":"JSON에_대한_설명"},{"heading":"JSON(JavaScript Object Notation)","level":3,"id":"JSON(JavaScript_Object_Notation)"},{"heading":"속성-값 의 쌍으로 이루어진 데이터 오브젝트를 전달하기 위해 사용하는 개방형 표준 포맷이다.","level":3,"id":"속성-값_의_쌍으로_이루어진_데이터_오브젝트를_전달하기_위해_사용하는_개방형_표준_포맷이다."},{"heading":"AJAX에서 많이 사용되는 XML을 대체하는 주요 데이터 포맷이다.","level":3,"id":"AJAX에서_많이_사용되는_XML을_대체하는_주요_데이터_포맷이다."},{"heading":"언어 독립형 포맷으로 다양한 프로그래밍 언어에서 사용되고 있다.","level":3,"id":"언어_독립형_포맷으로_다양한_프로그래밍_언어에서_사용되고_있다."},{"heading":"단위 테스트 도구에 대한 설명","level":1,"id":"단위_테스트_도구에_대한_설명"},{"heading":"CppUnit - C++프로그래밍 언어용 단위 테스트 도구","level":3,"id":"CppUnit_-_C++프로그래밍_언어용_단위_테스트_도구"},{"heading":"JUnit - Java프로그래밍 언어용 단위 테스트 도구","level":3,"id":"JUnit_-_Java프로그래밍_언어용_단위_테스트_도구"},{"heading":"HttpUnit - 웹 브라우저 없이 웹 사이트 테스트를 수행하는데 사용되는 오픈소스 테스트 프레임워크","level":3,"id":"HttpUnit_-_웹_브라우저_없이_웹_사이트_테스트를_수행하는데_사용되는_오픈소스_테스트_프레임워크"},{"heading":"단위 테스트의 용어에 대한 설명","level":1,"id":"단위_테스트의_용어에_대한_설명"},{"heading":"테스트 드라이버 결과까지 받음","level":3,"id":"테스트_드라이버_==결과까지_받음=="},{"heading":"- 필요 데이터를 인자를 통해 넘겨주고, 테스트완료 후 그 결과값을 받는 역할을 하는 가상의 모듈","level":4,"id":"-_필요_데이터를_인자를_통해_넘겨주고,_**테스트완료_후_그_결과값을_받는**_역할을_하는_가상의_모듈"},{"heading":"테스트 스텁 기능만 단순","level":3,"id":"테스트_스텁_==기능만_단순=="},{"heading":"- 제어모듈이 호출하는 타 모듈의 기능을 단순히 수행하는 도구","level":4,"id":"-_제어모듈이_호출하는_**타_모듈의_기능을_단순히_수행**하는_도구"},{"heading":"- 일시적으로 필요한 조건만을 가지고 있는 테스트용 모듈","level":4,"id":"-_**일시적으로_필요한_조건만을_가지고_있는_테스트**용_모듈"},{"heading":"테스트 슈트","level":3,"id":"테스트_슈트"},{"heading":"- 테스트 대상 컴포넌트나 모듈, 시스템에 사용되는 테스트 케이스의 집합","level":4,"id":"-_테스트_대상_컴포넌트나_모듈,_시스템에_사용되는_테스트_케이스의_집합"},{"heading":"테스트 케이스","level":3,"id":"테스트_케이스"},{"heading":"- 사용자의 요구사항을 정확히 준수했는지 확인하기 위한 입력값","level":4,"id":"-_사용자의_요구사항을_정확히_준수했는지_확인하기_위한_입력값"},{"heading":"- 실행조건, 기대결과 등으로 만들어진 테스트 항목의 명세서'","level":4,"id":"-_실행조건,_기대결과_등으로_만들어진_테스트_항목의_명세서'"},{"heading":"스텁 / 드라이브","level":3,"id":"스텁_/_드라이브"},{"heading":"- 스텁은 하양식 / 드라이브는 상향식이다. 스하드상","level":4,"id":"-_스텁은_하양식_/_드라이브는_상향식이다._==스하드상=="},{"heading":"FTR(정형 기술 검토)의 지침에대한 설명","level":1,"id":"==FTR==(정형_기술_검토)의_지침에대한_설명"},{"heading":"오류 검출에 초점을 두고 해결책을 나중으로 미룸","level":3,"id":"오류_검출에_초점을_두고_해결책을_나중으로_미룸"},{"heading":"- 제품 검토의 집중성","level":4,"id":"-_제품_검토의_집중성"},{"heading":"검토를 위한 자료를 사전에 배포하여 검토하도록 한다","level":3,"id":"검토를_위한_자료를_사전에_배포하여_검토하도록_한다"},{"heading":"- 사전 준비성","level":4,"id":"-_사전_준비성"},{"heading":"의견을 제한하되 충분히 받아들인다.","level":3,"id":"의견을_제한하되_충분히_받아들인다."},{"heading":"- 의제의 제한성","level":4,"id":"-_의제의_제한성"},{"heading":"안건을 세우면 고수한다.","level":3,"id":"안건을_세우면_고수한다."},{"heading":"- 안건 고수성","level":4,"id":"-_안건_고수성"},{"heading":"논쟁과 반박을 제한한다.","level":3,"id":"논쟁과_반박을_제한한다."},{"heading":"- 논쟁 반받의 제한성","level":4,"id":"-_논쟁_반받의_제한성"},{"heading":"문제 영역을 공개한다.","level":3,"id":"문제_영역을_공개한다."},{"heading":"- 문제 공개성","level":4,"id":"-_문제_공개성"},{"heading":"참가자의 수를 제한한다.","level":3,"id":"참가자의_수를_제한한다."},{"heading":"- 참가인원의 제한성","level":4,"id":"-_참가인원의_제한성"},{"heading":"발견된 오류는 문서화한다.","level":3,"id":"발견된_오류는_문서화한다."},{"heading":"- 문서성","level":4,"id":"-_문서성"},{"heading":"소프트웨어 품질 관련 국체 표준","level":1,"id":"소프트웨어_품질_관련_국체_표준"},{"heading":"ISO/IEC 9126","level":2,"id":"ISO/IEC_9126"},{"heading":"ISO/IEC 12119","level":2,"id":"ISO/IEC_12119"},{"heading":"ISO/IEC 14598","level":2,"id":"ISO/IEC_14598"},{"heading":"ISO/IEC 25010","level":2,"id":"ISO/IEC_25010"},{"heading":"물리데이터 저장소 파티션 설계 유형","level":1,"id":"물리데이터_저장소_파티션_설계_유형"},{"heading":"1. 범위 분할","level":2,"id":"1._범위_분할"},{"heading":"2. 해시 분할","level":2,"id":"2._해시_분할"},{"heading":"3. 조합 분할","level":2,"id":"3._조합_분할"},{"heading":"4. 목록 분할","level":2,"id":"4._목록_분할"},{"heading":"5. 라운드 로빈 분할","level":2,"id":"5._라운드_로빈_분할"},{"heading":"EAI(Enterprise Application Integration)구축 유형 중 Hybrid에 대한 설명","level":1,"id":"EAI(Enterprise_Application_Integration)구축_유형_중_Hybrid에_대한_설명"},{"heading":"1. Hub & Spoke와 Message Bus의 혼합방식이다.","level":3,"id":"1._Hub_&_Spoke와_Message_Bus의_혼합방식이다."},{"heading":"2. 필요한 경우 한 가지 방식으로 EAI를 구현할 수 있다.","level":3,"id":"2._필요한_경우_한_가지_방식으로_EAI를_구현할_수_있다."},{"heading":"3. 데이터 병목 현상을 최소화 할 수 있다.","level":3,"id":"3._데이터_병목_현상을_최소화_할_수_있다."},{"heading":"4. 단말들 사이에 버스와 허브를 미들웨어로 두는 구축 방식이다.","level":3,"id":"4._단말들_사이에_버스와_허브를_미들웨어로_두는_구축_방식이다."},{"heading":"소스코드 품질 분석 도구 중 정적 분석 도구에 해당하는 것.","level":1,"id":"소스코드_품질_분석_도구_중_정적_분석_도구에_해당하는_것."},{"heading":"PSC4","level":2,"id":"==PSC4=="},{"heading":"1. pmd","level":3,"id":"1._pmd"},{"heading":"2. SonarQube","level":3,"id":"2._SonarQube"},{"heading":"3. cppcheck","level":3,"id":"3._cppcheck"},{"heading":"4. checkstyle","level":3,"id":"4._checkstyle"},{"heading":"5. ccm","level":3,"id":"5._ccm"},{"heading":"6. cobertura","level":3,"id":"6._cobertura"},{"heading":"블랙박스 테스트 기법이 아닌것은?","level":1,"id":"블랙박스_테스트_기법이_아닌것은?"},{"heading":"해싱 함수 중 레코드 키를 여러 부분으로 나누고, 나눈 부분의 각 숫자를 더하거나, XOR한 값을 홈주소로 사용하는 방식은?","level":1,"id":"해싱_함수_중_레코드_키를_여러_부분으로_나누고,_나눈_부분의_각_숫자를_더하거나,_XOR한_값을_홈주소로_사용하는_방식은?"},{"heading":"- 폴딩법","level":2,"id":"-_폴딩법"},{"heading":"소프트웨어 메뉴얼 작성 절차","level":1,"id":"소프트웨어_메뉴얼_작성_절차"},{"heading":"1. 작성 지침 정의","level":3,"id":"1._작성_지침_정의"},{"heading":"2. 사용 설명서 구성 요소 정의","level":3,"id":"2._사용_설명서_구성_요소_정의"},{"heading":"3. 구성 요소별 내용 작성","level":3,"id":"3._구성_요소별_내용_작성"},{"heading":"4. 사용 설명서 검토","level":3,"id":"4._사용_설명서_검토"},{"heading":"트리 구조의 검색 효율","level":1,"id":"트리_구조의_검색_효율"},{"heading":"효율나쁨 -> 좋은","level":5,"id":"효율나쁨_->_좋은"},{"heading":"1. 이진 탐색 트리","level":3,"id":"1._이진_탐색_트리"},{"heading":"2. AVL","level":3,"id":"2._AVL"},{"heading":"3. 2-3","level":3,"id":"3._2-3"},{"heading":"4. 레드-블랙","level":3,"id":"4._레드-블랙"},{"heading":"프로그램 설계도 중 하나인 NS Chart에 대한 설명","level":1,"id":"프로그램_설계도_중_하나인_==NS_Chart==에_대한_설명"},{"heading":"1. 논리의 기술에 중점을 두고 도형을 이용한 표현 방법이다.","level":3,"id":"1._논리의_기술에_중점을_두고_도형을_이용한_표현_방법이다."},{"heading":"2. 이해하기 쉽고 코드 변환이 용이하다.","level":3,"id":"2._이해하기_쉽고_코드_변환이_용이하다."},{"heading":"3. 연속, 선택, 반복 등의 제어 논리 구조를 표현한다.","level":3,"id":"3._연속,_선택,_반복_등의_제어_논리_구조를_표현한다."},{"heading":"소프트웨어 품질관련 국제 표준","level":1,"id":"소프트웨어_품질관련_국제_표준"},{"heading":"ISO/IEC 25000","level":2,"id":"ISO/IEC_25000"},{"heading":"ISO/IEC 2501n","level":2,"id":"ISO/IEC_2501n"},{"heading":"ISO/IEC 2502n","level":2,"id":"ISO/IEC_2502n"},{"heading":"테스트 오라클에 대한 설명","level":1,"id":"테스트_오라클에_대한_설명"},{"heading":"1. 샘플링 오라클","level":2,"id":"1._샘플링_오라클"},{"heading":"2. 참 오라클","level":2,"id":"2._참_오라클"},{"heading":"3. 휴리스틱 오라클","level":2,"id":"3._휴리스틱_오라클"},{"heading":"4. 일관성 검사 오라클","level":2,"id":"4._일관성_검사_오라클"}],"backlinks":[],"links":["?query=tag:%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC","?query=tag:%ED%95%84%EA%B8%B0","?query=tag:%EC%A0%95%EB%A6%AC","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#🥈 필기 2과목 - 소프트웨어 개발","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#소프트웨어_테스트에서_검증과_확인의_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#검증(Verification)","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_소프트웨어가_==요구사항에_부함하게_구현==되었음을_보장하는_활동","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#확인(Validation)","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_소프트웨어가_==고객의_의도에_따라_구현==되었음을_보장하는_활동","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#검증_->_개발자_/_확인_->_사용자","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#테스트별_특징에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#단위_테스트","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_하나의_=='모듈'==을_기준으로_독립적으로_진행되는_가장_작은_단위의_테스트","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_내부에_존재하는_논리적인_오류를_검출,_기능이_제대로_수행되는지_점검","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#통합_테스트","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_모듈을_통합하는_과정에서_=='모듈_간의'_호환성==을_확인하기_위해_수행되는_테스트","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#시스템_테스트","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_=='완전한_시스템'==에_대해_수행하는_테스트._==기능적_비기능적_요구사항==을_만족하는지_확인","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#인수_테스트","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_실제_환경에서_=='사용자'==가_참여하는_테스트._요구_분석_명세서에_나타난_사항을_모두_충족하는지,_시스템이_예상대로_동작하는지_사용자_관점에서_확인","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#통합_테스트(Integration_Test)에_관련한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#[상향식_통합_테스트]","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#[하향식_통합_테스트]","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#소프트웨어_공학에서_워크스루(walkthrough)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#[워크스루]","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#[인스펙션]","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#테스트_케이스와_관련된_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#프로그램에_결함이_있더라도_입력에_대해_정상적인_결과를_낼_수_있기_때문에_결함을_검사할_수_있는_테스트_케이스를_찾는것이_중요하다","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#테스트_케이스_실행이_통과되었는지_실패하였는지_판단하기_위한_기준을_테스트_오라클_이라고_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#==DRM==(Digital_Right_Management)_에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#디지털_콘텐츠의_지적재산권보고,_관리_기능_및_안전한_유통과_배포를_보장하는_솔루션이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#디지털_콘텐츠의_권한통제기술,_사용권한제어_기술,_패키징_기술,_라이선스_관리를_포함한_유통체계이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#디지털_콘텐츠와_디바이스의_사용을_제한하기_위해_하드웨어_제조업자,_저작권자,_출판업자_등이_사용할_수_있는_접근_제어기술이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#DRM의_구성요소","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#1._콘텐츠_분배자__암호화된_콘텐츠를_유통하는_곳/사람","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#2._패키저__콘텐츠를_메타데이터와_함께_배포가능한_형태로_묶어_암호화","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#3._클리어링_하우스__키_관리_및_라이센스_발급_관리","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#4._DRM컨트롤러__배포된_콘텐츠의_이용권한을_통제","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#위험_모니터링이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#위험_요소_징후들에_대하여_계속적으로_인지하는_것","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#==RCS==(Revision_Contorol_System)","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#CVS와의_차이점은_==소스_파일의_수정을_한_사람만==으로_제한한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#다수의_사용자가_동시에_파일_수정을_할_수_없도록_==파일_잠금_방식으로_버전을_관리==하는_도구이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#다른_방향으로_진행된_개발_결과를_합치거나_변경_내용을_추적할_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#화이트_박스_테스트에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#프로그램_구조를_고려하지_않는_것은_==_블랙박스_테스트_이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#화이트박스_테스트는_정적_분석뿐만_아니라_동적_분석에도_사용될_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#정적_분석__코드를_실행하지_않고_검토하여_문제점을_찾는다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#동적_분석__실제로_코드를_실행시켜_테스트를_하기_때문에,_로직의_흐름도를_이용하여_로직_검증을_할_수_있고,_동적_테스트를_통해_실제_실행중인_프로그램의_동작을_검증할_수도_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#버블_정렬에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#버블정렬은_첫위치부터_시작해서_계속해서_오른쪽값과_비교한다._(pass_1)","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#인스펙션(Inspection)의_과정에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#계획_->_사전교육_->_준비_->_인스펙션_회의_->_수정_->_후속조치","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#수정_->_다시_계획으로","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#용어들에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#Refactoring_-_코드의_구조_재조정","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#Architecting_-_설계관련","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#Specification_-_명세서","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#Renewal_-_유지보수","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#단위_테스트(unit_Test)와_관련된_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#필요_데이터를_인자를_통해_넘게주고,_테스트_완료_후_그_결과값을_받는_역할을_하는_가상의_모듈을_테스트_드라이버라고_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#반대로_테스트_스텁(test_stub)은_인자를_통해_받은_값을_가지고_수행한_후_그_결과를_테스트할_모듈에_넘겨주는_역할을_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#테스트_드라이버","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_테스트_대상_하위_모듈을_호출하고,_파라미터_전달,_모듈_테스트_수행_후의_결과_도출","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_상향식_테스트에_사용됨","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#테스트_스텁","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_제어_모듈이_호출되는_타_모듈의_기능을_단순히_수행하는_도구","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_하향식_테스트에_사용됨","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#IDE_도구의_각_기능에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#Compile_-_주어진_언어로_작성된_컴퓨터_프로그램을_다른_언어의_동등한_프로그램으로_변환하는_기능,_고급언어(사람이_인식하는_언어_->_저급언어(기계어)","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#JSON에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#JSON(JavaScript_Object_Notation)","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#속성-값_의_쌍으로_이루어진_데이터_오브젝트를_전달하기_위해_사용하는_개방형_표준_포맷이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#AJAX에서_많이_사용되는_XML을_대체하는_주요_데이터_포맷이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#언어_독립형_포맷으로_다양한_프로그래밍_언어에서_사용되고_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#단위_테스트_도구에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#CppUnit_-_C++프로그래밍_언어용_단위_테스트_도구","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#JUnit_-_Java프로그래밍_언어용_단위_테스트_도구","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#HttpUnit_-_웹_브라우저_없이_웹_사이트_테스트를_수행하는데_사용되는_오픈소스_테스트_프레임워크","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#단위_테스트의_용어에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#테스트_드라이버_==결과까지_받음==","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_필요_데이터를_인자를_통해_넘겨주고,_**테스트완료_후_그_결과값을_받는**_역할을_하는_가상의_모듈","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#테스트_스텁_==기능만_단순==","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_제어모듈이_호출하는_**타_모듈의_기능을_단순히_수행**하는_도구","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_**일시적으로_필요한_조건만을_가지고_있는_테스트**용_모듈","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#테스트_슈트","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_테스트_대상_컴포넌트나_모듈,_시스템에_사용되는_테스트_케이스의_집합","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#테스트_케이스","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_사용자의_요구사항을_정확히_준수했는지_확인하기_위한_입력값","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_실행조건,_기대결과_등으로_만들어진_테스트_항목의_명세서'","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#스텁_/_드라이브","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_스텁은_하양식_/_드라이브는_상향식이다._==스하드상==","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#==FTR==(정형_기술_검토)의_지침에대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#오류_검출에_초점을_두고_해결책을_나중으로_미룸","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_제품_검토의_집중성","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#검토를_위한_자료를_사전에_배포하여_검토하도록_한다","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_사전_준비성","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#의견을_제한하되_충분히_받아들인다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_의제의_제한성","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#안건을_세우면_고수한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_안건_고수성","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#논쟁과_반박을_제한한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_논쟁_반받의_제한성","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#문제_영역을_공개한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_문제_공개성","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#참가자의_수를_제한한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_참가인원의_제한성","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#발견된_오류는_문서화한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_문서성","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#소프트웨어_품질_관련_국체_표준","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#ISO/IEC_9126","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#ISO/IEC_12119","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#ISO/IEC_14598","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#ISO/IEC_25010","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#물리데이터_저장소_파티션_설계_유형","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#1._범위_분할","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#2._해시_분할","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#3._조합_분할","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#4._목록_분할","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#5._라운드_로빈_분할","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#EAI(Enterprise_Application_Integration)구축_유형_중_Hybrid에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#1._Hub_&_Spoke와_Message_Bus의_혼합방식이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#2._필요한_경우_한_가지_방식으로_EAI를_구현할_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#3._데이터_병목_현상을_최소화_할_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#4._단말들_사이에_버스와_허브를_미들웨어로_두는_구축_방식이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#소스코드_품질_분석_도구_중_정적_분석_도구에_해당하는_것.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#==PSC4==","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#1._pmd","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#2._SonarQube","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#3._cppcheck","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#4._checkstyle","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#5._ccm","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#6._cobertura","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#블랙박스_테스트_기법이_아닌것은?","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#해싱_함수_중_레코드_키를_여러_부분으로_나누고,_나눈_부분의_각_숫자를_더하거나,_XOR한_값을_홈주소로_사용하는_방식은?","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#-_폴딩법","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#소프트웨어_메뉴얼_작성_절차","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#1._작성_지침_정의","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#2._사용_설명서_구성_요소_정의","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#3._구성_요소별_내용_작성","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#4._사용_설명서_검토","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#트리_구조의_검색_효율","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#효율나쁨_->_좋은","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#1._이진_탐색_트리","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#2._AVL","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#3._2-3","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#4._레드-블랙","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#프로그램_설계도_중_하나인_==NS_Chart==에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#1._논리의_기술에_중점을_두고_도형을_이용한_표현_방법이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#2._이해하기_쉽고_코드_변환이_용이하다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#3._연속,_선택,_반복_등의_제어_논리_구조를_표현한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#소프트웨어_품질관련_국제_표준","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#ISO/IEC_25000","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#ISO/IEC_2501n","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#ISO/IEC_2502n","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#테스트_오라클에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#1._샘플링_오라클","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#2._참_오라클","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#3._휴리스틱_오라클","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html#4._일관성_검사_오라클"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html","pathToRoot":"../../..","createdTime":1739783025899,"modifiedTime":1739946885204,"sourceSize":11745,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 2과목 - 소프트웨어 개발.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html","showInTree":true,"treeOrder":0,"attachments":[]},"study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html":{"title":"🥈 필기 3과목 - 데이터베이스 구축","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:정보처리기사\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정보처리기사</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:필기\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#필기</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:정리\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정리</a> <br> <a href=\"http://lts.kr?query=tag:정보처리기사\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정보처리기사\">#정보처리기사</a> <a href=\"http://lts.kr?query=tag:필기\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#필기\">#필기</a> <a href=\"http://lts.kr?query=tag:정리\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정리\">#정리</a> <br>0 or 1\n<br>트렌젠션 전/후 같아야함\n<br>다른 트렌젝션의 간섭 X\n<br>트렌젝션 커밋 결과가 영구히 저장\n<br>하드웨어와 소프트웨어의 물리적 위치를 사용자가 알 필요 없다. 논리적인 명칭으로만 엑세스할 수 있음\n<br>사용자에게 통지할 필요없이 시스템 안에 파일들과 자원들의 부가적인 복사를 자유롭게 할 수 있다.\n<br>다중 사용자들이 자원들을 자동으로 공유할 수 있다.\n<br>사용자들은 어는 위치의 시스템에 장애가 발생했는지 알 필요가 없다.\n<br>트렌젝션 모델링 / 독립적인 개념 스키마 모델링 / 개념스키마 설계 / E-R 다이어그램\n<br>트렌젝션 인터페이스 설계 / DBMS에 맞는 논리스키마 설계 / 테이블설계 / 논리적 맵핑 / 스키마 평가 및 정제\n<br>레코드 집중의 분석,설계 / 저장레코드 양식 설계 / 저장 구조 및 엑세스 경로 설정\n<br>각 릴레이션의 기본키를 구성하는 속성은 null값이나 중복값을 갖을 수 없음.\n<br>외래키 값은 null이거나 참조하는 릴레이션의 기본키와 값이 동일해야 한다.\n<br>특정 속성에 대해 고유한 값을 가지도록 조건이 주어진경우, 릴레이션의 각 튜플이 가지는 속성 값들은 서로 달라야 한다.\n<br>각 릴레이션은 최소한 한 개 이상의 키가 존재해야 한다.\n<br>릴레이션 내의 튜플들이 각 속성의 도메인에 지정된 값만을 가져야 한다.\n<br>도메인 : 하나의 에트리뷰트가 가질 수 있는 원자값들의 집합<br><a data-href=\"🥈 필기 4과목 - 프로그래밍 언어 활용\" href=\"http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥈 필기 4과목 - 프로그래밍 언어 활용</a>","aliases":[],"tags":["#정보처리기사","#필기","#정리"],"headers":[{"heading":"🥈 필기 3과목 - 데이터베이스 구축","level":1,"id":"🥈 필기 3과목 - 데이터베이스 구축"},{"heading":"DB의 Locking / Lock에 대한 설명","level":1,"id":"DB의_Locking_/_Lock에_대한_설명"},{"heading":"로킹(Locking) - 병행제어 기법의 종류 중 하나","level":3,"id":"로킹(Locking)_-_==병행제어_기법==의_종류_중_하나"},{"heading":"- 직렬화 기법","level":4,"id":"-_==직렬화==_기법"},{"heading":"- 데이터베이스, 파일, 레코드 등은 로킹단위가 될 수 있음","level":4,"id":"-_데이터베이스,_파일,_레코드_등은_로킹단위가_될_수_있음"},{"heading":"- 로킹 단위가 작아지면, 데이터 베이스 공유도 증가.","level":4,"id":"-_로킹_단위가_작아지면,_데이터_베이스_공유도_증가."},{"heading":"- 로킹 단위가 작아지면, 로킹 오버헤드 증가.","level":4,"id":"-_로킹_단위가_작아지면,_로킹_오버헤드_증가."},{"heading":"- 로킹 단위가 작아지면, 로크의 수 증가.","level":4,"id":"-_로킹_단위가_작아지면,_로크의_수_증가."},{"heading":"- 로킹 단위가 작아지면, 병행성 수준이 높아짐","level":4,"id":"-_로킹_단위가_작아지면,_병행성_수준이_높아짐"},{"heading":"- 한꺼번에 로킹할 수 있는 객체의 크기를 로킹단위라고 함.","level":4,"id":"-_한꺼번에_로킹할_수_있는_객체의_크기를_로킹단위라고_함."},{"heading":"CASCADE 명령어에 대한설명","level":1,"id":"CASCADE_명령어에_대한설명"},{"heading":"DROP VIEW V_1 CASCADE 등과 같이 사용하면","level":3,"id":"DROP_VIEW_V_1_CASCADE_등과_같이_사용하면"},{"heading":"-> V_1과 조인되어있거나 연결되어있으면 연쇄적으로 삭제된다. ( 참조하는 자식 개체까지 모두 삭제 )","level":4,"id":"->_V_1과_조인되어있거나_연결되어있으면_연쇄적으로_삭제된다._(_참조하는_자식_개체까지_모두_삭제_)"},{"heading":"반대로 RESTRICTED 명령어를 사용하면, 삭제하면서 참조중일 때 에러를 띄우며 삭제하는 작업을 중지한다.","level":3,"id":"반대로_RESTRICTED_명령어를_사용하면,_삭제하면서_참조중일_때_에러를_띄우며_삭제하는_작업을_중지한다."},{"heading":"DB 정규화 과정에 대한 설명","level":1,"id":"DB_정규화_과정에_대한_설명"},{"heading":"도부이결다조","level":3,"id":"도부이결다조"},{"heading":"1NF - 도 : 모든 도메인이 원자 값으로만 구성","level":3,"id":"1NF_-_도__==모든_도메인==이_원자_값으로만_구성"},{"heading":"2NF - 부 : 부분적 함수 종속을 제거한 정규형, 기본키가 아닌 속성이 기본키에 대한 완전 함수 종속을 만족","level":3,"id":"2NF_-_부__==부분적_함수_종속을_`제거`==한_정규형,_기본키가_아닌_속성이_기본키에_대한_완전_함수_종속을_만족"},{"heading":"3NF - 이 : 기본키가 아닌 모든 속성이 기본키에 대해 이행성 함수 종속관계를 만족하지 않는 정규형","level":3,"id":"3NF_-_이__기본키가_아닌_모든_속성이_기본키에_대해_==이행성_함수_종속관계를_만족하지==_않는_정규형"},{"heading":"BCNF - 결 : 모든 결정자가 후보키인 정규형","level":3,"id":"BCNF_-_결__==모든_결정자가_후보키==인_정규형"},{"heading":"4NF - 다 : 다치 종속이 성립하는 경우, R의 모든 속성이 A에 함수적 종속 관계를 만족","level":3,"id":"4NF_-_다__==다치_종속이_성립==하는_경우,_R의_모든_속성이_A에_함수적_종속_관계를_만족"},{"heading":"5NF - 조 : 모든 조인 종속이 R의 후보키를 통해서만 성립되는 정규형","level":3,"id":"5NF_-_조__==모든_조인_종속==이_R의_후보키를_통해서만_성립되는_정규형"},{"heading":"DB 트렌젝션에 대한 설명","level":1,"id":"DB_트렌젝션에_대한_설명"},{"heading":"Atomicity 원자성 : 완전하게 수행 완료되지 않으면 전혀 수행되지 않아야함","level":3,"id":"Atomicity_원자성__완전하게_수행_완료되지_않으면_전혀_수행되지_않아야함"},{"heading":"Consistency 일관성 : 시스템의 고정 요소는 트렌젝션 수행 전후에 같아야함","level":3,"id":"Consistency_일관성__시스템의_고정_요소는_트렌젝션_수행_전후에_같아야함"},{"heading":"Isolation 고립성 : 트렌젝션 실행 시 다른 트렌젝션의 간섭을 받지 않아야함","level":3,"id":"Isolation_고립성__트렌젝션_실행_시_다른_트렌젝션의_간섭을_받지_않아야함"},{"heading":"Durability 영속성 : 트렌젝션의 완료 결과가 DB에 영구히 기억됨","level":3,"id":"Durability_영속성__트렌젝션의_완료_결과가_DB에_영구히_기억됨"},{"heading":"분산 데이터베이스의 목표에 대한 설명 위중병장","level":1,"id":"분산_데이터베이스의_목표에_대한_설명_==위중병장=="},{"heading":"위치 투명성","level":3,"id":"위치_투명성"},{"heading":"중복 투명성","level":3,"id":"중복_투명성"},{"heading":"병행 투명성","level":3,"id":"병행_투명성"},{"heading":"장애 투명성","level":3,"id":"장애_투명성"},{"heading":"DB의 인덱스와 관련한 설명","level":1,"id":"DB의_인덱스와_관련한_설명"},{"heading":"Index - 독립적인 저장 공간을 보유하며, 데이터베이스에 저장된 자료를 더욱 빠르게 조회하기 위하여 별도로 구성한 순서 데이터를 말한다.","level":3,"id":"Index_-_==독립적인_저장_공간==을_보유하며,_데이터베이스에_저장된_자료를_더욱_빠르게_조회하기_위하여_별도로_구성한_순서_데이터를_말한다."},{"heading":"대부분의 데이터베이스에서 테이블을 삭제하면 인덱스도 함께 삭제된다.","level":3,"id":"대부분의_데이터베이스에서_==테이블을_삭제하면_인덱스도_함께_삭제==된다."},{"heading":"CREATE 생성 / DROP 삭제","level":3,"id":"CREATE_생성_/_DROP_삭제"},{"heading":"물리적 DB구조의 기본 데이터 단위인, 저장레코드의 양식을 설계할 때 고려할 사항 타 분 빈","level":1,"id":"==물리적==_DB구조의_기본_데이터_단위인,_저장레코드의_양식을_설계할_때_고려할_사항_==타_분_빈=="},{"heading":"1. 데이터 타입","level":3,"id":"1._데이터_타입"},{"heading":"2. 데이터 값의 분포","level":3,"id":"2._데이터_값의_분포"},{"heading":"3. 접근 빈도","level":3,"id":"3._접근_빈도"},{"heading":"트렌젝션 모델링은 개념적 설계 단계에서 진행한다.","level":4,"id":"트렌젝션_모델링은_개념적_설계_단계에서_진행한다."},{"heading":"SQL의 기능에 따른 분류 설명","level":1,"id":"SQL의_기능에_따른_분류_설명"},{"heading":"DCL","level":3,"id":"DCL"},{"heading":"COMMIT : 명령어로 수행된 결과를 실제 물리적 디스크로 저장하고, 명령어로 수행을 성공적으로 완료하였음을 선언한다.","level":4,"id":"COMMIT__명령어로_수행된_결과를_실제_물리적_디스크로_저장하고,_명령어로_수행을_성공적으로_완료하였음을_선언한다."},{"heading":"ROLLBACK : 명령어로 수행을 실패하였음을 알리고, 수행된 결과를 원상복구시킨다.","level":4,"id":"ROLLBACK__명령어로_수행을_실패하였음을_알리고,_수행된_결과를_원상복구시킨다."},{"heading":"GRANT : DB 사용자에게 사용 권한을 부여한다.","level":4,"id":"GRANT__DB_사용자에게_사용_권한을_부여한다."},{"heading":"REVOKE : DB 사용자로부터 사용 권한을 취소한다.","level":4,"id":"REVOKE__DB_사용자로부터_사용_권한을_취소한다."},{"heading":"DDL","level":3,"id":"DDL"},{"heading":"CREATE : 스키마 / 도메인 / 테이블 / 뷰 / 인덱스를 정의","level":4,"id":"CREATE__스키마_/_도메인_/_테이블_/_뷰_/_인덱스를_정의"},{"heading":"ALTER : 테이블에 대한 정의를 변경하는데 사용","level":4,"id":"ALTER__테이블에_대한_정의를_변경하는데_사용"},{"heading":"DROP : 스키마 / 도메인 / 테이블 / 뷰 / 인덱스를 삭제","level":4,"id":"DROP__스키마_/_도메인_/_테이블_/_뷰_/_인덱스를_삭제"},{"heading":"DML","level":3,"id":"DML"},{"heading":"SELECT : 테이블에서 조건에 맞는 튜플을 검색","level":4,"id":"SELECT__테이블에서_조건에_맞는_튜플을_검색"},{"heading":"INSERT : 테이블에 새로운 튜플을 삽입","level":4,"id":"INSERT__테이블에_새로운_튜플을_삽입"},{"heading":"DELETE : 테이블에서 조건에 맞는 튜플을 삭제","level":4,"id":"DELETE__테이블에서_조건에_맞는_튜플을_삭제"},{"heading":"UPDATE : 테이블에서 조건에 맞는 튜플의 내용을 변경","level":4,"id":"UPDATE__테이블에서_조건에_맞는_튜플의_내용을_변경"},{"heading":"데이터 사전(Data Dictionary)에 대한 설명","level":1,"id":"데이터_사전(Data_Dictionary)에_대한_설명"},{"heading":"1. 시스템 자신이 필요로하는 여러가지 객체(기본테이블 / 뷰 / 인덱스 / DB / 패키지 / 접근 권한 등)","level":3,"id":"1._시스템_자신이_필요로하는_여러가지_객체(기본테이블_/_뷰_/_인덱스_/_DB_/_패키지_/_접근_권한_등)"},{"heading":"에 관한 정보를 포함하고있는 시스템 데이터베이스.","level":3,"id":"에_관한_정보를_포함하고있는_==시스템_데이터베이스==."},{"heading":"2. 시스템 카탈로그, 메타 데이터 라고도 불린다.","level":3,"id":"2._시스템_카탈로그,_==메타_데이터==_라고도_불린다."},{"heading":"3. 시스템 테이블로 구성되어있어 SQL문을 이용하여 내용 검색이 가능하다.","level":3,"id":"3._시스템_테이블로_구성되어있어_SQL문을_이용하여_내용_검색이_가능하다."},{"heading":"4. 사용자는 시스템 카탈로그를 직접 갱신할 수 없다.","level":3,"id":"4._사용자는_시스템_카탈로그를_직접_갱신할_수_없다."},{"heading":"5. SQL 문으로 여러가지 객체에 변화를 주면 시스템이 자동으로 갱신한다.","level":3,"id":"5._SQL_문으로_여러가지_객체에_변화를_주면_==시스템이_자동으로_갱신==한다."},{"heading":"DB의 릴레이션에 대한 설명","level":1,"id":"DB의_릴레이션에_대한_설명"},{"heading":"1. 튜플의 유일성 : 모든 튜플은 서로 다른값을 갖는다.","level":3,"id":"1._튜플의_유일성__모든_튜플은_서로_다른값을_갖는다."},{"heading":"2. 튜플의 무순서성 : 하나의 릴레이션에 튜플에 순서는 없다.","level":3,"id":"2._튜플의_무순서성__하나의_릴레이션에_튜플에_순서는_없다."},{"heading":"3. 속성의 원자성 : 속성값은 원자값을 갖는다.","level":3,"id":"3._속성의_원자성__속성값은_원자값을_갖는다."},{"heading":"4. 속성의 무순서성 : 각 속성은 릴레이션내에서 유일한 이름을 갖으며, 순서는 의미가 없다.","level":3,"id":"4._속성의_무순서성__각_속성은_릴레이션내에서_유일한_이름을_갖으며,_순서는_의미가_없다."},{"heading":"DB 의 VIEW에 대한 설명","level":1,"id":"DB_의_VIEW에_대한_설명"},{"heading":"1. 뷰는 다른 뷰를 기반으로 새로운 뷰를 만들 수 있다.","level":3,"id":"1._뷰는_다른_뷰를_기반으로_새로운_뷰를_만들_수_있다."},{"heading":"2. 뷰는 일종의 가상테이블이며, update에는 제약이 따른다.","level":3,"id":"2._뷰는_일종의_가상테이블이며,_update에는_제약이_따른다."},{"heading":"3. 뷰는 기본테이블을 만드는 것 처럼 create view를 사용하여 만들 수 있다.","level":3,"id":"3._뷰는_기본테이블을_만드는_것_처럼_create_view를_사용하여_만들_수_있다."},{"heading":"4. 뷰는 논리적으로만 존재하는 테이블이다.","level":3,"id":"4._뷰는_==논리적으로만_존재==하는_테이블이다."},{"heading":"트렌젝션의 상태에 대한 설명","level":1,"id":"트렌젝션의_상태에_대한_설명"},{"heading":"active ->","level":3,"id":"active_->"},{"heading":"1. partially Committed -> committed","level":3,"id":"1._partially_Committed_->_committed"},{"heading":"2. failed -> aborted(rollback)","level":3,"id":"2._failed_->_aborted(rollback)"},{"heading":"partially Committed : 마지막 연산이 실행된 직후에 상태로 아직 Commit연산이 실행되기 이전","level":3,"id":"partially_Committed__마지막_연산이_실행된_직후에_상태로_아직_Commit연산이_실행되기_이전"},{"heading":"DB 키에 대한 설명","level":1,"id":"DB_키에_대한_설명"},{"heading":"Super Key(슈퍼키) : 속성들의 집합으로 구성된 키, 릴레이션을 구성하는 모든 튜플들 중 슈퍼키로 구성된 속성의 집합과 동일한 값은 나타나지 않는다. (유일성 O, 최소성 X)","level":3,"id":"Super_Key(슈퍼키)__속성들의_집합으로_구성된_키,_릴레이션을_구성하는_모든_튜플들_중_슈퍼키로_구성된_속성의_집합과_동일한_값은_나타나지_않는다._(유일성_O,_==최소성_X==)"},{"heading":"Candidate Key(후보키) : 기본키가 될 수 있는 키들, 유일성과 최소성을 만족하지만 슈퍼키는 동일한것이 없기에 최소성을 만족하지 않음. (유일성 O, 최소성 O)","level":3,"id":"**Candidate_Key**(후보키)__기본키가_될_수_있는_키들,_유일성과_최소성을_만족하지만_슈퍼키는_동일한것이_없기에_최소성을_만족하지_않음._(유일성_O,_최소성_O)"},{"heading":"Primary Key(기본키) : 후보키 중 선택된 키, 중복값과 null값을 갖을 수 없는 반드시 필요한 키","level":3,"id":"**Primary_Key**(기본키)__후보키_중_선택된_키,_중복값과_null값을_갖을_수_없는_반드시_필요한_키"},{"heading":"DB설계단계에서의 트렌젝션 설계 단계","level":1,"id":"DB설계단계에서의_트렌젝션_설계_단계"},{"heading":"개념적 설계","level":3,"id":"개념적_설계"},{"heading":"논리적 설계","level":3,"id":"논리적_설계"},{"heading":"물리적 설계","level":3,"id":"물리적_설계"},{"heading":"데이터 모델의 구성요소에 대한 설명","level":1,"id":"데이터_모델의_구성요소에_대한_설명"},{"heading":"구조(structuer) : 논리적인 개체 타입들 간의 관계, 데이터 구조 및 정적 성질을 표현","level":3,"id":"구조(structuer)__논리적인_개체_타입들_간의_관계,_데이터_구조_및_정적_성질을_표현"},{"heading":"연산(Operation) : 실제 데이터를 처리하는 작업에 대한 명세로, 조작하는 기본 도구","level":3,"id":"연산(Operation)__실제_데이터를_처리하는_작업에_대한_명세로,_조작하는_기본_도구"},{"heading":"제약조건(Constraint) : DB에 저장될 수 있는 실제 데이터의 논리적인 제약조건","level":3,"id":"제약조건(Constraint)__DB에_저장될_수_있는_실제_데이터의_논리적인_제약조건"},{"heading":"DB의 무결성 제약조건에 대한 설명","level":1,"id":"DB의_무결성_제약조건에_대한_설명"},{"heading":"개체 무결성 - 기본키 null X","level":3,"id":"개체_무결성_-_==기본키_null_X=="},{"heading":"참조 무결성 - 외래키는 null이거나 기본키","level":3,"id":"참조_무결성_-_==외래키는_null이거나_기본키=="},{"heading":"고유 무결성 - 각 속성이 교유값 -> 튜플 속성을 서로 상이","level":3,"id":"고유_무결성_-_==각_속성이_교유값_->_튜플_속성을_서로_상이=="},{"heading":"NULL 무결성 - 최소 1개 이상의 키","level":3,"id":"NULL_무결성_-_==최소_1개_이상의_키=="},{"heading":"도메인 무결성 - 도메인","level":3,"id":"도메인_무결성_-_==도메인=="},{"heading":"관계 데이터 모델 용어에 대한 설명","level":1,"id":"관계_데이터_모델_용어에_대한_설명"},{"heading":"차수(Degree) : 속성의 수","level":3,"id":"차수(Degree)__속성의_수"},{"heading":"카디널리티 : 튜플의 수(기수)","level":3,"id":"카디널리티__튜플의_수(기수)"},{"heading":"데이터 베이스 로그(log)를 필요로 하는 회복 기법","level":1,"id":"데이터_베이스_로그(log)를_필요로_하는_회복_기법"},{"heading":"- 즉각 갱신 기법","level":3,"id":"-_즉각_갱신_기법"},{"heading":"관계대수의 순수 관계 연산자?","level":1,"id":"관계대수의_순수_관계_연산자?"},{"heading":"Select / Project / Join / Division","level":3,"id":"Select_/_Project_/_Join_/_Division"},{"heading":"물리적 / 논리적 데이터 설계","level":1,"id":"물리적_/_논리적_데이터_설계"},{"heading":"논리적 - 스키마 설계","level":2,"id":"논리적_-_스키마_설계"},{"heading":"물리적 - 레코드 / 접근 경로 설계","level":2,"id":"물리적_-_레코드_/_접근_경로_설계"},{"heading":"Y가 X에 함수적으로 종속됨을 표시하는 기호는?","level":1,"id":"Y가_X에_함수적으로_종속됨을_표시하는_기호는?"},{"heading":"X -> Y","level":2,"id":"X_->_Y"},{"heading":"물리적 데이터베이스 구조의 기본 데이터 단위인 저장 레코드 양식을 설계할 때 고려해야할 사항","level":1,"id":"==물리적==_데이터베이스_구조의_기본_데이터_단위인_저장_레코드_양식을_설계할_때_고려해야할_사항"},{"heading":"1. 데이터 타입","level":3,"id":"1._데이터_타입"},{"heading":"2. 데이터 값의 분포","level":3,"id":"2._데이터_값의_분포"},{"heading":"3. 접근 빈도","level":3,"id":"3._접근_빈도"},{"heading":"트렌젝션을 개념적 시스템 독립적으로 정의한다.","level":5,"id":"트렌젝션을_개념적_시스템_독립적으로_정의한다."},{"heading":"트렌젝션의 입출력기능 , 형태만 정의한다.","level":5,"id":"트렌젝션의_입출력기능_,_형태만_정의한다."},{"heading":"트렌젝션은 개념적 설계 단계에서 진행하므로 모두 오답이다.","level":5,"id":"트렌젝션은_개념적_설계_단계에서_진행하므로_모두_오답이다."},{"heading":"단! 트렌젝션 인터페이스 설계 및 작성은 논리적 설계 단계이다.","level":2,"id":"단!_트렌젝션_인터페이스_설계_및_작성은_==논리적_설계_단계==이다."},{"heading":"분산 데이터베이스 시스템(Distributed Database System)란?","level":1,"id":"분산_데이터베이스_시스템(Distributed_Database_System)란?"},{"heading":"1. 논리적으로는 하나의 시스템, 물리적으로는 여러개의 컴퓨터 사이트에 분산","level":3,"id":"1._논리적으로는_하나의_시스템,_물리적으로는_여러개의_컴퓨터_사이트에_분산"},{"heading":"2. 위치 투명성, 중복 투명성, 병행 투명성, 장애 투명성을 목표","level":3,"id":"2._위치_투명성,_중복_투명성,_병행_투명성,_장애_투명성을_목표"},{"heading":"3. DB설계가 비교적 어렵고, 개발 비용과 처리 비용이 증가한다.","level":3,"id":"3._DB설계가_비교적_어렵고,_개발_비용과_처리_비용이_증가한다."},{"heading":"4. 주요 구성요소로는 분산처리기 / 분산DB / 통신네트워크 가 있다.","level":3,"id":"4._주요_구성요소로는_==분산처리기==_/_==분산DB==_/_==통신네트워크==_가_있다."},{"heading":"DB 인덱스에 대한 설명","level":1,"id":"DB_인덱스에_대한_설명"},{"heading":"1. 인덱스의 추가, 삭제명령어는 각각 CREATE, DROP이다.","level":3,"id":"1._인덱스의_추가,_삭제명령어는_각각_CREATE,_DROP이다."},{"heading":"2. 대부분의 데이터베이스에서 테이블을 삭제하면 인덱스도 함께 삭제된다.","level":3,"id":"2._대부분의_데이터베이스에서_테이블을_삭제하면_인덱스도_함께_삭제된다."},{"heading":"SQL의 TRUNCATE 명령어에 대한 설명","level":1,"id":"SQL의_`TRUNCATE`_명령어에_대한_설명"},{"heading":"1. DELETE와 같이 테이블의 모든 데이터를 삭제한다.","level":3,"id":"1._DELETE와_같이_*테이블의_모든_데이터를_삭제*한다."},{"heading":"2. DROP과 달리 테이블 스키마는 제거되지 않고 유지된다.","level":3,"id":"2._DROP과_달리_테이블_*스키마는_제거되지_않고_유지*된다."},{"heading":"3. DELETE에 비해 빠르게 데이터를 제거하는것이 가능하다.","level":3,"id":"3._*DELETE에_비해_빠르게_데이터를_제거*하는것이_가능하다."},{"heading":"4. DELETE와 달리, ROLLBACK명령어로 삭제한 데이터를 복구할 수 없다.","level":3,"id":"4._DELETE와_달리,_*ROLLBACK명령어로_삭제한_데이터를_복구할_수_없다*."},{"heading":"관계 해석 이란?","level":1,"id":"관계_해석_이란?"},{"heading":"1. 관계해석은 수학의 프레디킷 해석에 기반을 두고있다.","level":3,"id":"1._관계해석은_수학의_프레디킷_해석에_기반을_두고있다."},{"heading":"2. 관계대수로 표현한 식은 관계해석으로 표현할 수 있다.","level":3,"id":"2._*관계대수*로_표현한_식은_*관계해석*으로_표현할_수_있다."},{"heading":"3. 관계해석은 관계 데이터의 연산을 표현하는 방법이다.","level":3,"id":"3._관계해석은_관계_*데이터의_연산을_표현*하는_방법이다."},{"heading":"4. 관계해석은 원하는 정보가 무엇이라는 것만 정의하는 비절차적 특징이 있다.","level":3,"id":"4._관계해석은_원하는_*정보가_무엇이라는_것만_정의*하는_*비절차적_특징*이_있다."},{"heading":"E-R 모델의 그래픽 표현","level":1,"id":"E-R_모델의_그래픽_표현"},{"heading":"개체 타입 - 사각형","level":2,"id":"개체_타입_-_사각형"},{"heading":"속성 - 원형","level":2,"id":"속성_-_원형"},{"heading":"관계 타입 - 마름모","level":2,"id":"관계_타입_-_마름모"},{"heading":"연결 - 선","level":2,"id":"연결_-_선"}],"backlinks":[],"links":["?query=tag:%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC","?query=tag:%ED%95%84%EA%B8%B0","?query=tag:%EC%A0%95%EB%A6%AC","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#🥈 필기 3과목 - 데이터베이스 구축","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DB의_Locking_/_Lock에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#로킹(Locking)_-_==병행제어_기법==의_종류_중_하나","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#-_==직렬화==_기법","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#-_데이터베이스,_파일,_레코드_등은_로킹단위가_될_수_있음","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#-_로킹_단위가_작아지면,_데이터_베이스_공유도_증가.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#-_로킹_단위가_작아지면,_로킹_오버헤드_증가.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#-_로킹_단위가_작아지면,_로크의_수_증가.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#-_로킹_단위가_작아지면,_병행성_수준이_높아짐","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#-_한꺼번에_로킹할_수_있는_객체의_크기를_로킹단위라고_함.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#CASCADE_명령어에_대한설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DROP_VIEW_V_1_CASCADE_등과_같이_사용하면","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#->_V_1과_조인되어있거나_연결되어있으면_연쇄적으로_삭제된다._(_참조하는_자식_개체까지_모두_삭제_)","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#반대로_RESTRICTED_명령어를_사용하면,_삭제하면서_참조중일_때_에러를_띄우며_삭제하는_작업을_중지한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DB_정규화_과정에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#도부이결다조","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#1NF_-_도__==모든_도메인==이_원자_값으로만_구성","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#2NF_-_부__==부분적_함수_종속을_`제거`==한_정규형,_기본키가_아닌_속성이_기본키에_대한_완전_함수_종속을_만족","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#3NF_-_이__기본키가_아닌_모든_속성이_기본키에_대해_==이행성_함수_종속관계를_만족하지==_않는_정규형","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#BCNF_-_결__==모든_결정자가_후보키==인_정규형","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#4NF_-_다__==다치_종속이_성립==하는_경우,_R의_모든_속성이_A에_함수적_종속_관계를_만족","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#5NF_-_조__==모든_조인_종속==이_R의_후보키를_통해서만_성립되는_정규형","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DB_트렌젝션에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#Atomicity_원자성__완전하게_수행_완료되지_않으면_전혀_수행되지_않아야함","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#Consistency_일관성__시스템의_고정_요소는_트렌젝션_수행_전후에_같아야함","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#Isolation_고립성__트렌젝션_실행_시_다른_트렌젝션의_간섭을_받지_않아야함","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#Durability_영속성__트렌젝션의_완료_결과가_DB에_영구히_기억됨","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#분산_데이터베이스의_목표에_대한_설명_==위중병장==","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#위치_투명성","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#중복_투명성","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#병행_투명성","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#장애_투명성","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DB의_인덱스와_관련한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#Index_-_==독립적인_저장_공간==을_보유하며,_데이터베이스에_저장된_자료를_더욱_빠르게_조회하기_위하여_별도로_구성한_순서_데이터를_말한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#대부분의_데이터베이스에서_==테이블을_삭제하면_인덱스도_함께_삭제==된다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#CREATE_생성_/_DROP_삭제","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#==물리적==_DB구조의_기본_데이터_단위인,_저장레코드의_양식을_설계할_때_고려할_사항_==타_분_빈==","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#1._데이터_타입","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#2._데이터_값의_분포","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#3._접근_빈도","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#트렌젝션_모델링은_개념적_설계_단계에서_진행한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#SQL의_기능에_따른_분류_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DCL","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#COMMIT__명령어로_수행된_결과를_실제_물리적_디스크로_저장하고,_명령어로_수행을_성공적으로_완료하였음을_선언한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#ROLLBACK__명령어로_수행을_실패하였음을_알리고,_수행된_결과를_원상복구시킨다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#GRANT__DB_사용자에게_사용_권한을_부여한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#REVOKE__DB_사용자로부터_사용_권한을_취소한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DDL","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#CREATE__스키마_/_도메인_/_테이블_/_뷰_/_인덱스를_정의","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#ALTER__테이블에_대한_정의를_변경하는데_사용","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DROP__스키마_/_도메인_/_테이블_/_뷰_/_인덱스를_삭제","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DML","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#SELECT__테이블에서_조건에_맞는_튜플을_검색","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#INSERT__테이블에_새로운_튜플을_삽입","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DELETE__테이블에서_조건에_맞는_튜플을_삭제","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#UPDATE__테이블에서_조건에_맞는_튜플의_내용을_변경","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#데이터_사전(Data_Dictionary)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#1._시스템_자신이_필요로하는_여러가지_객체(기본테이블_/_뷰_/_인덱스_/_DB_/_패키지_/_접근_권한_등)","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#에_관한_정보를_포함하고있는_==시스템_데이터베이스==.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#2._시스템_카탈로그,_==메타_데이터==_라고도_불린다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#3._시스템_테이블로_구성되어있어_SQL문을_이용하여_내용_검색이_가능하다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#4._사용자는_시스템_카탈로그를_직접_갱신할_수_없다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#5._SQL_문으로_여러가지_객체에_변화를_주면_==시스템이_자동으로_갱신==한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DB의_릴레이션에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#1._튜플의_유일성__모든_튜플은_서로_다른값을_갖는다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#2._튜플의_무순서성__하나의_릴레이션에_튜플에_순서는_없다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#3._속성의_원자성__속성값은_원자값을_갖는다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#4._속성의_무순서성__각_속성은_릴레이션내에서_유일한_이름을_갖으며,_순서는_의미가_없다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DB_의_VIEW에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#1._뷰는_다른_뷰를_기반으로_새로운_뷰를_만들_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#2._뷰는_일종의_가상테이블이며,_update에는_제약이_따른다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#3._뷰는_기본테이블을_만드는_것_처럼_create_view를_사용하여_만들_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#4._뷰는_==논리적으로만_존재==하는_테이블이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#트렌젝션의_상태에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#active_->","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#1._partially_Committed_->_committed","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#2._failed_->_aborted(rollback)","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#partially_Committed__마지막_연산이_실행된_직후에_상태로_아직_Commit연산이_실행되기_이전","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DB_키에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#Super_Key(슈퍼키)__속성들의_집합으로_구성된_키,_릴레이션을_구성하는_모든_튜플들_중_슈퍼키로_구성된_속성의_집합과_동일한_값은_나타나지_않는다._(유일성_O,_==최소성_X==)","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#**Candidate_Key**(후보키)__기본키가_될_수_있는_키들,_유일성과_최소성을_만족하지만_슈퍼키는_동일한것이_없기에_최소성을_만족하지_않음._(유일성_O,_최소성_O)","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#**Primary_Key**(기본키)__후보키_중_선택된_키,_중복값과_null값을_갖을_수_없는_반드시_필요한_키","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DB설계단계에서의_트렌젝션_설계_단계","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#개념적_설계","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#논리적_설계","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#물리적_설계","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#데이터_모델의_구성요소에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#구조(structuer)__논리적인_개체_타입들_간의_관계,_데이터_구조_및_정적_성질을_표현","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#연산(Operation)__실제_데이터를_처리하는_작업에_대한_명세로,_조작하는_기본_도구","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#제약조건(Constraint)__DB에_저장될_수_있는_실제_데이터의_논리적인_제약조건","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DB의_무결성_제약조건에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#개체_무결성_-_==기본키_null_X==","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#참조_무결성_-_==외래키는_null이거나_기본키==","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#고유_무결성_-_==각_속성이_교유값_->_튜플_속성을_서로_상이==","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#NULL_무결성_-_==최소_1개_이상의_키==","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#도메인_무결성_-_==도메인==","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#관계_데이터_모델_용어에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#차수(Degree)__속성의_수","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#카디널리티__튜플의_수(기수)","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#데이터_베이스_로그(log)를_필요로_하는_회복_기법","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#-_즉각_갱신_기법","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#관계대수의_순수_관계_연산자?","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#Select_/_Project_/_Join_/_Division","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#물리적_/_논리적_데이터_설계","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#논리적_-_스키마_설계","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#물리적_-_레코드_/_접근_경로_설계","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#Y가_X에_함수적으로_종속됨을_표시하는_기호는?","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#X_->_Y","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#==물리적==_데이터베이스_구조의_기본_데이터_단위인_저장_레코드_양식을_설계할_때_고려해야할_사항","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#1._데이터_타입","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#2._데이터_값의_분포","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#3._접근_빈도","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#트렌젝션을_개념적_시스템_독립적으로_정의한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#트렌젝션의_입출력기능_,_형태만_정의한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#트렌젝션은_개념적_설계_단계에서_진행하므로_모두_오답이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#단!_트렌젝션_인터페이스_설계_및_작성은_==논리적_설계_단계==이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#분산_데이터베이스_시스템(Distributed_Database_System)란?","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#1._논리적으로는_하나의_시스템,_물리적으로는_여러개의_컴퓨터_사이트에_분산","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#2._위치_투명성,_중복_투명성,_병행_투명성,_장애_투명성을_목표","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#3._DB설계가_비교적_어렵고,_개발_비용과_처리_비용이_증가한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#4._주요_구성요소로는_==분산처리기==_/_==분산DB==_/_==통신네트워크==_가_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#DB_인덱스에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#1._인덱스의_추가,_삭제명령어는_각각_CREATE,_DROP이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#2._대부분의_데이터베이스에서_테이블을_삭제하면_인덱스도_함께_삭제된다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#SQL의_`TRUNCATE`_명령어에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#1._DELETE와_같이_*테이블의_모든_데이터를_삭제*한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#2._DROP과_달리_테이블_*스키마는_제거되지_않고_유지*된다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#3._*DELETE에_비해_빠르게_데이터를_제거*하는것이_가능하다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#4._DELETE와_달리,_*ROLLBACK명령어로_삭제한_데이터를_복구할_수_없다*.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#관계_해석_이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#1._관계해석은_수학의_프레디킷_해석에_기반을_두고있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#2._*관계대수*로_표현한_식은_*관계해석*으로_표현할_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#3._관계해석은_관계_*데이터의_연산을_표현*하는_방법이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#4._관계해석은_원하는_*정보가_무엇이라는_것만_정의*하는_*비절차적_특징*이_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#E-R_모델의_그래픽_표현","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#개체_타입_-_사각형","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#속성_-_원형","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#관계_타입_-_마름모","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html#연결_-_선"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html","pathToRoot":"../../..","createdTime":1739783025899,"modifiedTime":1739946886923,"sourceSize":11355,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 3과목 - 데이터베이스 구축.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html","showInTree":true,"treeOrder":0,"attachments":[]},"study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html":{"title":"🥈 필기 4과목 - 프로그래밍 언어 활용","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:정보처리기사\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정보처리기사</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:필기\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#필기</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:정리\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정리</a> <br> <a href=\"http://lts.kr?query=tag:정보처리기사\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정보처리기사\">#정보처리기사</a> <a href=\"http://lts.kr?query=tag:필기\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#필기\">#필기</a> <a href=\"http://lts.kr?query=tag:정리\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정리\">#정리</a> <br> 다른 프로세스가 뺐지 못하는 상태.\n<br>#### - 최적의 경로를 산출하기 위한 정보로서 홉(거리 값)만을 고려하므로, RIP를 선택한 경로가 ==최적의 경로가 아닌경우가== 많이 발생할 수 있다.\n<br>\n<br>두 모듈이 매개변수로 자료를 전달할 때, 자료구조 형태로 전달되어 이용될 때 데이터가 결합되어 있다고 한다.\n<br>\n<br>하나의 모듈이 직접적으로 다른 모듈의 내용을 참조할 때 두 모듈은 내용적으로 결합되어 있다고 한다.\n<br>\n<br>두 모듈이 동일한 전역 데이터를 접근한다면 공통결합 되어 있다고 한다.\n<br>결합도 - 두 모듈간의 상호작용, 또는 의존도 정도를 나타내는 것.<br>// a[0]의 주소값이 0일때, int a[] = {14, 22, 30, 38}; printf(\"%u\", &amp;a[2]); =&gt; a[2]자리의 첫번째 주소값 -&gt; 18\nprintf(\"%u\", a); =&gt; a[0]자리의 첫번째 주소값 -&gt; 10 주소값 a[0] 14 =&gt; 10,11,12,13 / a[1] 22 =&gt; 14,15,16,17 / a[2] 30 =&gt; 18,19,20,21 / a[3] 38 =&gt; 22,23,24,25 <br>권한이 있는 사용자들만 접근할 수 있는 보안 방법\n<br>자원에 대한 접근을 사용자나 그룹의 신분에따라 제한, 자원의 소유권을 가진 사람이 다른 사람의 접근을 허용하거나 제한할 수 있음\n<br>미리 정해진 자원의 보안 레벨과 사용자에게 허락된 접근권한비교\n<br>\n<br>5만 라인 이하\n<br>사무 처리용, 업무용, 과학용 소프트웨어 개발에 적합\n<br>\n<br>30만라인 이하\n<br>컴파일러, 인터프리터 개발에 적합\n<br>\n<br>30만 라인 이상\n<br>미사일 유도시스템, 실시간 처리 시스템 개발에 적합\n<br>네트워크상에서 공유되는 파일시스템. 다른 원격 호스트의 파일 시스템을 로컬 디스크에 접근하듯 간단하게 접근하여 자신의 디렉토리처럼 사용할 수 있다.\n<br>네트워크 보안을 위한 유틸리티. 네트워크의 보안을 위해 물리적 연결과 어떤 서버와 운영 체제가 작동 중인지 따위를 조사하는 응용 프로그램.\n<br>어떤 프로젝트를 마치기까지 수행되는 작업의 각 단계(상태)를 그래프의 정점으로 표현하고, 작업 하나가 완료되어 다음 단계로 넘어가는 시간을 그래프의 간선으로 나타낸 방향 그래프.\n<br>네트워크를 제어부, 데이터 전달부로 분리하여 네트워크 관리자가 보다 효율적으로 네트워크를 제어, 관리할 수 있는 기술. 기존의 라우터, 스위치 등과 같이 하드웨어에 의존하는 네트워크 체계에서 안정성, 속도, 보안 등을 소프트웨어로 제어, 관리하기 위해 개발됨. 네트워크 장비의 펌웨어 업그레이드를 통해 사용자의 직접적인 데이터 전송 경로 관리가 가능하고, 기존 네트워크에는 영향을 주지 않으면서 특정 서비스의 전송 경로 수정을 통하여 인터넷상에서 발생하는 문제를 처리할 수 있음.\n<br>작업들 간의 상호 관련성, 결정경로, 경계시간, 자원할당 등을 제시한다.\n<br>각 작업들이 언제 시작하고 언제 종료되는지에 대한 일정을 막대 도표를 이용하여 표시한다. 시간선(Time-line)차트 라고도 한다. 수평 막대의 길이는 각 작업의 기간을 나타낸다.\n<br>내공 외제 스자<br>1의 개수가 27개 즉 11111111 11111111 11111111 11100000<br>\n0 0 0 0 0 1 1 1<br>\n1 2 4 8 16 32 64 128 -&gt; 32 + 64 + 128 = 224<br>\n<br>프로세스가 두개일때, 상호 배제를 보장하는 최초의 알고리즘\n<br>flag와 turn변수를 사용하여 조정\n<br>\n<br>프로세스 n개의 상호 배제 문제를 해결한 알고리즘\n<br>프로세스에게 고유한 번호를 부여하고, 번호를 기준으로 우선순위를 정하여 우선순위가 높은 프로세스가 먼저 임계구역에 진입하도록 구현\n<br>\n<br>프로세스가 두개일때 상호배제를 보장. 데커 알고리즘과 유사하지만 상대방에게 진입 기회를 양보한다는 차이\n<br>\n<br>공유된 자원의 데이터 혹은 임계영역 등에 따라 여러 Process혹은 Thread가 접근하는 것을 막아줌\n<br><a data-href=\"🥈 필기 5과목 - 정보시스템 구축관리\" href=\"http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥈 필기 5과목 - 정보시스템 구축관리</a>","aliases":[],"tags":["#정보처리기사","#필기","#정리"],"headers":[{"heading":"🥈 필기 4과목 - 프로그래밍 언어 활용","level":1,"id":"🥈 필기 4과목 - 프로그래밍 언어 활용"},{"heading":"교착 상태(Deadlock)의 필요 충분 조건?","level":1,"id":"교착_상태(Deadlock)의_필요_충분_조건?"},{"heading":"- 상호 배제(Mutual Exclusion)","level":3,"id":"-_상호_배제(Mutual_Exclusion)"},{"heading":"- 점유와 대기(Hold and Wait)","level":3,"id":"-_점유와_대기(Hold_and_Wait)"},{"heading":"- 환형 대기(Circular Wait)","level":3,"id":"-_환형_대기(Circular_Wait)"},{"heading":"- 비선점(Nonpreemptive)","level":3,"id":"-_비선점(Nonpreemptive)"},{"heading":"IPv6의 주소 체계 애멀유","level":1,"id":"IPv6의_주소_체계_==애멀유=="},{"heading":"- 유니캐스트","level":3,"id":"-_유니캐스트"},{"heading":"- 멀티캐스트","level":3,"id":"-_멀티캐스트"},{"heading":"- 애니캐스트","level":3,"id":"-_애니캐스트"},{"heading":"파일 디스크립터에 대한 설명","level":1,"id":"==파일_디스크립터==에_대한_설명"},{"heading":"- 파일 관리를 위해 시스템이 필요로 하는 정보를 가지고 있다.","level":3,"id":"-_파일_관리를_위해_시스템이_필요로_하는_정보를_가지고_있다."},{"heading":"- 보조기억장치에 저장되어 있다가 파일이 개방되면 주기억장치로 이동된다.","level":3,"id":"-_보조기억장치에_저장되어_있다가_파일이_개방되면_주기억장치로_이동된다."},{"heading":"- 파일 시스템이 관리하므로 사용자가 파일 디스크립터를 직접 참조할 수 없다.","level":3,"id":"-_파일_시스템이_관리하므로_사용자가_파일_==디스크립터를_직접_참조할_수_없다==."},{"heading":"- 파일 제어 블록 이라고도 한다.","level":3,"id":"-_파일_제어_블록_이라고도_한다."},{"heading":"- 파일마다 따로 있으며 시스템에 따라 다른 구조를 가질 수 있다.","level":3,"id":"-_파일마다_따로_있으며_시스템에_따라_다른_구조를_가질_수_있다."},{"heading":"- 파일이름 / 위치 / 파일구조 / 유형 / 시간 등의 정보를 담고 있다.","level":3,"id":"-_파일이름_/_위치_/_파일구조_/_유형_/_시간_등의_정보를_담고_있다."},{"heading":"페이지 교체 알고리즘에 대한 설명","level":1,"id":"페이지_교체_알고리즘에_대한_설명"},{"heading":"OPT (Optimal)","level":3,"id":"OPT_(Optimal)"},{"heading":"- 앞으로 가장 오랫동안 사용되지 않을 페이지 교체","level":4,"id":"-_앞으로_가장_오랫동안_사용되지_않을_페이지_교체"},{"heading":"FIFO (First In Fist Out)","level":3,"id":"FIFO_(First_In_Fist_Out)"},{"heading":"- 먼저 선택된 페이지가 먼저 교체","level":4,"id":"-_먼저_선택된_페이지가_먼저_교체"},{"heading":"LRU (Least Recently Used)","level":3,"id":"LRU_(Least_Recently_Used)"},{"heading":"- 가장 오랫동안 사용되지 않은 페이지 교체","level":4,"id":"-_가장_오랫동안_사용되지_않은_페이지_교체"},{"heading":"LFU (Least Frequently Used) F는 참초횠수","level":3,"id":"LFU_(Least_Frequently_Used)_==F는_참초횠수=="},{"heading":"- 참조 횟수가 가장 적은 페이지 교체","level":4,"id":"-_참조_횟수가_가장_적은_페이지_교체"},{"heading":"MFU (Most Frequently Used) F는 참초횠수","level":3,"id":"MFU_(Most_Frequently_Used)_==F는_참초횠수=="},{"heading":"- 참조 횟수가 가장 많은 페이지 교체","level":4,"id":"-_참조_횟수가_가장_많은_페이지_교체"},{"heading":"NUR (Not Used Recently)","level":3,"id":"NUR_(Not_Used_Recently)"},{"heading":"- 최근에 사용하지 않은 페이지 교체","level":4,"id":"-_최근에_사용하지_않은_페이지_교체"},{"heading":"프로세스에 대한 설명","level":1,"id":"프로세스에_대한_설명"},{"heading":"디스패치(Dispatch)","level":3,"id":"디스패치(Dispatch)"},{"heading":"- 프로세스가 준비 상태에서 프로세서가 배당되어 실행 상태로 변화하는 것.","level":4,"id":"-_프로세스가_준비_상태에서_프로세서가_배당되어_실행_상태로_변화하는_것."},{"heading":"제어블록(PCB: Process Controll Block)","level":3,"id":"제어블록(PCB_Process_Controll_Block)"},{"heading":"- 프로세스 식별자, 프로세스 상태 등의 정보로 구성된다.","level":4,"id":"-_프로세스_식별자,_프로세스_상태_등의_정보로_구성된다."},{"heading":"- 운영체제가 그 프로레스를 관리하는데 필요한 모든 정보를 유지하는 자료구조 테이블","level":4,"id":"-_운영체제가_그_프로레스를_관리하는데_필요한_모든_정보를_유지하는_자료구조_테이블"},{"heading":"문맥교환(Context Switching)","level":3,"id":"문맥교환(Context_Switching)"},{"heading":"- CPU가 현재 실행하고 있는 프로세서의 상태를 PCB에 저장하고 다음 프로세스의 PCB로부터 문맥을 복원하는 작업.","level":4,"id":"-_CPU가_현재_실행하고_있는_프로세서의_상태를_PCB에_저장하고_다음_프로세스의_PCB로부터_문맥을_복원하는_작업."},{"heading":"IP Address가 속한 Class에 대한 종류","level":1,"id":"IP_Address가_속한_Class에_대한_종류"},{"heading":"127 / 191 / 233 / 239 / 255","level":5,"id":"127_/_191_/_233_/_239_/_255"},{"heading":"A Class - 0.0.0.0 ~ 127.255.255.255","level":3,"id":"A_Class_-_0.0.0.0_~_127.255.255.255"},{"heading":"B Class - 128.0.0.0 ~ 191.255.255.255","level":3,"id":"B_Class_-_128.0.0.0_~_191.255.255.255"},{"heading":"C Class - 192.0.0.0 ~ 223.255.255.255","level":3,"id":"C_Class_-_192.0.0.0_~_223.255.255.255"},{"heading":"D Class와 E Class는 각각 멀티케스트용 또는 연구용으로 사용된다.","level":4,"id":"D_Class와_E_Class는_각각_멀티케스트용_또는_연구용으로_사용된다."},{"heading":"D Class - 224.0.0.0 ~ 239.255.255.255","level":3,"id":"D_Class_-_224.0.0.0_~_239.255.255.255"},{"heading":"E Class - 240.0.0.0 ~ 255.255.255.255","level":3,"id":"E_Class_-_240.0.0.0_~_255.255.255.255"},{"heading":"오류제어에 사용되는 자동반복 요청방식의 종류","level":1,"id":"오류제어에_사용되는_자동반복_요청방식의_종류"},{"heading":"자동반복 요청방식(ARQ: Automatic Repeat reQuest)","level":3,"id":"자동반복_요청방식(ARQ_Automatic_Repeat_reQuest)"},{"heading":"- Stop-and-Wait ARQ : 송신 측이 하나의 블록을 전송한 후 수신 측에서 에러의 발생을 정검한 다음, 에러 발생 유무 신호를 보내올 때까지 기다리는 방식","level":4,"id":"-_Stop-and-Wait_ARQ__송신_측이_하나의_블록을_전송한_후_수신_측에서_에러의_발생을_정검한_다음,_에러_발생_유무_신호를_보내올_때까지_기다리는_방식"},{"heading":"- Go-Back-N ARQ : 여러 블록을 연속적으로 전송하고, 수신 측에서 부정 응답(NAK)을 보내오면 송신 측이 오류가 발생한 블록부터 모두 재전송","level":4,"id":"-_Go-Back-N_ARQ__여러_블록을_연속적으로_전송하고,_수신_측에서_부정_응답(NAK)을_보내오면_송신_측이_오류가_발생한_블록부터_모두_재전송"},{"heading":"- Selective-Repeat ARQ : 여러 블록을 연속적으로 전송하고, 수신측에서 부정 응답을 보내오면 송신 측이 오류가 발생한 블록만을 재전송","level":4,"id":"-_Selective-Repeat_ARQ__여러_블록을_연속적으로_전송하고,_수신측에서_부정_응답을_보내오면_송신_측이_오류가_발생한_블록만을_재전송"},{"heading":"- Adaptive ARQ : 전송 효율을 최대로 하기 위해서 데이터 블록의 길이를 채널의 상태에 따라 동적으로 변경하는 방식","level":4,"id":"-_Adaptive_ARQ__전송_효율을_최대로_하기_위해서_데이터_블록의_길이를_채널의_상태에_따라_동적으로_변경하는_방식"},{"heading":"unix시스템에서 쉘의 주요기능에 대한 설명","level":1,"id":"unix시스템에서_쉘의_주요기능에_대한_설명"},{"heading":"1. 사용자의 명령을 해석하고 커널로 전달하는 기능을 제공한다.","level":3,"id":"1._사용자의_명령을_해석하고_커널로_전달하는_기능을_제공한다."},{"heading":"2. 반복적인 명령 프로그램을 만드는 프로그램이 기능을 제공한다.","level":3,"id":"2._반복적인_명령_프로그램을_만드는_프로그램이_기능을_제공한다."},{"heading":"3. 초기화 파일을 이용해 사용자 환경을 설정하는 기능을 제공한다.","level":3,"id":"3._초기화_파일을_이용해_사용자_환경을_설정하는_기능을_제공한다."},{"heading":"- 프로세스와 메모리를 관리하는 것은 커널(Kernel)의 기능이다.","level":5,"id":"-_프로세스와_메모리를_관리하는_것은_커널(Kernel)의_기능이다."},{"heading":"IP프로토콜에 대한 설명","level":1,"id":"IP프로토콜에_대한_설명"},{"heading":"Header Length는 ip프로토콜의 헤더 길이를 32비트 워드 단위로 표시한다.","level":3,"id":"Header_Length는_ip프로토콜의_헤더_길이를_32비트_워드_단위로_표시한다."},{"heading":"Packet Length는 ip헤더및 데이터를 포함한 ip패킷 전체 길이를 바이트 단위로 표시.","level":3,"id":"Packet_Length는_ip헤더및_데이터를_포함한_ip패킷_전체_길이를_바이트_단위로_표시."},{"heading":"Time to Live는 송신 호스트가 패킷을 전송하기 전 네트워크에서 생존할 수 있는 시간을 지정한 것이다.","level":3,"id":"Time_to_Live는_송신_호스트가_패킷을_전송하기_전_네트워크에서_생존할_수_있는_시간을_지정한_것이다."},{"heading":"Version Number는 ip프로토콜의 버전번호를 나타낸다.","level":3,"id":"Version_Number는_ip프로토콜의_버전번호를_나타낸다."},{"heading":"IPv4와 IPv6의 차이에 대한 설명","level":1,"id":"IPv4와_IPv6의_차이에_대한_설명"},{"heading":"IPv4","level":3,"id":"IPv4"},{"heading":"1. 32비트 주소","level":4,"id":"1._**32비트**_주소"},{"heading":"2. 유니캐스트/멀티캐스트/브로드캐스트 사용","level":4,"id":"2._유니캐스트/멀티캐스트/브로드캐스트_사용"},{"heading":"3. 헤더의 크기가 가변적이다.","level":4,"id":"3._==헤더의_크기가_가변적==이다."},{"heading":"IPv6","level":3,"id":"IPv6"},{"heading":"1. 128비트 주소 ( 16비트 씩 8부분 ) / 2^128 개의 주소를 표현 가능","level":4,"id":"1._128비트_주소_(_16비트_씩_8부분_)_/_2^128_개의_주소를_표현_가능"},{"heading":"2. 기존 IPv4의 주소 부족 문제를 해결하기 위해 개발","level":4,"id":"2._기존_IPv4의_주소_부족_문제를_해결하기_위해_개발"},{"heading":"3. 인증성/기밀성/무결성 지원(=보안성 강화)","level":4,"id":"3._인증성/기밀성/무결성_지원(=보안성_강화)"},{"heading":"4. 유니캐스트/애니캐스트/멀티캐스트 사용","level":4,"id":"4._유니캐스트/애니캐스트/멀티캐스트_사용"},{"heading":"5. 헤더가 40 octet의 고정된 길이를 가진다.","level":4,"id":"5._헤더가_==40_octet==의_고정된_길이를_가진다."},{"heading":"6. v4에 비하여 더 빠르다.","level":4,"id":"6._v4에_비하여_더_빠르다."},{"heading":"RIP라우팅 프로토콜에 대한 설명","level":1,"id":"RIP라우팅_프로토콜에_대한_설명"},{"heading":"RIP(Routing Information Protocol)","level":3,"id":"==RIP==(Routing_Information_Protocol)"},{"heading":"- 최단경로 탐색에는 Bellman-Ford 알고리즘을 사용하는 거리 벡터 라우팅 프로토콜","level":4,"id":"-_최단경로_탐색에는_**Bellman-Ford**_알고리즘을_사용하는_**거리_벡터_라우팅_프로토콜**"},{"heading":"- 라우팅 프로토콜을 IGP와 EGP로 분류했을 때 IGP에 해당한다.","level":4,"id":"-_라우팅_프로토콜을_IGP와_EGP로_분류했을_때_**IGP에**_해당한다."},{"heading":"- 소규모 네트워크 환경에 적합하다.","level":4,"id":"-_==소규모_네트워크_환경==에_적합하다."},{"heading":"- 최대 홉 카운트를 15홉 이하로 한정하고 있다.","level":4,"id":"-_최대_홉_카운트를_15홉_이하로_한정하고_있다."},{"heading":"IGP : Interior Gateway Protocol 내부 게이트웨이 프로토콜 - 학내망 내부에서 라우팅하는 것. 즉 하나의 AS내에서 사용됨.","level":5,"id":"IGP__Interior_Gateway_Protocol_내부_게이트웨이_프로토콜_-_학내망_내부에서_라우팅하는_것._즉_하나의_AS내에서_사용됨."},{"heading":"EGP : Exterior Gateway Protocol 외부 게이트웨이 프로토콜 - 학내망과 다른 학내망의 라우팅에 사용. 즉 AS간의 라우팅에 사용.","level":5,"id":"EGP__Exterior_Gateway_Protocol_외부_게이트웨이_프로토콜_-_학내망과_다른_학내망의_라우팅에_사용._즉_AS간의_라우팅에_사용."},{"heading":"HRN 스케줄링 방식에 대한 설명","level":1,"id":"==HRN==_스케줄링_방식에_대한_설명"},{"heading":"비선점 스케줄링","level":3,"id":"비선점_스케줄링"},{"heading":"실행시간이 긴 프로세스에 불리한 SJF 를 보완하기 위해 대기시간 및 서비스 시간을 이용","level":4,"id":"실행시간이_긴_프로세스에_불리한_SJF_를_보완하기_위해_대기시간_및_서비스_시간을_이용"},{"heading":"긴 작업과 짧은 작업간의 지나친 불평등을 해소할 수 있다.","level":4,"id":"==긴_작업과_짧은_작업간의_지나친_불평등을_해소==할_수_있다."},{"heading":"우선순위를 계산, 숫자가 높은것부터 낮은순으로 순위 부여","level":4,"id":"우선순위를_계산,_숫자가_높은것부터_낮은순으로_순위_부여"},{"heading":"(대기시간 + 서비스시간) / 서비스시간 = 우선순위값. 해당 값이 클수록 우선순위가 높다.","level":6,"id":"(대기시간_+_서비스시간)_/_서비스시간_=_우선순위값._해당_값이_클수록_우선순위가_높다."},{"heading":"SSTF 스케줄링 방식에 대한 설명","level":1,"id":"SSTF_스케줄링_방식에_대한_설명"},{"heading":"SSTF : Shortest Seek Time First","level":3,"id":"SSTF__Shortest_Seek_Time_First"},{"heading":"현재 헤드 위치에서 가장 가까운 것부터 처리.","level":4,"id":"현재_헤드_위치에서_가장_가까운_것부터_처리."},{"heading":"이후 동일한 방법으로 진행.","level":4,"id":"이후_동일한_방법으로_진행."},{"heading":"UNIX 운영체제 관한 설명","level":1,"id":"UNIX_운영체제_관한_설명"},{"heading":"주로 서비용 컴퓨터에서 사용됨","level":3,"id":"주로_서비용_컴퓨터에서_사용됨"},{"heading":"time sharing system을 위해 설계된 대화식 운영체제","level":3,"id":"time_sharing_system을_위해_설계된_대화식_운영체제"},{"heading":"c언어로 작성되어 이식성이 높고, 장치간 호환성이 높다.","level":3,"id":"c언어로_작성되어_이식성이_높고,_장치간_호환성이_높다."},{"heading":"Multi User, Multi tasking 모두 지원.","level":3,"id":"Multi_User,_Multi_tasking_모두_지원."},{"heading":"트리구조의 파일시스템.","level":3,"id":"트리구조의_파일시스템."},{"heading":"UDP 프로토콜의 특징에 대한 설명","level":1,"id":"UDP_프로토콜의_특징에_대한_설명"},{"heading":"비연결형 및 비신뢰성 전송 서비스를 제공한다.","level":3,"id":"비연결형_및_비신뢰성_전송_서비스를_제공한다."},{"heading":"흐름제어나 순서제어가 없어 전송속도가 빠르다.","level":3,"id":"흐름제어나_순서제어가_없어_전송속도가_빠르다."},{"heading":"수신된 데이터의 순서 재조정 기능을 지원하지 않는다.","level":3,"id":"수신된_데이터의_순서_재조정_기능을_지원하지_않는다."},{"heading":"복구기능을 제공하지 않는다.","level":3,"id":"복구기능을_제공하지_않는다."},{"heading":"TCP와 같이 트랜스포트 계층에 존재한다.","level":3,"id":"TCP와_같이_트랜스포트_계층에_존재한다."},{"heading":"Python의 데이터 타입에 대한 설명","level":1,"id":"Python의_데이터_타입에_대한_설명"},{"heading":"시퀀스 - 리스트 : 순서있고, 가변이다. [1,2,3]","level":3,"id":"시퀀스_-_리스트__순서있고,_가변이다._[1,2,3]"},{"heading":"시퀀스 - 튜플 : 순서있고, 불변이다. (1,2,3)","level":3,"id":"시퀀스_-_튜플__순서있고,_불변이다._(1,2,3)"},{"heading":"세트 - 세트 : 순서없고, 중복X {1,2,3}","level":3,"id":"세트_-_세트__순서없고,_중복X_{1,2,3}"},{"heading":"맵 - 딕셔너리 : 순서없고, key-value 쌍이다. {'a' : 1 , 'b' : 3}","level":3,"id":"맵_-_딕셔너리__순서없고,_key-value_쌍이다._{'a'__1_,_'b'__3}"},{"heading":"Myers가 구분한 응집도(Cohesion)에 대한 설명","level":1,"id":"Myers가_구분한_응집도(Cohesion)에_대한_설명"},{"heading":"(약함 순으로) 우논시절교순기","level":5,"id":"(약함_순으로)_==우논시절교순기=="},{"heading":"1. 기능적 응집도 (Functional Cohesion)","level":3,"id":"1._기능적_응집도_(Functional_Cohesion)"},{"heading":"2. 순차적 응집도 (Sequential Cohesion)","level":3,"id":"2._순차적_응집도_(Sequential_Cohesion)"},{"heading":"3. 교환적 응집도 (Communication Cohesion)","level":3,"id":"3._교환적_응집도_(Communication_Cohesion)"},{"heading":"4. 절차적 응집도 (Procedural Cohesion)","level":3,"id":"4._절차적_응집도_(Procedural_Cohesion)"},{"heading":"5. 시간적 응집도 (Temporal Cohesion)","level":3,"id":"5._시간적_응집도_(Temporal_Cohesion)"},{"heading":"6. 논리적 응집도 (Logical Cohesion)","level":3,"id":"6._논리적_응집도_(Logical_Cohesion)"},{"heading":"7. 우연적 응집도 (Coincidental Cohesion)","level":3,"id":"7._우연적_응집도_(Coincidental_Cohesion)"},{"heading":"IP프로토콜의 주요 특징에 대한 설명","level":1,"id":"IP프로토콜의_주요_특징에_대한_설명"},{"heading":"체크섬(checksum)기능으로 헤더 체크섬 만을 제공한다.","level":3,"id":"체크섬(checksum)기능으로_==헤더_체크섬_만을_제공==한다."},{"heading":"패킷을 분할, 병합하는 기능을 수행하기도 한다.","level":3,"id":"패킷을_분할,_병합하는_기능을_수행하기도_한다."},{"heading":"비연결형 서비스를 제공한다","level":3,"id":"==비연결형_서비스==를_제공한다"},{"heading":"Best Effort 원칙에 따른 전송 기능을 제공한다.","level":3,"id":"Best_Effort_원칙에_따른_전송_기능을_제공한다."},{"heading":"LRU 페이지 교체 알고리즘 작동 순서","level":1,"id":"LRU_페이지_교체_알고리즘_작동_순서"},{"heading":"1 / 2 / 3 / 1 / 2 / 4 / 1 / 2 / 5","level":3,"id":"1_/_2_/_3_/_1_/_2_/_4_/_1_/_2_/_5"},{"heading":"1 [결함] (부재로 인한 결함)","level":4,"id":"1_[결함]_(부재로_인한_결함)"},{"heading":"1 2 [결함]","level":4,"id":"1_2_[결함]"},{"heading":"1 2 3 [결함]","level":4,"id":"1_2_3_[결함]"},{"heading":"1 2 3 [적제중인 1 참고]","level":4,"id":"1_2_3_[적제중인_1_참고]"},{"heading":"1 2 3 [적제중인 2 참고]","level":4,"id":"1_2_3_[적제중인_2_참고]"},{"heading":"1 2 3 4 [결함]","level":4,"id":"1_2_3_4_[결함]"},{"heading":"1 2 3 4 [적제중인 1 참고]","level":4,"id":"1_2_3_4_[적제중인_1_참고]"},{"heading":"1 2 3 4 [적제중인 2 참고]","level":4,"id":"1_2_3_4_[적제중인_2_참고]"},{"heading":"1 2 5 4 [결함] (가장 오랫동안 참조되지 않은 페이지 교체 [ 3 => 5 ])","level":4,"id":"1_2_5_4_[결함]_(가장_오랫동안_참조되지_않은_페이지_교체_[_3_=>_5_])"},{"heading":"사용자 수준에서 지원되는 스레드가 커널에서 지원되는 스레드에 비해 갖는 장점","level":1,"id":"사용자_수준에서_지원되는_스레드가_커널에서_지원되는_스레드에_비해_갖는_장점"},{"heading":"한 프로세스가 운영체제를 호출할 때 전체 프로세스가 대기할 필요가 없으므로, 시스템 성능을 높일 수 있다.","level":3,"id":"한_프로세스가_운영체제를_호출할_때_전체_프로세스가_대기할_필요가_없으므로,_시스템_성능을_높일_수_있다."},{"heading":"동시에 여러 스레드가 커널에 접근할 수 있으므로 여러 스레드가 시스템 호출을 동시에 사용할 수 있다.","level":3,"id":"동시에_여러_스레드가_커널에_접근할_수_있으므로_여러_스레드가_시스템_호출을_동시에_사용할_수_있다."},{"heading":"각 스레드를 개별적으로 관리할 수 있으므로 스레드의 독립적인 스케줄링이 가능하다.","level":3,"id":"각_스레드를_개별적으로_관리할_수_있으므로_스레드의_독립적인_스케줄링이_가능하다."},{"heading":"결합도에 대한 설명","level":1,"id":"결합도에_대한_설명"},{"heading":"스탬프 결합도","level":3,"id":"스탬프_결합도"},{"heading":"내용 결합도","level":3,"id":"내용_결합도"},{"heading":"공통 결합도","level":3,"id":"공통_결합도"},{"heading":"C 언어 포인터 출력 문제","level":1,"id":"C_언어_포인터_출력_문제"},{"heading":"모듈화에 대한 설명","level":1,"id":"모듈화에_대한_설명"},{"heading":"시스템을 모듈로 분할하면 각각의 모듈을 별개로 만들고 수정할 수 있기 때문에 좋은 구조가 된다.","level":3,"id":"시스템을_모듈로_분할하면_각각의_모듈을_별개로_만들고_수정할_수_있기_때문에_좋은_구조가_된다."},{"heading":"결합도는 모듈과 모듈사이의 상호의존 또는 연관 정도를 의미한다.","level":3,"id":"결합도는_모듈과_모듈사이의_상호의존_또는_연관_정도를_의미한다."},{"heading":"모듈간의 결합도가 약해야 독립적인 모듈이 될 수 있다.","level":3,"id":"모듈간의_결합도가_약해야_독립적인_모듈이_될_수_있다."},{"heading":"모듈 내 구성 요소들 간의 응집도가 강해야 좋은 모듈 설계이다.","level":3,"id":"모듈_내_구성_요소들_간의_응집도가_강해야_좋은_모듈_설계이다."},{"heading":"응집도 - 모듈이 독립적인 기능으로 정의되어 있는 정도를 의미한다.","level":4,"id":"응집도_-_모듈이_독립적인_기능으로_정의되어_있는_정도를_의미한다."},{"heading":"소프트웨어 개발의 정보보안 요소에 대한 설명","level":1,"id":"소프트웨어_개발의_정보보안_요소에_대한_설명"},{"heading":"무결성 : 인가된 사용자에 대해서만 자원 수정이 가능하며, 전송중인 정보는 수정되지 않는다.","level":3,"id":"무결성__인가된_사용자에_대해서만_자원_수정이_가능하며,_전송중인_정보는_수정되지_않는다."},{"heading":"기밀성 : 인가된 사용자에 대해서만 자원 접근이 가능하다.","level":3,"id":"기밀성__인가된_사용자에_대해서만_자원_접근이_가능하다."},{"heading":"가용성 : 인가된 사용자는 가지고 있는 권한 범위 내에서 언제든 지원 접근이 가능하다.","level":3,"id":"가용성__인가된_사용자는_가지고_있는_권한_범위_내에서_언제든_지원_접근이_가능하다."},{"heading":"데이터 전송 기술에 대한 설명","level":1,"id":"데이터_전송_기술에_대한_설명"},{"heading":"Zing - 10cm이내 근접 거리에서 기가급 속도로 데이터 전송이 가능한 초고속근접무선통시(NFC) 기술","level":3,"id":"Zing_-_10cm이내_근접_거리에서_기가급_속도로_데이터_전송이_가능한_초고속근접무선통시(NFC)_기술"},{"heading":"BcN - 음성 데이터, 유/무선 통신, 방송, 인터넷이 융합된 품질 보장형 광대역 멀티미디어 서비스를 공간에 제한없이 실시간으로 이용할 수 있는 차세대 네트워크환경","level":3,"id":"BcN_-_음성_데이터,_유/무선_통신,_방송,_인터넷이_융합된_품질_보장형_광대역_멀티미디어_서비스를_공간에_제한없이_실시간으로_이용할_수_있는_차세대_네트워크환경"},{"heading":"MarineNavi - 소형 선박에 설치된 GPS기반 선박자동 식별장치를 기본으로 주변 선박의 이동 속도와 위치를 파악한다.","level":3,"id":"MarineNavi_-_소형_선박에_설치된_GPS기반_선박자동_식별장치를_기본으로_주변_선박의_이동_속도와_위치를_파악한다."},{"heading":"LTE - 5G와 같은 셀룰러 이동통신망을 통해 차량이 다른 차량이나 교통 인프라, 보행자, 네트워크 등과 정보를 주고받는 차량 통신기술","level":3,"id":"LTE_-_5G와_같은_셀룰러_이동통신망을_통해_차량이_다른_차량이나_교통_인프라,_보행자,_네트워크_등과_정보를_주고받는_차량_통신기술"},{"heading":"취약점 관리를 위한 응용프로그램의 보안 설정에 대한 설명","level":1,"id":"취약점_관리를_위한_응용프로그램의_보안_설정에_대한_설명"},{"heading":"패치 관리 : 응용프로그램에 대한 패치 또는 서비스 팩 적용","level":3,"id":"패치_관리__응용프로그램에_대한_패치_또는_서비스_팩_적용"},{"heading":"응용프로그램 실행권한의 제한 필요","level":3,"id":"응용프로그램_실행권한의_제한_필요"},{"heading":"운영체제의 접근 제한","level":3,"id":"운영체제의_접근_제한"},{"heading":"정보 수집 제한","level":3,"id":"정보_수집_제한"},{"heading":"불필요한 서비스 및 악성 프로그램의 확인 및 제거","level":3,"id":"불필요한_서비스_및_악성_프로그램의_확인_및_제거"},{"heading":"시스템 무결성 검사 : 주요 파일을 검사하여 변경 내역 확인","level":3,"id":"시스템_무결성_검사__주요_파일을_검사하여_변경_내역_확인"},{"heading":"소프트웨어 개발 프레임워크와 관련한 설명","level":1,"id":"소프트웨어_개발_프레임워크와_관련한_설명"},{"heading":"반 제품 상태의 제품을 퇘로 필요한 서비스 컴포넌트를 사용하여 재사용성의 확대와 성능을 보장받을 수 있게하는 개발 소프트웨어","level":3,"id":"반_제품_상태의_제품을_퇘로_필요한_서비스_컴포넌트를_사용하여_재사용성의_확대와_성능을_보장받을_수_있게하는_개발_소프트웨어"},{"heading":"설계 관점의 개발방식을 패턴화시키기 위한 노력의 결과물. 디자인패턴을 반제품 소프트웨어 상태로 집적화 시킨것","level":3,"id":"설계_관점의_개발방식을_패턴화시키기_위한_노력의_결과물._디자인패턴을_반제품_소프트웨어_상태로_집적화_시킨것"},{"heading":"프레임워크의 동작원리를 그 제어흐름의 일반적인 프로그램 흐름과 반대로 동작한다고 해서 IoC(제어의 역전)이라고도 한다","level":3,"id":"프레임워크의_동작원리를_그_제어흐름의_일반적인_프로그램_흐름과_반대로_동작한다고_해서_IoC(제어의_역전)이라고도_한다"},{"heading":"클라우드 기반의 HSM(Hardware Security Module)에 대한 설명","level":1,"id":"클라우드_기반의_HSM(Hardware_Security_Module)에_대한_설명"},{"heading":"클라우드(데이터센터) 기반 암호화 키 생성, 처리, 저장 등을 하는 보안 기기","level":3,"id":"클라우드(데이터센터)_기반_암호화_키_생성,_처리,_저장_등을_하는_보안_기기"},{"heading":"국내에서는 공인인증제의 폐지와 전자서명법 개정을 추진하면서 클라우드 HSM용어가 자주 등장","level":3,"id":"국내에서는_공인인증제의_폐지와_전자서명법_개정을_추진하면서_클라우드_HSM용어가_자주_등장"},{"heading":"클라우드에 인증서를 저장하므로 기존 HMS기기나 휴대폰에 인증서를 저장해 다닐 필요가 없어졌다.","level":3,"id":"클라우드에_인증서를_저장하므로_기존_HMS기기나_휴대폰에_인증서를_저장해_다닐_필요가_없어졌다."},{"heading":"하드웨어적으로 구현되므로 소프트웨어식 암호 기술에 내제된 보안 취약점을 해결할 수 있다.","level":3,"id":"하드웨어적으로_구현되므로_소프트웨어식_암호_기술에_내제된_보안_취약점을_해결할_수_있다."},{"heading":"Mesh Network 에 대한 설명","level":1,"id":"Mesh_Network_에_대한_설명"},{"heading":"다른 국을 향하는 호출이 중계에 의하지 않고 직접 접속되는 그물 모양의 네트워크이다.","level":3,"id":"다른_국을_향하는_호출이_중계에_의하지_않고_직접_접속되는_그물_모양의_네트워크이다."},{"heading":"통신량이 많은 비교적 소수의 국 사이에 구성될 경우 경제적이며, 간편하지만 다수의 국 사이에는 회선이 세분화 되어 비경제적일 수도 있다.","level":3,"id":"통신량이_많은_비교적_소수의_국_사이에_구성될_경우_경제적이며,_간편하지만_다수의_국_사이에는_회선이_세분화_되어_비경제적일_수도_있다."},{"heading":"해당 형태의 무선 네트워크의 경우 대용량을 빠르고 안전하게 전달할 수 있어 행사장이나 군 등 에서 많이 사용한다.","level":3,"id":"해당_형태의_무선_네트워크의_경우_대용량을_빠르고_안전하게_전달할_수_있어_행사장이나_군_등_에서_많이_사용한다."},{"heading":"악성코드 유형에 대한 설명","level":1,"id":"악성코드_유형에_대한_설명"},{"heading":"Rogue Ware(가짜 백신 소프트웨어) : 사용자가 컴퓨터에 바이러스가 있다고 잘못 믿게 하고 컴퓨터에 실제로 악성 프로그램을 설치토록 하거나, 가짜 악성 프로그램 제거 도구에 대한 비용을 지불하도록 설득함.","level":3,"id":"Rogue_Ware(가짜_백신_소프트웨어)__사용자가_컴퓨터에_바이러스가_있다고_잘못_믿게_하고_컴퓨터에_실제로_악성_프로그램을_설치토록_하거나,_가짜_악성_프로그램_제거_도구에_대한_비용을_지불하도록_설득함."},{"heading":"Adware : 특정 소프트웨어를 실행할 때 또는 자동으로 활성화되는 광고프로그램","level":3,"id":"Adware__특정_소프트웨어를_실행할_때_또는_자동으로_활성화되는_광고프로그램"},{"heading":"Reflection Attack(반사공격) : 송신자가 생성한 메시지를 가로챈 공격자가 그 매시지를 다시 송신자에게 재전송하여 접근 권한을 얻는 형태의 공격방법","level":3,"id":"Reflection_Attack(반사공격)__송신자가_생성한_메시지를_가로챈_공격자가_그_매시지를_다시_송신자에게_재전송하여_접근_권한을_얻는_형태의_공격방법"},{"heading":"Worm : 다른 컴퓨터의 취약점을 이용하여 스스로 전파하거나 메일로 전파되며 스스로 증식하는 것","level":3,"id":"Worm__다른_컴퓨터의_취약점을_이용하여_스스로_전파하거나_메일로_전파되며_스스로_증식하는_것"},{"heading":"공격기법에 대한 설명","level":1,"id":"공격기법에_대한_설명"},{"heading":"Ping of Death : 시스템 공격 기법 중 하나로 허용범위 이상의 ICMP패킷을 전송하여 대상 시스템의 네트워크를 마비시킴","level":3,"id":"Ping_of_Death__시스템_공격_기법_중_하나로_허용범위_이상의_ICMP패킷을_전송하여_대상_시스템의_네트워크를_마비시킴"},{"heading":"Session Hijacking : 컴퓨터 시스템 정보나, 서비스에 무단으로 접근하기 위해 유효한 컴퓨터 세선을 이용하는 것. 일반적인 예로 두 컴퓨터간의 활성화된 상태에서 공격자가 피공격자의 로그인 정보를 활용하여 자신에게 필요한 행위를 하는것","level":3,"id":"Session_Hijacking__컴퓨터_시스템_정보나,_서비스에_무단으로_접근하기_위해_유효한_컴퓨터_세선을_이용하는_것._일반적인_예로_두_컴퓨터간의_활성화된_상태에서_공격자가_피공격자의_로그인_정보를_활용하여_자신에게_필요한_행위를_하는것"},{"heading":"Piggyback Attack : 공격자가 다른 사용자의 연결에서 계정을 사용하지 않는 비활성기간을 이용하여 시스템에 접근하는것. 즉, 시스템에 접근할 때 활성화된 기간에는 접근권한이 없는 공격자가 비활성화된 기간에 마치 사용자와 관련있는 사람인 듯 태그를 붙여 몰래 따라들어가는것.","level":3,"id":"Piggyback_Attack__공격자가_다른_사용자의_연결에서_계정을_사용하지_않는_비활성기간을_이용하여_시스템에_접근하는것._즉,_시스템에_접근할_때_활성화된_기간에는_접근권한이_없는_공격자가_비활성화된_기간에_마치_사용자와_관련있는_사람인_듯_태그를_붙여_몰래_따라들어가는것."},{"heading":"대칭/비대칭 암호 알고리즘에 대한 설명","level":1,"id":"대칭/비대칭_암호_알고리즘에_대한_설명"},{"heading":"대칭 암호화","level":3,"id":"대칭_암호화"},{"heading":"비교적 실행속도가 빠르기 때문에 다양한 암호의 핵심 함수로 사용됨","level":4,"id":"==비교적_실행속도가_빠르기_때문에_다양한_암호의_핵심_함수로_사용==됨"},{"heading":"키 교환이 필요하기 때문에, 키를 교환하는 중 키가 탈취될 수 있다는 문제가 있음","level":4,"id":"==키_교환이_필요==하기_때문에,_키를_교환하는_중_키가_탈취될_수_있다는_문제가_있음"},{"heading":"대표적인 알고리즘으로 AES, IDEA 등이 있다.","level":4,"id":"대표적인_알고리즘으로_AES,_IDEA_등이_있다."},{"heading":"비대칭 암호화","level":3,"id":"비대칭_암호화"},{"heading":"자신만이 보관하는 비밀키를 이용하여 인증, 전자서명 등에 적용이 가능하다.","level":4,"id":"자신만이_보관하는_비밀키를_이용하여_인증,_전자서명_등에_적용이_가능하다."},{"heading":"대칭 암호화 기술에 비하여 속도가 느리다.","level":4,"id":"대칭_암호화_기술에_비하여_속도가_느리다."},{"heading":"월별(man - month) 생산성을 구하는 방법","level":1,"id":"월별(man_-_month)_생산성을_구하는_방법"},{"heading":"생산성 = LOC / (노력 * 인원)","level":3,"id":"생산성_=_LOC_/_(노력_*_인원)"},{"heading":"ex) 두명의 개발자가 5개월에 걸쳐 10,000라인의 코드를 개발하였을때","level":4,"id":"ex)_두명의_개발자가_5개월에_걸쳐_10,000라인의_코드를_개발하였을때"},{"heading":"-> 10,000 / (5x2)","level":5,"id":"->_10,000_/_(5x2)"},{"heading":"접근통제 방법에 대한 설명","level":1,"id":"접근통제_방법에_대한_설명"},{"heading":"역할 기반 접근 통제(RBAC - Role Based Access Control)","level":3,"id":"역할_기반_접근_통제(RBAC_-_Role_Based_Access_Control)"},{"heading":"임의 접근 통제(DAC - Discretionary Access Control)","level":3,"id":"임의_접근_통제(DAC_-_Discretionary_Access_Control)"},{"heading":"강제 접근 통제(MAC - Mandatory Access Control)","level":3,"id":"강제_접근_통제(MAC_-_Mandatory_Access_Control)"},{"heading":"COCOMO(Constructive Cost Model) 모형의 특징에 대한 설명","level":1,"id":"COCOMO(Constructive_Cost_Model)_모형의_특징에_대한_설명"},{"heading":"보엠이 고안한 소프트웨어 개발비용 산정 방법이다.","level":3,"id":"보엠이_고안한_소프트웨어_개발비용_산정_방법이다."},{"heading":"비교적 작은 규모의 프로젝트들을 통계 분석한 결과를 반영한 모델 -> 중소 규모의 프로젝트 비용추정에 적합","level":3,"id":"비교적_작은_규모의_프로젝트들을_통계_분석한_결과를_반영한_모델_->_중소_규모의_프로젝트_비용추정에_적합"},{"heading":"비용 산정 결과를 Man-Month로 표현","level":3,"id":"비용_산정_결과를_Man-Month로_표현"},{"heading":"소프트웨어 개발 유형에 따른 분류","level":3,"id":"소프트웨어_개발_유형에_따른_분류"},{"heading":"조직형(Organic)","level":4,"id":"조직형(Organic)"},{"heading":"반 분리형(Semi-Detached)","level":4,"id":"반_분리형(Semi-Detached)"},{"heading":"내장형(Embadded)","level":4,"id":"내장형(Embadded)"},{"heading":"사용자 인증의 유형에 대한 설명","level":1,"id":"사용자_인증의_유형에_대한_설명"},{"heading":"지식 : 본인이 알고 있는 것 - password , pin","level":3,"id":"지식__본인이_알고_있는_것_-_password_,_pin"},{"heading":"소유 : 본인이 가지고 있는 것 - tokken, smart key","level":3,"id":"소유__본인이_가지고_있는_것_-_tokken,_smart_key"},{"heading":"존재 : 본인을 나타내는 것 - 홍채, 지문","level":3,"id":"존재__본인을_나타내는_것_-_홍채,_지문"},{"heading":"행위 : 본인이 하는 것 - 서명, 움직임, 음성","level":3,"id":"행위__본인이_하는_것_-_서명,_움직임,_음성"},{"heading":"시스템 사용자가 로그인하여 명령을 내리는 과정에 대한 시스템 동작","level":1,"id":"시스템_사용자가_로그인하여_명령을_내리는_과정에_대한_시스템_동작"},{"heading":"Authentication","level":3,"id":"Authentication"},{"heading":"- 자신의 신원을 시스템에 증명하는 과정이다.","level":4,"id":"-_자신의_신원을_시스템에_증명하는_과정이다."},{"heading":"- 아이디와 패스워드를 입력하는 과정이가장 일반적인 예시라고 볼 수 있다.","level":4,"id":"-_아이디와_패스워드를_입력하는_과정이가장_일반적인_예시라고_볼_수_있다."},{"heading":"네트워크 용어에 대한 설명","level":1,"id":"네트워크_용어에_대한_설명"},{"heading":"NFS(Network File System)","level":3,"id":"NFS(Network_File_System)"},{"heading":"Network Mapper","level":3,"id":"Network_Mapper"},{"heading":"AOE Network (Activity On Edge Network)","level":3,"id":"AOE_Network_(Activity_On_Edge_Network)"},{"heading":"SDN (Software Defined Networking)","level":3,"id":"SDN_(Software_Defined_Networking)"},{"heading":"프로젝트 일정관리 시 사용하는 PERT 차트에 대한 설명","level":1,"id":"프로젝트_일정관리_시_사용하는_PERT_차트에_대한_설명"},{"heading":"GANTT 차트","level":1,"id":"GANTT_차트"},{"heading":"OSI 7계층의 프로토콜에 대한 설명","level":1,"id":"OSI_7계층의_프로토콜에_대한_설명"},{"heading":"1계층 - 물리계층(Physical Layer) : Coax, Fiber, Wireless","level":3,"id":"1계층_-_물리계층(Physical_Layer)__Coax,_Fiber,_Wireless"},{"heading":"2계층 - 데이터 링크계층(DataLink Layer) : Ethernet, SLIP, PPP, FDDI, HDLC","level":3,"id":"2계층_-_데이터_링크계층(DataLink_Layer)__Ethernet,_SLIP,_PPP,_FDDI,_HDLC"},{"heading":"3계층 - 네트워크 계층(Network Layer) : IP, IPSec, ICMP, IGMP","level":3,"id":"3계층_-_네트워크_계층(Network_Layer)__IP,_IPSec,_ICMP,_IGMP"},{"heading":"4계층 - 전송 계층(Transport Layer) : TCP, UDP, ECN, SCTP, DCCP","level":3,"id":"4계층_-_전송_계층(Transport_Layer)__TCP,_UDP,_ECN,_SCTP,_DCCP"},{"heading":"5계층 - 세션 계층(Session Layer) : VARIOUS API;S, SOCKETS","level":3,"id":"5계층_-_세션_계층(Session_Layer)__VARIOUS_API;S,_SOCKETS"},{"heading":"6계층 - 표현 계층(Presentation Layer) : SSL, FTP, IMAP, SSH","level":3,"id":"6계층_-_표현_계층(Presentation_Layer)__SSL,_FTP,_IMAP,_SSH"},{"heading":"7계층 - 응용 계층(Application Layer) : HTTP, FTP, IRC, SSH, DNS","level":3,"id":"7계층_-_응용_계층(Application_Layer)__HTTP,_FTP,_IRC,_SSH,_DNS"},{"heading":"내부단편화 크기 구하는 것에 대한 설명","level":1,"id":"내부단편화_크기_구하는_것에_대한_설명"},{"heading":"Best Fit - 내부단편화가 제일 작은 크기로 설정","level":3,"id":"Best_Fit_-_내부단편화가_제일_작은_크기로_설정"},{"heading":"First Fit - 들어갈 수 있는 첫 번째 공간을 넣음","level":3,"id":"First_Fit_-_들어갈_수_있는_첫_번째_공간을_넣음"},{"heading":"Worst Fit - 가장 큰 공간에 넣음","level":3,"id":"Worst_Fit_-_가장_큰_공간에_넣음"},{"heading":"가장 결합도가 강한 항목은?","level":1,"id":"가장_결합도가_강한_항목은?"},{"heading":"1. 내용 결합도 (Content Coupling)","level":3,"id":"1._내용_결합도_(Content_Coupling)"},{"heading":"2. 공통 결합도 (Common Coupling)","level":3,"id":"2._공통_결합도_(Common_Coupling)"},{"heading":"3. 외부 결합도 (External Coupling)","level":3,"id":"3._외부_결합도_(External_Coupling)"},{"heading":"4. 제어 결합도 (Control Coupling)","level":3,"id":"4._제어_결합도_(Control_Coupling)"},{"heading":"5. 스탬프 결합도 (Stamp Coupling)","level":3,"id":"5._스탬프_결합도_(Stamp_Coupling)"},{"heading":"6. 자료 결합도 (Data Coupling)","level":3,"id":"6._자료_결합도_(Data_Coupling)"},{"heading":"결합도 강함 -> 약함","level":4,"id":"결합도_강함_->_약함"},{"heading":"UNIX에서 새로운 프로세스를 생성하는 명령어는?","level":1,"id":"UNIX에서_새로운_프로세스를_생성하는_명령어는?"},{"heading":"- fork","level":2,"id":"-_fork"},{"heading":"JAVA에서 사용되는 출력 함수가 아닌것은?","level":1,"id":"JAVA에서_사용되는_출력_함수가_아닌것은?"},{"heading":"- printing","level":2,"id":"-_printing"},{"heading":"공통모듈의 재사용 범위에 따른 분류?","level":1,"id":"공통모듈의_재사용_범위에_따른_분류?"},{"heading":"1. 컴포넌트 재사용","level":3,"id":"1._컴포넌트_재사용"},{"heading":"2. 함수와 객체의 재사용","level":3,"id":"2._함수와_객체의_재사용"},{"heading":"3. 애플리케이션 재사용","level":3,"id":"3._애플리케이션_재사용"},{"heading":"TCP/IP에서 사용되는 논리 주소를 물리 주소로 변환시켜 주는 프로토콜은?","level":1,"id":"TCP/IP에서_사용되는_논리_주소를_물리_주소로_변환시켜_주는_프로토콜은?"},{"heading":"- ARP ( Address Resolution Protocol)","level":2,"id":"-_ARP_(_Address_Resolution_Protocol)"},{"heading":"논리 -> 물리","level":5,"id":"논리_->_물리"},{"heading":"ICMP(Internet Control Message Protocol)이란?","level":1,"id":"ICMP(Internet_Control_Message_Protocol)이란?"},{"heading":"- TCP/IP계층 구조에서 IP동작과정에서의 전송 오류가 발생하는 경우에 대비해 오류 정보를 전송하는 목적으로 사용되는 프로토콜이다.","level":4,"id":"-_==TCP/IP==계층_구조에서_IP동작과정에서의_==전송_오류가_발생하는_경우에_대비==해_오류_정보를_전송하는_목적으로_사용되는_프로토콜이다."},{"heading":"- 제어 메시지를 관리하는 역할을 한다.","level":4,"id":"-_제어_메시지를_관리하는_역할을_한다."},{"heading":"TCP/IP 통신 프로토콜에 대한 설명","level":1,"id":"TCP/IP_통신_프로토콜에_대한_설명"},{"heading":"1. tcp는 3-way handshake 를 통해 통신이 원활히 이뤄질 수 있는지를 확인한다.","level":3,"id":"1._tcp는_3-way_handshake_를_통해_통신이_원활히_이뤄질_수_있는지를_확인한다."},{"heading":"2. 외부 컴퓨터가 접속되면, 접속인가 여부를 점검하여 허용 및 거부를 선택하는 접근제어 유틸리티 이다.","level":3,"id":"2._외부_컴퓨터가_접속되면,_접속인가_여부를_점검하여_허용_및_거부를_선택하는_접근제어_유틸리티_이다."},{"heading":"3. 패킷의 전송 및 오류를 제어한다.","level":3,"id":"3._패킷의_전송_및_오류를_제어한다."},{"heading":"4. 흐름제어 기능을 수행한다.","level":3,"id":"4._흐름제어_기능을_수행한다."},{"heading":"5. 전이중(Full Duplex) 방식의 양방향 가상회선을 제공한다.","level":3,"id":"5._전이중(Full_Duplex)_방식의_양방향_가상회선을_제공한다."},{"heading":"6. 전송 데이터와 응답 데이터를 함께 전송할 수 있다.","level":3,"id":"6._전송_데이터와_응답_데이터를_함께_전송할_수_있다."},{"heading":"CIDR 표기에서 서브넷 마스크를 구하는 방법","level":1,"id":"CIDR_표기에서_서브넷_마스크를_구하는_방법"},{"heading":"EX) 203.241.132.82/27 일경우","level":2,"id":"EX)_203.241.132.82/27_일경우"},{"heading":"즉, 255.255.255.224 이다.","level":5,"id":"즉,_255.255.255.224_이다."},{"heading":"OSI 7계층 중 네트워크 계층에 대한 설명","level":1,"id":"OSI_7계층_중_네트워크_계층에_대한_설명"},{"heading":"1. 패킷을 발신지로부터 최종 목적지까지 전달하는 책임을 진다.","level":3,"id":"1._패킷을_발신지로부터_최종_목적지까지_전달하는_책임을_진다."},{"heading":"2. 패킷에 발신지와 목적지에 논리 주소를 추가한다.","level":3,"id":"2._패킷에_발신지와_목적지에_논리_주소를_추가한다."},{"heading":"3. 라우터 또는 교환기는 패킷 전달을 위해 경로를 지정하거나 교환 기능을 제공한다.","level":3,"id":"3._라우터_또는_교환기는_패킷_전달을_위해_경로를_지정하거나_교환_기능을_제공한다."},{"heading":"4. 한 노드로부터 다른 노드로 패킷(Packet)을 전달한다.","level":3,"id":"4._한_노드로부터_다른_노드로_==패킷==(Packet)을_전달한다."},{"heading":"데이터링크 계층에서는 프레임을 전송한다.","level":5,"id":"데이터링크_계층에서는_==프레임==을_전송한다."},{"heading":"운영체제를 기능에 따라 분류할 경우 제어 프로그램에 해당하는 것","level":1,"id":"운영체제를_기능에_따라_분류할_경우_제어_프로그램에_해당하는_것"},{"heading":"1. 데이터 관리 프로그램","level":3,"id":"1._데이터_관리_프로그램"},{"heading":"2. 작업 제어 프로그램","level":3,"id":"2._작업_제어_프로그램"},{"heading":"3. 감시 프로그램","level":3,"id":"3._감시_프로그램"},{"heading":"SQL에서의 BETWEEN연산 ex) 점수 BETWEEN 60 AND 90","level":1,"id":"SQL에서의_BETWEEN연산_ex)_점수_BETWEEN_60_AND_90"},{"heading":"= 점수 >= 60 AND 점수 <= 90","level":2,"id":"=_점수_>=_60_AND_점수_<=_90"},{"heading":"HRN 방식 스케줄링 우선순위 산정 방법","level":1,"id":"HRN_방식_스케줄링_우선순위_산정_방법"},{"heading":"-> (대기시간 + 서비스시간) / 서비스 시간","level":2,"id":"->_(대기시간_+_서비스시간)_/_서비스_시간"},{"heading":"해당 값이 클 수록 우선순위가 높다","level":4,"id":"해당_값이_클_수록_우선순위가_높다"},{"heading":"상호 배제기법 종류","level":1,"id":"상호_배제기법_종류"},{"heading":"1. 대커 알고리즘","level":2,"id":"1._대커_알고리즘"},{"heading":"2. 램퍼드 알고리즘","level":2,"id":"2._램퍼드_알고리즘"},{"heading":"3. 피터슨 알고리즘","level":2,"id":"3._피터슨_알고리즘"},{"heading":"4. 세마포어","level":2,"id":"4._세마포어"},{"heading":"스래싱(Thrasing) 이란?","level":1,"id":"스래싱(Thrasing)_이란?"},{"heading":"- 프로세스 처리 도중, 참조할 페이지가 주기억장치에 없어 프로세스 처리 시간보다 페이지 교체에 소요되는 시간이 더 많아지는 현상","level":4,"id":"-_프로세스_처리_도중,_참조할_페이지가_주기억장치에_없어_**프로세스_처리_시간보다_페이지_교체에_소요되는_시간이_더_많아**지는_현상"},{"heading":"은행원 알고리즘","level":1,"id":"은행원_알고리즘"},{"heading":"- Avoidance(회피 기법)","level":4,"id":"-_Avoidance(회피_기법)"}],"backlinks":[],"links":["?query=tag:%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC","?query=tag:%ED%95%84%EA%B8%B0","?query=tag:%EC%A0%95%EB%A6%AC","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#🥈 필기 4과목 - 프로그래밍 언어 활용","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#교착_상태(Deadlock)의_필요_충분_조건?","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_상호_배제(Mutual_Exclusion)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_점유와_대기(Hold_and_Wait)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_환형_대기(Circular_Wait)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_비선점(Nonpreemptive)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#IPv6의_주소_체계_==애멀유==","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_유니캐스트","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_멀티캐스트","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_애니캐스트","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#==파일_디스크립터==에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_파일_관리를_위해_시스템이_필요로_하는_정보를_가지고_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_보조기억장치에_저장되어_있다가_파일이_개방되면_주기억장치로_이동된다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_파일_시스템이_관리하므로_사용자가_파일_==디스크립터를_직접_참조할_수_없다==.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_파일_제어_블록_이라고도_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_파일마다_따로_있으며_시스템에_따라_다른_구조를_가질_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_파일이름_/_위치_/_파일구조_/_유형_/_시간_등의_정보를_담고_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#페이지_교체_알고리즘에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#OPT_(Optimal)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_앞으로_가장_오랫동안_사용되지_않을_페이지_교체","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#FIFO_(First_In_Fist_Out)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_먼저_선택된_페이지가_먼저_교체","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#LRU_(Least_Recently_Used)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_가장_오랫동안_사용되지_않은_페이지_교체","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#LFU_(Least_Frequently_Used)_==F는_참초횠수==","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_참조_횟수가_가장_적은_페이지_교체","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#MFU_(Most_Frequently_Used)_==F는_참초횠수==","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_참조_횟수가_가장_많은_페이지_교체","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#NUR_(Not_Used_Recently)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_최근에_사용하지_않은_페이지_교체","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#프로세스에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#디스패치(Dispatch)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_프로세스가_준비_상태에서_프로세서가_배당되어_실행_상태로_변화하는_것.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#제어블록(PCB_Process_Controll_Block)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_프로세스_식별자,_프로세스_상태_등의_정보로_구성된다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_운영체제가_그_프로레스를_관리하는데_필요한_모든_정보를_유지하는_자료구조_테이블","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#문맥교환(Context_Switching)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_CPU가_현재_실행하고_있는_프로세서의_상태를_PCB에_저장하고_다음_프로세스의_PCB로부터_문맥을_복원하는_작업.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#IP_Address가_속한_Class에_대한_종류","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#127_/_191_/_233_/_239_/_255","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#A_Class_-_0.0.0.0_~_127.255.255.255","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#B_Class_-_128.0.0.0_~_191.255.255.255","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#C_Class_-_192.0.0.0_~_223.255.255.255","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#D_Class와_E_Class는_각각_멀티케스트용_또는_연구용으로_사용된다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#D_Class_-_224.0.0.0_~_239.255.255.255","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#E_Class_-_240.0.0.0_~_255.255.255.255","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#오류제어에_사용되는_자동반복_요청방식의_종류","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#자동반복_요청방식(ARQ_Automatic_Repeat_reQuest)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_Stop-and-Wait_ARQ__송신_측이_하나의_블록을_전송한_후_수신_측에서_에러의_발생을_정검한_다음,_에러_발생_유무_신호를_보내올_때까지_기다리는_방식","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_Go-Back-N_ARQ__여러_블록을_연속적으로_전송하고,_수신_측에서_부정_응답(NAK)을_보내오면_송신_측이_오류가_발생한_블록부터_모두_재전송","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_Selective-Repeat_ARQ__여러_블록을_연속적으로_전송하고,_수신측에서_부정_응답을_보내오면_송신_측이_오류가_발생한_블록만을_재전송","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_Adaptive_ARQ__전송_효율을_최대로_하기_위해서_데이터_블록의_길이를_채널의_상태에_따라_동적으로_변경하는_방식","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#unix시스템에서_쉘의_주요기능에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1._사용자의_명령을_해석하고_커널로_전달하는_기능을_제공한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#2._반복적인_명령_프로그램을_만드는_프로그램이_기능을_제공한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#3._초기화_파일을_이용해_사용자_환경을_설정하는_기능을_제공한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_프로세스와_메모리를_관리하는_것은_커널(Kernel)의_기능이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#IP프로토콜에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Header_Length는_ip프로토콜의_헤더_길이를_32비트_워드_단위로_표시한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Packet_Length는_ip헤더및_데이터를_포함한_ip패킷_전체_길이를_바이트_단위로_표시.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Time_to_Live는_송신_호스트가_패킷을_전송하기_전_네트워크에서_생존할_수_있는_시간을_지정한_것이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Version_Number는_ip프로토콜의_버전번호를_나타낸다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#IPv4와_IPv6의_차이에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#IPv4","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1._**32비트**_주소","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#2._유니캐스트/멀티캐스트/브로드캐스트_사용","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#3._==헤더의_크기가_가변적==이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#IPv6","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1._128비트_주소_(_16비트_씩_8부분_)_/_2^128_개의_주소를_표현_가능","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#2._기존_IPv4의_주소_부족_문제를_해결하기_위해_개발","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#3._인증성/기밀성/무결성_지원(=보안성_강화)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#4._유니캐스트/애니캐스트/멀티캐스트_사용","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#5._헤더가_==40_octet==의_고정된_길이를_가진다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#6._v4에_비하여_더_빠르다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#RIP라우팅_프로토콜에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#==RIP==(Routing_Information_Protocol)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_최단경로_탐색에는_**Bellman-Ford**_알고리즘을_사용하는_**거리_벡터_라우팅_프로토콜**","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_라우팅_프로토콜을_IGP와_EGP로_분류했을_때_**IGP에**_해당한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_==소규모_네트워크_환경==에_적합하다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_최대_홉_카운트를_15홉_이하로_한정하고_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#IGP__Interior_Gateway_Protocol_내부_게이트웨이_프로토콜_-_학내망_내부에서_라우팅하는_것._즉_하나의_AS내에서_사용됨.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#EGP__Exterior_Gateway_Protocol_외부_게이트웨이_프로토콜_-_학내망과_다른_학내망의_라우팅에_사용._즉_AS간의_라우팅에_사용.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#==HRN==_스케줄링_방식에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#비선점_스케줄링","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#실행시간이_긴_프로세스에_불리한_SJF_를_보완하기_위해_대기시간_및_서비스_시간을_이용","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#==긴_작업과_짧은_작업간의_지나친_불평등을_해소==할_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#우선순위를_계산,_숫자가_높은것부터_낮은순으로_순위_부여","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#(대기시간_+_서비스시간)_/_서비스시간_=_우선순위값._해당_값이_클수록_우선순위가_높다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#SSTF_스케줄링_방식에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#SSTF__Shortest_Seek_Time_First","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#현재_헤드_위치에서_가장_가까운_것부터_처리.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#이후_동일한_방법으로_진행.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#UNIX_운영체제_관한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#주로_서비용_컴퓨터에서_사용됨","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#time_sharing_system을_위해_설계된_대화식_운영체제","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#c언어로_작성되어_이식성이_높고,_장치간_호환성이_높다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Multi_User,_Multi_tasking_모두_지원.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#트리구조의_파일시스템.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#UDP_프로토콜의_특징에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#비연결형_및_비신뢰성_전송_서비스를_제공한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#흐름제어나_순서제어가_없어_전송속도가_빠르다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#수신된_데이터의_순서_재조정_기능을_지원하지_않는다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#복구기능을_제공하지_않는다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#TCP와_같이_트랜스포트_계층에_존재한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Python의_데이터_타입에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#시퀀스_-_리스트__순서있고,_가변이다._[1,2,3]","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#시퀀스_-_튜플__순서있고,_불변이다._(1,2,3)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#세트_-_세트__순서없고,_중복X_{1,2,3}","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#맵_-_딕셔너리__순서없고,_key-value_쌍이다._{'a'__1_,_'b'__3}","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Myers가_구분한_응집도(Cohesion)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#(약함_순으로)_==우논시절교순기==","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1._기능적_응집도_(Functional_Cohesion)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#2._순차적_응집도_(Sequential_Cohesion)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#3._교환적_응집도_(Communication_Cohesion)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#4._절차적_응집도_(Procedural_Cohesion)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#5._시간적_응집도_(Temporal_Cohesion)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#6._논리적_응집도_(Logical_Cohesion)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#7._우연적_응집도_(Coincidental_Cohesion)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#IP프로토콜의_주요_특징에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#체크섬(checksum)기능으로_==헤더_체크섬_만을_제공==한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#패킷을_분할,_병합하는_기능을_수행하기도_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#==비연결형_서비스==를_제공한다","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Best_Effort_원칙에_따른_전송_기능을_제공한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#LRU_페이지_교체_알고리즘_작동_순서","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1_/_2_/_3_/_1_/_2_/_4_/_1_/_2_/_5","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1_[결함]_(부재로_인한_결함)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1_2_[결함]","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1_2_3_[결함]","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1_2_3_[적제중인_1_참고]","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1_2_3_[적제중인_2_참고]","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1_2_3_4_[결함]","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1_2_3_4_[적제중인_1_참고]","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1_2_3_4_[적제중인_2_참고]","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1_2_5_4_[결함]_(가장_오랫동안_참조되지_않은_페이지_교체_[_3_=>_5_])","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#사용자_수준에서_지원되는_스레드가_커널에서_지원되는_스레드에_비해_갖는_장점","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#한_프로세스가_운영체제를_호출할_때_전체_프로세스가_대기할_필요가_없으므로,_시스템_성능을_높일_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#동시에_여러_스레드가_커널에_접근할_수_있으므로_여러_스레드가_시스템_호출을_동시에_사용할_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#각_스레드를_개별적으로_관리할_수_있으므로_스레드의_독립적인_스케줄링이_가능하다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#결합도에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#스탬프_결합도","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#내용_결합도","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#공통_결합도","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#C_언어_포인터_출력_문제","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#모듈화에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#시스템을_모듈로_분할하면_각각의_모듈을_별개로_만들고_수정할_수_있기_때문에_좋은_구조가_된다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#결합도는_모듈과_모듈사이의_상호의존_또는_연관_정도를_의미한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#모듈간의_결합도가_약해야_독립적인_모듈이_될_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#모듈_내_구성_요소들_간의_응집도가_강해야_좋은_모듈_설계이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#응집도_-_모듈이_독립적인_기능으로_정의되어_있는_정도를_의미한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#소프트웨어_개발의_정보보안_요소에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#무결성__인가된_사용자에_대해서만_자원_수정이_가능하며,_전송중인_정보는_수정되지_않는다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#기밀성__인가된_사용자에_대해서만_자원_접근이_가능하다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#가용성__인가된_사용자는_가지고_있는_권한_범위_내에서_언제든_지원_접근이_가능하다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#데이터_전송_기술에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Zing_-_10cm이내_근접_거리에서_기가급_속도로_데이터_전송이_가능한_초고속근접무선통시(NFC)_기술","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#BcN_-_음성_데이터,_유/무선_통신,_방송,_인터넷이_융합된_품질_보장형_광대역_멀티미디어_서비스를_공간에_제한없이_실시간으로_이용할_수_있는_차세대_네트워크환경","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#MarineNavi_-_소형_선박에_설치된_GPS기반_선박자동_식별장치를_기본으로_주변_선박의_이동_속도와_위치를_파악한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#LTE_-_5G와_같은_셀룰러_이동통신망을_통해_차량이_다른_차량이나_교통_인프라,_보행자,_네트워크_등과_정보를_주고받는_차량_통신기술","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#취약점_관리를_위한_응용프로그램의_보안_설정에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#패치_관리__응용프로그램에_대한_패치_또는_서비스_팩_적용","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#응용프로그램_실행권한의_제한_필요","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#운영체제의_접근_제한","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#정보_수집_제한","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#불필요한_서비스_및_악성_프로그램의_확인_및_제거","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#시스템_무결성_검사__주요_파일을_검사하여_변경_내역_확인","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#소프트웨어_개발_프레임워크와_관련한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#반_제품_상태의_제품을_퇘로_필요한_서비스_컴포넌트를_사용하여_재사용성의_확대와_성능을_보장받을_수_있게하는_개발_소프트웨어","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#설계_관점의_개발방식을_패턴화시키기_위한_노력의_결과물._디자인패턴을_반제품_소프트웨어_상태로_집적화_시킨것","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#프레임워크의_동작원리를_그_제어흐름의_일반적인_프로그램_흐름과_반대로_동작한다고_해서_IoC(제어의_역전)이라고도_한다","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#클라우드_기반의_HSM(Hardware_Security_Module)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#클라우드(데이터센터)_기반_암호화_키_생성,_처리,_저장_등을_하는_보안_기기","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#국내에서는_공인인증제의_폐지와_전자서명법_개정을_추진하면서_클라우드_HSM용어가_자주_등장","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#클라우드에_인증서를_저장하므로_기존_HMS기기나_휴대폰에_인증서를_저장해_다닐_필요가_없어졌다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#하드웨어적으로_구현되므로_소프트웨어식_암호_기술에_내제된_보안_취약점을_해결할_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Mesh_Network_에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#다른_국을_향하는_호출이_중계에_의하지_않고_직접_접속되는_그물_모양의_네트워크이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#통신량이_많은_비교적_소수의_국_사이에_구성될_경우_경제적이며,_간편하지만_다수의_국_사이에는_회선이_세분화_되어_비경제적일_수도_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#해당_형태의_무선_네트워크의_경우_대용량을_빠르고_안전하게_전달할_수_있어_행사장이나_군_등_에서_많이_사용한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#악성코드_유형에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Rogue_Ware(가짜_백신_소프트웨어)__사용자가_컴퓨터에_바이러스가_있다고_잘못_믿게_하고_컴퓨터에_실제로_악성_프로그램을_설치토록_하거나,_가짜_악성_프로그램_제거_도구에_대한_비용을_지불하도록_설득함.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Adware__특정_소프트웨어를_실행할_때_또는_자동으로_활성화되는_광고프로그램","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Reflection_Attack(반사공격)__송신자가_생성한_메시지를_가로챈_공격자가_그_매시지를_다시_송신자에게_재전송하여_접근_권한을_얻는_형태의_공격방법","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Worm__다른_컴퓨터의_취약점을_이용하여_스스로_전파하거나_메일로_전파되며_스스로_증식하는_것","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#공격기법에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Ping_of_Death__시스템_공격_기법_중_하나로_허용범위_이상의_ICMP패킷을_전송하여_대상_시스템의_네트워크를_마비시킴","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Session_Hijacking__컴퓨터_시스템_정보나,_서비스에_무단으로_접근하기_위해_유효한_컴퓨터_세선을_이용하는_것._일반적인_예로_두_컴퓨터간의_활성화된_상태에서_공격자가_피공격자의_로그인_정보를_활용하여_자신에게_필요한_행위를_하는것","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Piggyback_Attack__공격자가_다른_사용자의_연결에서_계정을_사용하지_않는_비활성기간을_이용하여_시스템에_접근하는것._즉,_시스템에_접근할_때_활성화된_기간에는_접근권한이_없는_공격자가_비활성화된_기간에_마치_사용자와_관련있는_사람인_듯_태그를_붙여_몰래_따라들어가는것.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#대칭/비대칭_암호_알고리즘에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#대칭_암호화","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#==비교적_실행속도가_빠르기_때문에_다양한_암호의_핵심_함수로_사용==됨","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#==키_교환이_필요==하기_때문에,_키를_교환하는_중_키가_탈취될_수_있다는_문제가_있음","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#대표적인_알고리즘으로_AES,_IDEA_등이_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#비대칭_암호화","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#자신만이_보관하는_비밀키를_이용하여_인증,_전자서명_등에_적용이_가능하다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#대칭_암호화_기술에_비하여_속도가_느리다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#월별(man_-_month)_생산성을_구하는_방법","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#생산성_=_LOC_/_(노력_*_인원)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#ex)_두명의_개발자가_5개월에_걸쳐_10,000라인의_코드를_개발하였을때","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#->_10,000_/_(5x2)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#접근통제_방법에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#역할_기반_접근_통제(RBAC_-_Role_Based_Access_Control)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#임의_접근_통제(DAC_-_Discretionary_Access_Control)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#강제_접근_통제(MAC_-_Mandatory_Access_Control)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#COCOMO(Constructive_Cost_Model)_모형의_특징에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#보엠이_고안한_소프트웨어_개발비용_산정_방법이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#비교적_작은_규모의_프로젝트들을_통계_분석한_결과를_반영한_모델_->_중소_규모의_프로젝트_비용추정에_적합","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#비용_산정_결과를_Man-Month로_표현","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#소프트웨어_개발_유형에_따른_분류","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#조직형(Organic)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#반_분리형(Semi-Detached)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#내장형(Embadded)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#사용자_인증의_유형에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#지식__본인이_알고_있는_것_-_password_,_pin","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#소유__본인이_가지고_있는_것_-_tokken,_smart_key","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#존재__본인을_나타내는_것_-_홍채,_지문","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#행위__본인이_하는_것_-_서명,_움직임,_음성","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#시스템_사용자가_로그인하여_명령을_내리는_과정에_대한_시스템_동작","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Authentication","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_자신의_신원을_시스템에_증명하는_과정이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_아이디와_패스워드를_입력하는_과정이가장_일반적인_예시라고_볼_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#네트워크_용어에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#NFS(Network_File_System)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Network_Mapper","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#AOE_Network_(Activity_On_Edge_Network)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#SDN_(Software_Defined_Networking)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#프로젝트_일정관리_시_사용하는_PERT_차트에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#GANTT_차트","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#OSI_7계층의_프로토콜에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1계층_-_물리계층(Physical_Layer)__Coax,_Fiber,_Wireless","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#2계층_-_데이터_링크계층(DataLink_Layer)__Ethernet,_SLIP,_PPP,_FDDI,_HDLC","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#3계층_-_네트워크_계층(Network_Layer)__IP,_IPSec,_ICMP,_IGMP","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#4계층_-_전송_계층(Transport_Layer)__TCP,_UDP,_ECN,_SCTP,_DCCP","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#5계층_-_세션_계층(Session_Layer)__VARIOUS_API;S,_SOCKETS","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#6계층_-_표현_계층(Presentation_Layer)__SSL,_FTP,_IMAP,_SSH","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#7계층_-_응용_계층(Application_Layer)__HTTP,_FTP,_IRC,_SSH,_DNS","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#내부단편화_크기_구하는_것에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Best_Fit_-_내부단편화가_제일_작은_크기로_설정","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#First_Fit_-_들어갈_수_있는_첫_번째_공간을_넣음","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#Worst_Fit_-_가장_큰_공간에_넣음","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#가장_결합도가_강한_항목은?","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1._내용_결합도_(Content_Coupling)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#2._공통_결합도_(Common_Coupling)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#3._외부_결합도_(External_Coupling)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#4._제어_결합도_(Control_Coupling)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#5._스탬프_결합도_(Stamp_Coupling)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#6._자료_결합도_(Data_Coupling)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#결합도_강함_->_약함","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#UNIX에서_새로운_프로세스를_생성하는_명령어는?","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_fork","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#JAVA에서_사용되는_출력_함수가_아닌것은?","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_printing","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#공통모듈의_재사용_범위에_따른_분류?","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1._컴포넌트_재사용","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#2._함수와_객체의_재사용","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#3._애플리케이션_재사용","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#TCP/IP에서_사용되는_논리_주소를_물리_주소로_변환시켜_주는_프로토콜은?","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_ARP_(_Address_Resolution_Protocol)","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#논리_->_물리","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#ICMP(Internet_Control_Message_Protocol)이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_==TCP/IP==계층_구조에서_IP동작과정에서의_==전송_오류가_발생하는_경우에_대비==해_오류_정보를_전송하는_목적으로_사용되는_프로토콜이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_제어_메시지를_관리하는_역할을_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#TCP/IP_통신_프로토콜에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1._tcp는_3-way_handshake_를_통해_통신이_원활히_이뤄질_수_있는지를_확인한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#2._외부_컴퓨터가_접속되면,_접속인가_여부를_점검하여_허용_및_거부를_선택하는_접근제어_유틸리티_이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#3._패킷의_전송_및_오류를_제어한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#4._흐름제어_기능을_수행한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#5._전이중(Full_Duplex)_방식의_양방향_가상회선을_제공한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#6._전송_데이터와_응답_데이터를_함께_전송할_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#CIDR_표기에서_서브넷_마스크를_구하는_방법","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#EX)_203.241.132.82/27_일경우","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#즉,_255.255.255.224_이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#OSI_7계층_중_네트워크_계층에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1._패킷을_발신지로부터_최종_목적지까지_전달하는_책임을_진다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#2._패킷에_발신지와_목적지에_논리_주소를_추가한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#3._라우터_또는_교환기는_패킷_전달을_위해_경로를_지정하거나_교환_기능을_제공한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#4._한_노드로부터_다른_노드로_==패킷==(Packet)을_전달한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#데이터링크_계층에서는_==프레임==을_전송한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#운영체제를_기능에_따라_분류할_경우_제어_프로그램에_해당하는_것","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1._데이터_관리_프로그램","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#2._작업_제어_프로그램","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#3._감시_프로그램","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#SQL에서의_BETWEEN연산_ex)_점수_BETWEEN_60_AND_90","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#=_점수_>=_60_AND_점수_<=_90","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#HRN_방식_스케줄링_우선순위_산정_방법","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#->_(대기시간_+_서비스시간)_/_서비스_시간","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#해당_값이_클_수록_우선순위가_높다","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#상호_배제기법_종류","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#1._대커_알고리즘","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#2._램퍼드_알고리즘","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#3._피터슨_알고리즘","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#4._세마포어","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#스래싱(Thrasing)_이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_프로세스_처리_도중,_참조할_페이지가_주기억장치에_없어_**프로세스_처리_시간보다_페이지_교체에_소요되는_시간이_더_많아**지는_현상","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#은행원_알고리즘","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html#-_Avoidance(회피_기법)"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html","pathToRoot":"../../..","createdTime":1739783025899,"modifiedTime":1739946888780,"sourceSize":25268,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 4과목 - 프로그래밍 언어 활용.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html","showInTree":true,"treeOrder":0,"attachments":[]},"study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html":{"title":"🥈 필기 5과목 - 정보시스템 구축관리","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:정보처리기사\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정보처리기사</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:필기\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#필기</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:정리\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#정리</a> <br> <a href=\"http://lts.kr?query=tag:정보처리기사\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정보처리기사\">#정보처리기사</a> <a href=\"http://lts.kr?query=tag:필기\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#필기\">#필기</a> <a href=\"http://lts.kr?query=tag:정리\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#정리\">#정리</a> <br>\n<br>클래스 인터페이스\n<br>명령어(사용자 질의 수)\n<br>데이터 파일\n<br>출력 보고서\n<br>흭공개운유<br>\n<br>네트워크 변화에 신속히 대처할 수 있다.\n<br>거리 벡터 라우팅 프로토콜 이라고 한다.\n<br>멀티캐스팅을 지원한다.\n<br>최단 경로 탐색에 다익스트라 알고리즘을 사용한다.\n<br>\n<br>클래스 설계서\n<br>통합시험 결과서\n<br>프로그램 코드\n<br>사용자 요구사항 정의서\n<br>\n<br>암호화 키와 복호화 키가 동일한 암호화 알고리즘을 뜻한다.\n<br>\n<br>COCOMO\n<br>Putnam\n<br>Function-Point\n<br>PERT\n<br>\n<br>비교적 실행속도 빠르기 때문에, 다양한 암호의 핵심 함수로 사용될 수 있다.\n<br>키 교환을 필요로 하기 때문에, 키를 교환하는 중 탈취가 될 가능성이 있다.\n<br>\n<br>자신만이 보관하는 비밀키를 이용하여 인증, 전자서명 등에 적용이 가능하다.\n<br>- 캡슐화를 통해 모듈화를 강화하고, 설계 및 구현의 변경에 따른 영향을 최소화 함으로써 품질을 향상시킨다.\n<br>- 재사용 가능한 모듈들을 제공함으로써 예산을 절감한다.\n<br>- 다형성을 통한 인터페이스 확장이 가능하여 다양한 형태와 기능을 가진 애플리케이션 개발이 가능하다.\n<br>- 개발자가 관리하고 통제해야 하는 객체들의 제어를 프레임워크에 넘김으로써 생상선을 향상시킴\n<br>\n<br>벨만-포드 알고리즘 사용\n<br>RIP프로토콜 ( 최대 홉 개수 15개 )\n<br>인접 라우터와 주기적으로 정보 교환\n<br>\n<br>다익스트라 알고리즘 사용\n<br>OSPF프로토콜 ( 최대 홉 개수 제한 없음 )\n<br>최단 경로, 최소 지연, 최대 처리량\n<br><a data-href=\"🥇 정보처리 기사 실기 키워드\" href=\"http://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥇 정보처리 기사 실기 키워드</a>","aliases":[],"tags":["#정보처리기사","#필기","#정리"],"headers":[{"heading":"🥈 필기 5과목 - 정보시스템 구축관리","level":1,"id":"🥈 필기 5과목 - 정보시스템 구축관리"},{"heading":"침입탐지 시스템(IDS : Intrusion Detection System)에 대한 설명","level":1,"id":"침입탐지_시스템(IDS__Intrusion_Detection_System)에_대한_설명"},{"heading":"이상탐지(Anomaly Detection)기법","level":3,"id":"이상탐지(Anomaly_Detection)기법"},{"heading":"- Behavior, Statistical Detection으로 불리며, 평균적 시스템의 상태 기준으로 비정상적인 행위나 자원의 사용이 감지되면 이를 알려줌","level":4,"id":"-_Behavior,_Statistical_Detection으로_불리며,_평균적_시스템의_상태_기준으로_==비정상적인_행위나_자원의_사용이_감지되면_이를_알려줌=="},{"heading":"- 잘 알려지지 않은 공격 탐지에 적합. 기존 패턴과 급격하게 다른 패턴을 발견하면 침입으로 판단","level":4,"id":"-_잘_알려지지_않은_공격_탐지에_적합._기존_패턴과_급격하게_다른_패턴을_발견하면_침입으로_판단"},{"heading":"오용탐지(Misuse Detection)기법","level":3,"id":"오용탐지(Misuse_Detection)기법"},{"heading":"- Signature Base나 Knowledge Base로 불리며, 미리 입력해둔 공격 패턴이 감지되면 이를 알려줌","level":4,"id":"-_Signature_Base나_Knowledge_Base로_불리며,_==미리_입력해둔_공격_패턴이_감지되면_이를_알려줌=="},{"heading":"- 잘 알려진 시스템의 취약점을 공격하는 패턴의 침입을 탐지 (새로운 패턴의 공격을 막기 어려움)","level":4,"id":"-_잘_알려진_시스템의_취약점을_공격하는_패턴의_침입을_탐지_(새로운_패턴의_공격을_막기_어려움)"},{"heading":"정보 시스템에서 접근통제 방법에 대한 설명","level":1,"id":"정보_시스템에서_접근통제_방법에_대한_설명"},{"heading":"강제접근 통제(MAC) 맥->등급","level":3,"id":"강제접근_통제(MAC)_==맥->등급=="},{"heading":"- 주체와 객체의 등급을 비교하여 접근 권한을 부여하는 방식","level":4,"id":"-_주체와_객체의_**등급을_비교**하여_접근_권한을_부여하는_방식"},{"heading":"임의접근 통제(DAC) 닥 -> 신원","level":3,"id":"임의접근_통제(DAC)_==닥_->_신원=="},{"heading":"- 접근하는 사용자의 신원에 따라 접근 권한을 부여하는 방식","level":4,"id":"-_접근하는_사용자의_**신원에_따라**_접근_권한을_부여하는_방식"},{"heading":"역할기반접근 통제(RBAC)","level":3,"id":"역할기반접근_통제(RBAC)"},{"heading":"- 직무나 직책과 같이 개인의역할에 따라 접근 권한을 부여하는 접근 정책","level":4,"id":"-_직무나_직책과_같이_*개인의역할*에_따라_접근_권한을_부여하는_접근_정책"},{"heading":"사용자계정 컨트롤(UAC)","level":3,"id":"사용자계정_컨트롤(UAC)"},{"heading":"- 프로그램에서 관리자 수준의 권한이 필요한 작업을 수행할 때 사용자에게 알려서 제어할 수 있도록 돕는기능","level":4,"id":"-_프로그램에서_관리자_수준의_권한이_필요한_작업을_수행할_때_*사용자에게_알려서*_제어할_수_있도록_돕는기능"},{"heading":"자료별 접근통제(Data-Label AC)","level":3,"id":"자료별_접근통제(Data-Label_AC)"},{"heading":"- 개별 행, 열에 대해 쓰기 권한, 읽기 권한을 가졌는지를 명확하게 결정하는 제어방식","level":4,"id":"-_개별_행,_열에_대해_쓰기_권한,_읽기_권한을_가졌는지를_명확하게_결정하는_제어방식"},{"heading":"정보시스템에 대한 설명","level":1,"id":"정보시스템에_대한_설명"},{"heading":"- 고가용성 솔루션(HACMP)","level":3,"id":"-_고가용성_솔루션(HACMP)"},{"heading":"1. AIX를 기반으로 한 IBM의 고가용성 솔루션.","level":4,"id":"1._AIX를_기반으로_한_IBM의_고가용성_솔루션."},{"heading":"2. Resource의 중복 또는 공유를 통해 Application의 보호를 가능하게 해줌","level":4,"id":"2._==Resource의_중복_또는_공유를_통해_Application의_보호==를_가능하게_해줌"},{"heading":"3. 같은 데이터를 공유하거나 동시에 access하는 노드들에서 여러개의 Application을 실행하게 해줌","level":4,"id":"3._같은_데이터를_공유하거나_동시에_access하는_노드들에서_여러개의_Application을_실행하게_해줌"},{"heading":"4. 두대 이상의 시스템을 하나의 클러스터로 묶어 한 시스템에서 장애가 발생할 경우 다른 시스템이 자원을 인수할 수 있도록하여 서비스의 중단을 최소화 할 수 있도록 도와주는 솔루션","level":4,"id":"4._==두대_이상의_시스템을_하나의_클러스터로_묶어==_한_시스템에서_장애가_발생할_경우_다른_시스템이_자원을_인수할_수_있도록하여_서비스의_중단을_최소화_할_수_있도록_도와주는_솔루션"},{"heading":"- 점대점 연결 방식(Point to Point Mode)","level":3,"id":"-_점대점_연결_방식(Point_to_Point_Mode)"},{"heading":"1. 네트워크에 있어 물리적으로는 중개 장치를 통과하지 않고 한 지점에서 다른 지점으로 직접가는 채널","level":4,"id":"1._네트워크에_있어_==물리적으로는_중개_장치를_통과하지_않고==_한_지점에서_다른_지점으로_직접가는_채널"},{"heading":"2. 두 스테이션간을 별도의회선을 사용하여 1대1로 연결","level":4,"id":"2._두_스테이션간을_**별도의회선**을_사용하여_1대1로_연결"},{"heading":"3. 전용회선이나 공중 전화 회선을 이용","level":4,"id":"3._==전용회선이나_공중_전화_회선을_이용=="},{"heading":"4. 회선 구성이 간당하고 대용량 전송에 유리","level":4,"id":"4._회선_구성이_간당하고_대용량_전송에_유리"},{"heading":"5. 별도의 회선과 포트에 따른 높은 설치 비용","level":4,"id":"5._별도의_회선과_포트에_따른_==높은_설치_비용=="},{"heading":"네트워크 공격 방법에 대한 설명","level":1,"id":"네트워크_공격_방법에_대한_설명"},{"heading":"Parsing","level":3,"id":"Parsing"},{"heading":"- 하나의 프로그램을 런타임 환경이 실제로 실행할 수 있는 내부 포맷으로 분석하고 변환하는것을 의미","level":4,"id":"-_하나의_프로그램을_런타임_환경이_실제로_실행할_수_있는_내부_포맷으로_분석하고_변환하는것을_의미"},{"heading":"LAN Tapping","level":3,"id":"LAN_Tapping"},{"heading":"- LAN신호를 직접 자신에게 끌어노는 방식의 공격","level":4,"id":"-_LAN신호를_직접_자신에게_끌어노는_방식의_공격"},{"heading":"Switch Jamming","level":3,"id":"Switch_Jamming"},{"heading":"- 스위치의 기능이 방해 받아 정상 동작을 하지 못해 스위치가 더미 허브처럼 작동하게 하는것","level":4,"id":"-_스위치의_기능이_방해_받아_정상_동작을_하지_못해_**스위치가_더미_허브처럼_작동**하게_하는것"},{"heading":"FTP Flooding","level":3,"id":"FTP_Flooding"},{"heading":"- TCP의 3way Handshake 취약점을 이용한 DoS공격으로, 다량의 SYN패킷을 보내 백로그큐를 가득 채우는 공격.","level":4,"id":"-_TCP의_3way_Handshake_취약점을_이용한_DoS공격으로,_**다량의_SYN패킷을_보내_백로그큐를**_가득_채우는_공격."},{"heading":"Smurfing","level":3,"id":"Smurfing"},{"heading":"- IP또는 ICMP의 특성을 악용하여 특정 사이트에 집중적으로데이터를 보내 네트워크 또는 시스템의 상태를 불능으로 만드는 공격.","level":4,"id":"-_IP또는_ICMP의_특성을_악용하여_특정_사이트에_**집중적으로데이터를_보내_네트워크_또는_시스템의_상태를_불능으로**_만드는_공격."},{"heading":"블루투스 공격과 설명","level":1,"id":"블루투스_공격과_설명"},{"heading":"블루버그","level":3,"id":"블루버그"},{"heading":"- 블루투스 장비 사이의 취약한 연결 관리를 이용한 공격","level":4,"id":"-_블루투스_장비_사이의_**취약한_연결_관리를_이용**한_공격"},{"heading":"블루스나프(스나핑)","level":3,"id":"블루스나프(스나핑)"},{"heading":"- 블루투스의 취약점을 활용하여 장비의 파일에 접근하는 공격으로 OPP를 사용하여 정보를 열람","level":4,"id":"-_블루투스의_취약점을_활용하여_장비의_파일에_접근하는_공격으로_**OPP를_사용하여_정보를_열람**"},{"heading":"블루재킹","level":3,"id":"블루재킹"},{"heading":"- 블루투스를 이용해 스팸처럼 명함을 익명으로 띄우는것","level":4,"id":"-_블루투스를_이용해_**스팸처럼_명함을_익명으로_띄우는것**"},{"heading":"간트차트(Gantt Chart)에 대한 설명","level":1,"id":"간트차트(Gantt_Chart)에_대한_설명"},{"heading":"1. 프로젝트를 이루는 소작업 별로 언제 시작되고, 언제 끝나야 하는지 한 눈에 볼 수 있도록 도와준다.","level":3,"id":"1._프로젝트를_이루는_소작업_별로_==언제_시작되고,_언제_끝나야_하는지_한_눈에_볼_수_있도록==_도와준다."},{"heading":"2. 자원 배치 계획에 유용하게 사용된다.","level":3,"id":"2._자원_배치_계획에_유용하게_사용된다."},{"heading":"3. CPM 네트워크로부터 만드는것이 가능하다.","level":3,"id":"3._CPM_네트워크로부터_만드는것이_가능하다."},{"heading":"4. 수평 막대의 길이는 각 작업에 필요한 기간을 나타낸다.","level":3,"id":"4._*수평_막대의_길이*는_각_*작업에_필요한_기간*을_나타낸다."},{"heading":"5. 작업 일정을 한눈에 볼 수 있도록 해주며, 막대그래프를 통해 표현한다.","level":3,"id":"5._*작업_일정*을_한눈에_볼_수_있도록_해주며,_*막대그래프를_통해_표현*한다."},{"heading":"Window파일 저장시스템 FAT / NTFS 에 대한 설명","level":1,"id":"Window파일_저장시스템_FAT_/_NTFS_에_대한_설명"},{"heading":"FAT","level":3,"id":"FAT"},{"heading":"- DOS때 부터 사용되던 윈도의 파일시스템","level":4,"id":"-_DOS때_부터_사용되던_윈도의_파일시스템"},{"heading":"- 저용량에 적합. 호환성이 좋음. 저장가능한 파일의 최대크기는 4GB","level":4,"id":"-_==저용량에_적합==._*호환성이_좋음*._저장가능한_파일의_최대크기는_*4GB*"},{"heading":"NTFS","level":3,"id":"NTFS"},{"heading":"- FAT시스템을 대체하기 위해 개발된 윈도우 파일 시스템","level":4,"id":"-_FAT시스템을_대체하기_위해_개발된_윈도우_파일_시스템"},{"heading":"- 사용자마다 다른 보안 적용 가능. 즉 보안이 FAT보다 뛰어남","level":4,"id":"-_사용자마다_다른_보안_적용_가능._즉_보안이_FAT보다_뛰어남"},{"heading":"- 대용량 저장 가능 및 안정성이 뛰어남","level":4,"id":"-_==대용량_저장_가능_및_안정성이_뛰어남=="},{"heading":"- 저용량 볼륨에서 속도 저하","level":4,"id":"-_==저용량_볼륨에서_속도_저하=="},{"heading":"리눅스에서 umask값을 구하는 방법","level":1,"id":"리눅스에서_umask값을_구하는_방법"},{"heading":"umask는 파일이나 디렉터리의 초기 권한을 설정할때 사용하는 값으로,","level":3,"id":"umask는_파일이나_디렉터리의_초기_권한을_설정할때_사용하는_값으로,"},{"heading":"파일의 경우 666에서 umask값을 뺀 값이다.","level":3,"id":"파일의_경우_==666==에서_umask값을_뺀_값이다."},{"heading":"상향식 비용 산정 기법 중 LOC(원시 코드 라인 수) 기법에 필요한 항목 낙비기","level":1,"id":"상향식_비용_산정_기법_중_LOC(원시_코드_라인_수)_기법에_필요한_항목_==낙비기=="},{"heading":"1. 낙관치","level":3,"id":"1._낙관치"},{"heading":"2. 비관치","level":3,"id":"2._비관치"},{"heading":"3. 기대치","level":3,"id":"3._기대치"},{"heading":"소프트웨어 개발 방법론 중 테일러링(Tailoring)과 관련한 설명","level":1,"id":"소프트웨어_개발_방법론_중_==테일러링==(Tailoring)과_관련한_설명"},{"heading":"1. 프로젝트 상황 특성에 맞게 정의된 소프트웨어 개발 방법론 절차, 사용기법 등을 수정 및 보완하는 작업","level":3,"id":"1._*프로젝트_상황_특성에_맞게*_정의된_소프트웨어_개발_방법론_절차,_사용기법_등을_*수정_및_보완하는_작업*"},{"heading":"2. 관리 측면에서 목적 중 하나는, 최단기간에 안정적인 프로젝트를 진행하기 위한 사전 위험을 식별하고 제거하는 것.","level":3,"id":"2._관리_측면에서_목적_중_하나는,_*최단기간에_안정적인*_프로젝트를_진행하기_위한_사전_위험을_식별하고_제거하는_것."},{"heading":"3. 기술적 측면에서 목적 중 하나는, 프로젝트에 최적화된 기술 요소를 도입하여 프로젝트 특성에 맞는 최적의 기법과 도구를 사용하는것.","level":3,"id":"3._기술적_측면에서_목적_중_하나는,_프로젝트에_최적화된_기술_요소를_도입하여_프로젝트_특성에_맞는_최적의_기법과_도구를_사용하는것."},{"heading":"CMM(Capability Maturity Model) 의 레벨 초관정정최","level":1,"id":"CMM(Capability_Maturity_Model)_의_레벨_==초관정정최=="},{"heading":"- 초기","level":3,"id":"-_초기"},{"heading":"- 관리","level":3,"id":"-_관리"},{"heading":"- 정의","level":3,"id":"-_정의"},{"heading":"- 정량적 관리","level":3,"id":"-_정량적_관리"},{"heading":"- 최적화","level":3,"id":"-_최적화"},{"heading":"PICONET 이란?","level":1,"id":"PICONET_이란?"},{"heading":"- 여러 개의 독립된 통신장치가 UWB(Ultra Wide Band)기술 또는 블루투스 기술을 사용하여 통신망을 형성하는 무선 네트워크 기술","level":3,"id":"-_여러_개의_*독립된_통신장치*가_UWB(Ultra_Wide_Band)기술_또는_블루투스_기술을_사용하여_*통신망을_형성하는_무선_네트워크_기술*"},{"heading":"기능점수(Functional Point)모형에서 비용산정에 이용되는 요소가 아닌것은?","level":1,"id":"기능점수(Functional_Point)모형에서_비용산정에_이용되는_요소가_아닌것은?"},{"heading":"기능점수(FP)모형의 비용산정 요인에는 클래스 인터페이스가 아닌, 필요한 외부 루틴과의 인터페이스 이다.","level":4,"id":"기능점수(FP)모형의_비용산정_요인에는_==클래스_인터페이스가_아닌,_필요한_외부_루틴과의_인터페이스==_이다."},{"heading":"Mesh Network 란?","level":1,"id":"Mesh_Network_란?"},{"heading":"기존 무선 랜의 한계 극복을 위해 등장","level":4,"id":"*기존_무선_랜의_한계_극복*을_위해_등장"},{"heading":"대규모 디바이스의 네트워크 생성에 최적화 된 차세대 이동통신 네트워크","level":4,"id":"*대규모_디바이스*의_네트워크_생성에_최적화_된_*차세대_이동통신_네트워크*"},{"heading":"RIP(Routing Information Protocol)에 대한 설명","level":1,"id":"RIP(Routing_Information_Protocol)에_대한_설명"},{"heading":"1. 거리 벡터 라우팅 프로토콜 이라고도 한다.","level":3,"id":"1._*거리_벡터_라우팅*_프로토콜_이라고도_한다."},{"heading":"2. 소규모 네트워크 환경에 적합하다.","level":3,"id":"2._*소규모*_네트워크_환경에_적합하다."},{"heading":"3. 최대 홉 카운트를 15 이하로 한정한다.","level":3,"id":"3._최대_홉_카운트를_*15_이하*로_한정한다."},{"heading":"4. 최단경로 탐색에 벨만-포드 알고리즘을 사용한다.","level":3,"id":"4._최단경로_탐색에_*벨만-포드*_알고리즘을_사용한다."},{"heading":"나선형 모델의 4가지 주요 활동 계위공고","level":1,"id":"나선형_모델의_4가지_주요_활동_==계위공고=="},{"heading":"1. 계획수림","level":3,"id":"1._계획수림"},{"heading":"2. 위험 분석","level":3,"id":"2._위험_분석"},{"heading":"3. 공학적 개발","level":3,"id":"3._공학적_개발"},{"heading":"4. 고객 평가","level":3,"id":"4._고객_평가"},{"heading":"위 4항목을 순서대로 반복하여 수행한다.","level":4,"id":"위_4항목을_순서대로_반복하여_수행한다."},{"heading":"CMM(Capability Maturity Model)모델의 레벨","level":1,"id":"CMM(Capability_Maturity_Model)모델의_레벨"},{"heading":"1. 초기","level":2,"id":"1._초기"},{"heading":"2. 관리","level":2,"id":"2._관리"},{"heading":"3. 정의","level":2,"id":"3._정의"},{"heading":"4. 정량적 관리","level":2,"id":"4._정량적_관리"},{"heading":"5. 최적화","level":2,"id":"5._최적화"},{"heading":"공개키 암호화 방식에 대한 설명 공개 -> 비대칭","level":1,"id":"공개키_암호화_방식에_대한_설명_`공개_->_비대칭`"},{"heading":"1. 공개키로 암호화된 메세지는, 비밀키를 사용해 복호화 한다.","level":3,"id":"1._*공개키*로_암호화된_메세지는,_*비밀키*를_사용해_복호화_한다."},{"heading":"2. 비대칭 암호기법 이라고도 한다.","level":3,"id":"2._*비대칭*_암호기법_이라고도_한다."},{"heading":"3. 대표적인 기법은 RSA기법이 있다.","level":3,"id":"3._대표적인_기법은_*RSA*기법이_있다."},{"heading":"4. 키 분배가 용이하고, 관리해야 할 키 개수가 적다.","level":3,"id":"4._키_분배가_용이하고,_관리해야_할_키_개수가_적다."},{"heading":"5. 공개키 암호화 알고리즘은 소인수 분해나, 이산대수 등을 사용한다.","level":3,"id":"5._공개키_암호화_알고리즘은_*소인수_분해*나,_*이산대수*_등을_사용한다."},{"heading":"XSS - 크로스사이트 스크립팅 이란?","level":1,"id":"XSS_-_크로스사이트_스크립팅_이란?"},{"heading":"- 웹페이지에 악의적인 스크립트를 포함시켜 사용자 측에서 실행되게 유도함으로써, 정보유출 등의 공격을 유발할 수 있는 취약점","level":2,"id":"-_`웹페이지에_악의적인_스크립트를_포함`시켜_사용자_측에서_실행되게_유도함으로써,_정보유출_등의_공격을_유발할_수_있는_취약점"},{"heading":"SSH(Seccure Shell)에 대한 설명","level":1,"id":"SSH(Seccure_Shell)에_대한_설명"},{"heading":"1. ssh의 기본 네트워크 포트는 22번을 사용한다.","level":3,"id":"1._ssh의_기본_네트워크_포트는_*22번*을_사용한다."},{"heading":"2. 전송되는 데이터는 암호화 된다.","level":3,"id":"2._전송되는_데이터는_암호화_된다."},{"heading":"3. 키를 통한 인증은 클라이언트의 공개키를 서버에 등록해야한다.","level":3,"id":"3._키를_통한_인증은_클라이언트의_*공개키를_서버에_등록*해야한다."},{"heading":"4. 서로 연결되어 있는 컴퓨터 간 원격 명령 실행이나 셀 서비스 등을 수행한다.","level":3,"id":"4._서로_연결되어_있는_컴퓨터_간_원격_명령_실행이나_셀_서비스_등을_수행한다."},{"heading":"필사 오류(Transcription Error)란?","level":1,"id":"필사_오류(Transcription_Error)란?"},{"heading":"임의의 한 자리를 잘못 기입해서 발생하는 오류.","level":2,"id":"임의의_한_자리를_잘못_기입해서_발생하는_오류."},{"heading":"ex) 123456을 123476으로 잘못 기입","level":5,"id":"ex)_`123456`을_`123476`으로_잘못_기입"},{"heading":"N-Screen(엔스크린)이란?","level":1,"id":"N-Screen(엔스크린)이란?"},{"heading":"PC, TV, 휴대폰에서 원하는 콘텐츠를 끊김없이 자유롭게 이용할 수 있는 서비스이다.","level":2,"id":"PC,_TV,_휴대폰에서_원하는_콘텐츠를_끊김없이_자유롭게_이용할_수_있는_서비스이다."},{"heading":"ISO 12207 표준의 기본 생명주기의 주요 프로세스","level":1,"id":"ISO_12207_표준의_기본_생명주기의_주요_프로세스"},{"heading":"1. 획득 프로세스","level":3,"id":"1._획득_프로세스"},{"heading":"2. 공급 프로세스","level":3,"id":"2._공급_프로세스"},{"heading":"3. 개발 프로세스","level":3,"id":"3._개발_프로세스"},{"heading":"4. 운영 프로세스","level":3,"id":"4._운영_프로세스"},{"heading":"5. 유지보수 프로세스","level":3,"id":"5._유지보수_프로세스"},{"heading":"라우팅 프로토콜인 OSPF(Open Shortest Path First)에 대한 설명 중 옳지 않은것?","level":1,"id":"라우팅_프로토콜인_OSPF(Open_Shortest_Path_First)에_대한_설명_중_옳지_않은것?"},{"heading":"거리벡터 라우팅 프로토콜은 RIP(Routing Information Protocol)이다.","level":4,"id":"거리벡터_라우팅_프로토콜은_RIP(Routing_Information_Protocol)이다."},{"heading":"CBD(Component Based Development) SW개발 표준 산출물 중 분석 단계에 해당하는것?","level":1,"id":"CBD(Component_Based_Development)_SW개발_표준_산출물_중_분석_단계에_해당하는것?"},{"heading":"CBD(컴포넌트 기반) SW개발 표준 산출물 중 분석단계에 해당하는 것은 요구사항 정의서이다.","level":4,"id":"CBD(컴포넌트_기반)_SW개발_표준_산출물_중_분석단계에_해당하는_것은_요구사항_정의서이다."},{"heading":"라우터란?","level":1,"id":"==라우터==란?"},{"heading":"서로 다른 네트워크 대역에 있는 호스트를 상호간에 통신할 수 있도록 해주는 네트워크 장비","level":2,"id":"서로_다른_네트워크_대역에_있는_호스트를_상호간에_통신할_수_있도록_해주는_네트워크_장비"},{"heading":"개인키(대칭키) 알고리즘, 블록암호화 방식이라고도 한다.","level":1,"id":"개인키(대칭키)_알고리즘,_블록암호화_방식이라고도_한다."},{"heading":"1. DES","level":3,"id":"1._DES"},{"heading":"2. SEED","level":3,"id":"2._SEED"},{"heading":"3. AES - DES의 보안 문제 해결을 위해 NIST에서 개발한 개인키 암호화 알고리즘","level":3,"id":"3._AES_-_*DES의_보안_문제_해결을_위해_NIST에서_개발한_개인키_암호화_알고리즘*"},{"heading":"4. ARIA","level":3,"id":"4._ARIA"},{"heading":"5. LSFSR","level":3,"id":"5._LSFSR"},{"heading":"6. RC4","level":3,"id":"6._RC4"},{"heading":"IPSec(IP Security)에 대한 설명","level":1,"id":"IPSec(IP_Security)에_대한_설명"},{"heading":"1. 암호화와 복호화 모두 가능한 양방향 암호방식이다.","level":3,"id":"1._암호화와_복호화_모두_가능한_양방향_암호방식이다."},{"heading":"2. ESP는 발신자 인증, 데이터 무결성, 기밀성 모두를 보장한다.","level":3,"id":"2._ESP는_발신자_인증,_데이터_무결성,_기밀성_모두를_보장한다."},{"heading":"3. 운영모드는 Tunnel모드와 Transport모드로 분류된다.","level":3,"id":"3._운영모드는_Tunnel모드와_Transport모드로_분류된다."},{"heading":"4. AH는 발신자 호스트를 인증하고, IP패킷의 무결성을 보장한다.","level":3,"id":"4._AH는_발신자_호스트를_인증하고,_IP패킷의_무결성을_보장한다."},{"heading":"소인수 분해나, 이산대수 등 고유의 방법으로 키를 생성하는 암호화 방식?","level":1,"id":"소인수_분해나,_이산대수_등_고유의_방법으로_키를_생성하는_암호화_방식?"},{"heading":"- 공개키 암호화 방식","level":2,"id":"-_공개키_암호화_방식"},{"heading":"해쉬(Hash)기법에 대한 설명","level":1,"id":"해쉬(Hash)기법에_대한_설명"},{"heading":"1. 임의의 길이의 입력 데이터를 받아 고정된 길이의 해쉬값으로 변환한다.","level":3,"id":"1._임의의_길이의_입력_데이터를_받아_고정된_길이의_해쉬값으로_변환한다."},{"heading":"2. 대표적인 해쉬 알고리즘으로 HAVAL, SHA-1 등이 있다.","level":3,"id":"2._대표적인_해쉬_알고리즘으로_HAVAL,_SHA-1_등이_있다."},{"heading":"3. 해쉬 함수는 일방향 함수이다.","level":3,"id":"3._해쉬_함수는_일방향_함수이다."},{"heading":"소프트웨어 비용 추정 모델이 아닌것은?","level":1,"id":"소프트웨어_비용_추정_모델이_아닌것은?"},{"heading":"PERT는 프로젝트 일정 계획 및 관리에 사용되는 방법론이다.","level":5,"id":"PERT는_프로젝트_일정_계획_및_관리에_사용되는_방법론이다."},{"heading":"비용산정 기법 중 LOC기법이란?","level":1,"id":"비용산정_기법_중_==LOC==기법이란?"},{"heading":"- S/W 각 기능의 원시 코드 라인수의 비관치, 낙관치, 기대치를 측정하여 예측치를 구하고 이를 이용하여 비용을 산정하는 기법.","level":2,"id":"-_S/W_각_기능의_원시_코드_라인수의_비관치,_낙관치,_기대치를_측정하여_예측치를_구하고_이를_이용하여_비용을_산정하는_기법."},{"heading":"Salt(솔트)암호화 기법에 대한 설명","level":1,"id":"Salt(솔트)암호화_기법에_대한_설명"},{"heading":"- 암호 공격을 막기위해 똑같은 패스워드들이 다른 암호값으로 저장되도록 추가되는 값","level":2,"id":"-_암호_공격을_막기위해_똑같은_패스워드들이_다른_암호값으로_저장되도록_추가되는_값"},{"heading":"SSO(Single Sign On)이란?","level":1,"id":"==SSO==(Single_Sign_On)이란?"},{"heading":"- 시스템이 몇 대가 되어도 하나의 시스템에서 인증에 성공하면 다른 시스템에 대한 접근 권한도 얻은 시스템","level":2,"id":"-_시스템이_몇_대가_되어도_하나의_시스템에서_인증에_성공하면_다른_시스템에_대한_접근_권한도_얻은_시스템"},{"heading":"COCOMO 모형에 대한 설명","level":1,"id":"COCOMO_모형에_대한_설명"},{"heading":"1. 보햄이 제안한 것으로, 원시 프로그램의 규모인 LOC(원시 코드 라인 수)에 의한 비용산정 기법이다.","level":3,"id":"1._보햄이_제안한_것으로,_원시_프로그램의_규모인_LOC(원시_코드_라인_수)에_의한_비용산정_기법이다."},{"heading":"조직형(Organic Mode) : 중.소규모 소프트웨어. 5만 라인 이하","level":4,"id":"조직형(Organic_Mode)__중.소규모_소프트웨어._5만_라인_이하"},{"heading":"반 분리형(Semi-Detached Mode) : 트렌젝션처리 시스템, 운영체제 등. 30만 라인 이하","level":4,"id":"반_분리형(Semi-Detached_Mode)__트렌젝션처리_시스템,_운영체제_등._30만_라인_이하"},{"heading":"내장형(Embedded Mode) : 초대형 규모 트렌젝션 처리 시스템 / 미사일 유도 시스템. 30만 라인 이상","level":4,"id":"내장형(Embedded_Mode)__초대형_규모_트렌젝션_처리_시스템_/_미사일_유도_시스템._30만_라인_이상"},{"heading":"비대칭 암호화 방식 중, 소수를 활용한 암호화 알고리즘은?","level":1,"id":"비대칭_암호화_방식_중,_소수를_활용한_암호화_알고리즘은?"},{"heading":"- RSA(Rivest Shamir Adleman)","level":2,"id":"-_RSA(Rivest_Shamir_Adleman)"},{"heading":"암호화 알고리즘에 대한 설명","level":1,"id":"암호화_알고리즘에_대한_설명"},{"heading":"대칭 암호 알고리즘","level":2,"id":"대칭_암호_알고리즘"},{"heading":"비대칭 암호 알고리즘","level":2,"id":"비대칭_암호_알고리즘"},{"heading":"PaaS-TA 파스타 란?","level":1,"id":"PaaS-TA_파스타_란?"},{"heading":"- 국내 IT서비스 경쟁력 강화를 목표로 개발되었으며 인프라 제어 및 관리환경, 실행환경, 개발환경, 서비스환경, 운영환경으로 구성되어있는 개방형 클라우드 플랫폼","level":4,"id":"-_국내_IT서비스_경쟁력_강화를_목표로_개발되었으며_인프라_제어_및_관리환경,_실행환경,_개발환경,_서비스환경,_운영환경으로_구성되어있는_==개방형_클라우드_플랫폼=="},{"heading":"강제 접근통제(MAC : Mandatory Access Control) 이란?","level":1,"id":"강제_접근통제(MAC__Mandatory_Access_Control)_이란?"},{"heading":"- 정보시스템 내에서 어떤 주체가 특정 개체에 접근하려 할 떄 양쪽의 보안 레이블에 기초하여 높은 보안 수준을 요구하는 정보가 낮은 보안수준의 주체에게 노출되지 않도록 하는 접근 제어방법.","level":4,"id":"-_정보시스템_내에서_어떤_주체가_특정_개체에_접근하려_할_떄_양쪽의_보안_레이블에_기초하여_==높은_보안_수준을_요구하는_정보가_낮은_보안수준의_주체에게_노출되지_않도록==_하는_접근_제어방법."},{"heading":"소프트웨어 생명 주기 모델 중 V모델과 관련한 설명","level":1,"id":"소프트웨어_생명_주기_모델_중_V모델과_관련한_설명"},{"heading":"1. 요구사항 -> 분석 -> 설계 -> 구현 단계로 수행되며 각 단계를 테스트와 연결하여 표시한다.","level":3,"id":"1._==요구사항_->_분석_->_설계_->_구현==_단계로_수행되며_각_단계를_테스트와_연결하여_표시한다."},{"heading":"2. Perry에 의해 제안되었으며, 세부적인 테스트 과정으로 구성되어 신뢰도 높은 시스템을 개발하는데 효과적이다","level":3,"id":"2._Perry에_의해_제안되었으며,_세부적인_테스트_과정으로_구성되어_신뢰도_높은_시스템을_개발하는데_효과적이다"},{"heading":"3. 개발 작업과 검증 작업 사이의 관계를 명호가히 들어내 놓은 폭포수 모델의 변형이라고 볼 수 있다.","level":3,"id":"3._개발_작업과_검증_작업_사이의_관계를_명호가히_들어내_놓은_폭포수_모델의_변형이라고_볼_수_있다."},{"heading":"4. 폭포수 모델이 산출물 중심이라면, V모델은 작업과 결과의 검증에 초점을 둔다.","level":3,"id":"4._폭포수_모델이_산출물_중심이라면,_V모델은_작업과_결과의_검증에_초점을_둔다."},{"heading":"웹 크롤링을 지원하는 가장 대표적인 프레임워크는?","level":1,"id":"웹_크롤링을_지원하는_가장_대표적인_프레임워크는?"},{"heading":"- 파이썬의 Scrapy(스크래피)","level":2,"id":"-_파이썬의_Scrapy(스크래피)"},{"heading":"DES(암호화 알고리즘)의 암호화 블록 단위","level":1,"id":"DES(암호화_알고리즘)의_암호화_블록_단위"},{"heading":"- 64비트","level":2,"id":"-_64비트"},{"heading":"DPI(Deep Packet Inspection)이란?","level":1,"id":"DPI(Deep_Packet_Inspection)이란?"},{"heading":"- OSI 7 Layer전 계층의 프로토콜과 패킷 내부의 콘텐츠를 파악하여 침입시도, 해킹등을 탐지하고 트래픽을 조정하기 위한 패킷 분석 기술","level":4,"id":"-_OSI_7_Layer전_계층의_프로토콜과_패킷_내부의_콘텐츠를_파악하여_침입시도,_해킹등을_탐지하고_트래픽을_조정하기_위한_패킷_분석_기술"},{"heading":"테일러링(Tailoring)이란?","level":1,"id":"테일러링(Tailoring)이란?"},{"heading":"- 프로젝트에 최적화 된 개발 방법론을 적용하기 위해 절차, 산출물 등을 적절히 변경하는 활동.","level":5,"id":"-_프로젝트에_최적화_된_개발_방법론을_적용하기_위해_절차,_산출물_등을_적절히_변경하는_활동."},{"heading":"- 프로젝트 상황 및 특성에 맞추어 기존의 방법론, 프로세스 등을 수정하는 것.","level":4,"id":"-_프로젝트_상황_및_특성에_맞추어_기존의_방법론,_프로세스_등을_수정하는_것."},{"heading":"- 예상되는 변화를 충분히 고려하여 진행 필요.","level":4,"id":"-_예상되는_변화를_충분히_고려하여_진행_필요."},{"heading":"CASE(Computer Aided Software Engineering)이란?","level":1,"id":"CASE(Computer_Aided_Software_Engineering)이란?"},{"heading":"- 소프트웨어 개발 과정에서 사용되는 요구 분석, 설계, 구현, 검사 및 디버깅 과정 전체 또는 일부를 컴퓨터와 전용소프트웨어 도구를 사용하여 자동화 하는 것이다.","level":4,"id":"-_소프트웨어_개발_과정에서_사용되는_요구_분석,_설계,_구현,_검사_및_디버깅_과정_전체_또는_일부를_컴퓨터와_전용소프트웨어_도구를_사용하여_자동화_하는_것이다."},{"heading":"1. 객체지향 시스템, 구조적 시스템 등 다양한 시스템에서 활용되는 자동화 도구이다.","level":3,"id":"1._객체지향_시스템,_구조적_시스템_등_다양한_시스템에서_활용되는_자동화_도구이다."},{"heading":"2. 소프트웨어,하드웨어,DB,테스트 등을 통합하여 소프트웨어를 개발하는 환경을 조성한다.","level":3,"id":"2._소프트웨어,하드웨어,DB,테스트_등을_통합하여_소프트웨어를_개발하는_환경을_조성한다."},{"heading":"3. 소프트웨어 생명주기의 전체단계를 연결해 주고 자동화 해주는 통합된 도구를 제공한다.","level":3,"id":"3._소프트웨어_생명주기의_전체단계를_연결해_주고_자동화_해주는_통합된_도구를_제공한다."},{"heading":"4. 소프트웨어 개발 도구와 방법론이 결합된 것이다.","level":3,"id":"4._소프트웨어_개발_도구와_방법론이_결합된_것이다."},{"heading":"그래픽 또한 지원한다.","level":5,"id":"그래픽_또한_지원한다."},{"heading":"Putnam모형이란?","level":1,"id":"Putnam모형이란?"},{"heading":"- 소프트웨어 생명 주기의 전 과정 동안에 사용될 노력의 분포를 가정해주는 모형이다.","level":4,"id":"-_소프트웨어_생명_주기의_전_과정_동안에_사용될_==노력의_분포를_가정==해주는_모형이다."},{"heading":"간트 차트란?","level":1,"id":"간트_차트란?"},{"heading":"- 프로젝트의 각 작업들이 언제 시작하고 언제 종료되는지에 대한 작업 일정을 막대 도표를 이용하여 표시하는 프로젝트 일정표이다.","level":4,"id":"-_프로젝트의_각_작업들이_언제_시작하고_언제_종료되는지에_대한_작업_일정을_막대_도표를_이용하여_표시하는_프로젝트_일정표이다."},{"heading":"1. 시간선(Time-Line) 차트라고도 한다.","level":3,"id":"1._시간선(Time-Line)_차트라고도_한다."},{"heading":"2. 작업경로는 표시할 수 없으며, 계획의 변화에 대한 적응성이 약하다.","level":3,"id":"2._작업경로는_표시할_수_없으며,_계획의_변화에_대한_적응성이_약하다."},{"heading":"3. 주관적 수치에 기울어지기 쉽다.","level":3,"id":"3._주관적_수치에_기울어지기_쉽다."},{"heading":"프레임워크의 특성?","level":1,"id":"프레임워크의_특성?"},{"heading":"1. 모듈화","level":3,"id":"1._모듈화"},{"heading":"2. 재사용성","level":3,"id":"2._재사용성"},{"heading":"3. 확장성","level":3,"id":"3._확장성"},{"heading":"4. 제어의 역전","level":3,"id":"4._제어의_역전"},{"heading":"CSMA/CA 란 무엇인가","level":1,"id":"CSMA/CA_란_무엇인가"},{"heading":"- 무선 랜에서 데이터 전송 시 매체가 비어있음을 확인한 뒤 충돌을 피하기 위해 일정한 시간을 기다린 후 데이터를 전송하는 방법","level":2,"id":"-_무선_랜에서_데이터_전송_시_==매체가_비어있음을_확인한_뒤==_충돌을_피하기_위해_==일정한_시간을_기다린_후==_데이터를_전송하는_방법"},{"heading":"- IEEE 802.3 LAN 에서 사용되는 전송 매체 접속 제어방식이다.","level":2,"id":"-_==IEEE_802.3_LAN==_에서_사용되는_전송_매체_접속_제어방식이다."},{"heading":"SOA(Service Oriented Architecture)서비스지향아키텍처의 계층","level":1,"id":"SOA(Service_Oriented_Architecture)서비스지향아키텍처의_계층"},{"heading":"1. 표현 계층","level":3,"id":"1._표현_계층"},{"heading":"2. 프로세스 계층","level":3,"id":"2._프로세스_계층"},{"heading":"3. 서비스 계층","level":3,"id":"3._서비스_계층"},{"heading":"4. 비즈니스 계층","level":3,"id":"4._비즈니스_계층"},{"heading":"5. 영속 계층","level":3,"id":"5._영속_계층"},{"heading":"라우팅 프로토콜 종류 및 설명","level":1,"id":"라우팅_프로토콜_종류_및_설명"},{"heading":"1. 거리 벡터 라우팅 프로토콜(RIP) - IGP에 속함,내부게이트웨이","level":2,"id":"1._거리_벡터_라우팅_프로토콜(RIP)_-_==IGP에_속함==,==내부게이트웨이=="},{"heading":"2. 링크 상태 라우팅 프로토콜(OSPF)","level":2,"id":"2._링크_상태_라우팅_프로토콜(OSPF)"},{"heading":"SPICE란?","level":1,"id":"SPICE란?"},{"heading":"- ISO/IEC 15504 라고도 한다.","level":3,"id":"-_ISO/IEC_15504_라고도_한다."},{"heading":"- 소프트웨어 품질 및 생산성 향상을 위해 소프트웨어 프로세스를 평가하고 개서하는 국체 표준이다.","level":3,"id":"-_소프트웨어_품질_및_생산성_향상을_위해_소프트웨어_==프로세스를_평가==하고_개서하는_국체_표준이다."},{"heading":"- 기관에서 지정한 요구조건의 만족여부를 개발 조직이 스스로 평가한다.","level":3,"id":"-_기관에서_지정한_요구조건의_만족여부를_개발_조직이_==스스로_평가==한다."},{"heading":"수행 능력 수준 불수관확예최","level":2,"id":"수행_능력_수준_`불수관확예최`"},{"heading":"불완전(0) -> 수행(1) -> 관리(2) -> 확립(3) -> 예측(4) -> 최적화(5)","level":6,"id":"불완전(0)_->_수행(1)_->_관리(2)_->_확립(3)_->_예측(4)_->_최적화(5)"},{"heading":"TCP Wrapper란?","level":1,"id":"TCP_Wrapper란?"},{"heading":"- 어떤 외부 컴퓨터가 접속되면 접속 인가 여부를 점검해서 인가된 경우에는 접속이 허용되고, 그 반대 경우에는 거부할 수 있는 접근제어 유틸리티 이다.","level":4,"id":"-_어떤_*외부_컴퓨터*가_접속되면_**접속_인가_여부를_점검**해서_인가된_경우에는_접속이_허용되고,_그_반대_경우에는_거부할_수_있는_**접근제어_유틸리티**_이다."},{"heading":"세션 하이재킹을 탐지하는 방법","level":1,"id":"세션_하이재킹을_탐지하는_방법"},{"heading":"1. 비동기화 상태 탐지","level":3,"id":"1._비동기화_상태_탐지"},{"heading":"2. ACK Storm 탐지","level":3,"id":"2._ACK_Storm_탐지"},{"heading":"3. 패킷의 유실과 재전송 증가 탐지","level":3,"id":"3._패킷의_유실과_재전송_증가_탐지"},{"heading":"4. 예상치 못한 접속의 리셋 탐지","level":3,"id":"4._예상치_못한_접속의_리셋_탐지"},{"heading":"네트워크 장비에 대한 설명","level":1,"id":"네트워크_장비에_대한_설명"},{"heading":"브라우터(Brouter)","level":2,"id":"브라우터(Brouter)"},{"heading":"- 브릿지와 라우터의 기능으 모두 갖추고 있는 네트워크 장비이다.","level":4,"id":"-_브릿지와_라우터의_기능으_모두_갖추고_있는_네트워크_장비이다."},{"heading":"리피터","level":2,"id":"리피터"},{"heading":"- 전송되는 신호가 전송 선로의 특성 및 외부 충격 등의 요인으로 왜곡되거나 약해질 경우 원래의 신호 형태로 재생하여 다시 전송하는 역할.","level":4,"id":"-_전송되는_신호가_전송_선로의_특성_및_외부_충격_등의_요인으로_*왜곡되거나_약해질_경우_원래의_신호_형태로_재생하여_다시_전송*하는_역할."},{"heading":"브리지","level":2,"id":"브리지"},{"heading":"- LAN과 LAN을 연결하거나, LAN안에서의 컴퓨터 그룹을 연결하는 기능을 수행한다.","level":4,"id":"-_LAN과_LAN을_연결하거나,_LAN안에서의_컴퓨터_그룹을_연결하는_기능을_수행한다."},{"heading":"- 데이터링크 계층 중 MAC계층에서 사용된다.","level":4,"id":"-_*데이터링크_계층*_중_*MAC계층에서_사용된다*."},{"heading":"스위치","level":2,"id":"스위치"},{"heading":"- LAN과 LAN을 연결하여 더 큰 LAN을 만드드는 장치","level":4,"id":"-_LAN과_LAN을_연결하여_더_큰_LAN을_만드드는_장치"},{"heading":"- OSI 7계층 중 데이터링크 계층(2)에서 사용된다.","level":4,"id":"-_OSI_7계층_중_*데이터링크_계층(2)에서_사용된다.*"},{"heading":"라우터","level":2,"id":"라우터"},{"heading":"- LAN과 LAN의 연결 기능에 데이터 전송의 최적경로를 선택할 수 있는 기능을 추가한것","level":4,"id":"-_LAN과_LAN의_연결_기능에_데이터_전송의_*최적경로를_선택할_수_있는_기능*을_추가한것"},{"heading":"- 서로 다른 LAN이나 LAN과 WAN의 연결도 수행한다","level":4,"id":"-_서로_다른_LAN이나_LAN과_WAN의_연결도_수행한다"},{"heading":"- OSI 7계층의 네트워크 계층(3)에 속한다.","level":4,"id":"-_OSI_7계층의_*네트워크_계층(3)에_속한다.*"},{"heading":"루프(폐회로)를 형성하지 않으면서 연결을 설정할 수 있는 알고리즘","level":1,"id":"루프(폐회로)를_형성하지_않으면서_연결을_설정할_수_있는_알고리즘"},{"heading":"- STA(Spanning Tree Algorithm)","level":2,"id":"-_STA(Spanning_Tree_Algorithm)"},{"heading":"SAN(Storage Area Network)란?","level":1,"id":"SAN(**Storage**_Area_Network)란?"},{"heading":"1. 네트워크상에 광채널 스위치의 이점인 고속 전송과 장거리 연결 및 멀티 프로토콜 기능을 활용","level":3,"id":"1._네트워크상에_광채널_스위치의_이점인_*고속_전송*과_**장거리_연결_및_멀티_프로토콜_기능을_활용**"},{"heading":"2. 각기 다른 OS를 가진 여러 기종들이 네트워크상에서 동일 저장장치의 데이터를 공유하게 함으로써, 여러개의 저장장치나 백업장치를 단일화시킨 시스템","level":3,"id":"2._**각기_다른_OS를_가진_여러_기종**들이_네트워크상에서_동일_저장장치의_**데이터를_공유**하게_함으로써,_**여러개의_저장장치나_백업장치를_단일화**시킨_시스템"},{"heading":"nmap 이란??","level":1,"id":"nmap_이란??"},{"heading":"- 서버에 열린 포트 정보를 스캐닝해서 보안 취약점을 찾는데 사용하는 도구이다.","level":2,"id":"-_서버에_열린_포트_정보를_스캐닝해서_보안_취약점을_찾는데_사용하는_도구이다."},{"heading":"Bell-LaPadula Model(벨-라파듈라 모델)에 대한 설명","level":1,"id":"Bell-LaPadula_Model(벨-라파듈라_모델)에_대한_설명"},{"heading":"1. 군대의 보안레벨처럼 정보의 기밀성에 따라 상하 관계가 구분된 정보를 보호하기 위해 사용","level":3,"id":"1._군대의_보안레벨처럼_정보의_기밀성에_따라_상하_관계가_구분된_정보를_보호하기_위해_사용"},{"heading":"2. 자신의 권한보다 낮은 보안 레벨 권한을 가진 경우에는 높은 보안 레벨의 문서를 읽을 수 없고, 자신보다 권한레벨이 낮은 문서만 읽읈 수 있다.","level":3,"id":"2._자신의_권한보다_낮은_보안_레벨_권한을_가진_경우에는_높은_보안_레벨의_문서를_읽을_수_없고,_자신보다_권한레벨이_낮은_문서만_읽읈_수_있다."},{"heading":"3. 자신의 권한보다 높은 보안 레벨의 문서에는 쓰기가 가능하지만, 보아레벨이 낮은 문서의 쓰기 권한은 제한한다.","level":3,"id":"3._자신의_권한보다_높은_보안_레벨의_문서에는_쓰기가_가능하지만,_보아레벨이_낮은_문서의_쓰기_권한은_제한한다."},{"heading":"Secure OS의 보안 기능","level":1,"id":"Secure_OS의_보안_기능"},{"heading":"1. 식별 및 인증","level":3,"id":"1._식별_및_인증"},{"heading":"2. 임의/강제적 접근 통제","level":3,"id":"2._임의/강제적_접근_통제"},{"heading":"3. 객체 재사용 보호","level":3,"id":"3._객체_재사용_보호"},{"heading":"4. 완전한 조정","level":3,"id":"4._완전한_조정"},{"heading":"5. 신뢰 경로","level":3,"id":"5._신뢰_경로"},{"heading":"6. 감사 및 감사기록 축소","level":3,"id":"6._감사_및_감사기록_축소"}],"backlinks":[],"links":["?query=tag:%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC","?query=tag:%ED%95%84%EA%B8%B0","?query=tag:%EC%A0%95%EB%A6%AC","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#🥈 필기 5과목 - 정보시스템 구축관리","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#침입탐지_시스템(IDS__Intrusion_Detection_System)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#이상탐지(Anomaly_Detection)기법","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_Behavior,_Statistical_Detection으로_불리며,_평균적_시스템의_상태_기준으로_==비정상적인_행위나_자원의_사용이_감지되면_이를_알려줌==","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_잘_알려지지_않은_공격_탐지에_적합._기존_패턴과_급격하게_다른_패턴을_발견하면_침입으로_판단","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#오용탐지(Misuse_Detection)기법","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_Signature_Base나_Knowledge_Base로_불리며,_==미리_입력해둔_공격_패턴이_감지되면_이를_알려줌==","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_잘_알려진_시스템의_취약점을_공격하는_패턴의_침입을_탐지_(새로운_패턴의_공격을_막기_어려움)","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#정보_시스템에서_접근통제_방법에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#강제접근_통제(MAC)_==맥->등급==","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_주체와_객체의_**등급을_비교**하여_접근_권한을_부여하는_방식","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#임의접근_통제(DAC)_==닥_->_신원==","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_접근하는_사용자의_**신원에_따라**_접근_권한을_부여하는_방식","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#역할기반접근_통제(RBAC)","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_직무나_직책과_같이_*개인의역할*에_따라_접근_권한을_부여하는_접근_정책","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#사용자계정_컨트롤(UAC)","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_프로그램에서_관리자_수준의_권한이_필요한_작업을_수행할_때_*사용자에게_알려서*_제어할_수_있도록_돕는기능","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#자료별_접근통제(Data-Label_AC)","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_개별_행,_열에_대해_쓰기_권한,_읽기_권한을_가졌는지를_명확하게_결정하는_제어방식","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#정보시스템에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_고가용성_솔루션(HACMP)","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._AIX를_기반으로_한_IBM의_고가용성_솔루션.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._==Resource의_중복_또는_공유를_통해_Application의_보호==를_가능하게_해줌","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._같은_데이터를_공유하거나_동시에_access하는_노드들에서_여러개의_Application을_실행하게_해줌","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._==두대_이상의_시스템을_하나의_클러스터로_묶어==_한_시스템에서_장애가_발생할_경우_다른_시스템이_자원을_인수할_수_있도록하여_서비스의_중단을_최소화_할_수_있도록_도와주는_솔루션","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_점대점_연결_방식(Point_to_Point_Mode)","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._네트워크에_있어_==물리적으로는_중개_장치를_통과하지_않고==_한_지점에서_다른_지점으로_직접가는_채널","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._두_스테이션간을_**별도의회선**을_사용하여_1대1로_연결","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._==전용회선이나_공중_전화_회선을_이용==","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._회선_구성이_간당하고_대용량_전송에_유리","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#5._별도의_회선과_포트에_따른_==높은_설치_비용==","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#네트워크_공격_방법에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#Parsing","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_하나의_프로그램을_런타임_환경이_실제로_실행할_수_있는_내부_포맷으로_분석하고_변환하는것을_의미","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#LAN_Tapping","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_LAN신호를_직접_자신에게_끌어노는_방식의_공격","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#Switch_Jamming","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_스위치의_기능이_방해_받아_정상_동작을_하지_못해_**스위치가_더미_허브처럼_작동**하게_하는것","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#FTP_Flooding","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_TCP의_3way_Handshake_취약점을_이용한_DoS공격으로,_**다량의_SYN패킷을_보내_백로그큐를**_가득_채우는_공격.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#Smurfing","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_IP또는_ICMP의_특성을_악용하여_특정_사이트에_**집중적으로데이터를_보내_네트워크_또는_시스템의_상태를_불능으로**_만드는_공격.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#블루투스_공격과_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#블루버그","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_블루투스_장비_사이의_**취약한_연결_관리를_이용**한_공격","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#블루스나프(스나핑)","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_블루투스의_취약점을_활용하여_장비의_파일에_접근하는_공격으로_**OPP를_사용하여_정보를_열람**","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#블루재킹","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_블루투스를_이용해_**스팸처럼_명함을_익명으로_띄우는것**","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#간트차트(Gantt_Chart)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._프로젝트를_이루는_소작업_별로_==언제_시작되고,_언제_끝나야_하는지_한_눈에_볼_수_있도록==_도와준다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._자원_배치_계획에_유용하게_사용된다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._CPM_네트워크로부터_만드는것이_가능하다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._*수평_막대의_길이*는_각_*작업에_필요한_기간*을_나타낸다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#5._*작업_일정*을_한눈에_볼_수_있도록_해주며,_*막대그래프를_통해_표현*한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#Window파일_저장시스템_FAT_/_NTFS_에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#FAT","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_DOS때_부터_사용되던_윈도의_파일시스템","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_==저용량에_적합==._*호환성이_좋음*._저장가능한_파일의_최대크기는_*4GB*","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#NTFS","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_FAT시스템을_대체하기_위해_개발된_윈도우_파일_시스템","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_사용자마다_다른_보안_적용_가능._즉_보안이_FAT보다_뛰어남","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_==대용량_저장_가능_및_안정성이_뛰어남==","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_==저용량_볼륨에서_속도_저하==","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#리눅스에서_umask값을_구하는_방법","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#umask는_파일이나_디렉터리의_초기_권한을_설정할때_사용하는_값으로,","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#파일의_경우_==666==에서_umask값을_뺀_값이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#상향식_비용_산정_기법_중_LOC(원시_코드_라인_수)_기법에_필요한_항목_==낙비기==","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._낙관치","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._비관치","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._기대치","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#소프트웨어_개발_방법론_중_==테일러링==(Tailoring)과_관련한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._*프로젝트_상황_특성에_맞게*_정의된_소프트웨어_개발_방법론_절차,_사용기법_등을_*수정_및_보완하는_작업*","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._관리_측면에서_목적_중_하나는,_*최단기간에_안정적인*_프로젝트를_진행하기_위한_사전_위험을_식별하고_제거하는_것.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._기술적_측면에서_목적_중_하나는,_프로젝트에_최적화된_기술_요소를_도입하여_프로젝트_특성에_맞는_최적의_기법과_도구를_사용하는것.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#CMM(Capability_Maturity_Model)_의_레벨_==초관정정최==","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_초기","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_관리","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_정의","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_정량적_관리","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_최적화","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#PICONET_이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_여러_개의_*독립된_통신장치*가_UWB(Ultra_Wide_Band)기술_또는_블루투스_기술을_사용하여_*통신망을_형성하는_무선_네트워크_기술*","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#기능점수(Functional_Point)모형에서_비용산정에_이용되는_요소가_아닌것은?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#기능점수(FP)모형의_비용산정_요인에는_==클래스_인터페이스가_아닌,_필요한_외부_루틴과의_인터페이스==_이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#Mesh_Network_란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#*기존_무선_랜의_한계_극복*을_위해_등장","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#*대규모_디바이스*의_네트워크_생성에_최적화_된_*차세대_이동통신_네트워크*","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#RIP(Routing_Information_Protocol)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._*거리_벡터_라우팅*_프로토콜_이라고도_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._*소규모*_네트워크_환경에_적합하다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._최대_홉_카운트를_*15_이하*로_한정한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._최단경로_탐색에_*벨만-포드*_알고리즘을_사용한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#나선형_모델의_4가지_주요_활동_==계위공고==","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._계획수림","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._위험_분석","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._공학적_개발","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._고객_평가","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#위_4항목을_순서대로_반복하여_수행한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#CMM(Capability_Maturity_Model)모델의_레벨","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._초기","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._관리","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._정의","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._정량적_관리","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#5._최적화","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#공개키_암호화_방식에_대한_설명_`공개_->_비대칭`","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._*공개키*로_암호화된_메세지는,_*비밀키*를_사용해_복호화_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._*비대칭*_암호기법_이라고도_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._대표적인_기법은_*RSA*기법이_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._키_분배가_용이하고,_관리해야_할_키_개수가_적다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#5._공개키_암호화_알고리즘은_*소인수_분해*나,_*이산대수*_등을_사용한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#XSS_-_크로스사이트_스크립팅_이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_`웹페이지에_악의적인_스크립트를_포함`시켜_사용자_측에서_실행되게_유도함으로써,_정보유출_등의_공격을_유발할_수_있는_취약점","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#SSH(Seccure_Shell)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._ssh의_기본_네트워크_포트는_*22번*을_사용한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._전송되는_데이터는_암호화_된다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._키를_통한_인증은_클라이언트의_*공개키를_서버에_등록*해야한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._서로_연결되어_있는_컴퓨터_간_원격_명령_실행이나_셀_서비스_등을_수행한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#필사_오류(Transcription_Error)란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#임의의_한_자리를_잘못_기입해서_발생하는_오류.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#ex)_`123456`을_`123476`으로_잘못_기입","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#N-Screen(엔스크린)이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#PC,_TV,_휴대폰에서_원하는_콘텐츠를_끊김없이_자유롭게_이용할_수_있는_서비스이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#ISO_12207_표준의_기본_생명주기의_주요_프로세스","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._획득_프로세스","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._공급_프로세스","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._개발_프로세스","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._운영_프로세스","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#5._유지보수_프로세스","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#라우팅_프로토콜인_OSPF(Open_Shortest_Path_First)에_대한_설명_중_옳지_않은것?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#거리벡터_라우팅_프로토콜은_RIP(Routing_Information_Protocol)이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#CBD(Component_Based_Development)_SW개발_표준_산출물_중_분석_단계에_해당하는것?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#CBD(컴포넌트_기반)_SW개발_표준_산출물_중_분석단계에_해당하는_것은_요구사항_정의서이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#==라우터==란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#서로_다른_네트워크_대역에_있는_호스트를_상호간에_통신할_수_있도록_해주는_네트워크_장비","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#개인키(대칭키)_알고리즘,_블록암호화_방식이라고도_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._DES","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._SEED","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._AES_-_*DES의_보안_문제_해결을_위해_NIST에서_개발한_개인키_암호화_알고리즘*","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._ARIA","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#5._LSFSR","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#6._RC4","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#IPSec(IP_Security)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._암호화와_복호화_모두_가능한_양방향_암호방식이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._ESP는_발신자_인증,_데이터_무결성,_기밀성_모두를_보장한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._운영모드는_Tunnel모드와_Transport모드로_분류된다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._AH는_발신자_호스트를_인증하고,_IP패킷의_무결성을_보장한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#소인수_분해나,_이산대수_등_고유의_방법으로_키를_생성하는_암호화_방식?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_공개키_암호화_방식","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#해쉬(Hash)기법에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._임의의_길이의_입력_데이터를_받아_고정된_길이의_해쉬값으로_변환한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._대표적인_해쉬_알고리즘으로_HAVAL,_SHA-1_등이_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._해쉬_함수는_일방향_함수이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#소프트웨어_비용_추정_모델이_아닌것은?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#PERT는_프로젝트_일정_계획_및_관리에_사용되는_방법론이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#비용산정_기법_중_==LOC==기법이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_S/W_각_기능의_원시_코드_라인수의_비관치,_낙관치,_기대치를_측정하여_예측치를_구하고_이를_이용하여_비용을_산정하는_기법.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#Salt(솔트)암호화_기법에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_암호_공격을_막기위해_똑같은_패스워드들이_다른_암호값으로_저장되도록_추가되는_값","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#==SSO==(Single_Sign_On)이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_시스템이_몇_대가_되어도_하나의_시스템에서_인증에_성공하면_다른_시스템에_대한_접근_권한도_얻은_시스템","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#COCOMO_모형에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._보햄이_제안한_것으로,_원시_프로그램의_규모인_LOC(원시_코드_라인_수)에_의한_비용산정_기법이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#조직형(Organic_Mode)__중.소규모_소프트웨어._5만_라인_이하","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#반_분리형(Semi-Detached_Mode)__트렌젝션처리_시스템,_운영체제_등._30만_라인_이하","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#내장형(Embedded_Mode)__초대형_규모_트렌젝션_처리_시스템_/_미사일_유도_시스템._30만_라인_이상","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#비대칭_암호화_방식_중,_소수를_활용한_암호화_알고리즘은?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_RSA(Rivest_Shamir_Adleman)","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#암호화_알고리즘에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#대칭_암호_알고리즘","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#비대칭_암호_알고리즘","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#PaaS-TA_파스타_란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_국내_IT서비스_경쟁력_강화를_목표로_개발되었으며_인프라_제어_및_관리환경,_실행환경,_개발환경,_서비스환경,_운영환경으로_구성되어있는_==개방형_클라우드_플랫폼==","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#강제_접근통제(MAC__Mandatory_Access_Control)_이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_정보시스템_내에서_어떤_주체가_특정_개체에_접근하려_할_떄_양쪽의_보안_레이블에_기초하여_==높은_보안_수준을_요구하는_정보가_낮은_보안수준의_주체에게_노출되지_않도록==_하는_접근_제어방법.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#소프트웨어_생명_주기_모델_중_V모델과_관련한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._==요구사항_->_분석_->_설계_->_구현==_단계로_수행되며_각_단계를_테스트와_연결하여_표시한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._Perry에_의해_제안되었으며,_세부적인_테스트_과정으로_구성되어_신뢰도_높은_시스템을_개발하는데_효과적이다","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._개발_작업과_검증_작업_사이의_관계를_명호가히_들어내_놓은_폭포수_모델의_변형이라고_볼_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._폭포수_모델이_산출물_중심이라면,_V모델은_작업과_결과의_검증에_초점을_둔다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#웹_크롤링을_지원하는_가장_대표적인_프레임워크는?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_파이썬의_Scrapy(스크래피)","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#DES(암호화_알고리즘)의_암호화_블록_단위","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_64비트","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#DPI(Deep_Packet_Inspection)이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_OSI_7_Layer전_계층의_프로토콜과_패킷_내부의_콘텐츠를_파악하여_침입시도,_해킹등을_탐지하고_트래픽을_조정하기_위한_패킷_분석_기술","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#테일러링(Tailoring)이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_프로젝트에_최적화_된_개발_방법론을_적용하기_위해_절차,_산출물_등을_적절히_변경하는_활동.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_프로젝트_상황_및_특성에_맞추어_기존의_방법론,_프로세스_등을_수정하는_것.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_예상되는_변화를_충분히_고려하여_진행_필요.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#CASE(Computer_Aided_Software_Engineering)이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_소프트웨어_개발_과정에서_사용되는_요구_분석,_설계,_구현,_검사_및_디버깅_과정_전체_또는_일부를_컴퓨터와_전용소프트웨어_도구를_사용하여_자동화_하는_것이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._객체지향_시스템,_구조적_시스템_등_다양한_시스템에서_활용되는_자동화_도구이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._소프트웨어,하드웨어,DB,테스트_등을_통합하여_소프트웨어를_개발하는_환경을_조성한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._소프트웨어_생명주기의_전체단계를_연결해_주고_자동화_해주는_통합된_도구를_제공한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._소프트웨어_개발_도구와_방법론이_결합된_것이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#그래픽_또한_지원한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#Putnam모형이란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_소프트웨어_생명_주기의_전_과정_동안에_사용될_==노력의_분포를_가정==해주는_모형이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#간트_차트란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_프로젝트의_각_작업들이_언제_시작하고_언제_종료되는지에_대한_작업_일정을_막대_도표를_이용하여_표시하는_프로젝트_일정표이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._시간선(Time-Line)_차트라고도_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._작업경로는_표시할_수_없으며,_계획의_변화에_대한_적응성이_약하다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._주관적_수치에_기울어지기_쉽다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#프레임워크의_특성?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._모듈화","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._재사용성","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._확장성","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._제어의_역전","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#CSMA/CA_란_무엇인가","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_무선_랜에서_데이터_전송_시_==매체가_비어있음을_확인한_뒤==_충돌을_피하기_위해_==일정한_시간을_기다린_후==_데이터를_전송하는_방법","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_==IEEE_802.3_LAN==_에서_사용되는_전송_매체_접속_제어방식이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#SOA(Service_Oriented_Architecture)서비스지향아키텍처의_계층","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._표현_계층","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._프로세스_계층","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._서비스_계층","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._비즈니스_계층","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#5._영속_계층","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#라우팅_프로토콜_종류_및_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._거리_벡터_라우팅_프로토콜(RIP)_-_==IGP에_속함==,==내부게이트웨이==","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._링크_상태_라우팅_프로토콜(OSPF)","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#SPICE란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_ISO/IEC_15504_라고도_한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_소프트웨어_품질_및_생산성_향상을_위해_소프트웨어_==프로세스를_평가==하고_개서하는_국체_표준이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_기관에서_지정한_요구조건의_만족여부를_개발_조직이_==스스로_평가==한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#수행_능력_수준_`불수관확예최`","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#불완전(0)_->_수행(1)_->_관리(2)_->_확립(3)_->_예측(4)_->_최적화(5)","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#TCP_Wrapper란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_어떤_*외부_컴퓨터*가_접속되면_**접속_인가_여부를_점검**해서_인가된_경우에는_접속이_허용되고,_그_반대_경우에는_거부할_수_있는_**접근제어_유틸리티**_이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#세션_하이재킹을_탐지하는_방법","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._비동기화_상태_탐지","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._ACK_Storm_탐지","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._패킷의_유실과_재전송_증가_탐지","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._예상치_못한_접속의_리셋_탐지","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#네트워크_장비에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#브라우터(Brouter)","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_브릿지와_라우터의_기능으_모두_갖추고_있는_네트워크_장비이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#리피터","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_전송되는_신호가_전송_선로의_특성_및_외부_충격_등의_요인으로_*왜곡되거나_약해질_경우_원래의_신호_형태로_재생하여_다시_전송*하는_역할.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#브리지","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_LAN과_LAN을_연결하거나,_LAN안에서의_컴퓨터_그룹을_연결하는_기능을_수행한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_*데이터링크_계층*_중_*MAC계층에서_사용된다*.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#스위치","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_LAN과_LAN을_연결하여_더_큰_LAN을_만드드는_장치","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_OSI_7계층_중_*데이터링크_계층(2)에서_사용된다.*","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#라우터","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_LAN과_LAN의_연결_기능에_데이터_전송의_*최적경로를_선택할_수_있는_기능*을_추가한것","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_서로_다른_LAN이나_LAN과_WAN의_연결도_수행한다","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_OSI_7계층의_*네트워크_계층(3)에_속한다.*","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#루프(폐회로)를_형성하지_않으면서_연결을_설정할_수_있는_알고리즘","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_STA(Spanning_Tree_Algorithm)","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#SAN(**Storage**_Area_Network)란?","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._네트워크상에_광채널_스위치의_이점인_*고속_전송*과_**장거리_연결_및_멀티_프로토콜_기능을_활용**","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._**각기_다른_OS를_가진_여러_기종**들이_네트워크상에서_동일_저장장치의_**데이터를_공유**하게_함으로써,_**여러개의_저장장치나_백업장치를_단일화**시킨_시스템","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#nmap_이란??","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#-_서버에_열린_포트_정보를_스캐닝해서_보안_취약점을_찾는데_사용하는_도구이다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#Bell-LaPadula_Model(벨-라파듈라_모델)에_대한_설명","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._군대의_보안레벨처럼_정보의_기밀성에_따라_상하_관계가_구분된_정보를_보호하기_위해_사용","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._자신의_권한보다_낮은_보안_레벨_권한을_가진_경우에는_높은_보안_레벨의_문서를_읽을_수_없고,_자신보다_권한레벨이_낮은_문서만_읽읈_수_있다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._자신의_권한보다_높은_보안_레벨의_문서에는_쓰기가_가능하지만,_보아레벨이_낮은_문서의_쓰기_권한은_제한한다.","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#Secure_OS의_보안_기능","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#1._식별_및_인증","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#2._임의/강제적_접근_통제","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#3._객체_재사용_보호","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#4._완전한_조정","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#5._신뢰_경로","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html#6._감사_및_감사기록_축소"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html","pathToRoot":"../../..","createdTime":1739783043089,"modifiedTime":1739946892799,"sourceSize":21328,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 5과목 - 정보시스템 구축관리.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html","showInTree":true,"treeOrder":0,"attachments":[]},"study/커리큘럼/🆕-dev-커리큘럼.html":{"title":"🆕 Basic","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:개발\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#개발</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:초보\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#초보</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:기초\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#기초</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:개발\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#개발\">#개발</a> <a href=\"http://lts.kr?query=tag:초보\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#초보\">#초보</a> <a href=\"http://lts.kr?query=tag:기초\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#기초\">#기초</a><br>","aliases":[],"tags":["#공부","#개발","#초보","#기초"],"headers":[{"heading":"🆕 Basic","level":1,"id":"🆕 Basic"}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:%EA%B0%9C%EB%B0%9C","?query=tag:%EC%B4%88%EB%B3%B4","?query=tag:%EA%B8%B0%EC%B4%88","study/커리큘럼/🆕-dev-커리큘럼.html#🆕 Basic"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/커리큘럼/🆕-dev-커리큘럼.html","pathToRoot":"../..","createdTime":1740017929179,"modifiedTime":1740027066919,"sourceSize":69,"sourcePath":"study/커리큘럼/🆕 Dev 커리큘럼.md","exportPath":"study/커리큘럼/🆕-dev-커리큘럼.html","showInTree":true,"treeOrder":0,"attachments":[]},"study/coding-test/👽-algorithm.html":{"title":"👽 Algorithm","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Coding\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Coding</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Test\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Test</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:알고리즘\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#알고리즘</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:Coding\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Coding\">#Coding</a> <a href=\"http://lts.kr?query=tag:Test\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Test\">#Test</a> <a href=\"http://lts.kr?query=tag:알고리즘\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#알고리즘\">#알고리즘</a><br>Algorithm\n알고리즘 유형 별 풀이 입니다.\n<br>","aliases":[],"tags":["#공부","#Coding","#Test","#알고리즘"],"headers":[{"heading":"👽 Algorithm","level":1,"id":"👽 Algorithm"},{"heading":"추가예정..","level":1,"id":"추가예정.."}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:Coding","?query=tag:Test","?query=tag:%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98","study/coding-test/👽-algorithm.html#👽 Algorithm","study/coding-test/👽-algorithm.html#추가예정.."],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/coding-test/👽-algorithm.html","pathToRoot":"../..","createdTime":1740031282530,"modifiedTime":1740107593302,"sourceSize":140,"sourcePath":"study/Coding Test/👽 Algorithm.md","exportPath":"study/coding-test/👽-algorithm.html","showInTree":true,"treeOrder":0,"attachments":[]},"study/coding-test/🤠-coding-test-풀이-모음.html":{"title":"🤠 Coding Test 풀이 모음","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Coding\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Coding</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Test\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Test</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:모음\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#모음</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:Coding\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Coding\">#Coding</a> <a href=\"http://lts.kr?query=tag:Test\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Test\">#Test</a> <a href=\"http://lts.kr?query=tag:모음\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#모음\">#모음</a><br>Coding Test\n코딩 테스트 문제 풀이 입니다.\n<br>\n<br> <br>\n<br>","aliases":[],"tags":["#공부","#Coding","#Test","#모음"],"headers":[{"heading":"🤠 Coding Test 풀이 모음","level":1,"id":"🤠 Coding Test 풀이 모음"},{"heading":"Baekjoon 문제풀이","level":1,"id":"*Baekjoon*_문제풀이"},{"heading":"🥇Gold","level":2,"id":"[🥇Gold](https//github.com/LeeTaeSung0628/Baekjoon-Programmers/tree/main/%EB%B0%B1%EC%A4%80/Gold)"},{"heading":"🥈Silver","level":2,"id":"[🥈Silver](https//github.com/LeeTaeSung0628/Baekjoon-Programmers/tree/main/%EB%B0%B1%EC%A4%80/Silver)"},{"heading":"🥉Bronze","level":2,"id":"[🥉Bronze](https//github.com/LeeTaeSung0628/Baekjoon-Programmers/tree/main/%EB%B0%B1%EC%A4%80/Bronze)"},{"heading":"Programmers 문제풀이","level":1,"id":"*Programmers*_문제풀이"},{"heading":"🐱프로그래머스","level":2,"id":"[🐱프로그래머스](https//github.com/LeeTaeSung0628/Baekjoon-Programmers/tree/main/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4)"}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:Coding","?query=tag:Test","?query=tag:%EB%AA%A8%EC%9D%8C","https://github.com/LeeTaeSung0628/Baekjoon-Programmers/tree/main/%EB%B0%B1%EC%A4%80/Gold","https://github.com/LeeTaeSung0628/Baekjoon-Programmers/tree/main/%EB%B0%B1%EC%A4%80/Silver","https://github.com/LeeTaeSung0628/Baekjoon-Programmers/tree/main/%EB%B0%B1%EC%A4%80/Bronze","https://github.com/LeeTaeSung0628/Baekjoon-Programmers/tree/main/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4","study/coding-test/🤠-coding-test-풀이-모음.html#🤠 Coding Test 풀이 모음","study/coding-test/🤠-coding-test-풀이-모음.html#*Baekjoon*_문제풀이","study/coding-test/🤠-coding-test-풀이-모음.html#[🥇Gold](https//github.com/LeeTaeSung0628/Baekjoon-Programmers/tree/main/%EB%B0%B1%EC%A4%80/Gold)","study/coding-test/🤠-coding-test-풀이-모음.html#[🥈Silver](https//github.com/LeeTaeSung0628/Baekjoon-Programmers/tree/main/%EB%B0%B1%EC%A4%80/Silver)","study/coding-test/🤠-coding-test-풀이-모음.html#[🥉Bronze](https//github.com/LeeTaeSung0628/Baekjoon-Programmers/tree/main/%EB%B0%B1%EC%A4%80/Bronze)","study/coding-test/🤠-coding-test-풀이-모음.html#*Programmers*_문제풀이","study/coding-test/🤠-coding-test-풀이-모음.html#[🐱프로그래머스](https//github.com/LeeTaeSung0628/Baekjoon-Programmers/tree/main/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4)"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/coding-test/🤠-coding-test-풀이-모음.html","pathToRoot":"../..","createdTime":1740030994816,"modifiedTime":1740032047241,"sourceSize":673,"sourcePath":"study/Coding Test/🤠 Coding Test 풀이 모음.md","exportPath":"study/coding-test/🤠-coding-test-풀이-모음.html","showInTree":true,"treeOrder":0,"attachments":[]},"study/cs/☕-java-,-oop.html":{"title":"☕ JAVA , OOP","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Java\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Java</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:OOP\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#OOP</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:Java\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Java\">#Java</a> <a href=\"http://lts.kr?query=tag:OOP\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#OOP\">#OOP</a><br>- 컴파일 다형성\n- 이름이 같지만, 매개변수의 타입/개수/순서 를 다르게 정의하여 사용하는 방법\n- 어떤 메서드가 호출될지 컴파일 시점에서 결정\n- 코드를 직관적이게 만드는데 사용\n<br>- 런타임 다형성\n- 부모클래스 또는 인터페이스에 정의된 메서드를 하위 클래스에서 재정의하여 사용하는 방법\n- 어떤 메서드가 호출될지 런타임 시점에 결정된다.\n<br>Map&lt;String, Integer&gt; map1 = new HashMap&lt;&gt;();\nMap&lt;String, Integer&gt; map2 = new TreeMap&lt;&gt;();\n<br>해당 형태로 map1 / 2를 구현했다면.<br>\n객체 타입은 각각 HashMap/TreeMap 이 되며,<br>\n변수 타입은 모두 Map이 된다.<br>\n- 즉 map1.add / map2.add 등 Map인터페이스가 가진 함수만을 사용할 수 있으며,<br>\nHashMap이나 TreeMap가 가진 고유메서드는 사용할 수 없다.<br>\n하지만, 오버라이딩(런타임 다형성)으로 재정의한 각각의 메서드로 해당 동작이<br>\n구현체의 특성에 맞게 실행되게 된다.<br>Java는 다중 상속을 지원하지 않는다.(부모가 2명 이상인것)\n<br>다중 상속 처럼 여러개를 상속받을 수 있다. 부모의 메서드를 사용하며, 동작이 의도대로 흘러가도록 강제할 수 있으나, 구현은 자식 클래스에서 하기때문에 결합도를 낮출 수 있다.\n<br>\n<br>상속은 부모 클래스의 내부 구현에 대해 상세히 알아야 하기 때문에, 자식과 부모 사이의 결합도가 높아질 수 밖에 없다.\n<br>또한, 부모의 쓸모없는 기능까지 모두 받게 될 가능성이 있다.\n<br>부모 클래스가 수정되면, 자식클래스도 동시에 수정해야하는 경우가 생긴다.\n<br>단일 상속만 가능하기 때문에, 결국 인터페이스를 또 사용하게 된다.\n<br>\n<br>합성은 구현에 의존하지 않는 점에서 상속과 다르다. <br>합성을 이용했을 때는, 객체의 내부는 공개되지 않고 인터페이스를 통해 코드를 재사용하기 때문에,<br>\n구현에 대한 의존성을 인터페이스에 대한 의존성으로 변경하여 결합도를 낮출 수 있다.\n<br>합성 관계는 실행 시점에 동적으로 변경될수 있다.(런타임) <br>public class Phone { private RatePolicy ratePolicy; // 클래스 합성 private List&lt;Call&gt; calls = new ArrayList&lt;&gt;(); // 클래스 합성 public Phone(RatePolicy ratePolicy) { this.ratePolicy = ratePolicy; } public List&lt;Call&gt; getCalls() { return Collections.unmodifiableList(calls); }\n}\n<br>\n<br>객체지향 설계시 지켜야 하는 5가지 원칙들의 앞글자를 딴것이다.\n<br>순서는 노상관이다.\n<br>책임 = 기능 이다. 수정시 영향도를 낮추는 주요한 원칙이다.\n<br>- 추상화 사용을 통한 관계를 구축하기를 권장하는 의미이다.\n- 추상클래스,인터페이스를 통한 관계를 구축하여 확장은 쉽고, 변경에는 영향도가 없어지도록 분리해라?\n<br>- 코드에는 문제가 없더라도, 부모타입의 설계 목적에도 부합하도록 설계해라. -&gt; 부모의 동작의도대로 흘러가도록 설계해라\n- Map a = new HashMap(); 같이 구현해서, 사용해도 문제 없도록 하는거다\n- &gt; 변수는 Map타입으로, Map메서드만 사용가능하지만 객체는 HashMap이기 때문에 각각의 기능으로 수행되고, 수정시에도 Map을 상속받는 다른 클래스로 변경이 쉬워진다.\n<br>- 인터페이스의 단일책임과 비슷하다. 기능별로 잘 분리하고, 수정을 최소화할수 있도록 처음부터 생각하라.\n<br>- 리스코프 치환의 원칙을 따라 설계했다면, 의존성 역전의 원칙을 따르기 쉬워진다.\n- 의존관계를 맺을때, 변화기 쉬운것 보다, 변화하기 어려운 것에 의존하라는 것이다.\n<br>\n<br>자바 개발 키트의 약자로, 개발자들이 자바로 개발하는데 사용되는 SDK키트라고 생각하면 된다.\n<br>자바 개발시 필요한 라이브러리와, javac, javadoc 등의 개발도구를 포함한다.\n<br>자바 실행 프로그램인 JRE도 포함한다. (JRE에는 JVM이 들어가있다.)\n<br>- 대표적으로, 안드로이드 스튜디오 등이 있다.\n<br>\n<br>Java SE(standard edition) : 가장 기본이 되는 표준 에디션의 자바 플랫폼.\n<br>Java EE(enterprise edition) : 대규모 기업용 에디션. SE의 확장판\n<br>Java ME(micro edition) : 피쳐폰/셋톱박스/프린터 와 같은 작은 임베디드 기기를 다루는데 이용하는 에디션\n<br>Java FX : 가볍고 예쁜 그래픽 사용자 인터페이스를 제공하는 에디션\n<br>\n<br>JRE는 자바 실행환경의 약자로서, JVM과 자바 프로그램을 실행시킬 때 필요한 라이브러리 API를 함께 묶어서 배포되는 패키지.\n<br>또한, 자바 런타임 환경에서 사용하는 프로퍼티 세팅과 리소스(jar)파일을 가지고 있다.\n<br>JRE는 기본적으로 JDK에 포함되어있기 때문에 JDK를 설치하면 함께 설치된다.<br>\n<img alt=\"Pasted image 20250110101642.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250110101642.png\" target=\"_self\">\n<br>\n<br>JVM은 자바 가상머신의 약자로서, 직역하면 자바를 실행하는 머신, 자바를 돌리는 프로그램이다.\n<br>자바로 작성된 모든 프로그램은 JVM에서만 실행될 수 있으므로, 자바 프로그램을 실행하기 위해서는 바늗시 자바 가상머신의 설치가 선행되어야 한다.\n<br>\n<br>java는 OS에 종속적이지 않다는 특징을 가지고 있다.\n<br>\n<br>\n소스코드를 컴파일하여 기계어를 만드는 과정에서, window/mac/linux가 각기 다르게 컴파일을 시킨다. <br>\n때문에 각 OS별로 상이한 문법을 사용하게 되는 일이 벌어진다. <br>\n이러한 언어를 \"이식성이 낮다\" 라고 표한다. <br>\n하지만 java는 jvm를 거쳐서 OS와 상호작용 하기때문에, OS에 구애받지 않게 된다. <br>\n<br>위에서 c언어는 컴파일을 거치면 기계어가 된다고 했는데,\n<br>java는 JVM을 거쳐 바이트 코드로 변환되게 된다. <br>이는 가상 머신이 이해할 수 있는 중간 레벨의 언어로, 반쪽짜리 컴파일 결과물 이라고 할 수 있다.\n<br>이는 어떠한 환경에 종속적이지 않고 실행될 수 있다.\n<br>즉, 재컴파일 할 필요없이 기계가 바로 읽고 실행 할 수 있는 코드를 만들어 주는것이다.\n<br>하지만 자바 프로그램과 달리 JVM은 각 운영체제에 종속적이므로, 각 운영체제에 맞는 JVM을 알맞게 설치해주어야한다.<br>\n<br>위의 설명과 같이 java는 일반 프로그램보다 JVM이라는 단계를 한 단계 더 거치기 때문에, 상대적으로 실행속도가 느리다는 단점을 내포하고 있다.\n<br>이를 보환하기 위해, 필요한 부분만을 기계어로 바꾸어 속도를 향상시키는 JIT 컴파일러 같은 내부 프로그램이 있지만, 그럼에도 여전히 느리다.\n<br><img alt=\"Pasted image 20250110103409.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250110103409.png\" target=\"_self\"><br>위 그림에서 Compiler는 javac.exe에 해당되고 JVM은 java.exe에 해당된다.\n<br>소스코드(MyPrograme.java)를 작성한다.\n<br>컴파일러(Compiler)는 자바 소스코드를 이용하여 클래스 파일(MyProgram.class)을 생성한다. 컴파일 된 클래스 파일은 JVM(Java Virtual Machine)이 인식할 수 있는 바이트 코드 파일이다.\n<br>JVM은 클래스 파일의 바이트 코드를 해석하여 바이너리 코드로 변환하고 프로그램을 수행한다.\n<br>MyProgram 수행 결과가 컴퓨터에 반영된다\n<br>\n<br>c또는 c++등으로 작성된 프로그램은 최종 결과물로 exe파일을 만들어낸다.\n<br>java도 exe파일을 만들 수 있지만, class파일로 굳이 만들어내는 이유는 다음과 같다 <br>JVM이 exe에 포함되는 형식으로 가능하기 때문에 exe파일이 무척 커지게 되는 단점이 있다.\n<br>때문에 보통의 경우 일부러 생성하지 않는것이다. <br>\n<br>java에서 String은 객체이다.\n<br>int, char와 달리 기본형,원시형(primitive type)이 아닌 참조형(reference type)변수로 분류된다.\n<br>메모리의 Stack영역이 아닌, Heap영역에서 문자열 데이터가 생성되고 다뤄진다는 말이다.<br>\n<img alt=\"Pasted image 20250110122312.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250110122312.png\" target=\"_self\">\n<br>또한 String은 불변(Immutable)객체이다. <br>예를들어, s = \"a\"; 에 s = s + s; 를 하면 \"aa\"가 되겠지만, heap영역 메모리에 새로운 주소로 생성하게 된다. <br>\n<br>JVM에서는 String Constant Pool이라는 독립적인 영억을 Heap영역에 구축하여<br>\n문자열들을 Constant화 하여 다른 변수 혹은 객체들과 공유한다.\n<br>이 과정에서 데이터 캐싱이 일어나고, 그만큼 성능적인 이득을 취할 수 있게된다.\n<br>\n<br>데이터가 불변하다면, 멀티 스레드 환경에서 동기화 문제가 발생하지 않기 때문에 안전한 결과를 낼 수 있다.\n<br>\n<br>만일 번지수의 문자열 값이 변경이 가능하다면, 참조값을 변경하여 애플리케이션에 보안 문제를 일으킬 수 있다.\n<br>\n<br>먼저 문자열 리터럴 방식으로 변수에 저장하게 되면, 이 값은 string constant pool에 저장이 되지만, new연산자를 사용하여 생성한 값은 Heap영역에 존재하게된다.\n<br>\n<br>대상 값 자체를 비교\n<br>\n<br>대상의 주소값을 비교.\n<br>즉, new연산자를 통해 만들어진 객체를 equals로 비교한다면 true가 나오겠지만,<br>\n== 연산자를 사용한다면 false가 나오게 되는것이다.<br> 두 클래스 모두 문자열을 연산(추가 및 변경)할 때 주로 사용하는 자료형이다.<br>\n물론 String자료형 으로도 + 나 concat()으로 문자열을 이어붙일수 있다.<br>\n하지만 +를 이용해 String인스턴스의 문자열을 결합하면, 내용이 합쳐진 새로운 String인스턴스를 생성하게된다.<br>\n문자열을 많이 결합하면 결합할수록 공간낭비는 물론, 속도 또한 매우 느려진다.<br>이를 해결하기 위해 Java는 문자열 연산을 전용으로 하는 자료형을 따로 만들어 제공하였다.<br>\n<br>내부적으로 Buffur라고 하는 독립적인 공간을 가지게 되어\n<br>문자열을 바로 추가할 수 있어 공간의 낭비도 없으며, 문자열 연산 속도도 매우 빠르다\n<br>기본적으로 16개의 문자를 저장할 수 있는 크기이며,<br>\n연산 중 할당된 버퍼의 크기를 넘게되면 자동으로 버퍼를 증강 시킨다.<br>SpringBuffer와 SpringBuilder의 메서드 사용법은 동일하다.<br>\n<br>불변자료형 으로써, 초기 공간과 다른 값에 대해서 새로운 메모리 공간을 할당하여 새로 생성한다.\n<br>그렇게 남겨진 문자열 값은 java가비지 컬렉터에 의해 제거될 대상에 포함된다.\n<br>\n<br>즉, 문자열을 조작할 때 새 객체를 생서하지 않고 기존 객체를 수정한다.\n<br>메모리 관리 측면에서 효율적\n<br>=&gt; 사실 자바는 문자열에 + 연산을 사용하면, 컴파일 전 내부적으로 StringBuilder 클래스를 자동으로 생성한 후 다시 문자열로 돌려준다. 다만, 문자열을 합치는 일이 빈번할 경우에는 단순히 +연산을 사용하는것은 효율이 떨어지므로<br>\nSpringBuffer와 SpringBuilde 를 사용하는것이 옳다고 할 수 있다.<br>\n<br>컴파일 타임 위빙 (Compile-Time Weaving) <br>소스 코드 컴파일 시, Aspect가 대상 객체에 결합됩니다.\n<br>AspectJ 같은 프레임워크에서는 가능하지만, Spring AOP는 이 방식을 지원하지 않습니다. <br>로드 타임 위빙 (Load-Time Weaving) <br>클래스 파일을 JVM에 로드할 때 Aspect를 결합합니다.\n<br>Spring AOP는 기본적으로 지원하지 않으나, AspectJ 통합 설정을 통해 사용할 수 있습니다. <br>런타임 위빙 (Runtime Weaving) <br>Spring AOP의 기본 방식입니다.\n<br>런타임에 프록시 객체를 생성하여 부가 기능을 결합합니다.\n<br>JDK 동적 프록시 또는 CGLIB를 사용하여 대상 객체를 프록시로 감싸고, 프록시가 메서드 호출을 가로채서 Advice를 실행합니다. <br>\n<br>프록시 생성 시: 클래스 단위에서 PointCut 조건에 따라 프록시가 생성됩니다.\n<br>메서드 호출 시: 개별 메서드 단위에서 PointCut 조건을 재평가합니다.\n<br>\n<br>프록시 생성은 클래스 단위로 이루어지지만, PointCut 조건은 메서드 단위로 적용됩니다.\n<br>런타임 정보(매개변수, 리턴 타입 등)를 기반으로 동적 조건을 평가해야 하는 경우가 있습니다.\n<br>Spring AOP의 유연성과 확장성을 보장하기 위한 설계입니다.\n<br>\n<br>클라이언트에서 서버를 직접 호출하고, 처리결과를 받는다. -&gt; 직접호출\n<br>클라이언트에서 서버를 직접 호출하지 않고, 대리자를 통해 간접적으로 서버에 요청 -&gt; 간접호출\n<br>\n<br>권한에 따른 접근 차단, 지연로딩을 수행하는 접근 제어 <br>서버의 기능에 다른 기능을 추가해주는 부가 기능 추가 ex) 로그, 가공 <br>대리자가 또 다른 대리자를 호출하는 프록시 체인 <br>\n<br>아무 객체나 프록시가 되는것은 아니다. <br>클라이언트는 서버에 요청한지, 프록시에게 요청한지 몰라야한다. <br>즉, 클라이언트의 코드를 건드리지 않고 프록시 추가와 런타임 객체 의존 관계 주입만 변경하여야 한다.\n<br>\n<br>두 패턴 모두 프록시를 사용하는 방법이다.\n<br>또한, 둘 모두 원본 객체를 건드리지 않고, 추가 기능을 실행 할 수 있다.\n<br>하지만 GOF 디자인 패턴에서는 이 둘을 의도(Intent)에 따라서 구분한다.<br>\n프록시 패턴 : 접근 제어가 목적<br>\n데코레이터 패턴 : 새로운 기능 추가가 목적\n<br>1.객체들이 사용하는 코드를 훼손하지 않으면서 런타임에 추가 행동들을 객체들에 할당할 때 사용.<br>상속을 사용하여 객체의 행동을 호가장하는 것이 어색하거나, 불가능할 때 사용할 수 있다.<br>\n-만일 final 키워드가 기입된 클래스의 경우는 데코레이터 패턴을 통해 래핑하여 재사용 할 수 있다.\n<br>ex)<br>\n택스트 편집기<br>\n- 택스트 편집기에서 굵게, 이텔릭체, 밑줄 등과 같은 다양한 텍스트 포맷을 지원한다.<br>\nSpring<br>\n- HttpServletRequestWrapper : Sevlet에서 제공하는 Wrapper로 데코레이터 패턴을 지원한다.<br>\n<br>\n가상 프록시, 지연 로딩이 필요한 경우 <br>부담되는 서비스 객체를 바로 초기화 한다면 리소스 낭비가 발생 할 수 있으므로, 프록시 객체를 통해 객체를 초기화 할 수 있다. <br>\n보호 프록시, 접근 제어가 필요한 경우 <br>특정 클라이언트에 대해서만 서비스 객체를 이용할 수 있도록 하려는 경우 프록시 객체를 통해서 처리할 수 있다. <br>\n원격 프록시, 원격 서비스의 로컬 실행이 필요한 경우 <br>서비스 객체가 원격 서버에 있는 경우에는 네트워크를 통해 클라이언트의 요청을 전달하여 처리할 수 있다. <br>\n로깅 프록시, 서비스 객체에 대한 로깅이 필요한 경우 <br>프록시 객체에서 서비스에 전달하기 전과 후로 로깅을 진행할 수 있다. <br>\n캐싱 프록시, 요청 결과를 캐시하고 생명주기를 관리해야 하는 경우 <br>ex) Spring JAP<br>JPA의 지연 로딩의 경우, 가상 프록시를 적용하여 실제로 객체를 조회하기 이전까지 프록시 객체로 Entity를 대신하여 제공한다.<br>\nex) Spring AOP\n<br>Spring AOP는 프록시 패턴을 사용하여 트렌젝션 관리, 로깅, 보안 등의 작업을 프록시에서 처리한다.\n<br>\npublic void write(char cbuf[], int off, int len) throws IOException { synchronized (lock) { ensureOpen(); if ((off &lt; 0) || (off &gt; cbuf.length) || (len &lt; 0) || ((off + len) &gt; cbuf.length) || ((off + len) &lt; 0)) { throw new IndexOutOfBoundsException(); } else if (len == 0) { return; } if (len &gt;= nChars) { /* If the request length exceeds the size of the output buffer, flush the buffer and then write the data directly. In this way buffered streams will cascade harmlessly. */ flushBuffer(); out.write(cbuf, off, len); return; } int b = off, t = off + len; while (b &lt; t) { int d = min(nChars - nextChar, t - b); System.arraycopy(cbuf, b, cb, nextChar, d); b += d; nextChar += d; if (nextChar &gt;= nChars) flushBuffer(); } }\n} <br>\n<br>JPA에서 실제 데이터가 필요한 시점까지 데이터베이스 조회를 지연하는 기법\n<br>엔티티를 처음 조회할 때는 연관된 데이터를 즉시 로드하지 않고, 그 연관된 데이터가 실제로 사용될 때 데이터베이스에서 조회하는 방식\n<br>불필요한 데이터 조회를 줄여서 성능을 최적화하는데 유리하다.\n<br>\n<br>지연 로딩을 설정하면 연관된 엔티티나 컬렉션은 처음에 프록시 객체로 로드된다. <br>프록시는 실제 엔티티를 대신하는 객체로, DB조회가 필요할 때 프록시가 실제 데이터를 조회하여 값을 제공 <br>처음 부터 연관된 데이터를 모두 로드하는것이 아닌, 실제 접근 시점에 DB에서 로드되도록 지연 <br>\n<br>엔티티 A를 조회시 관련(Reference)되어 있는 엔티티 B를 한 번에 가져오지 않는다.\n<br>프록시를 맵핑하고 실제 B를 조회할 때 쿼리가 나간다.<br>\n쿼리가 총 두 번 나간다. A조회시 한 번, B조회시 한 번\n<br>\n<br>구체적인 Class Type을 알지 못하더라도 해당 Class의 method, type, variable들에 접근할 수 있도록 해주는 JAVA의 API이다.\n<br>컴파일된 바이트 코드를 통해 Runtime에 동적으로 특정 Class의 정보를 추출할 수 있는 프로그래밍 기법\n<br>\n<br>프로그램에 사용된 구성 요소의 실제 값 또는 프로퍼티를 결정짓는 행위<br>\n-즉 프로그램에서 사용되는 변수나 메서드 등 모든 것들이 결정되도록 연결해주는 것\n<br>- 컴파일 시점에 결정\n- 프로그램이 실행 돼도 변하지 않음\n- 오버로딩 : 컴파일 다형성, 메서드 타입,개수,순서 를 다르게 하여 정의하는 것\n- private, final, static이 붙은 메서드\n<br>- 런타임 시점에 결정\n- 오버라이딩 : 런타임 다형성, 부모,상위 클래스의 메서드를 하위 클래스가 재정의하여 사용하는 것\n- Java에서의 다형성, 상속이 가능한 이유\n<br>\n<br>\n클래스의 수정 없이 유연하게 확장 가능한 코드를 작성할 수 있다. <br>\n앞서 설명했던 것을 토대로 생각해보면, Reflection은 Runtime에 Class Type을 모르는채로 객체를 생성하고 이용하기 때문에 동적 바인딩을 제공한다. <br>\n<br>코드 작성 시점에서는 어떠한 Class를 사용해야할지 모르지만 Runtime에 Class를 가져와서 실행해야하는 경우 (Spring Annotation)\n<br>\n<br>private 변수를 변경하고 싶거나 private method를 테스트할 경우\n<br>\n<br>IDE 사용 시 Da 입력만해도 이와 관련된 Class 혹은 Method 목록들을 IDE가 먼저 확인하고 사용자에게 제공한다\n<br>\n<br>Reflection은 아래와 같은 정보를 가져올 수 있다.\n<br>Class/Interface\n<br>Constructor\n<br>Method\n<br>Field\n<br>해당 정보들을 통해 (1) 객체 생성 (2) 메서드 호출 (3) 변수 값을 변경할 수 있다.<br>[1] Class / Interface<br>public static void main(String[] args) throws Exception { // 1. class를 알고 있을 경우 Class car = Car.class; // 2. class 이름만 알고 있을 경우 Class car = Class.forName(\"com.reflection.test.Car\"); // class.getName() -&gt; com.reflection.test.Car // 3. Default 생성자를 이용한 객체 생성 Car realCar = car.newInstance(); // 4. class에 구현된 interface 확인 Class[] interfaces = car.getInterfaces();\n}\n<br>[2] Constructor<br>public static void main(String[] args) throws Exception { Class car = Class.forName(\"com.reflection.test.Car\"); // 1. 인자가 없는 생성자 가져오기 Constructor constructor = car.getDeclaredConstructor(); // 2. String 인자를 가진 생성자 가져오기 Constructor constructor = car.getDeclaredConstructor(String.class); // 3. 모든 생성자 가져오기 Constructor constructors[] = car.getDeclaredConstructors(); // 4. public 생성자만 가져오기 Constructor constructors[] = car.getConstructors(); // public com.reflection.test.Car() // public com.reflection.test.Car(java.lang.String) // 5. 생성자를 이용한 객체 생성 Car realCar = constructor.newInstance();\n}\n<br>[3] Method<br>public static void main(String[] args) throws Exception { Class car = Class.forName(\"com.reflection.test.Car\"); // 1. 인자가 없는 method 가져오기 Method method = car.getDeclaredMethod(\"move\"); // 2. String 인자를 가진 method 가져오기 Method method = car.getDeclaredMethod(\"move\", String.class); // 3. 모든 method 가져오기 Method methods[] = car.getDeclaredMethods(); // 4. 상속받은 method와 public method 가져오기 Method methods[] = car.getMethods(); // public void com.reflection.test.Car.move() // public void com.reflection.test.Car.move(java.lang.String) // 5. method 호출 Class realCar = car.newInstance(); method.invoke(realCar, /*인자*/); // 6. 접근 제한자를 무시한 method 호출. method.setAccessible(true); method.invoke(realCar, /*인자*/);\n}\n<br>[4] Field<br>public static void main(String[] args) throws Exception { Class car = Class.forName(\"com.reflection.test.Car\"); // 1. car 객체에서 name 에 해당하는 field 가져오기 Field field = car.getDeclaredField(\"name\"); // 2. car + car super 객체를 포함하여 name에 해당하는 field 가져오기 Field field = car.getField(\"name\"); // 3. car 객체에 선언된 모든 field 가져오기 Field[] fields = car.getDeclaredFields(); // private java.lang.String com.reflection.test.Car.name // public java.lang.Integer com.reflection.test.Car.type // 4. car + car super 객체의 모든 public field 가져오기 Field[] fields = car.getFields(); // public java.lang.Integer com.reflection.test.Car.age\n}\n<br>[5] Field 값 변경<br>public static void main(String[] args) throws Exception { Class class = Class.forName(\"com.reflection.test.Car\"); Constructor constructor = class.getConstructor() Car car = constructor.newInstance() Field field = car.getField(\"name\"); // 1. public field 일 경우 field.set(car, \"아반떼\"); // 2. private field 일 경우 field.setAccessible(true); field.set(car, \"아반떼\");\n}\n<br>\n<br>\n람다 표현식(Lambda Expression)이란?<br>\n함수형 프로그래밍을 구성하기 위한 함수식이며, 간단히 말해 자바의 메소드를 간결한 함수 식으로 표현한 것. <br>\n이름없는 함수, 익명 함수(anonymous function) 이라고도 한다. <br>int add(int x, int y) { return x + y;\n}\n<br>// 위의 메서드를 람다 표현식을 이용해 아래와 같이 단축 시킬수 있다. (메서드 반환 타입, 메서드 이름 생략)\n(int x, int y) -&gt; { return x + y;\n};\n<br>// 매개변수 타입도 생략 할 수 있다.\n(x, y) -&gt; { return x + y;\n};\n<br>// 함수에 리턴문 한줄만 있을 경우 더욱 더 단축 시킬 수 있다. (중괄호, return 생략)\n(x, y) -&gt; x + y;\n<br>\n<br>람다의 바디에서는 파라미터가 아닌 바디 외부에 있는 변수를 참조할 수 있다.\n<br>유사하게 로컬 클래스, 익명 클래스에서도 참조가 가능하다.\n<br>public class VariableCapture { private void run() { // 로컬 클래스, 익명 클래스, 람다에서 이 변수를 참조하면 effective final로 변경 int baseNumber = 10; // 람다 IntConsumer lambda = (i) -&gt; System.out.println(i + baseNumber); // i + 10 // 로컬 클래스 class LocalClass { void printBaseNumber() { System.out.println(baseNumber); // 10 } } // 익명 클래스 IntConsumer intConsumer = new IntConsumer() { @Override public void accept(int i) { System.out.println(i + baseNumber); // i + 10 } }; }\n}\n<br>\n<br>자유 변수는 final로 선언되어 있어야 한다.\n<br>final로 선언되지 않은 자유 변수는 final처럼 동작해야 한다. (effectively final)\n<br>\n<br>지역 변수는 JVM의 영역 중 stack영역에 생성된다.\n<br>쓰레드별로 해당 stack영역을 별로 갖는다.\n<br>즉, 쓰레드 끼리 공유가 되지 않는다.\n<br>반면 인스턴스 변수는 Heap영역에 생성된다.\n<br>즉, 인스턴스 변수는 공유가 가능하다.<br>\n람다는 별도의 쓰레드에서 실행이 가능하다.<br>\n따라서 지역 변수(자유 변수)가 있는 쓰레드가 사라졌을 때, 람다가 이 변수를 참조하고 있다면, 오류를 야기할 수 있는것이다.\n<br>\n<br>람다는 자유 변수를 참조할 때 직접 그 변수를 참조하는 것이 아닌,<br>\n자유 변수를 자신의 stack영역에 복사하여 참조하는 방법으로 참조 오류를 해결했다.\n<br>이러한 이유로 자유 변수는 수정이 불가능하도록 final처럼 동작해야 하는 것이다.\n<br>\n<br>로컬 클래스 / 익명 클래스 / 람다 모두 자유 변수를 참조할 수 있다는 공통점이 있다.\n<br>하지만 로컬클래스 / 익명클래스와 다르게 람다에서는 자유 변수와 같은 이름의 변수를 선언할 수 없다.<br>\n람다의 scope는 자유변수의 scope와 같기 때문이다.<br>\n반면 로컬/익명 클래스는 내부에 생성된 변수의 스코프가 더 지엽적이기 때문에 선언이 가능하다.\n<br>\n<br>클래스 레벨의 변수나, 메서드, 블록 을 정의 할 때 사용된다.\n<br>인스턴스(객체)생성 , new키워드 없이도 접근이 가능하다.\n<br>모든 인스턴스에서 공유된다.\n<br>static변수는 프로그램이 빌드될 때 메모리에 할당, 종료될 때 까지 유지.<br>\nstatic키워드의 남용은 OOP의 원칙과 상반되며, 메모리 사용량의 증가로 이어질 수 있으므로 주의가 필요하다.\n<br>\n<br>클래스 레벨에서 공유되는 값을 정의할 때 사용.\n<br>인스턴스마다 별도의 복사본을 유지 할 필요가 없다.\n<br>메모리 사용을 최적화 할 수 있다.\n<br>\n<br>클래스 생성없이 직접 호출 가능.\n<br>유틸리티 함수나, 상태가 필요없는 연산에 주로 활용. ex) 수학 연산\n<br>인스턴스 생성의 오버헤드 없이 빠른 실행이 가능하다.<br>\n단, static메서드는 해당 클래스 내의 다른 static메서드나, 변수에만 접근 할 수 있으므로 인스턴스 멤버에 접근해야하는 경우 사용할 수 없다.\n<br><img alt=\"Pasted image 20250122111223.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250122111223.png\" target=\"_self\"><br>\n<br>int, long, booolean 등 기본 자료형을 생성할 때 저장하는 공간\n<br>임시적으로 사용되는 변수나 정보들이 저장되는 영역\n<br>메서드 호출 시 마다 스텍 프레임(그 메서드만을 위한 공간이 생성되고, 그 메서드 안에서<br>\n사용되는 값들을 저장하고, 호출된 메서드의 매개변수, 지역변수, 리턴 값 등을 임시로 저장한다.<br>그리고 메서드의 수행이 끝나면 프레임별로 삭제된다.<br>단, 데이터 타입에 따라 스텍과 힙에 저장되는 방식이 다르다는 점을 유의해야한다.<br>위사진 참고<br>- 이를 넘어서면 StackOverFlowError를 발생한다.\n<br>\n<br>메서드 영역과 함께 모든 스레드가 공유한다.\n<br>JVM이 관리하는 프로그램 상에서 데이터를 저장하기 위해 런타임 시 동적으로 할당되어 사용되는 영역이다.\n<br>new연산자로 생성되는 클래스와 인스턴스 변수, 배열 타입 등 Reference Type이 저장된다.\n<br>메서드 영역에 저장된 클래스만이 힙영역에 생성이 되어 적재된다.<br>\n힙영역에 더이상 아무도 참조하지않는 객체가 있다면, GC에 의해 제거된다.\n<br>","aliases":[],"tags":["#공부","#Java","#OOP"],"headers":[{"heading":"☕ JAVA , OOP","level":1,"id":"☕ JAVA , OOP"},{"heading":"오버로딩 / 오버라이딩","level":1,"id":"오버로딩_/_오버라이딩"},{"heading":"오버로딩","level":2,"id":"오버로딩"},{"heading":"오버라이딩","level":2,"id":"오버라이딩"},{"heading":"상속과 합성","level":1,"id":"상속과_합성"},{"heading":"상속의 개념","level":4,"id":"상속의_개념"},{"heading":"- extends : 부모에서 선언 및 전의를 모두 마치며, 자식은 메서드 / 변수를 그대로 사용 가능한 형태","level":5,"id":"-_extends__부모에서_선언_및_전의를_모두_마치며,_자식은_메서드_/_변수를_그대로_사용_가능한_형태"},{"heading":"- impliments : interface구현. 부모 객체는 선언만 하며, 정의는 자식에서 오버라이딩 하여 사용하는 형태","level":5,"id":"-_impliments__interface구현._부모_객체는_선언만_하며,_정의는_자식에서_오버라이딩_하여_사용하는_형태"},{"heading":"- abstract : extends와 impliments의 혼합. extends는 하되, 부모의 몇 개는 추상 메서드로 구현되어있는 형태","level":5,"id":"-_abstract__extends와_impliments의_혼합._extends는_하되,_부모의_몇_개는_추상_메서드로_구현되어있는_형태"},{"heading":"상속의 단점","level":2,"id":"상속의_단점"},{"heading":"'합성' 이란?","level":2,"id":"'합성'_이란?"},{"heading":"결론은 다형성을 이용하고 싶을때, 부모클래스를 정확히 이해하고 그대로 계승할것이 아니라면, extends 대신 impliments를 사용하여 결합도를 낮추는 것이 좋고, 그 외 모든 경우네는 합성을 이용하도록 권고하고있다.","level":4,"id":"결론은_다형성을_이용하고_싶을때,_부모클래스를_정확히_이해하고_그대로_계승할것이_아니라면,_extends_대신_impliments를_사용하여_결합도를_낮추는_것이_좋고,_그_외_모든_경우네는_==합성==을_이용하도록_권고하고있다."},{"heading":"객체지향설계 5원칙 S.O.L.I.D","level":1,"id":"객체지향설계_5원칙_S.O.L.I.D"},{"heading":"이녀석들은 뭐하는 애들인가","level":2,"id":"이녀석들은_뭐하는_애들인가"},{"heading":"1. 단일 책임의 원칙 - 클래스 하나에 너무 많은 책임을 넣지마라. 근데 기준은 너가 정한다.","level":3,"id":"1._단일_책임의_원칙_-_클래스_하나에_너무_많은_책임을_넣지마라._근데_기준은_너가_정한다."},{"heading":"2. 개방 폐쇄의 원칙 - 확장에는 열려있게, 변경에는 닫혀있게 설계해라.","level":3,"id":"2._개방_폐쇄의_원칙_-_확장에는_열려있게,_변경에는_닫혀있게_설계해라."},{"heading":"3. 리스코프 치환의 원칙 - 하위타입은 언제나 상위타입으로 전환이 가능해야한다.","level":3,"id":"3._리스코프_치환의_원칙_-_하위타입은_언제나_상위타입으로_전환이_가능해야한다."},{"heading":"4. 인터페이스 분리의 원칙 - 인터페이스를 기능별로 잘 분리하고, 수정하지 말아라","level":3,"id":"4._인터페이스_분리의_원칙_-_인터페이스를_기능별로_잘_분리하고,_수정하지_말아라"},{"heading":"5. 의존성 역전의 원칙 - 어떤 클래스를 참조할때, 직접참조하지 말고 상위 인터페이스나 추상클래스를 참조해라.","level":3,"id":"5._의존성_역전의_원칙_-_어떤_클래스를_참조할때,_직접참조하지_말고_상위_인터페이스나_추상클래스를_참조해라."},{"heading":"JDK와 JRE","level":1,"id":"JDK와_JRE"},{"heading":"JDK - Java Development Kit","level":2,"id":"JDK_-_Java_Development_Kit"},{"heading":"** SDK란? : Software Development Kit로 하트웨어플랫폼, 운영체제 또는 프로그래밍 언어 제작사가 제공하는 툴.","level":5,"id":"**_SDK란?__Software_Development_Kit로_하트웨어플랫폼,_운영체제_또는_프로그래밍_언어_제작사가_제공하는_툴."},{"heading":"JDK 버전","level":2,"id":"JDK_버전"},{"heading":"사람들이 JAVA를 설치한다고 하는것은 JDK를 설치한다고 할 수 있다.","level":4,"id":"사람들이_JAVA를_설치한다고_하는것은_JDK를_설치한다고_할_수_있다."},{"heading":"JDK자체는 오픈소스이지만, 또다른 JDK버전을 여러회사에서 출시했고, 지금의 JDK환경이 갖춰졋다.","level":5,"id":"JDK자체는_오픈소스이지만,_또다른_JDK버전을_여러회사에서_출시했고,_지금의_JDK환경이_갖춰졋다."},{"heading":"JRE - Java Runtime Environment","level":2,"id":"JRE_-_Java_Runtime_Environment"},{"heading":"java로 프로그램을 직접 개발하려면 JDK가 필요하고,","level":3,"id":"java로_프로그램을_직접_개발하려면_JDK가_필요하고,"},{"heading":"컴파일된 java프로그램을 실행시키려면 JRE가 필요하다.","level":3,"id":"컴파일된_java프로그램을_실행시키려면_JRE가_필요하다."},{"heading":"JVM - Java Virtual Machine","level":2,"id":"JVM_-_Java_Virtual_Machine"},{"heading":"JVM을 사용함으로써 얻는 가장 큰 이득은 자바프로그램을 모든 플랫폼에서 제약없이 동작시킬 수 있는 부분이다.","level":4,"id":"JVM을_사용함으로써_얻는_가장_큰_이득은_==자바프로그램을_모든_플랫폼에서_제약없이_동작==시킬_수_있는_부분이다."},{"heading":"JVM이 왜 필요할까?","level":2,"id":"JVM이_왜_필요할까?"},{"heading":"c언어를 예로 든다면,","level":3,"id":"c언어를_예로_든다면,"},{"heading":"JVM은 어떤 방식으로 동작하는가?","level":2,"id":"JVM은_어떤_방식으로_동작하는가?"},{"heading":"JVM의 단점","level":2,"id":"JVM의_단점"},{"heading":"Java소스 컴파일 과정","level":2,"id":"Java소스_컴파일_과정"},{"heading":"왜 컴파일을 마친 프로그램이 exe가 아니라, class파일일까?","level":5,"id":"왜_컴파일을_마친_프로그램이_exe가_아니라,_class파일일까?"},{"heading":"Java의 String","level":1,"id":"Java의_String"},{"heading":"왜 불변객체로 설계 되었을까?","level":2,"id":"왜_불변객체로_설계_되었을까?"},{"heading":"1. 성능적 이득","level":3,"id":"1._성능적_이득"},{"heading":"2. 안정성","level":3,"id":"2._안정성"},{"heading":"3. 보안","level":3,"id":"3._보안"},{"heading":"Java에서 String 주소 할당방식","level":2,"id":"Java에서_String_주소_할당방식"},{"heading":"1. 문자열 리터럴을 이용한 방식 - String str1 = \"안녕\";","level":4,"id":"1._문자열_리터럴을_이용한_방식_-_String_str1_=_\"안녕\";"},{"heading":"2. new연산 이용방식 - String str2 = new String(\"안녕\");","level":4,"id":"2._new연산_이용방식_-_String_str2_=_new_String(\"안녕\");"},{"heading":"둘다 \"안녕\" 이라는 문자열을 저장하는 점은 같지만, JVM 내부 메모리 측면에서는 큰 차이가 있다.","level":3,"id":"둘다_\"안녕\"_이라는_문자열을_저장하는_점은_같지만,_JVM_내부_메모리_측면에서는_큰_차이가_있다."},{"heading":"비교 연산","level":2,"id":"비교_연산"},{"heading":"equals","level":3,"id":"equals"},{"heading":"==","level":3,"id":"=="},{"heading":"SpringBuffer와 SpringBuilder","level":1,"id":"SpringBuffer와_SpringBuilder"},{"heading":"SpringBuffer란?","level":2,"id":"SpringBuffer란?"},{"heading":"또한 다양한 내장 메서드를 지원하여, 문자열을 가공할 수 있다.","level":4,"id":"또한_다양한_내장_메서드를_지원하여,_문자열을_가공할_수_있다."},{"heading":"String vs (SpringBuffer와 SpringBuilder)","level":2,"id":"String__vs__(SpringBuffer와_SpringBuilder)"},{"heading":"String은 불변","level":3,"id":"String은_불변"},{"heading":"SpringBuffer와 SpringBuilder는 가변","level":3,"id":"SpringBuffer와_SpringBuilder는_가변"},{"heading":"그렇다면 문자열 + 연산시에는 무조건 String을 사용하는것이 옳지 않은건가??","level":4,"id":"그렇다면_문자열_+_연산시에는_무조건_String을_사용하는것이_옳지_않은건가??"},{"heading":"AOP위빙 방식","level":1,"id":"AOP위빙_방식"},{"heading":"pointcut : advice를 적용시킬 조건 정의","level":3,"id":"pointcut__advice를_적용시킬_조건_정의"},{"heading":"advice : pointcut으로 적용시킨 프록시에서의 동작 정의","level":3,"id":"advice__pointcut으로_적용시킨_프록시에서의_동작_정의"},{"heading":"aspect : pointcut + advice","level":3,"id":"aspect__pointcut_+_advice"},{"heading":"weaving : AOP 가 aspect를 적용시키는 행위","level":3,"id":"weaving__AOP_가_aspect를_적용시키는_행위"},{"heading":"AOP의 PointCut 실행 시점?","level":1,"id":"AOP의_PointCut_실행_시점?"},{"heading":"PointCut 조건 재평가의 이유:","level":4,"id":"**PointCut_조건_재평가의_이유**"},{"heading":"결론 : 실행 시 1번 , 메서드 최초 실행 시 1번. 총 2번만 실행된다.","level":4,"id":"결론__실행_시_1번_,_메서드_최초_실행_시_1번._총_2번만_실행된다."},{"heading":"단, Advice는 메서드 최초 실행시 조건에 부합하다면 매번 실행된다.","level":5,"id":"단,_Advice는_메서드_최초_실행시_조건에_부합하다면_매번_실행된다."},{"heading":"데코레이션 패턴 vs 프록시 패턴","level":1,"id":"데코레이션_패턴_vs_프록시_패턴"},{"heading":"프록시란?","level":2,"id":"프록시란?"},{"heading":"여기서, 간접호출하는 대상을 프록시 라고 한다.","level":4,"id":"여기서,_간접호출하는_대상을_==프록시==_라고_한다."},{"heading":"프록시는 클라이언트와 서버의 중간에 위치하기 때문에, 여러가지 일을 수행할 수 있다.","level":2,"id":"프록시는_클라이언트와_서버의_중간에_위치하기_때문에,_여러가지_일을_수행할_수_있다."},{"heading":"프록시는 대체 가능해야 한다.","level":2,"id":"프록시는_대체_가능해야_한다."},{"heading":"프록시 패턴과 데코레이터 패턴","level":2,"id":"프록시_패턴과_데코레이터_패턴"},{"heading":"데코레이터 패턴","level":3,"id":"데코레이터_패턴"},{"heading":"프록시 패턴","level":3,"id":"프록시_패턴"},{"heading":"Spring의 지연로딩?","level":1,"id":"Spring의_지연로딩?"},{"heading":"지연로딩(Lazy Loading)의 기본동작.","level":2,"id":"지연로딩(Lazy_Loading)의_기본동작."},{"heading":"자신과 연관된 엔티티를 실제로 사용할 때 연관된 엔티티를 조회하는 방식","level":4,"id":"자신과_연관된_엔티티를_실제로_사용할_때_연관된_엔티티를_조회하는_방식"},{"heading":"Java의 리플렉션이란?","level":1,"id":"Java의_리플렉션이란?"},{"heading":"'바인딩'이란?","level":2,"id":"'바인딩'이란?"},{"heading":"정적 바인딩","level":3,"id":"정적_바인딩"},{"heading":"동적 바인딩","level":3,"id":"동적_바인딩"},{"heading":"Reflection 사용 이유","level":2,"id":"Reflection_사용_이유"},{"heading":"동적으로 Class를 사용 해야할 경우","level":3,"id":"동적으로_Class를_사용_해야할_경우"},{"heading":"Test Code 작성","level":3,"id":"Test_Code_작성"},{"heading":"자동 Mapping 기능 구현","level":3,"id":"자동_Mapping_기능_구현"},{"heading":"Reflection 사용 방법","level":2,"id":"Reflection_사용_방법"},{"heading":"Java의 람다란?","level":1,"id":"Java의_람다란?"},{"heading":"자유변수","level":1,"id":"자유변수"},{"heading":"여기서, 람다 시그니처의 파라미터로 넘겨진 변수가 아닌, 외부에서 정의된 변수를","level":5,"id":"여기서,_람다_시그니처의_파라미터로_넘겨진_변수가_아닌,_외부에서_정의된_변수를"},{"heading":"자유 변수라고 한다. 또, 람다 바디에서 자유 변수를 참조하는 것을","level":5,"id":"==자유_변수==라고_한다._또,_람다_바디에서_자유_변수를_참조하는_것을"},{"heading":"람다 캡쳐링이라고 한다.","level":5,"id":"==람다_캡쳐링==이라고_한다."},{"heading":"제약조건","level":2,"id":"제약조건"},{"heading":"왜 final이어야 할까?","level":3,"id":"왜_`final`이어야_할까?"},{"heading":"어떻게 해결했을까?","level":3,"id":"어떻게_해결했을까?"},{"heading":"주의점","level":2,"id":"주의점"},{"heading":"Static 키워드에 대하여","level":1,"id":"Static_키워드에_대하여"},{"heading":"static변수","level":2,"id":"static변수"},{"heading":"static메서드","level":2,"id":"static메서드"},{"heading":"즉, Static은 코드의 재사용성과 효율성을 높일 수 있지만, 객체지향 원칙과 메모리 관리를 고려하여 옳바르게 사용하도록 해야한다.","level":4,"id":"즉,_Static은_코드의_재사용성과_효율성을_높일_수_있지만,_객체지향_원칙과_메모리_관리를_고려하여_옳바르게_사용하도록_해야한다."},{"heading":"JVM의 Stack과 Heap","level":1,"id":"JVM의_Stack과_Heap"},{"heading":"스택(Stack)영역","level":2,"id":"스택(Stack)영역"},{"heading":"1. 기본(원시)타입 변수는 스텍영역에 직접 값으로 저장된다.","level":4,"id":"1._기본(원시)타입_변수는_스텍영역에_직접_값으로_저장된다."},{"heading":"2. 참조타입(new연산자) 등은 힙영역이나 메소드 영역의 객체 주소를 가진다.","level":4,"id":"2._참조타입(new연산자)_등은_힙영역이나_메소드_영역의_객체_주소를_가진다."},{"heading":"스텍 영역은 각 스레드 마다 하나씩 존재한다.","level":3,"id":"스텍_영역은_각_스레드_마다_하나씩_존재한다."},{"heading":"스레드가 시작될 때 할당되며, 고정된 사이즈를 갖는다.","level":3,"id":"스레드가_시작될_때_할당되며,_고정된_사이즈를_갖는다."},{"heading":"힙(Heap)영역","level":2,"id":"힙(Heap)영역"}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:Java","?query=tag:OOP","study/cs/☕-java-,-oop.html#☕ JAVA , OOP","study/cs/☕-java-,-oop.html#오버로딩_/_오버라이딩","study/cs/☕-java-,-oop.html#오버로딩","study/cs/☕-java-,-oop.html#오버라이딩","study/cs/☕-java-,-oop.html#상속과_합성","study/cs/☕-java-,-oop.html#상속의_개념","study/cs/☕-java-,-oop.html#-_extends__부모에서_선언_및_전의를_모두_마치며,_자식은_메서드_/_변수를_그대로_사용_가능한_형태","study/cs/☕-java-,-oop.html#-_impliments__interface구현._부모_객체는_선언만_하며,_정의는_자식에서_오버라이딩_하여_사용하는_형태","study/cs/☕-java-,-oop.html#-_abstract__extends와_impliments의_혼합._extends는_하되,_부모의_몇_개는_추상_메서드로_구현되어있는_형태","study/cs/☕-java-,-oop.html#상속의_단점","study/cs/☕-java-,-oop.html#'합성'_이란?","study/cs/☕-java-,-oop.html#결론은_다형성을_이용하고_싶을때,_부모클래스를_정확히_이해하고_그대로_계승할것이_아니라면,_extends_대신_impliments를_사용하여_결합도를_낮추는_것이_좋고,_그_외_모든_경우네는_==합성==을_이용하도록_권고하고있다.","study/cs/☕-java-,-oop.html#객체지향설계_5원칙_S.O.L.I.D","study/cs/☕-java-,-oop.html#이녀석들은_뭐하는_애들인가","study/cs/☕-java-,-oop.html#1._단일_책임의_원칙_-_클래스_하나에_너무_많은_책임을_넣지마라._근데_기준은_너가_정한다.","study/cs/☕-java-,-oop.html#2._개방_폐쇄의_원칙_-_확장에는_열려있게,_변경에는_닫혀있게_설계해라.","study/cs/☕-java-,-oop.html#3._리스코프_치환의_원칙_-_하위타입은_언제나_상위타입으로_전환이_가능해야한다.","study/cs/☕-java-,-oop.html#4._인터페이스_분리의_원칙_-_인터페이스를_기능별로_잘_분리하고,_수정하지_말아라","study/cs/☕-java-,-oop.html#5._의존성_역전의_원칙_-_어떤_클래스를_참조할때,_직접참조하지_말고_상위_인터페이스나_추상클래스를_참조해라.","study/cs/☕-java-,-oop.html#JDK와_JRE","study/cs/☕-java-,-oop.html#JDK_-_Java_Development_Kit","study/cs/☕-java-,-oop.html#**_SDK란?__Software_Development_Kit로_하트웨어플랫폼,_운영체제_또는_프로그래밍_언어_제작사가_제공하는_툴.","study/cs/☕-java-,-oop.html#JDK_버전","study/cs/☕-java-,-oop.html#사람들이_JAVA를_설치한다고_하는것은_JDK를_설치한다고_할_수_있다.","study/cs/☕-java-,-oop.html#JDK자체는_오픈소스이지만,_또다른_JDK버전을_여러회사에서_출시했고,_지금의_JDK환경이_갖춰졋다.","study/cs/☕-java-,-oop.html#JRE_-_Java_Runtime_Environment","study/cs/☕-java-,-oop.html#java로_프로그램을_직접_개발하려면_JDK가_필요하고,","study/cs/☕-java-,-oop.html#컴파일된_java프로그램을_실행시키려면_JRE가_필요하다.","study/cs/☕-java-,-oop.html#JVM_-_Java_Virtual_Machine","study/cs/☕-java-,-oop.html#JVM을_사용함으로써_얻는_가장_큰_이득은_==자바프로그램을_모든_플랫폼에서_제약없이_동작==시킬_수_있는_부분이다.","study/cs/☕-java-,-oop.html#JVM이_왜_필요할까?","study/cs/☕-java-,-oop.html#c언어를_예로_든다면,","study/cs/☕-java-,-oop.html#JVM은_어떤_방식으로_동작하는가?","study/cs/☕-java-,-oop.html#JVM의_단점","study/cs/☕-java-,-oop.html#Java소스_컴파일_과정","study/cs/☕-java-,-oop.html#왜_컴파일을_마친_프로그램이_exe가_아니라,_class파일일까?","study/cs/☕-java-,-oop.html#Java의_String","study/cs/☕-java-,-oop.html#왜_불변객체로_설계_되었을까?","study/cs/☕-java-,-oop.html#1._성능적_이득","study/cs/☕-java-,-oop.html#2._안정성","study/cs/☕-java-,-oop.html#3._보안","study/cs/☕-java-,-oop.html#Java에서_String_주소_할당방식","study/cs/☕-java-,-oop.html#1._문자열_리터럴을_이용한_방식_-_String_str1_=_\"안녕\";","study/cs/☕-java-,-oop.html#2._new연산_이용방식_-_String_str2_=_new_String(\"안녕\");","study/cs/☕-java-,-oop.html#둘다_\"안녕\"_이라는_문자열을_저장하는_점은_같지만,_JVM_내부_메모리_측면에서는_큰_차이가_있다.","study/cs/☕-java-,-oop.html#비교_연산","study/cs/☕-java-,-oop.html#equals","study/cs/☕-java-,-oop.html#==","study/cs/☕-java-,-oop.html#SpringBuffer와_SpringBuilder","study/cs/☕-java-,-oop.html#SpringBuffer란?","study/cs/☕-java-,-oop.html#또한_다양한_내장_메서드를_지원하여,_문자열을_가공할_수_있다.","study/cs/☕-java-,-oop.html#String__vs__(SpringBuffer와_SpringBuilder)","study/cs/☕-java-,-oop.html#String은_불변","study/cs/☕-java-,-oop.html#SpringBuffer와_SpringBuilder는_가변","study/cs/☕-java-,-oop.html#그렇다면_문자열_+_연산시에는_무조건_String을_사용하는것이_옳지_않은건가??","study/cs/☕-java-,-oop.html#AOP위빙_방식","study/cs/☕-java-,-oop.html#pointcut__advice를_적용시킬_조건_정의","study/cs/☕-java-,-oop.html#advice__pointcut으로_적용시킨_프록시에서의_동작_정의","study/cs/☕-java-,-oop.html#aspect__pointcut_+_advice","study/cs/☕-java-,-oop.html#weaving__AOP_가_aspect를_적용시키는_행위","study/cs/☕-java-,-oop.html#AOP의_PointCut_실행_시점?","study/cs/☕-java-,-oop.html#**PointCut_조건_재평가의_이유**","study/cs/☕-java-,-oop.html#결론__실행_시_1번_,_메서드_최초_실행_시_1번._총_2번만_실행된다.","study/cs/☕-java-,-oop.html#단,_Advice는_메서드_최초_실행시_조건에_부합하다면_매번_실행된다.","study/cs/☕-java-,-oop.html#데코레이션_패턴_vs_프록시_패턴","study/cs/☕-java-,-oop.html#프록시란?","study/cs/☕-java-,-oop.html#여기서,_간접호출하는_대상을_==프록시==_라고_한다.","study/cs/☕-java-,-oop.html#프록시는_클라이언트와_서버의_중간에_위치하기_때문에,_여러가지_일을_수행할_수_있다.","study/cs/☕-java-,-oop.html#프록시는_대체_가능해야_한다.","study/cs/☕-java-,-oop.html#프록시_패턴과_데코레이터_패턴","study/cs/☕-java-,-oop.html#데코레이터_패턴","study/cs/☕-java-,-oop.html#프록시_패턴","study/cs/☕-java-,-oop.html#Spring의_지연로딩?","study/cs/☕-java-,-oop.html#지연로딩(Lazy_Loading)의_기본동작.","study/cs/☕-java-,-oop.html#자신과_연관된_엔티티를_실제로_사용할_때_연관된_엔티티를_조회하는_방식","study/cs/☕-java-,-oop.html#Java의_리플렉션이란?","study/cs/☕-java-,-oop.html#'바인딩'이란?","study/cs/☕-java-,-oop.html#정적_바인딩","study/cs/☕-java-,-oop.html#동적_바인딩","study/cs/☕-java-,-oop.html#Reflection_사용_이유","study/cs/☕-java-,-oop.html#동적으로_Class를_사용_해야할_경우","study/cs/☕-java-,-oop.html#Test_Code_작성","study/cs/☕-java-,-oop.html#자동_Mapping_기능_구현","study/cs/☕-java-,-oop.html#Reflection_사용_방법","study/cs/☕-java-,-oop.html#Java의_람다란?","study/cs/☕-java-,-oop.html#자유변수","study/cs/☕-java-,-oop.html#여기서,_람다_시그니처의_파라미터로_넘겨진_변수가_아닌,_외부에서_정의된_변수를","study/cs/☕-java-,-oop.html#==자유_변수==라고_한다._또,_람다_바디에서_자유_변수를_참조하는_것을","study/cs/☕-java-,-oop.html#==람다_캡쳐링==이라고_한다.","study/cs/☕-java-,-oop.html#제약조건","study/cs/☕-java-,-oop.html#왜_`final`이어야_할까?","study/cs/☕-java-,-oop.html#어떻게_해결했을까?","study/cs/☕-java-,-oop.html#주의점","study/cs/☕-java-,-oop.html#Static_키워드에_대하여","study/cs/☕-java-,-oop.html#static변수","study/cs/☕-java-,-oop.html#static메서드","study/cs/☕-java-,-oop.html#즉,_Static은_코드의_재사용성과_효율성을_높일_수_있지만,_객체지향_원칙과_메모리_관리를_고려하여_옳바르게_사용하도록_해야한다.","study/cs/☕-java-,-oop.html#JVM의_Stack과_Heap","study/cs/☕-java-,-oop.html#스택(Stack)영역","study/cs/☕-java-,-oop.html#1._기본(원시)타입_변수는_스텍영역에_직접_값으로_저장된다.","study/cs/☕-java-,-oop.html#2._참조타입(new연산자)_등은_힙영역이나_메소드_영역의_객체_주소를_가진다.","study/cs/☕-java-,-oop.html#스텍_영역은_각_스레드_마다_하나씩_존재한다.","study/cs/☕-java-,-oop.html#스레드가_시작될_때_할당되며,_고정된_사이즈를_갖는다.","study/cs/☕-java-,-oop.html#힙(Heap)영역"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/cs/☕-java-,-oop.html","pathToRoot":"../..","createdTime":1739844224869,"modifiedTime":1739946524872,"sourceSize":36029,"sourcePath":"study/CS/☕ JAVA , OOP.md","exportPath":"study/cs/☕-java-,-oop.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20250110101642.png","사진-및-문서/pasted-image-20250110103409.png","사진-및-문서/pasted-image-20250110122312.png","사진-및-문서/pasted-image-20250122111223.png"]},"study/cs/🍃-spring.html":{"title":"🍃 Spring","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:SPRING\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#SPRING</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:FRAMWORK\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#FRAMWORK</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:SPRING\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SPRING\">#SPRING</a> <a href=\"http://lts.kr?query=tag:FRAMWORK\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#FRAMWORK\">#FRAMWORK</a><br>1. 컴파일러에게 코드작성 문법에러를 체크하도록 정보 제공\n2. 빌드나 배치시 코드를 자동으로 생성할수 있도록 정보 제공\n3. 실행시 특정 기능을 수행하도록 정보 제공\n<br>- Spring컨테이너에 의해 관리되는 재사용 가능한 컴포넌트이다.\n즉 스프링이 관리하는 자바 객체 이다.\n- getter/setter를 포함한다.\n<br>이때 객체가 생성된다면 싱글톤 패턴으로 생성이 된다. ** Spring Framework의 도움을 받으면 단점을 줄이고 장점을 사용할 수 있다.\n<br>*@Controller / @Service / @Repository 등의 어노테이션을 포함한다.<br>\n싱글톤패턴?<br>인스턴스(객체)가 오직 한개만 생성된다\n<br>장점 : 메모리낭비를 방지한다.<br>\n이미 생성된 객체를 재사용하기 때문에 속도가 빠르며<br>\n전역으로 사용되는 인스턴스이기 때문에 데이터공유가 쉽다.\n<br>단점 : 테스트에 어려움이있다.<br>\n자식클래스를 만들수없다.<br>\n내부의 상태를 변경하기 어렵다.\n<br> - 컴포넌트와 컨트롤러 모두 Bean객체를 등록하지만\n컨트롤러는 url과 클래스를 이어주는 역할을 할 수 있다.\n<br>JAVA오브젝트로 자동 변환해준다. (Controller기준 받는 입장)\n<br>프론트앤드에서 Ajax요청시 JSON형식으로 값이 넘어오는데,<br>\n이 JSON형식을 받을때 사용하는 어노테이션이다. <br>자동으로 자바객체로 바꿔준다.\n<br>- 외부API에서 name으로 넘긴 값을 String name에 저장함.\n<br>- Autowired/생성자/setter 이렇게 총 3가지 방법으로 의존성을 주입받을 수 있다.\n<br>- 경로변수는 {id}로 둘러싸인 값을 의미한다.\n- 주로 상세조회, 수정, 삭제 등의 작업에서 리소스 식별자로 사용된다.\n<br>하이버네이트가 오브젝트를 대신 갱신한다.\n<br>*빌더 패턴이란? : 생성자에 파라미터를 주입하여 생성하는것이 아닌, 별도의 Builder를 두어서 객체를 생성하는것을 말한다.\n생성자가 없는경우 : 모든 맴버 변수를 파라미터로 받는 기본 생성자 생성\n생성자가 있는 경우 : 따로 생성자를 생성하지 않음\n<br>@Getter/@Setter/@ToString/@EqualsAndHashCode/@RequiredArgsConstructor를 자동으로 적용시켜준다.\n<br>@NonNull이나 final이 붙은 필드값 들에 대해 생성자를 자동으로 생성해준다. ( @Autowired를 사용하지 않고 의존성주입이 가능하다)\n해당 어노테이션을 사용하면 클래스가 의존하고 있는 필드를 간단하게 초기화할 수 있다.\n<br>해당 어노테이션을 사용하면 클래스의 모든 필드값을 한 번에 초기화할 수 있다.\n<br>해당 어노테이션을 사용하면 클래스에 명시적으로 선언된 생성자가 없더라도 인스턴스를 생성할 수 있다. 개발자가 실수로 클래스의 필드 중 하나의 필드에 대한값 설정을 누락 시킬수도 있어, 객체는 불완전한 상태가 되어버린다.\n이를 방지하고자 모든 필드값을 가지도록 강제하고 싶다면, AccessLevel.PROTECTED 속성을 부여해줘 해결할 수 있다.\n다음과 같은 속성을 부여해주면, 기본 생성자의 접근 제어가되어 IDE단계에서 누락을 방지할 수 있다.\n<br>- equals는 두 객체의 내용이 같은지, 동등성을 비교하는 연산자이다.\n- hashcode는 두 객체가 같은 객체인지, 동일성을 비교하는 연산자 이다.\n<br>\n<br>생성자의 파라미터가 많은 경우 가독성이 떨어진다. <br>빌더패턴으로 생성하는 경우 각 값들이 함수로 셋팅이되고, 각각 무슨값들이 어떠한 것을을 의미하는지 파악하기가 수월하다.<br>\nex)<br>\nBag bag = new Bag(\"name\", 1000, \"memo\", \"20\", \"30\");<br>\nvs<br>\nBag bag = Bag.builder()<br>\n,name(\"name\")<br>\n,money(1000)<br>\n,memo(\"memo\")<br>\n,won(20)<br>\n,dolor(30)<br>\n,build(); <br>어떠한 값을 먼저 넣더라도 상관없다(순서x) <br>생성자의 경우 정해진 파라미터대로 값을 입력해야 정해진 값에 매핑이 되지만, 빌더패던의 경우 필드 이름을 기준으로 값을 삽입하게 때문에 순서를 생각하지 않아도 된다. <br>\n<br>@NoArgsConstructor로 기본 생성자의 생성을 방지하고, @Builder를 이용하여 객체의 생성에 유연성을 준다.<br>\n이때, 이 2개의 어노테이션을 함께 사용하기 위해서는 @AllArgsConstructor 어노테이션이 필요하다.\n<br>이유 : @Build는 위에서 설명한 바와 같이 생성자가 없다면 모든 파라미터를 갖는 생성자를 생성하지만, @NoArgsConstructor로 인해 아무런 생성자를 생성하지 않는다. 이때 build메서드를 사용하여 모든파라미터를 받는 메서드(생성자)를 동작시키면 매칭되는 생성자가 없기때문에 오류를 야기한다.<br>\n따라서 @AllArgsConstructor 어노테이션을 추가로 작성하여 해결할 수 있다.<br>더 깔끔한 방법으로는 직접 생성자를 생성해주고, 빌더 패턴에서 해당 생성자를 사용하도록 하는 방법도 있다.<br>- 위 두개의 어노테이션을 편리하게 생성자를 자동으로 생성해 주지만, 주의를 요할 필요가 있다.\n<br>어떠한 클래스에서 순서대로 인자를 받는 생성자가 있다고 했을 때, 개발자가 임의로 순서를 변경할 경우, 리펙토링은 전혀 작동하지 않고, lombok이 개발자가 인지하지 못하는 사이에 순서에 맞춰 두 필드를 변경해 버린다.\n<br>그렇기 때문에 순서의 구애받지 않는 @Builder 어노테이션을 사용한는 것을 권장하고 있다.\n<br> Mutable(변경가능한)객체에 아무런 파라미터 없이 그냥 사용하는 경우에 문제가 발생할 수 있다.\n<br>동일한 객체임에도 불구하고 Set으로 필드값을 변경하게 되면, hashCode가 변경되면서 찾을 수 없게되는 부분이 있다. <br>- 위에서 설명한 @RequiredArgsConstructor 및 @EqualsAndHashCode를 포함하고 있기 때문에 사용을 피하는 것이 좋다.\n<br>- 불변 클래스를 생성해주는 @Value또한, @EqualsAndHashCode와 @AllArgsConstructor를 포함하고 있기 때문에 사용을 피하는것이 좋다. - 불변클래스 이기 때문에 @EqualsAndHashCode는 문제가 되지 않지만, AllArgsConstructor가 문제를 일으킬 가능성이 있다.\n<br>- 두가지 모두 브라우저 저장 장소이다.\n주로, 휘발성 데이터를 저장할 목적을 갖고있다. <br>\t@Component public class Controller{ @Autowired private Service servic ... }\n<br>- 단일책임의 원칙 위반\n- 의존성을 주입하기 쉽기 때문에, @Autoqwired아래에 개수 제한없이 추가할 수 있다.\n- 이때, 하나의 class가 많은 책임을 갖고, 순환참조가 이뤄질 수도 있기 때문에\n의존성이 높아져, 사용을 피하는것이 좋다.\n<br>\t@Component public class Controller{ private Service servic @Autowired private void setService(Service servic){ this.service = service; } }\n<br>선택적인 의존성을 사용할때 유용하다.<br>\n스프링 3.x 에서는 수정자 주입을 권장하고있다.<br>- 수정자 주입을 사용하게 되면, service구현제를 주입하지 않아도 controller객체는 생서이 가능하기때문에 널포인터익셉션이 발생할 가능성이 있다.\n주입이 필요한 객체가 주입되지 않아도 얼마든지 객체를 생성할 수 있다는것이 문제다.\n<br>\t@Component public class Service{ private DAO dao; //생성자 @Autowired private Service(DAO dao){ this.dao = dao; } } @Component public class Controller{ private final Service servic = new Service( new DAO( ) ); }\n<br>- Spring Framework 에서 권장하는 방법으로, 필수적으로 사용해야하는 의존성 없이는 객체를 만들지 못하도록 강제할 수 있기\n때문에 사용을 권장하고 있다.\n- Spring 4.3 버전 이후부터는 Class를 완벽하게 DI Framework로 부터\n분리할 수 있다.\n- 단일 생성자에 한해서 @Autowired를 붙이지 않아도 된다.\n- 필드 주입과 수정자 주입은 final로 선언할 수 없지만, 생성자 주입은 final로 필드 객체를 선언하여 런타임에 불변성을 보장한다.\n- 앞서 설명한 필드 주입의 모든 단점을 보완할 수 있다.\n<br>하지만 실무에서는 필드 주입을 주로 사용한다.<br>\n이유 : 가장 구현하기 쉽고, 읽기 편하기 때문이다.<br>Spring에서의 데이터 검증(Validation)은 여러 계층에 거쳐서 발생한다.<br>\n여기서, 가장 기본적인 검증 방법은 Bean Validation이다.<br>'필드'에 특정 어노테이션을 적용하여 필드가 갖는 제약 조건을 정의하는 구조로 이루어진 검사다.<br>\nvalidator가 그 클래스로 생성된 객체의 유효성 여부를 확인한다.<br>\n이때, 어떠한 비즈니스로직에 대한 검증이 아닌, 객체 자체 필드에 대한 검증을 한다.\n<br>\t@RestController @AllArgsConstructor public class BookController { private BookService bookService; @PostMapping(\"/books\") public void save(@RequestBody @Valid AddBookRequestDto addBookRequestDto, BindingResult bindingResult) { if(bindingResult.hasErrors()) { bindingResult.getAllErrors() .forEach(objectError-&gt;{ System.err.println(\"code : \" + objectError.getCode()); System.err.println(\"defaultMessage : \" + objectError.getDefaultMessage()); System.err.println(\"objectName : \" + objectError.getObjectName()); }); return; } bookService.save(addBookRequestDto.toEntity()); }\n<br>-&gt; 여기서@Valid 어노테이션이 Request에 있는 방인된 객체(dto)의 유효성을 확인하고<br>\n유효하지 않은객체라면 BindingResult 파라미터에 들어가게 된다.<br>그렇다면, @PathVariable과 @RequestParam은 어떻게 유효성 검사를 진행할까?<br>\n클래스에 @Validated 어노테이션을 등록해 주면 된다.\n@RestController<br>\n@Validated<br>\npublic class UserController {\n} <br>- Entity와 관련된 코드들은 많은데 비해 Dto의 경우는 상대적으로 적다.\n그런 상황에서 Entity의 변경가능성은 Dto의 비해서 또 적다.\n만약 Entity를 Request나 Respons에 사용하게 된다면 변경 가능성이 높아지고,\n동시에 같이 변경되는 코드들이 늘어나기 때문에 코드 유지보수를 생각했을때 분리하는것이 옳다.\n<br>- 엔티티 매니저는 DB커넥션처럼 사용된다. 즉, 엔티티매니저를 절대 공유해서는 안된다.\n하나의 스레드에서만 사용해야하며, 사용이 끝나면 반납해야한다.\n그 이유는 트렌젝션 단위로 엔티티매니저를 사용하기 때문이다.\n여러 쓰레드가 동시에 사용하게 된다면 영속성 과 DB간의 데이터동기화가 깨지게 되기 때문이다.\n<br>- 저장 프로시저는 각 DBMS에서 제공하는 기능으로, SQL문을 저장해놓고, 필요할 때마다 호출해서 사용하는 프로그래밍 기능이다.\n<br>\n<br>\nSQL의성능을 향상시킬수 있다. <br>SP를 실행하게 되면 최적화, 컴파일 단계를 거쳐, 결과가 캐시에 저장되게 되는데,<br>\n이 후 해당 SP를 실행하게 되면 캐시에 있는것을 가져와 사용하므로 실행속도가 빠르다. <br>\n유지보수 및 재활용 측면에서 유리하다. <br>응용프로그램 내에서 직접 SQL문을 호출하지않고 SP이름을 호출하도록 설정하면<br>\nSP파일만 수정하면 되기때문에 유지보수와 재활용 측면에서 유리하다 <br>\n보안이 강화될 수 있다. <br>사용자별로 테이블 권한을 부여하는것이 아닌, SP에만 접근 권한을 주는 방식으로 보안을 강화할 수 있다.<br>\n실제 테이블에 접근하여 조작하는것이 위험하기 때문에 개발자에게는 SP권한만 주는 방식을 많이 사용한다. <br>또한, 일반적인 쿼리들은 Where의 조건이 조금만 달라져도, 최적화 컴파일을 다시 수행하여야 하지만,<br>\n함수 형태의 SP로 생성하게 되면 매개변수만 변경하여 성능적인 측면을 크게 높일 수 있다.<br>1. DB에서 SP를 생성한다( 미리 작성되어있는 쿼리 모음 )\n2. SP의 리턴값을 저장하는 Entity클래스(@NamedStoredProcedureQuery어노테이션)으로 연결함.\n3. Repository에서 프로시저 객체를 생성한다. 이때, 2.에서 생성한 프로시저JPA의 파라미터를 설정한 후 execute한다.\n<br>궁금한점 : 저장 프로시저를 사용할경우 Entity는 테이블명으로 class와 연결하지 않아도 괜찮은것인가?<br>@NamedStoredProcedureQuery어노테이션을 Entity에 적용하면 DBMS에 정의 되어있는 SP(저장 프로시저)<br>\n와 연동하여 사용할 수 있다.\n<br>\tString username = \"java\"; String jpql = \"select m from Member m where m.username = :username\"; List&lt;Member&gt; result = em.createQuery(query, Member.class).getResultList()\n<br>jpql이란 JPA의 일부로, 쿼리를 Table이 아닌 객체 기준으로 작성하는 객체지향 쿼리 언어 이다.<br>문제점 : String형태 이기 때문에 개발자 의존적인 형태를 띈다.<br>\n컴파일 단계에서 Type-Check가 불가능하다.<br>\n런타임 단계에서 오류가 발생한다.(장애 리스크가 증가한다)<br>\tString username = \"java\"; List&lt;Member&gt; result = queryFactory .select(member) .from(member) .where(usernameEq(username)) .fetch();\n<br>QueryDSL은 해당 문제를 해결하기 위해서 나온 기능이다.<br>장점 : 문자가 아닌 코드로 쿼리를 작성할 수 있어 컴파일 시점에 문법오류 확인 가능.<br>\nIDE의 자동완성 기능의 도움을 받을 수 있다.<br>\n복잡한 쿼리나 동적 쿼리 작성이 편하다.<br>\n쿼리 작성시 제약조건 등 메서드를 추출해서 재사용할 수 있다.<br>- 두 클래스 모두 JPA에서 동적쿼리를 제작할 때 사용한다.\nBooleanBuilder는 if문을 각 데이터 조건에 맞게 코드로 작성할 수 있도록 도와주는 역할을 한다.\n<br>BooleanExpression 는 메서드를 생성하여 where절 안에서 호출하여 구현할 수 있다.<br>\n메서드 안에서 where절로 null이 반환되면 해당 조건이 무시되기 때문에 동적쿼리가 가능하다.<br>\n(모든 조건이 NULL을 반환하면 전체 엔티티를 불러오는 점을 주의하자)<br>\n메서드는 재사용이 가능하고, 메서드들 끼리 재조합도 가능하기 때문에 유지보수나, 재활용에 유리하다.<br>*동적쿼리 - 실행시점에서, 사용자나 프로그램의 사정에따라 쿼리의 조건이나 구조를 동적으로 결정할때 사용.<br>- SQL문법과 유사하게 복잡한 쿼리를 제작할 수 있게 도와주는 SPRING의 JPA지원 클래스이다.\n<br>ex)<br> private RemainDto firstList(DashBoardModel model) { return factory .select( Projections.fields( RemainDto.class, cfProductInvest.amount.sum().coalesce(0L).as(\"total\"), new CaseBuilder() .when(cfProduct.category.eq(\"2\")) .then(cfProductInvest.amount) .otherwise(0L).sum().coalesce(0L).as(\"estate\"), new CaseBuilder() .when(cfProduct.category.ne(\"2\")) .then(cfProductInvest.amount) .otherwise(0L).sum().coalesce(0L).as(\"noneEstate\") ) ) .from(cfProductInvest) .leftJoin(cfProduct) .on(cfProductInvest.productIdx.eq(cfProduct.idx)) .leftJoin(g5Member) .on(cfProductInvest.memberIdx.eq(g5Member.mbNo)) .where( g5Member.mbId.eq(model.getMbId()), cfProductInvest.investState.eq(\"Y\") ) .fetchOne(); }\n<br>- 스프링배치는 엔터프라이즈 시스템의 강력한 배치 어플리케이션을 개발할 수 있도록 설계된 배치프레임워크이다.\n- 일괄처리(Batch Processing), 분산처리 작업을 효율적으로 처리할 수있는 기능 제공.\n- 로깅/추적, 트렌잭션관리, 작업 처리통계, 작업재시작, 리소스관리 등 대용량 레코드 처리에 필수적인 기능을 제공\n- SpringBatch는 JobRepository로 동작하는데, 여기에 Job / JobLauncher / Step이 포함되어있다.\n<br>SpringBatch는 대량의 데이터를 일괄적으로 처리할 뿐<br>\n특정 주기마다 자동으로 돌아가는 스케줄링 기능은 없다.<br>\n단지, 스케줄러와 함계 사용할 수 있도록 설계되어있을 뿐이다.\n<br>그렇기 때문에 스케줄링 라이브러리인 Quartz라이브러리를 추가하여 같이 사용한다.<br>\n<br>독립적으로 실행할 수 있는 고유하며 순서가 지정된 스텝의 목록\n<br>애플리케이션 실행시 Job으로 인식되는 bean들이 자동으로 실행된다.\n<br>1개 이상의 Step을 포함하여 원하는 동작을 실행시킬 수 있다\n<br>배치 처리 과정 중 전체 계층의 최상단에 위치도\n<br>\n<br>job의 구성요소로 자체적인 입력/출력/처리를 가질 수 있다.\n<br>tasklet 또는 Chunk기반 처리를 포함하여 step안에서 수행될 기능들을 명시할 수 있다.\n<br>트렌젝션은 step내에서 이루어진다. 때문에, 독립되도록 의도적으로 설계된 것이다.\n<br>\n<br>Step의 작업 단위를 Tasklet으로 정의\n<br>주로 간단한 작업(단일 데이터 처리, 파일 삭제 등)에 적합하다.\n<br>@Component\npublic class SimpleTasklet implements Tasklet { @Override public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception { System.out.println(\"Tasklet 방식으로 작업 수행\"); return RepeatStatus.FINISHED; }\n} @Bean\npublic Step step1(StepBuilderFactory stepBuilderFactory) { return stepBuilderFactory.get(\"step1\") .tasklet(new SimpleTasklet()) .build();\n} @Bean\npublic Job job(JobBuilderFactory jobBuilderFactory, Step step1) { return jobBuilderFactory.get(\"job\") .start(step1) .build();\n} <br>\n<br>대량 데이터를 일정 크기(chunk)로 나누어 처리한다.\n<br>Reader / Processor / Writer로 구성된다.\n<br>@Bean\npublic FlatFileItemReader&lt;String&gt; reader() { return new FlatFileItemReaderBuilder&lt;String&gt;() .name(\"fileReader\") .resource(new ClassPathResource(\"input.txt\")) .lineMapper(new DefaultLineMapper&lt;String&gt;() { { setLineTokenizer(new DelimitedLineTokenizer()); setFieldSetMapper(new PassThroughFieldSetMapper()); } }) .build();\n} @Bean\npublic ItemProcessor&lt;String, String&gt; processor() { return item -&gt; \"Processed \" + item;\n} @Bean\npublic FlatFileItemWriter&lt;String&gt; writer() { return new FlatFileItemWriterBuilder&lt;String&gt;() .name(\"fileWriter\") .resource(new FileSystemResource(\"output.txt\")) .lineAggregator(new PassThroughLineAggregator&lt;&gt;()) .build();\n} @Bean\npublic Step step(StepBuilderFactory stepBuilderFactory) { return stepBuilderFactory.get(\"step\") .&lt;String, String&gt;chunk(10) .reader(reader()) .processor(processor()) .writer(writer()) .build();\n} @Bean\npublic Job job(JobBuilderFactory jobBuilderFactory, Step step) { return jobBuilderFactory.get(\"job\") .start(step) .build();\n} <br>\n<br>잡 리스너를 이용해서 스프링batch 생명주기의 여러로직을 추가할 수 있다.<br>\nex) beforeJob , afterJob 등등\n<br>=&gt; 스케줄러는 Jenkins에서 SSH스크립트를 통해 주기적으로 실행한다. Controller에 POST주소가 맵핑되어있는 이유는 테스트로 직접 실행하기 위함이다.<br>\n<br>Tasklet 방식과 Chunk 방식 모두 사용 가능하지만, 보통 Chunk방식에서 사용한다.\n<br>\n<br>대량 데이터를 효율적으로 처리하기 위해 데이터를 여러 개의 작은 조각(Partition)으로 나눠 병렬적으로 처리하는 기술입니다. Spring Batch에서 파티셔닝은 마스터-슬레이브 패턴을 사용하며, 마스터는 작업을 분할하고 슬레이브는 각각의 분할된 작업을 수행합니다.\n<br>import org.springframework.batch.core.partition.support.Partitioner;\nimport org.springframework.batch.item.ExecutionContext;\nimport java.util.HashMap;\nimport java.util.Map; public class RangePartitioner implements Partitioner { @Override public Map&lt;String, ExecutionContext&gt; partition(int gridSize) { Map&lt;String, ExecutionContext&gt; partitions = new HashMap&lt;&gt;(); int min = 1; // 데이터베이스 ID의 최소값 int max = 5; // 데이터베이스 ID의 최대값 int targetSize = (max - min) / gridSize + 1; // 각 Partition의 범위 크기 int start = min; int end = start + targetSize - 1; for (int i = 0; i &lt; gridSize; i++) { ExecutionContext context = new ExecutionContext(); context.putInt(\"minId\", start); // 시작 ID context.putInt(\"maxId\", end); // 종료 ID partitions.put(\"partition\" + i, context); start += targetSize; end += targetSize; } return partitions; }\n}\n<br>\n<br>데이터베이스에 100개의 레코드가 있음.\n<br>gridSize = 4: 데이터를 4개의 Partition으로 나눔.\n<br>chunkSize = 10: 각 Partition에서 데이터를 10개씩 읽어 처리.\n<br>스레드 풀 크기 = 4: 4개의 Partition이 동시에 실행 가능.\n<br>코드가 여러줄 나올거같진 않아서 방식은<br>\n페어 프로그래밍 방식으로 진행하도록 하죠<br>개발 절차는 이렇게 갈 예정이에요<br>Chunk, Partioning방식을 Job을 추가 개발 (기존 balanceJob 유지)\n<br>당분간 두 Job을 병행하면서 비교\n<br>추가한 Job 기능에 문제없다면 기존 balanceJob 삭제\n<br>\n<br>\nPartition 생성: <br>Partition 1: ID 1 ~ 25\n<br>Partition 2: ID 26 ~ 50\n<br>Partition 3: ID 51 ~ 75\n<br>Partition 4: ID 76 ~ 100 <br>\n각 Partition에서 Chunk 처리: <br>Partition 1: <br>Chunk 1: ID 1 ~ 10 → 커밋\n<br>Chunk 2: ID 11 ~ 20 → 커밋\n<br>Chunk 3: ID 21 ~ 25 → 커밋 <br>Partition 2: <br>Chunk 1: ID 26 ~ 35 → 커밋\n<br>Chunk 2: ID 36 ~ 45 → 커밋\n<br>Chunk 3: ID 46 ~ 50 → 커밋 <br>나머지 Partition도 동일 방식으로 처리. <br>\n병렬 실행: <br>스레드 풀 크기 = 4이므로 4개의 Partition이 동시에 실행됩니다.\n<br>Partition 처리 순서는 스레드 풀에서 처리되는 순서에 따라 다를 수 있음. <br>\n트랜잭션 관리: <br>각 Partition은 독립적인 트랜잭션을 가짐.\n<br>각 Chunk가 커밋될 때마다 트랜잭션이 종료됨. <br>투자신청기록쪽 api -&gt; API레스폰스모델<br>\n웹플럭스(비동기 기반)을 사용해서 service프로젝트와 (내부)통신한다.<br>내부통신을 위해 필요한 헤더, url등을 생성해야하기 때문에 senderutils 클래스를 공통(빈)을 정의해서 만들어 통신.<br>retrieve ** 중요<br>\n웹클라이언트 클래스 객체를 사용해서 uri 콘텐츠 등등 헤더와 바디(데이타)를 정의한다<br>\n<br>스프링5에서 소개된 리엑티브 프로그래밍, 반응형 및 비동기적인 웹 어플리케이션 개발을 지원하는 모듈이다.<br>\n<img alt=\"Pasted image 20240611144129.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240611144129.png\" target=\"_self\">\n<br>*리엑티브 프로그래밍이란 ?<br>\n- 비동기 및 이벤트 기반 애플리케이션을 개발하기 위한 패러다임으로, 주로 높은 확장성과 성능을 제공하는것<br>내부통신을 이용하여 API프로젝트와 통신할때 주소 맵핑이 어떻게 이루어지는지??<br>\n- Spring WebClient를 이용하여 내부 통신을 한다.<br>\n<br>\nSpringWebFlux의 일부로써, 비동기적인 방식으로 HTTP 요청을 보내고 응답을 받을 수 있는 라이브러리이다. <br>\n웹으로 API를 호출하기 위해 사용되는 HTTP Client모듈 중 하나이다. <br>\nRestTemplate과 같은 기능을 하지만, RestTemplate는 Blocking 방식이고, WebClient는 Non-Blocking방식이다.<br>\nBlocking 동기 - Non-Blocking 비동기 ( 정확히 같은것은 아니지만 비슷하다 ? ) <br>\n요청자(APP)에서 WebClient라이브러리를 사용한 senderUtils를 사용하여<br>\n프로퍼티 소스와, 송신방식(GET/POST), 넘길 값(DTO), request를 수신할 값(ApiResponseModel)을 설정한다. <br>-SpringMVC에서는 WebFlux와 달리, 블로킹I/O를 사용하기 때문에, 동기적인 작업을 수행할 떄에는 WebClient보다 RestTemplat이 효과적이지만, 비동기 작업을 할 때에는 WebClient를 사용하는것이 효과적이다.<br>\n<br>Thread Pool을 애플리케이션 구동시 미리 만들어 두고,<br>\n요청시 가용한 Thread가 있다면 1요청당 1Thread가 할당된다.\n<br>만약 가용한 스레드가 부족하다면 Queue는 대기하게 되며,<br>\n전체 서비스의 속도가 현저히 느려지게 된다.\n<br>\n<br>Core당 1개의 Thread를 사용한다.\n<br>요청은 Event Loop내의 job으로 등록되고, 각 job을 제공자에게 요청한 후,<br>\n기다리지 않고 다른 job을 처리한다.\n<br>Event Loop는 제공자로부터 callback으로 응답이 오면, 그 결과를 요청자에게 제공하낟.\n<br>따라서 반응성/탄력성/가용성/비동기성 을 보장하기 때문에 동시사용자가 크게 몰렸을때<br>\nRestTemplate에 비해 성능이 저하되지 않는다.\n<br>- 웹 애플리케이션 최전방에서 사용자의 요청을 접수하여 URL기주능로 요청을 처리할 controller를 찾고, 그 controller에 처리를 위임한 후, 결과를 받아서 사용자에게 처리 결과가 담긴 화면을 제공해준다.\n<br>설정은 web.xml의 정보를 활용한다. 사용자 요청을 처리할 Controller목록과 사용자 에게 보여줄 화면을 찾는 ViewResolver가 있다.\n<br>#### PathVariable 방법 @RestController public class SecondController { @GetMapping(\"/second/{id}\") //PK(id)가 (변수)인 페이지를 찾고 싶다 public String getData(@PathVariable Integer id) { return \"id : \"+id; }\n#### QueryString 방법 @GetMapping(\"/second\") public String getData2(String title, String content) { return \"title:\"+title+\", content :\"+content; }\n<br>@PostMapping(\"/second\") public String postData(String title, String content) { return \"title:\"+title+\", content :\"+content; }\n<br>\t@PutMapping(\"/second\") public String putData(String title, String content) { return \"title:\"+title+\", content :\"+content; }\n<br>PostMapping과 같은원리로 작동한다\n<br>\t@DeleteMapping(\"/second/{id}\") //쿼리스트링 해도 됨 public String deleteData(@PathVariable Integer id) { return id+\"delete ok\"; }\n<br>\n<br>데이터 전달이 필요한 경우 @RequestParam을 사용하거나<br>\n@DeleteMapping 대신에 @PutMapping을 사용하도록 하자\n<br> 내생각에는 메서드를 명시적으로 작성 할 수 있기 때문에 더욱 가독성이 높아지는 장점이 있지 않을까 싶다.\n<br>\n<br>\n애플리케이션 내부-외부 사이의 메시징을 가능하게 하는 프레임워크이다. <br>\nSpring Framwork에서 매세징이란 메타데이터와 함께 결합되어있는 이련의 자바 오브젝트를 위한 포괄적인 Wrapper를 말한다. 메시지는 여러개의 헤더로 구성된다. <br>\nEnterprise Integration Patterns은 엔터프라이즈 환경에서 사용하고 있는 다양한 분야(ex. 결제,메일, 각 부서별 서비스) 의 애플리케이션을 통합, 즉 유기적으로 연결해서 효율적으로 적절하게 통합하는 방법을 여러 패턴을 통해 제시했다. <br>\n하나의 동작을 하는 서비스의 각각의 기능들(프로젝트)이 내/외부 모듈과 접촉하는 부분을 쉽게 구성할 수 있도록 하는 기능들을 제공한다. <br>\n<br>채널: 한 요소로부터 다른 요소로 메시지를 전달\n<br>필터: 조건에 맞는 메시지가 플로우를 통과하게 해줌\n<br>변환기: 메시지 값을 변경하거나 메시지 페이로드의 타입을 다른 타입으로 변환\n<br>라우터: 여러 채널 중 하나로 메시지를 전달하며 대개 메시지 헤더를 기반으로 함\n<br>분배기: 들어오는 메시지를 두 개 이상의 메시지로 분할하며, 분할된 각 메시지는 다른 채널로 전송\n<br>집적기: 분배기와 상반된 것으로 별개의 채널로부터 전달되는 다수의 메시지를 하나의메시지로 결합함\n<br>서비스 액티베이터: 메시지를 처리하도록 자바 메서드에 메시지를 넘겨준 후 메서드의 반환값을 출력 채널로 전송\n<br>채널 어댑터: 외부 시스템에 채널을 연결함. 외부 시스템으로부터 입력을 받거나 쓸 수 있음\n<br>게이트웨이: 인터페이스를 통해 통합플로우로 데이터를 전달\n<br>\n<br>Spring Integration은 'pipe and filters' 모델을 구현하기 위해 3가지 핵심 개념으로 구성되어 있다.\n<br>header, payload로 구성되어 있는 내용을 포함하고 있는 generic wrapper. 컴포넌트 간에 이동되는 실제 데이터이다.\n<br><img alt=\"Pasted image 20240605160336.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240605160336.png\" target=\"_self\"><br>pipes-and-filters 모델의 pipe에 해당.\n컴포넌트간의 메세지 중간 통로 역할을 함으로써 컴포넌트간 디컬플링을 유지 할 수 있도록 하며 interception, monitering 포인트가 될 수 있다. 다른 주요 기능 중 하나는, 메세지 버퍼 역할을 할 수 있는 Queue로써 동작할 수 있다.\nFIFO방식으로 컨슈머가 가져갈 때 까지 큐에 저장된다.\n<br>ex)<br>\n@Bean<br>\npublic MessageChannel sampleChannel() {<br>\nreturn new DirectChannel();<br>\n}<br>\n-&gt; DirectChannel은 Point to Point로, 하나의 MessageHeader에게 Message를 전달한다.<br>\n이외에도 다양한 체널종류가 있다.<br>pipes-and-filters 모델의 filters에 해당.\nSpring integration상에서 채널을 통해서 메세지를 받고, 소비하는 주체이며 하나의 클래스이다.\n여기서 말하는 EndPoint란 Spring integration이 구성할 파이프라인의 끝단이 아닌, 파이프라인 중간에서 메세지를 변경하거나 필터링 하거나, 다른 채널로 라우팅하는 요소이다.\n<br>ex)\n@MessageEndpoint\npublic class serverEndpoint { ...\n}\n<br>\nSpring integration에서 일련의 작업들을 정의한 플로우를 integration flow 라고 하는데, 이 플로우가 Message Endpoint로 구성되어있다. <br>\n엔드포인트는 작업 타입에 따라 크게 그 종류를 나눌 수 있는데 Transformer(변형), Filter(필터링), Router(메세지를 특정 채널로 전송), Splitter(메세지를 분리하여 여러 채널로 전송), Aggregator(splitter의 반대), Service Activator(메세지로 특정 작업을 수행할 수 있는 핸들러를 붙일 수 있는 엔드포인트), Channel Adapter(외부 시스템과 입출력이 가능)가 있다. <br>\n<br>통합 파이프라인 중간에 위치하며, 조건을 기반으로 플로우의 전 단계로부터 다음단계로의 메세지 전달에 조건을 달 수 있다.<br>\nex)\n<br>@Filter( inputChannel=\"numberChannel\", outputchannel=\"evenNumberChannel\" )\npublic boolean evenNumberFilter( Integer number ) { return number % 2 == 0; //숫자를 받아 짝수만 전달\n}\n<br>\n<br>입력체널로 부터 메세지를 수신하고, 이 메세지를 MessageHandler 인터페이스를 통해 구현한 클래스에 전달(서비스호출)한다.\n<br>서비스를 메시징 시스템에 연결하기 위한 앤드포인트이다.\n<br>입력 채널이 설정되어 있어야 하고, 서비스가 값을 리턴하도록 구현했다면 출력 채널도 설정해야한다.\n<br>**만약 출력체널을 설정하지 않았을 때 메세지에 \"return address\"가 있다면 이 헤더에 지정한 체널로 응답을 전송한다.\n<br>MessageChennel메서드를 입력해서 파이프라인을 구축한다,\n<br>ex)\n@ServiceActivator(inputChannel = \"sampleChannel\") { }\n<br>1. e.getMessage() : 에러 메시지의 정보를 받음\n2. e.getExceptionCode() : 에러 메시지 발생 코드를 받음\n3. e.getStatus() : 에러 메시지의 발생 상태를 받음\n4. HttpStatus(enum 클래스)를 받아 해당 value(Code) 와 getReasonPhrase(message)를 얻을 수 있음\n<br>1. 체크 예외 발생한 예외를 잡아서(catch) 체크 후 예외를 복구 or 회피 하도록 만드는 구체적인 처리를 필요로 하는 예외이다. try catch가 강제된다. 컴파일 시점에서 에러의 확인이 가능하다. try catch를 할 수 없다면 예외를 밖으로 던지는 Throw 예외를 필수로 선언해 주어야 한다.\n2. 언체크 예외 예외를 잡아서 해당 예외에 대한 처리가 필요 없는 예외. RuntimeException을 상속 받은 예외들이 이에 포함된다.\n<br>UncheckedException으로 처리\n<br>try { 예외가 생길 가능성이 있는 코드\n} catch (예외종류){ 예외처리 코드\n} finaly { 예외와 상관없이 항상 실행시킬 코드(선택사항)\n}\n<br>자바에서는 Exception클래스에서 상속받은 다양한 Exception클래스를 갖고 있기 때문에, 여러가지 에러 발생 가능성에 대해서 예외 구문을 처리해 줄 수 있다.<br>자신을 호출하는 메서드에 예외처리의 책임을 떠넘기는 것이다.<br>\n단, throws를 사용하려면 반드시 호출한 메서드에 try-catch 구문을 사용하여 예외를 처리해 주어야 한다.<br>public class ThrowTest { public static void main(String[] args) { int n1, n2; n1=12; n2=0; try { throwTest(n1, n2); } catch (ArithmeticException e) { // n1/n2 라면 발생했을 것 System.out.println(\"ArithmeticException: \" + e.getMessage()); } } public static void throwTest(int a, int b) throws ArithmeticException{ System.out.println(\"throw a/b: \"+ a/b); }\n}\n<br>throw와 throws는 큰 차이가 있다.<br>\nthrow는 개발자가 직접 예외를 발생시키고싶을 떄 사용하는 것이다.<br>\n주로 RuntimeException처리를 위해 사용한다.<br>**checkedException에서도 사용이 가능하다.<br>throw new IOException(\"IO Exception occurred\");\n<br>사용예제<br>public class ThrowTest { public static void main(String[] args) { int n1, n2; n1=12; n2=0; try { throwTest(n1, n2); } catch (ArithmeticException e) { // n1/n2 라면 발생했을 것 System.out.println(\"ArithmeticException: \" + e.getMessage()); } } public static void throwTest(int a, int b) throws ArithmeticException{ throw new ArithmeticException(); }\n}\n<br>해당 코드의 익셉션 메세지는 null 로 뜨게 된다.<br>\nthrow는 Exception을 던질 때, 예외 내용을 함께 던져 주지 않기 때문이다.<br>\n그래서 개발자가 Exception을 따로 커스터마이징해서 만들고, 그 안에 메세지를 넣어서 던져주는 방식이다.<br>\n<br>\nCheckedException =&gt; try ~ catch 문, throws(의존관계) 로 처리! <br>\nUnCheckedException(RuntimeException) =&gt; 기본적으로 복구 불가능한 예외(발생시 런타임 중지)로, CheckedExceptoin이어도 더 구체적인 UnCheckedException으로 발생시켜! throw로 exception을 던지고, ExceptionHandler로 처리! <br>\n언체크드익셉션(런타입익셉션) -&gt; 기본적으로 복구 불가능한 예외(발생시 런타임 중지)로, 체크드익셉션이어도 더 구체적인 언체크드익셉션으로 발생시켜 쓰로우로 익셉션을 던지고, 익셉션핸들러로 처리 <br>\n<br>\n해당 구조가 갖는 장점이 무엇인가?<br>\n먼저 Serviced에 인터페이스를 구현하여 세부 구현체를 숨기고 인터페이스를 바라보게 함으로써 클래스간의 의존관계를 줄이는것 이다.<br>\n좀 더 쉽게 정리하면,<br>\n하나의 인터페이스를 구현하는 여러개의 구현체가 있고, 기능에 따라 적절한 구현체가 드어감으로써 다형성을 주기위함이다. <br>\n하지만, 인터페이스 하나에 구현체 한개만 사용하는경우는 어떠한가?<br>\n이렇게 된다면, 의존관계를 줄여주는 효과도, 다형성을 주는 효과도 없게된다.<br>\n하지만 보통의 경우 한개의 기능을하는 인터페이스를 여러기능의 구현체로 나누는 일은 쉽게 일어나지 않는다. <br>public interface CardPaymentService { void pay();\n} public class ShinhanCardPaymentService implements CardPaymentService{ private ShinhanCard shinhanCard; @Override public void pay() { shinhanCard.pay(); //신한 카드 결제 API 호출 // 결제를 위한 비즈니스 로직 실행.... }\n}\n<br>\n<br>위와 같은 경우, 하나의 인터페이스에 하나의 구현체를 갖지만, 향후 추가적으로 구현체가 더 생길여지가 있으니, 인터페이스를 두는것이 바람직 하다고 할 수 있다.\n<br>그렇다면 향후 구현체가 추가될 계획이 없는 기능들 까지 인터페이스를 만들어주어야 하는가?<br>그렇지 않다, 예를들어 간단하게 아이디를 기반으로한 조회기능 등은 인터페이스를 구현하지 않고 바로 서비스 객체를 생성하는것이 옳다.\n<br>public interface ChangePasswordService { public void change(MemberId id, PasswordDto.ChangeRequest dto);\n} public class ByAuthChangePasswordService implements ChangePasswordService { private MemberFindService memberFindService; @Override public void change(MemberId id, PasswordDto.ChangeRequest dto) { if (dto.getAuthCode().equals(\"인증 코드가 적합한지 로직 추가...\")) { final Member member = memberFindService.findById(id); final String newPassword = dto.getNewPassword().getValue(); member.changePassword(newPassword); // 필요로직... } }\n} public class ByPasswordChangePasswordService implements ChangePasswordService { private MemberFindService memberFindService; @Override public void change(MemberId id, PasswordDto.ChangeRequest dto) { if (dto.getPassword().equals(\"비밀번호가 일치하는지 판단 로직...\")) { final Member member = memberFindService.findById(id); final String newPassword = dto.getNewPassword().getValue(); member.changePassword(newPassword); } }\n}\n<br>이렇게 비밀번호를 변경하는 기능같은 경우에는 2가지 이상의 경우가 있기때문에 인터페이스로 구현하는것이 옳아보인다.<br>- Controller로 부터 값을 받는 객체로 사용.\n<br>\n<br>엔티티로부터 타입 변환을 하여 Controller로 넘겨주는 객체\n<br>Page&lt;Dto&gt; -&gt; List&lt;Dto&gt;\n<br><img alt=\"Pasted image 20240723134224.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240723134224.png\" target=\"_self\"><br><img alt=\"Pasted image 20240723134333.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240723134333.png\" target=\"_self\"><br>\n<br>비동기 적으로 입출력처리를 관리하기 때문에 전송 작업이 성공했는지 실패했는지 알수 있다.\n<br>비동기식 작업에서 높은 성능을 유지할수 있다.\n<br>@Test\n@DisplayName(\"같은 객체를 equals 비교\")\nvoid equals() { //given Menu friedChicken = new Menu(\"후라이드치킨\", 16_000); Menu friedChicken2 = new Menu(\"후라이드치킨\", 16_000); //when &amp; then assertThat(friedChicken).isEqualTo(friedChicken2);\n}\n<br>헤당 코드와 같이 구현한다면, false를 출력한다.<br>\n이유는 객체의 equals메서드는 주소값이 서로 다른 객체는 다른객체로 판단하기 때문이다.<br>이때, 왜 HashCode도 재정의 해야하나?<br>해당 규약으로 인하여, 서로다른 객체의 해쉬값을 통일시켜주어야 한다.","aliases":[],"tags":["#공부","#SPRING","#FRAMWORK"],"headers":[{"heading":"🍃 Spring","level":1,"id":"🍃 Spring"},{"heading":"@ 어노테이션이란 무엇인인가?","level":1,"id":"@_어노테이션이란_무엇인인가?"},{"heading":"Bean이란 무엇인가?","level":1,"id":"Bean이란_무엇인가?"},{"heading":"@Component는 내가 만든 클래스에 Bean을 주입하는역할을 한다.","level":1,"id":"@Component는_내가_만든_클래스에_Bean을_주입하는역할을_한다."},{"heading":"이때, @Component와 @Controller의 차이점은 무엇일까?","level":3,"id":"이때,_@Component와_@Controller의_차이점은_무엇일까?"},{"heading":"Spring 어노테이션@ 설명","level":1,"id":"Spring_어노테이션@_설명"},{"heading":"@RequestBody는 API호출시 넘겨주는 파라미터값(JSON등)을","level":2,"id":"@RequestBody는_API호출시_넘겨주는_파라미터값(JSON등)을"},{"heading":"@RequestParam은 외부API호출시 넘겨주는 파라미터값을 가져옴","level":2,"id":"@RequestParam은_외부API호출시_넘겨주는_파라미터값을_가져옴"},{"heading":"@Autowired는 빈(의존성)을 주입받기위해 사용.","level":2,"id":"@Autowired는_빈(의존성)을_주입받기위해_사용."},{"heading":"@Entity는 데이터베이스와 직접 연결된 클래스를 설정한다.","level":2,"id":"@Entity는_데이터베이스와_직접_연결된_클래스를_설정한다."},{"heading":"@PathVariable은 URL(경로)에서 변수를 추출하여 매개변수에 할당한다.","level":2,"id":"@PathVariable은_URL(경로)에서_변수를_추출하여_매개변수에_할당한다."},{"heading":"@Generated는 개발자가 아닌, DB에서 기계적으로 생성한 클래스이다.","level":2,"id":"@Generated는_개발자가_아닌,_DB에서_기계적으로_생성한_클래스이다."},{"heading":"@Builder는 빌더패턴을 완벽하게 지원해주는 어노테이션이다.","level":2,"id":"@Builder는_빌더패턴을_완벽하게_지원해주는_어노테이션이다."},{"heading":"@Data","level":2,"id":"@Data"},{"heading":"@RequiredArgsConstructor","level":2,"id":"@RequiredArgsConstructor"},{"heading":"@AllArgsConstructor 는 모든 필드값을 파라미터로 받는 생성자를 생성해준다.","level":2,"id":"@AllArgsConstructor_는_모든_필드값을_파라미터로_받는_생성자를_생성해준다."},{"heading":"@NoArgsConstructor 는 파라미터가 없는 디폴트 생성자를 생성해준다.","level":2,"id":"@NoArgsConstructor_는_파라미터가_없는_디폴트_생성자를_생성해준다."},{"heading":"@EqualsAndHashCode는 equals와 hashCode를 자동으로 생성해준다.","level":2,"id":"@EqualsAndHashCode는_equals와_hashCode를_자동으로_생성해준다."},{"heading":"빌더패던의 장점","level":4,"id":"빌더패던의_장점"},{"heading":"빌더패턴 구현","level":4,"id":"빌더패턴_구현"},{"heading":"Lombok 사용시 주의사항","level":1,"id":"Lombok_사용시_주의사항"},{"heading":"1. @AllArgsConstructor / @RequiredArgsConstructor 사용시","level":2,"id":"1._@AllArgsConstructor_/_@RequiredArgsConstructor_사용시"},{"heading":"2. 무분별한 @EqualsAndHashCode 사용","level":2,"id":"2._무분별한_@EqualsAndHashCode_사용"},{"heading":"3. @Data 사용금지","level":2,"id":"3._@Data_사용금지"},{"heading":"4. @Value 사용 금지","level":2,"id":"4._@Value_사용_금지"},{"heading":"SessionStorage 와 LocalStorage","level":1,"id":"SessionStorage_와_LocalStorage"},{"heading":"Spring에서의 의존성 주입 방법","level":1,"id":"Spring에서의_의존성_주입_방법"},{"heading":"Filed Injection(필드 주입)","level":2,"id":"Filed_Injection(필드_주입)"},{"heading":"사용하면 안되는 이유","level":3,"id":"사용하면_안되는_이유"},{"heading":"Setter Injection(수정자 주입)","level":2,"id":"Setter_Injection(수정자_주입)"},{"heading":"문제점","level":3,"id":"문제점"},{"heading":"Contructor Injection(생성자 주입)","level":2,"id":"Contructor_Injection(생성자_주입)"},{"heading":"생성자 주입을 사용해야 하는 이유","level":3,"id":"생성자_주입을_사용해야_하는_이유"},{"heading":"생성자 주입의 경우에도 순환참조가 똑같이 일어날 수 있지만, 필드, 수정자 주입과 다르게 런타임 시가 아니라, 컴파일 시 미연에 찾아낼 수 있다.","level":4,"id":"생성자_주입의_경우에도_순환참조가_똑같이_일어날_수_있지만,_필드,_수정자_주입과_다르게_==런타임==_시가_아니라,_==컴파일==_시_미연에_찾아낼_수_있다."},{"heading":"데이터 검증 (Validation)","level":1,"id":"데이터_검증_(Validation)"},{"heading":"Entity와 DTO를 분리해야하는 이유","level":1,"id":"Entity와_DTO를_분리해야하는_이유"},{"heading":"Spring의 EntityManager는 무엇일까?","level":1,"id":"Spring의_EntityManager는_무엇일까?"},{"heading":"DB의 저장 프로시저 (SP : Stored Procedure)란?","level":1,"id":"DB의_저장_프로시저_(SP__Stored_Procedure)란?"},{"heading":"사용하는 이유","level":3,"id":"사용하는_이유"},{"heading":"Spring에서의 저장 프로시저 동작원리","level":1,"id":"Spring에서의_저장_프로시저_동작원리"},{"heading":"JPQL과 QueryDSL 비교","level":1,"id":"JPQL과_QueryDSL_비교"},{"heading":"JPQL","level":2,"id":"JPQL"},{"heading":"QueryDSL","level":2,"id":"QueryDSL"},{"heading":"JPA에서 BooleanBuilder 와 BooleanExpression 이란?","level":1,"id":"JPA에서_BooleanBuilder_와_BooleanExpression_이란?"},{"heading":"JPAQueryFactory란?","level":1,"id":"JPAQueryFactory란?"},{"heading":"Spring Batch란?","level":1,"id":"Spring_Batch란?"},{"heading":"Batch 용어 설명","level":1,"id":"Batch_용어_설명"},{"heading":"Job","level":3,"id":"Job"},{"heading":"Step","level":3,"id":"Step"},{"heading":"tasklet","level":3,"id":"tasklet"},{"heading":"Chunk","level":3,"id":"Chunk"},{"heading":"Job Listener","level":3,"id":"Job_Listener"},{"heading":"hfbatJobScheduler(스케줄러)가 Job으로 등록되어있는 녀석들을 순차적으로 실행될할 때 , 누가 트리거 역할을 하는지","level":1,"id":"hfbatJobScheduler(스케줄러)가_Job으로_등록되어있는_녀석들을_순차적으로_실행될할_때_,_누가_트리거_역할을_하는지"},{"heading":"Spring Batch에서의 파티셔닝(Partitioning)","level":1,"id":"Spring_Batch에서의_파티셔닝(Partitioning)"},{"heading":"파티셔닝(Partitioning)","level":3,"id":"파티셔닝(Partitioning)"},{"heading":"파티션너(파티션 별 범위 - 컨텍스트 범위 설정)","level":4,"id":"파티션너(파티션_별_범위_-_컨텍스트_범위_설정)"},{"heading":"Chunk와 Partitioning의 병렬 실행 예제","level":3,"id":"**Chunk와_Partitioning의_병렬_실행_예제**"},{"heading":"예제 시나리오:","level":4,"id":"예제_시나리오"},{"heading":"실행 흐름:","level":4,"id":"실행_흐름"},{"heading":"ThreadPoolSize : 동시에 실행시킬 스테리드의 개수","level":3,"id":"ThreadPoolSize__동시에_실행시킬_스테리드의_개수"},{"heading":"gridSize : 실제로 제단할 사이즈(데이터를 얼마나 세분화해서 각 파티션 작업에 할당할 건지)","level":3,"id":"gridSize__실제로_제단할_사이즈(데이터를_얼마나_세분화해서_각_파티션_작업에_할당할_건지)"},{"heading":"QueueCapacity : 대기열 크기","level":3,"id":"QueueCapacity__대기열_크기"},{"heading":"APP - SERVICE - API 통신 플로우","level":1,"id":"APP_-_SERVICE_-_API_통신_플로우"},{"heading":"Spring WebFlux란?","level":1,"id":"Spring_WebFlux란?"},{"heading":"Spring WebClient란??","level":2,"id":"Spring_WebClient란??"},{"heading":"*Spring MVC환경에서도 SpringWebClient를 사용해도 될까?(현재 프로젝트가 이렇게되있다)","level":4,"id":"*Spring_MVC환경에서도_SpringWebClient를_사용해도_될까?(현재_프로젝트가_이렇게되있다)"},{"heading":"Spring WebClient VS RestTemplate","level":1,"id":"Spring_WebClient_VS_RestTemplate"},{"heading":"RestTemplate : Multi-Thread / Blocking방식","level":3,"id":"RestTemplate__Multi-Thread_/_Blocking방식"},{"heading":"Spring WebClient : Single-Thread / Non-Blocking 방식","level":3,"id":"Spring_WebClient__Single-Thread_/_Non-Blocking_방식"},{"heading":"DispatcherServlet의 역할","level":1,"id":"DispatcherServlet의_역할"},{"heading":"HTTP Method - Mapping","level":1,"id":"HTTP_Method_-_Mapping"},{"heading":"1. GetMapping","level":3,"id":"1._GetMapping"},{"heading":"2. PostMapping","level":3,"id":"2._PostMapping"},{"heading":"GetMapping은 PostMapping과 달리 http body값을 받는 메서드가 아니다. 따라서 GET요청에 Body값을 넣으면 null값이 나온다.","level":5,"id":"GetMapping은_PostMapping과_달리_http_body값을_받는_메서드가_아니다._따라서_GET요청에_Body값을_넣으면_null값이_나온다."},{"heading":"PostMapping에 body가 아닌 params에 값을 넣어도 값이 정상적으로 출력되는 이유는 params는 GET/POST/PUT/DELETE 모든 값이 나오기 때문이다. PostMapping을 원한다면 Body에 값을 넣어줘야한다","level":5,"id":"PostMapping에_body가_아닌_params에_값을_넣어도_값이_정상적으로_출력되는_이유는_params는_GET/POST/PUT/DELETE_모든_값이_나오기_때문이다._PostMapping을_원한다면_Body에_값을_넣어줘야한다"},{"heading":"3. PutMapping","level":3,"id":"3._PutMapping"},{"heading":"4. DeleteMapping","level":3,"id":"4._DeleteMapping"},{"heading":"DeleteMapping은 요청바디(@RequestBody)를 가지지 않는것이 일반적이다.","level":5,"id":"DeleteMapping은_요청바디(@RequestBody)를_가지지_않는것이_일반적이다."},{"heading":"그렇기에 @RequestBody를 사용하여 바디를 수신하는 것이 지원되지 않음","level":5,"id":"그렇기에_@RequestBody를_사용하여_바디를_수신하는_것이_지원되지_않음"},{"heading":"Get말고는 다들 비슷한 기능같은데 나누는 이유가 무었인지??","level":2,"id":"Get말고는_다들_비슷한_기능같은데_나누는_이유가_무었인지??"},{"heading":"Spring Integration이란?","level":1,"id":"Spring_Integration이란?"},{"heading":"Spring Integration을 구성하는 컴포넌트 종류","level":3,"id":"Spring_Integration을_구성하는_컴포넌트_종류"},{"heading":"3가지의 메인 Component","level":2,"id":"3가지의_메인_Component"},{"heading":"1. Message","level":4,"id":"1._Message"},{"heading":"2. Message Channel","level":4,"id":"2._Message_Channel"},{"heading":"3. Message Endpoint","level":4,"id":"3._Message_Endpoint"},{"heading":"Filter 란?","level":2,"id":"Filter_란?"},{"heading":"ServiceActivator 란?","level":2,"id":"ServiceActivator_란?"},{"heading":"예외처리(Exception)","level":1,"id":"예외처리(Exception)"},{"heading":"0. 에러 메세지로 부터 정보를 받는 메서드","level":3,"id":"0._에러_메세지로_부터_정보를_받는_메서드"},{"heading":"1. 체크 예외(Checked Exception)와 언체크 예외(UnChecked Exception)","level":3,"id":"1.__체크_예외(Checked_Exception)와_언체크_예외(UnChecked_Exception)"},{"heading":"2. 예외처리 방법 3가지","level":3,"id":"2._예외처리_방법_3가지"},{"heading":"1. try~catch : 다른 작업 흐름으로 유도한다. checkedException으로 처리","level":4,"id":"1._try~catch__다른_작업_흐름으로_유도한다._checkedException으로_처리"},{"heading":"2. throws~ : 호출한 쪽(부모)에게 예외 처리를 위힘한다.","level":4,"id":"2._throws~__호출한_쪽(부모)에게_예외_처리를_위힘한다."},{"heading":"3. throw~ : 명확한 의미의 예외로 바로처리, 개발자들이 비즈니스 로직에서 처리하는 방식","level":4,"id":"3._throw~__명확한_의미의_예외로_바로처리,_개발자들이_비즈니스_로직에서_처리하는_방식"},{"heading":"1. try-catch","level":2,"id":"1._try-catch"},{"heading":"2. throws","level":2,"id":"2._throws"},{"heading":"3. throw","level":2,"id":"3._throw"},{"heading":"결론","level":3,"id":"결론"},{"heading":"Spring MVC의 Service와 ServiceImpl 구조","level":1,"id":"Spring_MVC의_Service와_ServiceImpl_구조"},{"heading":"하나의 인터페이스의 하나의 구현체","level":3,"id":"하나의_인터페이스의_하나의_구현체"},{"heading":"결론 : 하나의 클래스에 너무 많은 역할을 부여하지 말자. (책임을 몰리지 말자)","level":5,"id":"결론__하나의_클래스에_너무_많은_역할을_부여하지_말자._(책임을_몰리지_말자)"},{"heading":"DTO ( Request와 Respons)","level":1,"id":"DTO_(_Request와_Respons)"},{"heading":"Request ( Json to DTO )","level":2,"id":"Request_(_Json_to_DTO_)"},{"heading":"Responsse ( Object to Json)","level":2,"id":"Responsse_(_Object_to_Json)"},{"heading":"페이지 펙토리 객체 생성시, 리스트 넘길때 Page리스트 객체일 필요없다.","level":1,"id":"페이지_펙토리_객체_생성시,_리스트_넘길때_Page리스트_객체일_필요없다."},{"heading":"PageFactory.paginate(dList, ((int) cnt), hfcfgLoanRequestDto)","level":3,"id":"PageFactory.paginate(==dList==,_((int)_cnt),_hfcfgLoanRequestDto)"},{"heading":"쿼리펙토리 빈으로 주입받은 것 바로 사용하기 ( 중복으로 생성할 필요 없음)","level":1,"id":"쿼리펙토리_빈으로_주입받은_것_바로_사용하기_(_중복으로_생성할_필요_없음)"},{"heading":"기존코드 :","level":3,"id":"기존코드_"},{"heading":"Netty란??","level":1,"id":"Netty란??"},{"heading":"netty란 java기반의 네트워크 프레임워크이다.","level":2,"id":"netty란_java기반의_네트워크_프레임워크이다."},{"heading":"webClient도 Netty안에 포함되어 있다.","level":3,"id":"webClient도_Netty안에_포함되어_있다."},{"heading":"장점","level":2,"id":"장점"},{"heading":"Equals() 와 HashCode() 재정의","level":1,"id":"Equals()_와_HashCode()_재정의"},{"heading":"String은 equals 잘쓰잖아? => String은 String pool에서 중복생성을 막고, 같은 값을 생성한다면 재사용하기 때문~","level":4,"id":"String은_equals_잘쓰잖아?_=>_String은_String_pool에서_중복생성을_막고,_같은_값을_생성한다면_재사용하기_때문~"},{"heading":"재정의 해서, 객체가 아닌 내부 값을 비교하는 equals를 만들었다.","level":2,"id":"재정의_해서,_객체가_아닌_내부_값을_비교하는_equals를_만들었다."},{"heading":"HashCode의 규약에는 다음과 같은 사항이 존재한다.","level":3,"id":"HashCode의_규약에는_다음과_같은_사항이_존재한다."},{"heading":"- equals(object)가 두 객체를 같다고 판단했다면, 두 객체의 hashCode값은 항상 같아야한다","level":4,"id":"*_equals(object)가_두_객체를_같다고_판단했다면,_두_객체의_hashCode값은_항상_같아야한다"}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:SPRING","?query=tag:FRAMWORK","study/cs/🍃-spring.html#🍃 Spring","study/cs/🍃-spring.html#@_어노테이션이란_무엇인인가?","study/cs/🍃-spring.html#Bean이란_무엇인가?","study/cs/🍃-spring.html#@Component는_내가_만든_클래스에_Bean을_주입하는역할을_한다.","study/cs/🍃-spring.html#이때,_@Component와_@Controller의_차이점은_무엇일까?","study/cs/🍃-spring.html#Spring_어노테이션@_설명","study/cs/🍃-spring.html#@RequestBody는_API호출시_넘겨주는_파라미터값(JSON등)을","study/cs/🍃-spring.html#@RequestParam은_외부API호출시_넘겨주는_파라미터값을_가져옴","study/cs/🍃-spring.html#@Autowired는_빈(의존성)을_주입받기위해_사용.","study/cs/🍃-spring.html#@Entity는_데이터베이스와_직접_연결된_클래스를_설정한다.","study/cs/🍃-spring.html#@PathVariable은_URL(경로)에서_변수를_추출하여_매개변수에_할당한다.","study/cs/🍃-spring.html#@Generated는_개발자가_아닌,_DB에서_기계적으로_생성한_클래스이다.","study/cs/🍃-spring.html#@Builder는_빌더패턴을_완벽하게_지원해주는_어노테이션이다.","study/cs/🍃-spring.html#@Data","study/cs/🍃-spring.html#@RequiredArgsConstructor","study/cs/🍃-spring.html#@AllArgsConstructor_는_모든_필드값을_파라미터로_받는_생성자를_생성해준다.","study/cs/🍃-spring.html#@NoArgsConstructor_는_파라미터가_없는_디폴트_생성자를_생성해준다.","study/cs/🍃-spring.html#@EqualsAndHashCode는_equals와_hashCode를_자동으로_생성해준다.","study/cs/🍃-spring.html#빌더패던의_장점","study/cs/🍃-spring.html#빌더패턴_구현","study/cs/🍃-spring.html#Lombok_사용시_주의사항","study/cs/🍃-spring.html#1._@AllArgsConstructor_/_@RequiredArgsConstructor_사용시","study/cs/🍃-spring.html#2._무분별한_@EqualsAndHashCode_사용","study/cs/🍃-spring.html#3._@Data_사용금지","study/cs/🍃-spring.html#4._@Value_사용_금지","study/cs/🍃-spring.html#SessionStorage_와_LocalStorage","study/cs/🍃-spring.html#Spring에서의_의존성_주입_방법","study/cs/🍃-spring.html#Filed_Injection(필드_주입)","study/cs/🍃-spring.html#사용하면_안되는_이유","study/cs/🍃-spring.html#Setter_Injection(수정자_주입)","study/cs/🍃-spring.html#문제점","study/cs/🍃-spring.html#Contructor_Injection(생성자_주입)","study/cs/🍃-spring.html#생성자_주입을_사용해야_하는_이유","study/cs/🍃-spring.html#생성자_주입의_경우에도_순환참조가_똑같이_일어날_수_있지만,_필드,_수정자_주입과_다르게_==런타임==_시가_아니라,_==컴파일==_시_미연에_찾아낼_수_있다.","study/cs/🍃-spring.html#데이터_검증_(Validation)","study/cs/🍃-spring.html#Entity와_DTO를_분리해야하는_이유","study/cs/🍃-spring.html#Spring의_EntityManager는_무엇일까?","study/cs/🍃-spring.html#DB의_저장_프로시저_(SP__Stored_Procedure)란?","study/cs/🍃-spring.html#사용하는_이유","study/cs/🍃-spring.html#Spring에서의_저장_프로시저_동작원리","study/cs/🍃-spring.html#JPQL과_QueryDSL_비교","study/cs/🍃-spring.html#JPQL","study/cs/🍃-spring.html#QueryDSL","study/cs/🍃-spring.html#JPA에서_BooleanBuilder_와_BooleanExpression_이란?","study/cs/🍃-spring.html#JPAQueryFactory란?","study/cs/🍃-spring.html#Spring_Batch란?","study/cs/🍃-spring.html#Batch_용어_설명","study/cs/🍃-spring.html#Job","study/cs/🍃-spring.html#Step","study/cs/🍃-spring.html#tasklet","study/cs/🍃-spring.html#Chunk","study/cs/🍃-spring.html#Job_Listener","study/cs/🍃-spring.html#hfbatJobScheduler(스케줄러)가_Job으로_등록되어있는_녀석들을_순차적으로_실행될할_때_,_누가_트리거_역할을_하는지","study/cs/🍃-spring.html#Spring_Batch에서의_파티셔닝(Partitioning)","study/cs/🍃-spring.html#파티셔닝(Partitioning)","study/cs/🍃-spring.html#파티션너(파티션_별_범위_-_컨텍스트_범위_설정)","study/cs/🍃-spring.html#**Chunk와_Partitioning의_병렬_실행_예제**","study/cs/🍃-spring.html#예제_시나리오","study/cs/🍃-spring.html#실행_흐름","study/cs/🍃-spring.html#ThreadPoolSize__동시에_실행시킬_스테리드의_개수","study/cs/🍃-spring.html#gridSize__실제로_제단할_사이즈(데이터를_얼마나_세분화해서_각_파티션_작업에_할당할_건지)","study/cs/🍃-spring.html#QueueCapacity__대기열_크기","study/cs/🍃-spring.html#APP_-_SERVICE_-_API_통신_플로우","study/cs/🍃-spring.html#Spring_WebFlux란?","study/cs/🍃-spring.html#Spring_WebClient란??","study/cs/🍃-spring.html#*Spring_MVC환경에서도_SpringWebClient를_사용해도_될까?(현재_프로젝트가_이렇게되있다)","study/cs/🍃-spring.html#Spring_WebClient_VS_RestTemplate","study/cs/🍃-spring.html#RestTemplate__Multi-Thread_/_Blocking방식","study/cs/🍃-spring.html#Spring_WebClient__Single-Thread_/_Non-Blocking_방식","study/cs/🍃-spring.html#DispatcherServlet의_역할","study/cs/🍃-spring.html#HTTP_Method_-_Mapping","study/cs/🍃-spring.html#1._GetMapping","study/cs/🍃-spring.html#2._PostMapping","study/cs/🍃-spring.html#GetMapping은_PostMapping과_달리_http_body값을_받는_메서드가_아니다._따라서_GET요청에_Body값을_넣으면_null값이_나온다.","study/cs/🍃-spring.html#PostMapping에_body가_아닌_params에_값을_넣어도_값이_정상적으로_출력되는_이유는_params는_GET/POST/PUT/DELETE_모든_값이_나오기_때문이다._PostMapping을_원한다면_Body에_값을_넣어줘야한다","study/cs/🍃-spring.html#3._PutMapping","study/cs/🍃-spring.html#4._DeleteMapping","study/cs/🍃-spring.html#DeleteMapping은_요청바디(@RequestBody)를_가지지_않는것이_일반적이다.","study/cs/🍃-spring.html#그렇기에_@RequestBody를_사용하여_바디를_수신하는_것이_지원되지_않음","study/cs/🍃-spring.html#Get말고는_다들_비슷한_기능같은데_나누는_이유가_무었인지??","study/cs/🍃-spring.html#Spring_Integration이란?","study/cs/🍃-spring.html#Spring_Integration을_구성하는_컴포넌트_종류","study/cs/🍃-spring.html#3가지의_메인_Component","study/cs/🍃-spring.html#1._Message","study/cs/🍃-spring.html#2._Message_Channel","study/cs/🍃-spring.html#3._Message_Endpoint","study/cs/🍃-spring.html#Filter_란?","study/cs/🍃-spring.html#ServiceActivator_란?","study/cs/🍃-spring.html#예외처리(Exception)","study/cs/🍃-spring.html#0._에러_메세지로_부터_정보를_받는_메서드","study/cs/🍃-spring.html#1.__체크_예외(Checked_Exception)와_언체크_예외(UnChecked_Exception)","study/cs/🍃-spring.html#2._예외처리_방법_3가지","study/cs/🍃-spring.html#1._try~catch__다른_작업_흐름으로_유도한다._checkedException으로_처리","study/cs/🍃-spring.html#2._throws~__호출한_쪽(부모)에게_예외_처리를_위힘한다.","study/cs/🍃-spring.html#3._throw~__명확한_의미의_예외로_바로처리,_개발자들이_비즈니스_로직에서_처리하는_방식","study/cs/🍃-spring.html#1._try-catch","study/cs/🍃-spring.html#2._throws","study/cs/🍃-spring.html#3._throw","study/cs/🍃-spring.html#결론","study/cs/🍃-spring.html#Spring_MVC의_Service와_ServiceImpl_구조","study/cs/🍃-spring.html#하나의_인터페이스의_하나의_구현체","study/cs/🍃-spring.html#결론__하나의_클래스에_너무_많은_역할을_부여하지_말자._(책임을_몰리지_말자)","study/cs/🍃-spring.html#DTO_(_Request와_Respons)","study/cs/🍃-spring.html#Request_(_Json_to_DTO_)","study/cs/🍃-spring.html#Responsse_(_Object_to_Json)","study/cs/🍃-spring.html#페이지_펙토리_객체_생성시,_리스트_넘길때_Page리스트_객체일_필요없다.","study/cs/🍃-spring.html#PageFactory.paginate(==dList==,_((int)_cnt),_hfcfgLoanRequestDto)","study/cs/🍃-spring.html#쿼리펙토리_빈으로_주입받은_것_바로_사용하기_(_중복으로_생성할_필요_없음)","study/cs/🍃-spring.html#기존코드_","study/cs/🍃-spring.html#Netty란??","study/cs/🍃-spring.html#netty란_java기반의_네트워크_프레임워크이다.","study/cs/🍃-spring.html#webClient도_Netty안에_포함되어_있다.","study/cs/🍃-spring.html#장점","study/cs/🍃-spring.html#Equals()_와_HashCode()_재정의","study/cs/🍃-spring.html#String은_equals_잘쓰잖아?_=>_String은_String_pool에서_중복생성을_막고,_같은_값을_생성한다면_재사용하기_때문~","study/cs/🍃-spring.html#재정의_해서,_객체가_아닌_내부_값을_비교하는_equals를_만들었다.","study/cs/🍃-spring.html#HashCode의_규약에는_다음과_같은_사항이_존재한다.","study/cs/🍃-spring.html#*_equals(object)가_두_객체를_같다고_판단했다면,_두_객체의_hashCode값은_항상_같아야한다"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/cs/🍃-spring.html","pathToRoot":"../..","createdTime":1739844578975,"modifiedTime":1739946652730,"sourceSize":46710,"sourcePath":"study/CS/🍃 Spring.md","exportPath":"study/cs/🍃-spring.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20240611144129.png","사진-및-문서/pasted-image-20240605160336.png","사진-및-문서/pasted-image-20240723134224.png","사진-및-문서/pasted-image-20240723134333.png"]},"study/cs/🎩-devops.html":{"title":"🎩 DevOps","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:DevOps\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#DevOps</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:CI/CD\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#CI/CD</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:DevOps\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#DevOps\">#DevOps</a> <a href=\"http://lts.kr?query=tag:CI/CD\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#CI/CD\">#CI/CD</a><br>\n<br>애플리케이션을 실행하는데 필요한 모든 구성 요소와 기능을 갖춘 소프트웨어이다.\n<br>전체 실행(runtime)환경에서 애플리케이션을 패키징하고 격리할 수 있는 기술이다.\n<br>\n컨테이너화 된 애플리케이션은 환경(개발/테스트/프로덕션)에 쉽게 이동할 수 있다. <br>\n컨테이너 파이프라인에 보안을 구축하고 인프라를 보호하여 컨테이너의 안정성, 확장성, 신뢰성을 보장할 수 있다. <br>\n일관된 행동과 기능으로, 퍼블릭/프라이빗/클라우드 간에 쉽게 이동이 가능하다. <br>\n<br>담당 영역을 분리하여 개발 팀과 운영 팀간의 충돌을 줄일 수 있다.\n<br>오픈기술을 기반으로 하기 때문에, 최신 기술을 활용하여 다양하고 강력한 기술의 제품을 채택할 수 있다.<br>\nex) docker / k8s 등등\n<br>클라우드 네이티브 개발 방식에 필요한 기반 기술을 제공한다.\n<br>\n<br>전사적으로 배포를 관리할 수 있는 방법이다.\n<br>k8s(쿠버네티스)는 컨테이너 작업을 자동화하는 오픈소스 플랫폼이다.\n<br>컨테이너화 된 애플리케이션을 배포하고 확장하는데 수동 프로세스를 필요로 하지 않는다.\n<br>docker는 전통적인 LXC와 다르다. docker도 처음에는 LXC기반으로 개발되었지만 이후, 이러한 종속관계에서 벗어났다.\nLXC는 경량/가상화 기술은 뛰어났지만 사용자환경은 그에 미치지 못햇다.\n하지만 docker는 컨테이너를 실행하는 것 이상의 다양한 생성/구축/이미지전송 등의 프로세스 관리를 용이하게 해준다.\n<br>- 젠킨스는 지속적 통합(CI)및 지속적 배포(CD)도구로, 개발 프로세스의 빌드, 테스트, 배포 등을 자동화하고 관리해주는 도구이다.\n<br>\n<br>개발자들이 작성한 코드를 중앙 저장소에 자주 통합하고, 자동화된 빌드와<br>\n테스트를 통해 문제를 빠르게 발견하고 해결할 수 있게 해주는것.\n<br>\n<br>모든 변경사항을 자동화된 테스트와 빌드를 거친 후 실제 서버에 자동으로<br>\n배포하는 기술. ( 현제 HF서비스에서는 ArgoCD를 사용하여 진행한다. )\n<br>\n<br>이러한 구조를 통해 다양한 환경에서 동시에 빌드와 테스트를 수행할 수 있으며,<br>\n부하 분삭 및 확장성을 제공한다.\n<br>\n<br>젠킨스는 소스코드관리(SCM)시스템과 통합하여 변경사항이 발견될때<br>\n자동으로 빌드 및 테스트를 실행할 수 있다.<br>\n웹훅이나 폴링 방식을 사용하여 scm시스템에서 변경사항을 감지하고<br>\n해당작업을 트리거한다.\n<br>\n<br>젠킨스는 빌드 및 테스트작업이 완료되면 해당결과와 로그를 저장한다.<br>\n이를 통해 빌드 실패의 원인을 찾거나 테스트 결과를 검토할수 있다.\n<br>\n<br>젠킨스는 빌드, 테스트 및 배포 과정에서 발생하는 로그와 메트릭을 수집하고<br>\n분석하여 성능문제, 장애, 최적화 포인트 등을 식별할 수 있다.\n<br>\n<br>\n개발자가 소스코드 변경사항을 SCM 시스템에 푸시한다. <br>\n젠킨스는 웹훅이나 폴링 방식을 통해 변경사항을 감지하고 Jenkinsfile에 정의된 파이프라인을 실행한다. <br>\n젠킨스는 마스터노드에서 슬레이브 노드로 작업을 할당하고 슬레이브 노드에서 빌드, 테스트 , 배포 작업을 수행한다. <br>\n각 단계에서 필요의 경우, 플러그인을 사용하여 다양한 도구와 통합하여작업을 수행할 수 있다. <br>\n작업이 완료되면 젠킨스는 결과와 로그를 저장하고 개발자에게 알림을 전송한다. <br> Linux 컨테이너를 만들고 사용할 수 있도록 하는 컨테이너화 기술이다. 컨테이너를 매우 가벼운 모듈식 가상 머신처럼 다룰 수 있으며, 컨테이너를 구축, 배포, 복사, 이동 등 유연하게 사용할 수 있도록 도와준다. 애플리케이션을 클라우드에 최적화 하도록 지원한다.\n<br>\n<br>커널과 네임스페이스 등 Linux의 기능을 사용하여 프로세스를 분리함으로 써, 독립적으로 실행할 수 있도록 한다.\n<br>개별적으로 실행하여 인프라를 더 효과적으로 활용하고 개별시스템을 사용할 때와 동일한 보안을 유지할 수 있도록 한다.\n<br>이미지 기반 배포 모델을 제공하여, 여러 환경에서 종속 항목과 손쉽게 공유 할 수 있다.\n<br>\n<br>모듈성 <br>컨테이너화에 대한 docker의 접근방식은 전체 애플리케이션을 분해하지 않고도 업데이트 또는 복구를 가능하게 한다 <br>계층 및 이미지 버전제어 <br>docker의 이미지파일은 일련의 계층으로 구성되며 이러한 계층들은 단일 이미지로 결합된다.<br>\n이러한 이미지 계층을 재사용하여 구축 속도가 빠르며, 각 계층화에는 버전 제어가 가능하다. <br>롤백 <br>롤백 기능을 제공하여 이전 이미지 버전으로 롤백이 가능하다. <br>신속한 배포 <br>이전에는 하드웨어 확보, 실행, 프로비저닝, 테스트 하는데에 몇일이 걸렸으나, docker기반의 컨테이너는 배포 시간을 몇 초로 줄일 수 있다. <br>\n<br>\n도커는 애플리케이션 뿐만 아니라, 실행에 필요한 시스템 환경을 모아서 컨테이너로 관리한다. 이것을 Docker Image라고 한다. <br>\n이 이미지로 만든 컨테이너는 도커가 설치된 곳이라면 어디든 똑같이 작동함을 보장한다. <br>\n개발자가 커밋할때마다, Jenkins와 같은 CI( 지속적 통합 )툴이 해당 소스를 도커 이미지로 빌드하고, 이미지 레파지토리에서 이미지를 버전별로 관리한다. <br>\n해당 이미지를 배포 하면, 독립적으로 동작하기 때문에 CD( 지속적인 배포 )또한 가능하게 된다. <br>\n이러한 특징은 MSA와도 잘 맞는데, 각각의 서비스를 컨테이너로 배포하는 것이다. <br>\n<br>쿠버네티스는 \"컨테이너화된 애플리케이션\"을 배포, 관리, 확장 할때 수반되는 다수의 \"수동 프로세스를 자동화\"하는 오픈소스 \"컨테이너 오케스트레이션 플랫폼\"이다.\n<br>1. 프로비저닝 및 배포\n2. 구성 및 일정 조정\n3. 리소스 할당\n4. 컨테이너 가용성 체크\n5. 로드밸런싱 기반 컨테이너 스케일링\n6. 트래픽 라우팅\n7. 컨테이너 상세 모니터링\n8. 컨테이너 간 상호작용 및 보안\n<br>\n<br>클러스터 <br>컨트롤 플레인 및 하나 이상의 컴퓨팅 머신 또는 노드를 뜻한다. <br>컨트롤 플레인 <br>쿠버네티스 노드를 제어하는 프로세스의 컬렉션. 여기에 모든 태스크 할당이 시작된다. <br>kubelet <br>노드에서 실행되며, 컨테이너 매니패스트를 읽고, 정의된 컨테이너가 실행중인지 확인한다. <br>포드(Pod) <br>단일 노드에 배포된 하나 이상의 컨테이너 그룹. 포드에 있는 모든 컨테이너는 IP주소.호스트 이름, 기타 리소스 등을 공유한다. <br> 작동 중인 쿠버네티스 배포를 클러스터라고 한다. 클러스터는 컨테이너를 실행하는 호스트 그룹으로, 컨트롤 플레인과 컴퓨팅머신의 2개 부분으로 시각화 할 수 있다.\n<br> Docker는 쿠버네티스가 오케스트레이션하는 컨테이너의 런타임으로 사용할 수 있다. 쿠버네티스가 노드에 대해 pod을 예약하면 해당 노드의 kubelet(각 컨테이너의 실행을 보장하는 서비스)가 지정된 컨테이너를 실행하도록 Docker에 명령한다. 이후, kubelet은 Docker로 부터, 지속적으로 상태를 수집하고 컨트롤 플레인에서 해당 정보를 집계한다.\n<br>** 한줄 요약 : docker는 k8s가 시키는데로(이미짜여진대로, 자동으로) 컨테이너를 실행한다.<br>- DevOps(개발과 운영을 통합하여 효율성,협력,안정성을 개선하는 개발/운영 방법론)의 실천 방법중 하나로, 애플리케이션 배포와 운영에 관련된 모든요소를 Git에서 관리(Opertation)한다는 뜻이다.\n- Git의 버전관리 시스템과 운영환경간의 일관성을 유지하여 소프트웨어간의 불일치 문제를\n해결할 수 있다.\n<br>- GitOps를 구현하기 위한 도구 중 하나로, k8s애플리케이션의 자동배포(CD)를 위한 오픈소스 도구 이다.\nk8s클러스터에 배포된 애플리케이션의 CD를 담당한다.\n- Git저장소에서 변경사항을 감지하여 자동으로 k8s클러스터에 애플리케이션을 배포한다.\n<br>\n<br>쿠버네티스는 클러스터 안에서 컨테이너 애플리케이션이나 네트워크 설정, 배치 실행을 하는 Job등<br>\n리소스를 작성한다. 이와 같은 구체적인 설정 정보를 파일로 관리하는데,<br>\n이것이 매니페스트파일(manifest file)이라고 한다.\n<br>JSON이나 YALM 파일로 작성되며, 오브젝트를 생성하기 위해 필요한 파일이기도 하다.\n<br> local브랜치에서 작업 후 각(dev/stg/prod)프로젝트로 소스를 통합(merge)한다.\n<br>jar, 메니페스트 file 등 소스,배포에 필요한 파일들 이미지 화\n<br> Jenkin에서 이미지화된 배포에 필요한 파일,소스들을 ArgoCD로 Pull한다.\n<br> Jenkins에서 받은 이미지파일과 매니패스트파일을 기반으로 실제 서버에 배포한다.\n<br><img alt=\"Pasted image 20240531162124.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240531162124.png\" target=\"_self\"><br>\n<br>두가지 모두 소스코드 저장소 호스팅 플랫폼이며, 기술적 기반을 깃(Git)으로 삼는다는 점에서 비슷하다.\n<br>기본 기능은 같지만, 서비스의 초점이 조금 다른곳에 맞추어져 있다.\n<br>\n<br>깃허브와 깃랩의 가장 큰 차이점은 데브옵스 요소에 있다.\n<br>\n<br>즉 깃랩은 젠킨스와 아르고와 같은 CI/CD 도구들을 사용하지 않아도 자체적으로 파이프라인을 구성하여 간단하고 빠른 배포가 가능하다. 하지만 우리는 깃랩은 사용하지만, 깃랩CI/CD는 사용하고 있지 않은 상태이다.\n<br>\n<br>그덕에 신속한 배포가 가능하고, 문제 발생시 이전 버전으로 신속하게 복원할 수 있다.\n<br>\n<br>프로덕션과 스테이징의 분기가 최소한으로 있으며, 이러한 여러 다중 분기 접근방식은 여러단계의 테스트로 안정적인 유지가 가능하게 한다. 한편 이러한 이유로 병합및 수정시 코드 검토가 까다로워진다.\n<br><img alt=\"Pasted image 20240722180706.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240722180706.png\" target=\"_self\"><br>\n<br>ELK란 elastic / logstash / kibana 의 앞글자를 딴 시슷템으로<br>\n데이터를 수집, 처리, 조회 하는데 특화되어있는 시스템이다.\n<br>\n<br>인덱스란 ? - 단일 데이터 단위를 도큐먼트라고 하며, 이 도큐먼트를 모아놓은 집합을 인덱스라고 한다.\n<br>\n<br>인덱스 용량이 증가함에 따라 운영부담과 비용이 크게 증가한다.\n<br>튜닝을 통한 안정화에 한계가 있다.\n<br>\n<br>\n수평 확장이 가능하다 <br>\n가용성 높은 다중 테넌트 로그 집계가 가능하다 <br>\n로그에 대한 메타데이터만 인덱싱한다. 즉 레이블을 기반으로 구축되어있다. <br>\n로그 내용을 색인화 하는것이 아닌, 레이블 세트를 색인화 하기 때문에 데이터 량을 감소시킬 수 있다. <br>\n검색시 레이블 기반으로만 조회하고, 레이블과 매칭된 압축된 로그 데이터를 가져와 사용한다. <br>\n<br>풀텍스트 검색시 기존 ELK대비 느리다.\n<br>쿼리언어를 새로이 학습해야한다.\n<br>레퍼런스가 부족하다.\n<br>","aliases":[],"tags":["#공부","#DevOps","#CI/CD"],"headers":[{"heading":"🎩 DevOps","level":1,"id":"🎩 DevOps"},{"heading":"컨테이너란 무엇일까?","level":1,"id":"컨테이너란_무엇일까?"},{"heading":"장점","level":2,"id":"장점"},{"heading":"컨테이너 오케스트레이션이란?","level":2,"id":"컨테이너_오케스트레이션이란?"},{"heading":"Docker와 Linux Container 의 차이?","level":2,"id":"Docker와_Linux_Container_의_차이?"},{"heading":"젠킨스(Jenkins)는 정확히 무엇을 도와주는 녀석일까?","level":1,"id":"젠킨스(Jenkins)는_정확히_무엇을_도와주는_녀석일까?"},{"heading":"CI(Continuous Integration) 지속적인 통합","level":3,"id":"CI(Continuous_Integration)_지속적인_통합"},{"heading":"CD(Continuous Deployment) 지속적인 배포","level":3,"id":"CD(Continuous_Deployment)_지속적인_배포"},{"heading":"젠킨스의 주요 기능","level":1,"id":"젠킨스의_주요_기능"},{"heading":"1. 젠킨스는 마스터노드와 슬레이브노드로 구성된다","level":2,"id":"1._젠킨스는_마스터노드와_슬레이브노드로_구성된다"},{"heading":"2. SCM트리거 및 웹훅","level":2,"id":"2._SCM트리거_및_웹훅"},{"heading":"3. 결과 및 로그저장","level":2,"id":"3._결과_및_로그저장"},{"heading":"4. 로그 및 메트릭 수집 및 분석","level":2,"id":"4._로그_및_메트릭_수집_및_분석"},{"heading":"젠킨스의 동작원리","level":1,"id":"젠킨스의_동작원리"},{"heading":"Docker에 대한 자세한 설명","level":1,"id":"Docker에_대한_자세한_설명"},{"heading":"docker컨테이너의 실행방식","level":2,"id":"docker컨테이너의_실행방식"},{"heading":"장점","level":3,"id":"장점"},{"heading":"Docker의 특징","level":2,"id":"Docker의_특징"},{"heading":"k8s(쿠버네티스)에 대한 자세한 설명","level":1,"id":"k8s(쿠버네티스)에_대한_자세한_설명"},{"heading":"컨테이너 오케스트레이션이 하는일","level":4,"id":"컨테이너_오케스트레이션이_하는일"},{"heading":"쿠버네티스 주요 구성 요소","level":3,"id":"쿠버네티스_주요_구성_요소"},{"heading":"k8s클러스터란?","level":2,"id":"k8s클러스터란?"},{"heading":"K8S와 Docker의 관계","level":2,"id":"K8S와_Docker의_관계"},{"heading":"GitOps란?","level":1,"id":"GitOps란?"},{"heading":"Argo CD란?","level":1,"id":"Argo_CD란?"},{"heading":"쿠버네티스의 매니페스트 파일이란?","level":1,"id":"쿠버네티스의_매니페스트_파일이란?"},{"heading":"현재 HF서비스의 CI/CD과정","level":1,"id":"현재_HF서비스의_CI/CD과정"},{"heading":"1. Git에서 Commit / push하여 소스통합","level":2,"id":"1._Git에서_Commit_/_push하여_소스통합"},{"heading":"2. Jenkins에서 Git 소스 Build,Test&Publish 후 이미지화 (CI)","level":2,"id":"2._Jenkins에서_Git_소스_Build,Test&Publish_후_이미지화_(CI)"},{"heading":"3. Docker에서 이미지 정보 받은 후 ArgoCD로 이미지 Pull","level":2,"id":"3._Docker에서_이미지_정보_받은_후_ArgoCD로_이미지_Pull"},{"heading":"4. ArgoCD로 이미지파일 K8S에 배포 (CD)","level":2,"id":"4._ArgoCD로_이미지파일_K8S에_배포_(CD)"},{"heading":"5. K8S(쿠버네티스)에서 이미지파일 Docker를 통해 실행(서버실행)","level":2,"id":"5._K8S(쿠버네티스)에서_이미지파일_Docker를_통해_실행(서버실행)"},{"heading":"각 과정에서 오류 및 예외 사항들을 찾고 대응 할 수 있도록","level":3,"id":"각_과정에서_오류_및_예외_사항들을_찾고_대응_할_수_있도록"},{"heading":"로그를 제공한다.","level":3,"id":"로그를_제공한다."},{"heading":"elastic 에서도 동작중인 서버의 모든 로그를 검색, 필터링 할 수 있다. 하나의 trace_id로 묶인 트렌젝션 단위를 기준으로 오류를 찾고 대응할 수 있다.","level":4,"id":"elastic_에서도_동작중인_서버의_모든_로그를_검색,_필터링_할_수_있다._하나의_trace_id로_묶인_트렌젝션_단위를_기준으로_오류를_찾고_대응할_수_있다."},{"heading":"Git Lab(깃랩) / Git Hub(깃허브) 차이","level":1,"id":"Git_Lab(깃랩)_/_Git_Hub(깃허브)_차이"},{"heading":"1. DevOps(데브옵스)","level":2,"id":"1._DevOps(데브옵스)"},{"heading":"깃랩은 지속적 통합(CI)/지속적 배포(CD)와 데브옵스 워크플로우를 내장하고 있다.","level":3,"id":"깃랩은_지속적_통합(CI)/지속적_배포(CD)와_데브옵스_워크플로우를_내장하고_있다."},{"heading":"반면, 깃허브는 사용작 원하는 CI/CD도구를 직접 통합해야한다.","level":3,"id":"반면,_깃허브는_사용작_원하는_CI/CD도구를_직접_통합해야한다."},{"heading":"2. 브랜치의 병합과 분리","level":2,"id":"2._브랜치의_병합과_분리"},{"heading":"깃허브에서는 브랜치 전략이라는 말이 있을만큼 새 브랜칭와 마스터 브랜치와의 병합이 용이하다.","level":3,"id":"깃허브에서는_브랜치_전략이라는_말이_있을만큼_새_브랜칭와_마스터_브랜치와의_병합이_용이하다."},{"heading":"깃랩의 워크플로우는 변경한 각 세트를 마스터 브랜치와 별도의 안정적인 브랜치로 생성한다.","level":3,"id":"깃랩의_워크플로우는_변경한_각_세트를_마스터_브랜치와_별도의_안정적인_브랜치로_생성한다."},{"heading":"Hello CI-CD","level":1,"id":"Hello_CI-CD"},{"heading":"Grafana Loki 란?","level":1,"id":"Grafana_Loki_란?"},{"heading":"우리가 기존에 사용하던 ELK","level":2,"id":"우리가_기존에_사용하던_ELK"},{"heading":"Elastic search는 강력한 검색 및 쿼리 기능을 제공하여 다양한 조건으로 로그를 검색하고원하는 데이터를 쉽게 추출할 수 있다.","level":3,"id":"Elastic_search는_강력한_검색_및_쿼리_기능을_제공하여_다양한_조건으로_로그를_검색하고원하는_데이터를_쉽게_추출할_수_있다."},{"heading":"Logstash는 다양한 데이터 형식을 수집하고 변환할 수 있는 기능제공한다.","level":3,"id":"Logstash는_다양한_데이터_형식을_수집하고_변환할_수_있는_기능제공한다."},{"heading":"ELK 서비스의 한계점","level":2,"id":"ELK_서비스의_한계점"},{"heading":"Loki의 장점","level":2,"id":"Loki의_장점"},{"heading":"Loki의 한계","level":2,"id":"Loki의_한계"},{"heading":"결론 : 기존 ELK대비 높은 압출률을 가진 구조로, 로그를 오랫동안 보관하기에도 용의하며 확장에 유리하다.","level":4,"id":"결론__기존_ELK대비_높은_압출률을_가진_구조로,_로그를_오랫동안_보관하기에도_용의하며_확장에_유리하다."}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:DevOps","?query=tag:CI/CD","study/cs/🎩-devops.html#🎩 DevOps","study/cs/🎩-devops.html#컨테이너란_무엇일까?","study/cs/🎩-devops.html#장점","study/cs/🎩-devops.html#컨테이너_오케스트레이션이란?","study/cs/🎩-devops.html#Docker와_Linux_Container_의_차이?","study/cs/🎩-devops.html#젠킨스(Jenkins)는_정확히_무엇을_도와주는_녀석일까?","study/cs/🎩-devops.html#CI(Continuous_Integration)_지속적인_통합","study/cs/🎩-devops.html#CD(Continuous_Deployment)_지속적인_배포","study/cs/🎩-devops.html#젠킨스의_주요_기능","study/cs/🎩-devops.html#1._젠킨스는_마스터노드와_슬레이브노드로_구성된다","study/cs/🎩-devops.html#2._SCM트리거_및_웹훅","study/cs/🎩-devops.html#3._결과_및_로그저장","study/cs/🎩-devops.html#4._로그_및_메트릭_수집_및_분석","study/cs/🎩-devops.html#젠킨스의_동작원리","study/cs/🎩-devops.html#Docker에_대한_자세한_설명","study/cs/🎩-devops.html#docker컨테이너의_실행방식","study/cs/🎩-devops.html#장점","study/cs/🎩-devops.html#Docker의_특징","study/cs/🎩-devops.html#k8s(쿠버네티스)에_대한_자세한_설명","study/cs/🎩-devops.html#컨테이너_오케스트레이션이_하는일","study/cs/🎩-devops.html#쿠버네티스_주요_구성_요소","study/cs/🎩-devops.html#k8s클러스터란?","study/cs/🎩-devops.html#K8S와_Docker의_관계","study/cs/🎩-devops.html#GitOps란?","study/cs/🎩-devops.html#Argo_CD란?","study/cs/🎩-devops.html#쿠버네티스의_매니페스트_파일이란?","study/cs/🎩-devops.html#현재_HF서비스의_CI/CD과정","study/cs/🎩-devops.html#1._Git에서_Commit_/_push하여_소스통합","study/cs/🎩-devops.html#2._Jenkins에서_Git_소스_Build,Test&Publish_후_이미지화_(CI)","study/cs/🎩-devops.html#3._Docker에서_이미지_정보_받은_후_ArgoCD로_이미지_Pull","study/cs/🎩-devops.html#4._ArgoCD로_이미지파일_K8S에_배포_(CD)","study/cs/🎩-devops.html#5._K8S(쿠버네티스)에서_이미지파일_Docker를_통해_실행(서버실행)","study/cs/🎩-devops.html#각_과정에서_오류_및_예외_사항들을_찾고_대응_할_수_있도록","study/cs/🎩-devops.html#로그를_제공한다.","study/cs/🎩-devops.html#elastic_에서도_동작중인_서버의_모든_로그를_검색,_필터링_할_수_있다._하나의_trace_id로_묶인_트렌젝션_단위를_기준으로_오류를_찾고_대응할_수_있다.","study/cs/🎩-devops.html#Git_Lab(깃랩)_/_Git_Hub(깃허브)_차이","study/cs/🎩-devops.html#1._DevOps(데브옵스)","study/cs/🎩-devops.html#깃랩은_지속적_통합(CI)/지속적_배포(CD)와_데브옵스_워크플로우를_내장하고_있다.","study/cs/🎩-devops.html#반면,_깃허브는_사용작_원하는_CI/CD도구를_직접_통합해야한다.","study/cs/🎩-devops.html#2._브랜치의_병합과_분리","study/cs/🎩-devops.html#깃허브에서는_브랜치_전략이라는_말이_있을만큼_새_브랜칭와_마스터_브랜치와의_병합이_용이하다.","study/cs/🎩-devops.html#깃랩의_워크플로우는_변경한_각_세트를_마스터_브랜치와_별도의_안정적인_브랜치로_생성한다.","study/cs/🎩-devops.html#Hello_CI-CD","study/cs/🎩-devops.html#Grafana_Loki_란?","study/cs/🎩-devops.html#우리가_기존에_사용하던_ELK","study/cs/🎩-devops.html#Elastic_search는_강력한_검색_및_쿼리_기능을_제공하여_다양한_조건으로_로그를_검색하고원하는_데이터를_쉽게_추출할_수_있다.","study/cs/🎩-devops.html#Logstash는_다양한_데이터_형식을_수집하고_변환할_수_있는_기능제공한다.","study/cs/🎩-devops.html#ELK_서비스의_한계점","study/cs/🎩-devops.html#Loki의_장점","study/cs/🎩-devops.html#Loki의_한계","study/cs/🎩-devops.html#결론__기존_ELK대비_높은_압출률을_가진_구조로,_로그를_오랫동안_보관하기에도_용의하며_확장에_유리하다."],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/cs/🎩-devops.html","pathToRoot":"../..","createdTime":1739844345143,"modifiedTime":1739946867084,"sourceSize":14371,"sourcePath":"study/CS/🎩 DevOps.md","exportPath":"study/cs/🎩-devops.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20240531162124.png","사진-및-문서/pasted-image-20240722180706.png"]},"study/cs/🐞-etc.html":{"title":"🐞 etc","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:기타\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#기타</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:기타\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#기타\">#기타</a><br>순서를 맞추어 호출하는 로직과 예외처리를하는 로직이 컨트롤러에 집중되어 있다면 가독성이 떨어지게된다 이를 해결하기위해, 서비스에서 로직을 구현하게 된다면 서비스에서 서비스를 호출하는 순환참조를 야기할 수 있게된다. 이를위한 해결법으로 서비스를 주입받는 메인 서비스를 만들어 여러서비스를 주입받고 한개의 서비스에서 이를 동작시킬 수 있다.\n<br>\t1. String x = \"abc\"; 2. String y = new String(\"abc\");\n<br>1번의 경우로 생성했을 때는 abc라는 문자열을 String 상수 pool에 저장하고,<br>\n다음번에 동일 문자열이 선언될 때 이풀에서 꺼내의 재사용하게 된다.<br>2번의 경우엔 String을 인스턴스와 하여 새로운 객체를 생성하게 된다.<br>\nString Class는 자신을 수정하는 기능을 제공하지 않기때문에,<br>\n1번의 경우로 선언했을경우 한가지가 바뀌게 되면 나머지가 모두 바뀌게 된다.<br>\n이러한 일을 방지하기 위해서는 생성자를 이용한 선언(2번)을 사용해야한다.<br>\n<br>Apach에서 2004년 출시한 빌드 툴이다.\n<br>Ant를 사용하던 개발자들의 불편함을 해소 + 부가기능을 추가 하기위해 만들어졌다.\n<br>\n<br>Ant와 Maven의 장점을 모아 2012년 출시한 빌드 툴이다.\n<br>Gradel이 시기 상 늦게 출시된 만큼 사용성/성능 등 비교적 뛰어난 스펙을 갖고 있다.\n<br>\n<br>\nGradle의 Groovy를 이용해서 기존 XML로 작성되있던 요소들의 단점을 해소하고 있다. <br>XML의 경우 코드가 길어지면 가독성이 떨어진다.\n<br>의존관계가 복잡한 프로젝트 설정에 어려움이 있다. <br>\n특정 상황에서 Gradle의 속도는 Maven보다 훨씬 빠르다. <br>Gradle은 캐시를 사용하기 때문에 반복될 수록 속도 차이는 더욱 커진다. <br>\n<br>\n일반적으로 하나의 인스턴스만 존재해야 할 경우 Singleton패턴을 사용하게 된다.<br>\nsingle thread환경에서 사용되는 경우에는 아무런 문제가 없지만, Multi thread환경에서<br>\nsingleton객체에 접근 시 초기화 관련하여 문제가 있다. <br>\n보통 Singleton객체를 얻는 Static메서드는 getInstance( )로 작명하는게 일반적이다. <br>\n<br>단순하게 문제를 해결하고자 한다면, 메서드에 synchronized 키워드만 추가해도 무방하다.<br>\n하지만, 이는 하는 역할에 비해서 동기화 오버헤드가 심하다는 단점이 있다.\n<br>\n<br>간단하게 설명하면, 객체가 필요할 때로 초기화를 미루는 것이다.\n<br>public class Singleton { private Singleton() {} public static Singleton getInstance() { return LazyHolder.INSTANCE; } private static class LazyHolder { private static final Singleton INSTANCE = new Singleton(); }\n}\n<br>처음 singleton로딩 시에는 LazyHolder클래스의 변수가 없기 때문에 초기화 하지 않는다.<br>\nLazyHolder클래스는 singleton클래스의 getInstance( ) 메서드가 참조되는 순간 class가 로딩되며 초기화 된다.<br>Class를 로딩하고 초기화하는 시점은 thread-safe가 보장되기 때문에, 성능과 안정성을 모두 보장하는 훌륭한 방법이다.","aliases":[],"tags":["#공부","#기타"],"headers":[{"heading":"🐞 etc","level":1,"id":"🐞 etc"},{"heading":"Service의 순환참조를 막는 방법?","level":1,"id":"Service의_순환참조를_막는_방법?"},{"heading":"순서를 지켜야하는 service호출이있을때, 컨트롤러에서 서비스를 차례대로 호출하는것이 아니라 서비스를 주입받는 서비스를 만들어 호출하는 이유?","level":3,"id":"순서를_지켜야하는_service호출이있을때,_컨트롤러에서_서비스를_차례대로_호출하는것이_아니라_서비스를_주입받는_서비스를_만들어_호출하는_이유?"},{"heading":"Java에서는 두 가지 방법으로 문자열을 만들 수 있다.","level":1,"id":"Java에서는_두_가지_방법으로_문자열을_만들_수_있다."},{"heading":"Maven VS Gradle","level":1,"id":"Maven_VS_Gradle"},{"heading":"Maven","level":3,"id":"Maven"},{"heading":"Gradle","level":3,"id":"Gradle"},{"heading":"Gradle이 Maven보다 좋은점","level":2,"id":"Gradle이_Maven보다_좋은점"},{"heading":"Multi Thread환경에서의 Singleton","level":1,"id":"Multi_Thread환경에서의_Singleton"},{"heading":"그렇다면 singleton객체를 생성하는 로직을 어떻게 thread safe하게 적용할 수 있을까?","level":5,"id":"그렇다면_singleton객체를_생성하는_로직을_어떻게_thread_safe하게_적용할_수_있을까?"},{"heading":"LazyHolder","level":3,"id":"LazyHolder"}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:%EA%B8%B0%ED%83%80","study/cs/🐞-etc.html#🐞 etc","study/cs/🐞-etc.html#Service의_순환참조를_막는_방법?","study/cs/🐞-etc.html#순서를_지켜야하는_service호출이있을때,_컨트롤러에서_서비스를_차례대로_호출하는것이_아니라_서비스를_주입받는_서비스를_만들어_호출하는_이유?","study/cs/🐞-etc.html#Java에서는_두_가지_방법으로_문자열을_만들_수_있다.","study/cs/🐞-etc.html#Maven_VS_Gradle","study/cs/🐞-etc.html#Maven","study/cs/🐞-etc.html#Gradle","study/cs/🐞-etc.html#Gradle이_Maven보다_좋은점","study/cs/🐞-etc.html#Multi_Thread환경에서의_Singleton","study/cs/🐞-etc.html#그렇다면_singleton객체를_생성하는_로직을_어떻게_thread_safe하게_적용할_수_있을까?","study/cs/🐞-etc.html#LazyHolder"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/cs/🐞-etc.html","pathToRoot":"../..","createdTime":1739844790888,"modifiedTime":1739946635882,"sourceSize":3884,"sourcePath":"study/CS/🐞 etc.md","exportPath":"study/cs/🐞-etc.html","showInTree":true,"treeOrder":0,"attachments":[]},"study/cs/📔-database.html":{"title":"📔 DataBase","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:DB\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#DB</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:DataBase\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#DataBase</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:DB\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#DB\">#DB</a> <a href=\"http://lts.kr?query=tag:DataBase\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#DataBase\">#DataBase</a><br>\n<br>간단히 설명하면 \"여러 쿼리를 한번에 실행하는 것\" 이다.\n<br>SQL의 Function과 비슷해 보이지만 차이가 있다.<br>\nfunction : 클라이언트에서 처리, 리턴값 필수, 리턴값은 한개만 반환 가능<br>\n프로시저 : 서버로 보내서 처리, 리턴값 선택, 리컨값 여러개 가능\n<br>속도면에서는 함수에 비해 프로시저가 더 빠르다.<br>\n그렇기 때문에 프로시저같은 경우는 실행,처리를 할때 주로 사용하고, 함수는 간단한 계산이나 수치 결과를 나타낼 때 사용한다.<br>\n<br>하나의 요청으로 여러 SQL문을 실행 할 수 있음\n<br>네트워크 소요 시간을 줄일 수 있음(여러개의 쿼리를 처리하는 시점에서 네트워크 부하를 줄임)\n<br>보수성이 뛰어나다\n<br>개발 업무를 구분하여 개발할 수 있다.(DB관련 처리를 API처럼 만들어 사용가능)\n<br>\n<br>재사용성이 낮다(DB버전 별 구문/규칙과 호환성이 다르기 때문)\n<br>처리 성능이 좋지 않다(MySQL스토어드 프로그램 처리 성능이 낮다)\n<br><img alt=\"Pasted image 20240610171904.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240610171904.png\" target=\"_self\"><br>파라미터 선언은 프로시저명() 안에서 선언하고, SQL문과 변수는 BEGIN - END 안에서 작성한다.\n<br>SELECT사용시 반드시, 조회한 컬럼의 값을 INTO로 변수 안에 넣어주어야 한다.\n<br>프로시저안에서 사용하는 SQL문은 세미콜론(;)으로 문장 끝을 맺어주어야 한다.\n<br>if, case, loop 문을 사용할 수 있다.\n<br>프로시저내에서 다른 프로시저를 호출 할 수 있다.\n<br>- 커넥션이란 어플리케이션과 데이터베이스 서버간의 통신 링크를 뜻한다. 애플리케이션이 쿼리를 실행하고, 데이터를 검색하고, 데이터베이스에서 트랜젝션을 수행 할 수 있는 세션을\n설정하는데 사용된다.\n말그대로 애플리케이션과 DB를 연결하는 통신링크이며, 이가 모여있는것을 커넥션 풀 이라고 한다.\n매번 연결하고 끊고 하는것 보다 커넥션풀에 등록하는 것이 성능적인 향상을 기대할 수 있기 때문이다.\n<br>\n<br>테이블 간에 중복된 데이터를 허용하지 않는다는 기본 목표를 갖는다. <br>중복된 데이터를 허용하지 않음으로 써 무결성 을 유지할 수 있다.\n<br>\n<br>DB의 저장 용량 또한 줄일 수 있다.\n<br>데이터 테이블을 분해하여 이상현상이 발생할 가능성을 줄이고, 확장/수정시 구조 변경을<br>\n최소화 할 수 있다.\n<br>\n<br>\n릴레이션의 분해로 인해 Join연산이 늘어날 수 있다. <br>\n쿼리시 응답시간이 느려질 수 있다. 데이터의 중복속성을 최대한 제거하는 것 이기때문에, 속성이 하나의 테이블에 집약되므로<br>\n데이터 용량이 최소화 되어 상황에따라 처리속도가 빨라질 수도 있고, 느려질 수도 있다.<br>\n만약 조인이 만연하여 속도저하가 발생하게 된다면 반정규화를 통해 속도를 개선할 수 있다. <br>\n<br>테이블의 컬럼이 원자값(하나의 값)을 갖도록 테이블을 분해하는 것이다.\n<br>각 컬럼의 순서가 상관이 없어야한다.\n<br>하나의 컬럼은 같은 종류의 타입을 가져야 한다.<br>\n<img alt=\"Pasted image 20240531103441.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240531103441.png\" target=\"_self\"><br>\n원자값을 갖도록 컬럼을 나눈다.<br>\n<img alt=\"Pasted image 20240531103549.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240531103549.png\" target=\"_self\">\n<br>\n<br>제 1 정규화를 진행한 테이블에 대해 \"완전 함수 종속\"을 만족하도록 테이블을 분해하는 것이다.\n<br>여기서 완전 함수 종속이란, 기본키의 부분집합이 결정자가 되어선 안된다는 것을 의미한다.<br>\n즉, 부분적 종속을 없애는 것이다.\n<br><img alt=\"Pasted image 20240531105228.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240531105228.png\" target=\"_self\"><br>\n해당 테이블의 기본키는 (학생번호, 강좌이름)으로 복합키 이다.<br>\n성적은 (학생번호, 강좌이름)인 기본키가 결정하지만,<br>\n강의실은 기본키의 부분집합인 강좌이름이 결정하게 된다.<br>즉, 부분집합이 결정자가 되지 않도록 테이블을 분리시키는 것으로 완전 함수 종속을 만족시킬 수 있다.<br>\n<img alt=\"Pasted image 20240531105241.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240531105241.png\" target=\"_self\"><br>\n<br>제2 정규화를 진행한 테이블에 대해 \"이행적 종속\"을 없애도록 테이블을 분해하는 것이다.\n<br>여기서 이행적 종속이란 A -&gt; B , B -&gt; C 가 성립할때, A -&gt; C 가 성립되는 것을 의미한다.<br>\n<img alt=\"Pasted image 20240531104351.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240531104351.png\" target=\"_self\"><br>\n다음의 경유 이행적 종속상태 로 말할 수 있다.\n<br>그 경우 테이블을 분리하여 데이터 변경시에 다른 데이터까지 변경되는 상황을 막을 수 있다.<br>\n<img alt=\"Pasted image 20240531104418.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240531104418.png\" target=\"_self\"><br>\n<br>제3 정규화를 좀 더 강화한 것이라 생각하면 된다.\n<br>BCNF정규화란 제3 정규화를 진행한 테이블에 대해 모든 결정자가 후보키가 되도록<br>\n테이블을 분해하는 것을 말한다.\n<br><img alt=\"Pasted image 20240531104751.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240531104751.png\" target=\"_self\"><br>\n특수 수강 테이블에서 기본키는 (학생번호, 특강이름)이다. 그리고 기본키는 교수를 결정하고 있다.<br>\n또한, 여기서 교수는 특강이름을 결정하고있다.<br>문제는 교수가 특강이름을 결정하는 결정자 이지만, 후보키가 아니다.<br>\n그렇기 때문에 BCNF 정규화를 만족시키기 위해서는 테이블을 분해하여 아래와 같이 분리할 수 있다.<br><img alt=\"Pasted image 20240531104803.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240531104803.png\" target=\"_self\"><br>\n<br>컬럼값의 중복을 제거하는것이다.\n<br>\n<br>중복을 제거하기 위해 분해할 수 있을만큼 최대한 분해하는 것이다.\n<br> 그 이상 정규화를 진행하면 오히려 정규화의 단점이 더 커지기 때문이다.\n<br>인덱스 : 단일데이터 단위인 도큐먼트(document)를 모아놓은 집합을 인덱스(index)라고 한다.<br>\n색인 : 데이터를 Elasticsearch에 저장하는 행위<br>\n샤드 : 인덱스는 기본적으로 샤드(shard)라는 단위로 분리되고, 각 노드에 분산되어 저장된다 (검색의 기본단위는 샤드이다.)<br>\n<img alt=\"Pasted image 20240828104032.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240828104032.png\" target=\"_self\"><br>데이터를 범위나 카테고리로 나누어 관리하는 기법을 파티셔닝 이라고 한다.\n<br>\n<br>\n인덱스를 생성할 때, 처음 생성된 샤드를 프라이머리 샤드, 복제본은 리플리카 라고 부른다. <br>\n예를 들어 한 인덱스가 5개의 샤드로 구성되어있고, 클러스터가 4개의 노드로 구성되어있다고 가정하면,<br>\n각각 5개의 프라이머리 샤드와 복제본, 총 10개의 샤드들이 전체 노드에 골고루 분산되어 저장된다.<br>\n<img alt=\"Pasted image 20240828104728.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240828104728.png\" target=\"_self\"><br>\n노드가 1개만 존재한다면 복제본은 생성되지 않는다. Elasticsearch는 아무리 작은 클러스터라도 최소 3개의 노드로 구성할 것을 권장하고 있다. <br>\n이렇게 프라이머리 샤드와 리플리카를 통해 Elasticsearch는 운영 중에 노드가 유실되어도 데이터를 잃어버리지 않고, 데이터 가용성과 무결성을 보장하게 된다. <br>샤드는 여러 서버에 분산되어 병렬 및 병행으로 검색되므로, 인덱스가 같던 다르던 상관이 없다.\n검색의 기본 단위는 샤드이기 때문이다. 따라서 인덱스를 나누는 것은 운영의 편의성을 고려할 때 선택하는 방법이다.\n<br>전체색인을 할 경우 인덱스 1개가 7억건 이라면 색인이 모두 끝날때 까지 몇시간이 걸리게 된다.\n그 와중에 데이터에 변경이 있게 된다면 전체 색인 후 일괄적용이 들어가게 될텐데, 대기시간이 길어질 수록 일괄적용 시간도 함께 늘어나게 된다.\n결국 더 빠른 색인을 위해서는 하나의 인덱스를 여러개로 나누너 병행처리를 시키도록 해야한다. 다나와 에서는 상품DB특성상 카테고리군 별로 인덱스를 나누고 있다. 이때의 장점은 특정 카테고리만 검색할때 해당 인덱스만 검색하면 되므로, 검색 속도가 현저히 감소하게 된다.\n<br>\n<br>일반적인 시스템 로그와 같은 로그성 문서는 색인을 하고 나면 수정이 필요없는 정적 컨텐츠인 반면<br>\n상품문서같은 경우 색인이 끝나도 계속 갱신되어야 하는 살아있는 동적 컨텐츠이다. 따라서 동적색인에 원할하고, 검색성능도 높은 설계를 요구한다.\n<br>트렌젝션<br>\n- 데이터베이스의 상태를 변화시키기 위해 수행하는 작업의 단위<br>트렌젝션매니저<br>\n- Spring에서 제공하는 트렌젝션 관리 기능과 JPA를 연결하는 역할을 수행.<br>@Transactional<br>\n- 클래스나 메서드에 삽입하면, AOP레벨(프록시를 사용하여)에서 트렌젝션매니저를 이용한 동작을 공통으로 적용.<br>앤티티매니저<br>\n- 영속성 컨텍스트를 관리하는 인터페이스<br>\n- 엔티티의 저장/수정/삭제/조회 작업을 수행<br>\n- 스레드 세이프하지 않으므로 한트레젝션 내에서만 사용<br>\n- 앤티티매니저펙토리는 스레드세이프하므로 공유 가능<br>영속성컨텍스트<br>\n- JPA의 엔티티를 관리하는 1차 캐시 역할을 하는 메모리 공간<br>\n- 엔티티와 DB데이터간의 상태 동기화를 책임<br>\n- 1차캐싱 / 변경 감지 / 지연 로딩 의 특징을 갖는다<br>\n- 지연로딩 : 관계된 엔티티를 실제로 필요할때만 가져오며, 변경점을 한번만 commit한다<br>스냅샷<br>\n- DB스냅샷 :<br>\n- 트렌젝션이 시작될때 생성된다.<br>\n- 독립적인 데이터베이스 복사본으로, 원본데이터 변경과 무관하다.<br>\n- 고급 격리 수준(REPEATABLE READ, SERIALIZABLE)에서 MVCC(Multi-Version Concurrency Control)를 구현할 때 사용한다.<br>\n- 물리적인 복사본이 아닌, 논리적으로 매 쿼리마다 동적으로 가공이 되는 방식이다.<br>\n- 앤티티매니저_스냅샷 :<br>\n- 엔티티가 영속성 컨텍스트에 로드될 때 생성된다.<br>\n- 엔티티의 초기 상태를 저장하여 변경 감지에 사용된다.<br>세션1이 트렌젝션을 시작하고 데이터를 수정하는 동안 아직 커밋을 수행하지 않았는데,<br>\n세션2에서 동시에 같은 데이터를 수정하게 되면 여러가지 문제가 발생한다.<br>이런문제를 방지하기 위해, 세션이 트렌젝션을 시작하고 데이터를 수정하는 동안에 커밋이나 롤백 전까지<br>\n다른세션에서 해당 데이터를 수정할 수 없게 막아야 한다. 이런 문제를 해결하기 위해 DB에서는<br>\nLOCK 락 이라는 개념을 제공한다.<br>락은 언제 사용하는가? : 트렌젝션 종료 시점까지 해당 데이터를 다른 곳에서 변경하지 못하도록 강제로 막아야 할 때 사용한다.\n<br>일반적인 조회는 락을 사용하지 않는다.\n<br>락 타임아웃(다른 세션이 데이터를 점유하고 있을때 대기시간이 초과된 경우)에는 익셉션이 발생하게 된다.\n<br>동시성 제어(Concurrency Control)란,&nbsp;여러 사용자나 프로세스가 데이터를 공유할 때 발생할 수 있는 문제를 해결하기 위해, 데이터베이스 시스템이 트랜잭션을 순서대로 실행하는 것이 아니라, 트랜잭션이 동시에 실행될 수 있도록 허용하면서도 데이터의 일관성과 무결성을 유지할 수 있도록 하는 기술이며, 데이터베이스 시스템에서 매우 중요한 개념 중 하나이다.<br>\n<br>여러 사용자가 DB에 접근하더라도&nbsp;데이터의 일관성을 보장하고 데이터의 무결성을 유지\n<br>위를 만족하며 데이터베이스 시스템의 성능과 효율성을 유지하는 것\n<br>분실된 갱신(Lost Update) <br>두개의 트랜잭션이 같은 데이터를 갱신하는 작업을 진행하게 되면서 하나의 작업이 진행되지 않는 경우 <br>모순성(Inconsistency) <br>두개의 트랜잭션이 같은 데이터를 동시에 갱신하게되어 사용자가 원하는 결과와 일치하지 않은 상태가 되는 경우 <br>연쇄복귀(Cascading Rollback) <br>두개의 트랜잭션이 같은 데이터를 갱신하는 작업을 진행하는 과정에서 하나의 트랜잭션이 실패하면 원자성에 의해 두 트랜잭션 모두 복귀하는 경우 <br>비완료 의존성(Uncommitted Dependency) <br>한개의 트랜잭션이 실패하였을때, 이 트랜재션이 회복하기전에 다른 트랜잭션이 실패한 수행 결과를 참조하는 경우 <br>\n<br>Locking은 공유 자원에 대한 동시 액세스를 제어하는 전통적인 방법이다.\n<br>단일 스레드 또는 단일 프로세스에서만 동작하며, 한 번에 하나의 스레드만 공유 자원에 액세스할 수 있다.\n<br>신뢰성과 안전성이 높으며, 어떤 수준의 locking을 적용하느냐에 따라 교착 상태나 경쟁 조건과 같은 문제를 방지할 수 있다.\n<br>하지만 동시성 처리 속도가 저하될 수 있고, 대기 시간이 발생할 수 있다.\n<br>기본적으로 lock 연산과 unlock 연산을 사용한다.\n<br>\n<br>\n공유 잠금 (shared lock/s-lock): 데이터를 읽을 때 사용하는 락 <br>공유잠금을 설정한 트랜잭션은 데이터 항목에 대해&nbsp;읽기 연산(read)만 가능하다. <br>T1에서 x에 대해 S-lock을 설정했다면, T1은 read(x) 연산만 가능하다. <br>하나의 데이터 항목에 대해&nbsp;여러 개의 공유잠금이(S-lock) 가능하다. <br>T1에서 x에 대해 S-lock을 설정한 경우, 동시에 T2에서도 x에 대해 S-lock을 설정할 수 있다. <br>다른 트랜잭션도 읽기 연산(read) 만을 실행할 수 있다. <br>T1에서 x에 대해 S-lock을 설정했다면, T2에서도 T1이 S-lock(x)을 실행하는 동안 read(x) 연산만 가능하다. <br>\n배타 잠금 (exclusive lock/x-lock): 데이터를 변경할 때 사용하는 락 <br>배타잠금을 설정한 트랜잭션은 데이터 항목에 대해서&nbsp;읽기 연산(read)과 쓰기 연산(write) 모두 가능하다. <br>T1에서 x에 대해 S-lock을 설정했다면, T1은 read(x) 연산과 write(x) 연산 모두 가능하다. <br>하나의 데이터 항목에 대해서는&nbsp;하나의 배타잠금(X-lock)만 가능하다.\n<br>동시에 여러 개의 배타잠금은 불가능하다. <br>T1에서 x에 대해 X-lock을 설정했다면, T1에서 unlock(x)를 하기 전까지 T2에서 x에 대해 X-lock을 설정할 수 없다. <br>다른 트랜잭션은 읽기 연산(read)와 쓰기 연산(write) 모두 불가능하다. <br>T1에서 x에 대해 X-lock을 설정했다면, T2에서는 T1에서 unlock(x)를 하기 전까지 read(x), write(x) 연산이 모두 불가능하다. <br>\n추가) 교착상태 (deadlock) <br>모든 transaction이 대기 상태에 들어가 아무런 진행이 일어나지 않는 상태를 교착상태라고 한다. 교착상태에 빠지면 외부에서 강제로 트랜잭션을 중단하거나 잠금을 해제하지 않는 이상 무한정 대기 상태로 남게 된다. <br>\n<br>\n낙관적 락 (optimistic lock) <br>충돌이 발생할 가능성이 낮은 경우 사용되는 동시성 제어 기법이다.\n<br>충돌이 발생하면 재시도 또는 병합을 통해 충돌을 해결한다.\n<br>실제로 lock을 사용하지 않고&nbsp;version을 이용함으로서 정합성을 맞추는 방법이다. 데이터를 읽을 때 lock을 사용하지 않고, 업데이트 시&nbsp;내가 읽은 version이 맞는지 충돌 여부를 확인하여 처리한다.\n<br>즉, 자원에 lock을 직접 걸어서 선점하지 않고, 동시성 문제가 실제로 발생하면 그때가서 처리하는 방식이다. <br>\n비관적 락 (pessimistic lock) <br>충돌이 발생할 가능성이 높은 경우 사용되는 동시성 제어 기법이다.\n<br>데이터를 읽거나 수정하기 전에 lock을 획득하여 다른 사용자의 액세스를 차단하고, lock을 가진 스레드만 접근하도록 제어한다.\n<br>데이터에 대한 배타적인 액세스 권한을 보장하여 충돌을 방지한다.\n<br>실제로 데이터에 lock을 걸어서 정합성을 맞추는 방법으로, 자원 요청에 따른 동시성 문제가 발생할 것이라고 예상하고 lock을 걸어버리는 방법이다.\n<br>즉, 트랜젝션이 시작할 때 s-lock이나 x-lock을 실제로 걸고 시작한다. <br>\n낙관적 락 vs. 비관적 락<br>\n<img alt=\"Pasted image 20250228150552.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250228150552.png\" target=\"_self\"> <br>\n분산락 (distributed lock) <br>여러 컴퓨터 또는 프로세스 간에 공유된 자원에 대한 동시 액세스를 제어하기 위해 사용된다.\n<br>분산 시스템에서 동시성 문제를 해결하기 위해 사용되며,&nbsp;분산된 서버 또는 클러스터 간의 상호작용이 필요하다.\n<br>주로&nbsp;데이터베이스나 메시지 큐 등의 분산 시스템에서 사용된다.\n<br>대표적인 분산락 기법으로는 ZooKeeper, Redis 등이 있다.\n<br>Redis는 RedLock이라는 알고리즘을 제안하며 3가지 특성을 보장해야한다고 한다. <br>오직 한 순간에 하나의 작업자만이 락(lock) 을 걸 수 있다.\n<br>락 이후, 어떠한 문제로 인해 락을 풀지 못하고, 종료된 경우라도 다른 작업자가 락을 획득할 수 있어야합니다.\n<br>Redis 노드가 작동하는한, 모든 작업자는 락을 걸고 해체할 수 있어야합니다. <br>분산 락을 구현하기 위해 lock에 대한 정보를 Redis에 저장하고 있어야한다. 그리고 분산환경에서 여러대의 서버들은 공통된 Redis를 바라보며, 자신이 공유 자원에 접근할 수 있는지 확인한다. <br>\n스핀락 (spin lock) <br>자원에 대한 접근이 필요할 때 무한루프를 돌면서 반복적으로 확인하며, 다른 스레드가 lock을 해제할 때까지 대기한다.\n<br>경쟁 상태 (2개 이상의 프로세스가 공유 자원을 동시에 읽거나 쓰는 상황)가 짧고 자원 점유 시간이 길지 않은 경우에 효과적이다.\n<br>주로 멀티코어 시스템에서 사용되며, 락 획득을 위해 CPU를 계속 사용하므로 서버에 많은 부하를 주어 주의해야 한다.\n<br>","aliases":[],"tags":["#공부","#DB","#DataBase"],"headers":[{"heading":"📔 DataBase","level":1,"id":"📔 DataBase"},{"heading":"프로시저란?","level":1,"id":"프로시저란?"},{"heading":"프로시저를 사용하는 이유","level":3,"id":"프로시저를_사용하는_이유"},{"heading":"프로시저의 단점","level":3,"id":"프로시저의_단점"},{"heading":"DB Connection이란 무엇일까?","level":1,"id":"DB_Connection이란_무엇일까?"},{"heading":"DataBase 정규화 과정","level":1,"id":"DataBase_정규화__과정"},{"heading":"정규화란?","level":2,"id":"정규화란?"},{"heading":"장점","level":2,"id":"장점"},{"heading":"단점","level":2,"id":"단점"},{"heading":"제 1 정규화","level":3,"id":"제_1_정규화"},{"heading":"제 2 정규화","level":3,"id":"제_2_정규화"},{"heading":"제3 정규화","level":3,"id":"제3_정규화"},{"heading":"BCNF 정규화","level":3,"id":"BCNF_정규화"},{"heading":"제4 정규화는 다치 종속을 없애는것이다","level":3,"id":"제4_정규화는_다치_종속을_없애는것이다"},{"heading":"제5 정규화는 조인 종속을 없애는것이다.","level":3,"id":"제5_정규화는_조인_종속을_없애는것이다."},{"heading":"보통 정규화는 BCNF정규화 까지만 진행하는 경우가 많다.","level":4,"id":"보통_정규화는_BCNF정규화_까지만_진행하는_경우가_많다."},{"heading":"Dual 테이블이란??","level":1,"id":"Dual_테이블이란??"},{"heading":"오라클 자체에서 제공되는 테이블","level":2,"id":"오라클_자체에서_제공되는_테이블"},{"heading":"간단하게 함수를 이용해서 계산결과값을 확인할 때 사용하는 테이블","level":2,"id":"간단하게_함수를_이용해서_계산결과값을_확인할_때_사용하는_테이블"},{"heading":"오직 한 행, 한 컬럼 만을 담고 있는 Dummy 테이블이다.","level":3,"id":"오직_한_행,_한_컬럼_만을_담고_있는_Dummy_테이블이다."},{"heading":"엘라스틱서치 인덱스와 샤드 분할","level":1,"id":"엘라스틱서치_인덱스와_샤드_분할"},{"heading":"프라이머리 샤드와 복제본(Replica)","level":2,"id":"프라이머리_샤드와_복제본(Replica)"},{"heading":"검색시 샤드와 인덱스","level":3,"id":"검색시_샤드와_인덱스"},{"heading":"색인시 인덱스","level":3,"id":"색인시_인덱스"},{"heading":"결론","level":2,"id":"결론"},{"heading":"트렌젝션 / DB스냅샷 / 앤티티매니저 / 영속성컨텍스트 / JPA","level":1,"id":"트렌젝션_/_DB스냅샷_/_앤티티매니저_/_영속성컨텍스트_/_JPA"},{"heading":"각각의 정의","level":2,"id":"각각의_정의"},{"heading":"Lock ( 데이터베이스 락 ) 이란?","level":1,"id":"Lock_(_데이터베이스_락_)_이란?"},{"heading":"1. 동시성 제어 정의","level":3,"id":"1._동시성_제어_정의"},{"heading":"2. 동시성 제어 목적","level":3,"id":"2._동시성_제어_목적"},{"heading":"3. 동시성 제어 방법","level":3,"id":"3._동시성_제어_방법"},{"heading":"Locking이란?","level":3,"id":"**Locking이란?**"},{"heading":"Locking의 종류","level":3,"id":"**Locking의_종류**"},{"heading":"Locking을 활용한 동시성 제어 기법","level":3,"id":"**Locking을_활용한_동시성_제어_기법**"}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:DB","?query=tag:DataBase","study/cs/📔-database.html#📔 DataBase","study/cs/📔-database.html#프로시저란?","study/cs/📔-database.html#프로시저를_사용하는_이유","study/cs/📔-database.html#프로시저의_단점","study/cs/📔-database.html#DB_Connection이란_무엇일까?","study/cs/📔-database.html#DataBase_정규화__과정","study/cs/📔-database.html#정규화란?","study/cs/📔-database.html#장점","study/cs/📔-database.html#단점","study/cs/📔-database.html#제_1_정규화","study/cs/📔-database.html#제_2_정규화","study/cs/📔-database.html#제3_정규화","study/cs/📔-database.html#BCNF_정규화","study/cs/📔-database.html#제4_정규화는_다치_종속을_없애는것이다","study/cs/📔-database.html#제5_정규화는_조인_종속을_없애는것이다.","study/cs/📔-database.html#보통_정규화는_BCNF정규화_까지만_진행하는_경우가_많다.","study/cs/📔-database.html#Dual_테이블이란??","study/cs/📔-database.html#오라클_자체에서_제공되는_테이블","study/cs/📔-database.html#간단하게_함수를_이용해서_계산결과값을_확인할_때_사용하는_테이블","study/cs/📔-database.html#오직_한_행,_한_컬럼_만을_담고_있는_Dummy_테이블이다.","study/cs/📔-database.html#엘라스틱서치_인덱스와_샤드_분할","study/cs/📔-database.html#프라이머리_샤드와_복제본(Replica)","study/cs/📔-database.html#검색시_샤드와_인덱스","study/cs/📔-database.html#색인시_인덱스","study/cs/📔-database.html#결론","study/cs/📔-database.html#트렌젝션_/_DB스냅샷_/_앤티티매니저_/_영속성컨텍스트_/_JPA","study/cs/📔-database.html#각각의_정의","study/cs/📔-database.html#Lock_(_데이터베이스_락_)_이란?","study/cs/📔-database.html#1._동시성_제어_정의","study/cs/📔-database.html#2._동시성_제어_목적","study/cs/📔-database.html#3._동시성_제어_방법","study/cs/📔-database.html#**Locking이란?**","study/cs/📔-database.html#**Locking의_종류**","study/cs/📔-database.html#**Locking을_활용한_동시성_제어_기법**"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/cs/📔-database.html","pathToRoot":"../..","createdTime":1739844411985,"modifiedTime":1741077360007,"sourceSize":19424,"sourcePath":"study/CS/📔 DataBase.md","exportPath":"study/cs/📔-database.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20240610171904.png","사진-및-문서/pasted-image-20240531103441.png","사진-및-문서/pasted-image-20240531103549.png","사진-및-문서/pasted-image-20240531105228.png","사진-및-문서/pasted-image-20240531105241.png","사진-및-문서/pasted-image-20240531104351.png","사진-및-문서/pasted-image-20240531104418.png","사진-및-문서/pasted-image-20240531104751.png","사진-및-문서/pasted-image-20240531104803.png","사진-및-문서/pasted-image-20240828104032.png","사진-및-문서/pasted-image-20240828104728.png","사진-및-문서/pasted-image-20250228150552.png"]},"study/cs/📭-server.html":{"title":"📭 Server","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Server\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Server</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:Server\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Server\">#Server</a><br>\n<br>서버에 일을 분산시켜주는 역할을 한다.\n<br>Random 랜덤분배 <br>Least loaded 가장 적은양의 작업을 처리하고 있는 서버에게 요청 할당 <br>Round Robin 순서를 정하여 돌아가며 작업 분배 <br>\n<br>layer4 : 데이터의 내용을 보지 않고 IP주소 및 TCP/UDP정보에 따라 단순히 분배를 해준다\n<br>layer7 : 서버가 하는 역할이 분리되어 있는 환경에서 데이터의 내용을 보고 각기 맞는 역할을 하는 서버에게 분배\n<br>로드밸런서는 클라이언트가 요청을 보내야 할 서버를 골라야하는 부담을 덜어주며, 로드 밸런서에게 할당된 vIP(가상IP)로 요청을 보내기만 하면 로드 밸런서에서 알아서 작업을 나눠준다.<br>\n서버에서는 적절한 로드 밸런서를 사용하면 들어오는 요청이 여러 장비에 분산되어 처리량이 늘어나고 응답 시간이 줄어드는 효과를 기대할 수 있다.<br>\n<br>\n웹서버가 클라이언트의 요청에 의해 웹페이지에 대한 응답 결과를 돌려줬을때,<br>\n클라이언트의 화면에는 랜더링해야하는 수많은 이미지가 필요하다.<br>\n이 이미지를 웹서버가 전부 주려면 데이터의 용량이 무거워서 서버에 부하가 걸리게 되는데,,<br>\n따라서 웹서버는 이미지를 대신 건내주는 CDN에게 요청한다는 개념이다. <br>\nCDN은 일반적으로 용량이 큰 컨텐츠 데이터를 빠른속도로 제공하기 위해 사용자와 가까운곳에 분산되어 있는 데이터 저장 서버이다. <br>\n<br>push CDN : 서버에서 컨텐츠가 업로드 되거나, 변경되었을 때 모두 반영하는 방식\n<br>pull CDN : 클라이언트가 요청할 때마다 컨텐츠가 CDN에 새로 저장되는 방식\n<br>두 방식 모두 장단점이 있다.<br>\nPush방식은 모든 컨텐츠를 갖고 있기 때문에 웹서버에 요청할 일이 없지만 유지하는데 필요한 용량과 비용이 크고,<br>\nPull방식은 요청이 들어왔을 때 컨텐츠가 있다면 즉각 응답하지만, 그렇지 않을때 웹서버에 요청해야하는 부담이 있다.<br><img alt=\"Pasted image 20240603173517.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240603173517.png\" target=\"_self\"><br>하지만, MSA의 경우 각 서비스마다 다른 데이터베이스를 사용하는 것이 일반적이고, 이를 하나의 데이터베이스 트렌젝션으로 처리하는 것은 기술적으로 어렵고, 처리한다 해도 긴 트렌젝션이 발생하기 때문에 효용도 적다.<br>\n<img alt=\"Pasted image 20240603180042.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240603180042.png\" target=\"_self\"><br>\n<br>tcc는 분산된 REST 시스템들 간의 트랜젝션을 HTTP와 REST원칙으로 접근하여 해결하는 방법이다.\n<br>REST API 호출은 한 번에 끝내는 것이 아니라, 2번의 걸쳐서(Try / Confirm) 진행하게 된다.<br>\n트렌젝션의 All-or-Nothing을 TCC의 REST API를 호출을 시도(Try)하고 전부 확정(Confirm)하거나 전부 취소(Cancel)하는 것으로 구현된다.<br>Spring RestTemplate을 사용하여 HTTP 요청(POST)을 보냈을 때, try 요청의 경우 정상적인 HTTP응답(HttpStatus.CREATED)를 받으면 HTTP BODY에는 JSON형태로 Confirm하게 하거나 Cancel 할 수 있는 URL이 담겨 있다.\n<br>\n<br>여기서 Service에서 반환받은 값을 기준으로 Confirm 할지 Cancel할지 선택하게 된다.\n<br>중요한 것은 여기서 실제로 데이터베이스 테이블에 변경이 있는것 이 아닌, Confirm되었을때 그때 처리가 된다.\n<br>\n<br>여기서 받은 반환값을 토대로 Service에서는 resource 필드(JSON)을 역질렬화 하고 이를 사용하여 그때 실제로 데이터베이스에 있는 테이블을 변경하게 된다.\n<br>\n<br>\nTry는 리소스를 사용하기 전에 예약하는 것이다. 만약 4.구매 주문 생성에서 Try만 하고, 실패했다면 REST로 통신은 기다리고 있던(Try만 한 상태) 두 API에는 Confirm이 전달되지 않아 예약만 된 상태로 남아있게 된다. <br>\n예약된 상태는 특정 리소스를 점유하고 있다는 의미이며, 리소스를 점유하고 있는 동안에는 다른 API에서 해당 리소스를 사용하는 것은 제한된다. <br>\n따라서, 4. 행위에서 Try만 하고 실패했다면, 예약한 리소스까지 해제해주어야 한다. <br>\n분산된 환경에서 리소스를 해제하는 것은 쉬운 문제가 아닌데, TCC매커니즘에서는 Cancel과 Timeout 두가지 방법으로 예약된 리소스를 해제한다.<br>\n<img alt=\"Pasted image 20240604102140.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240604102140.png\" target=\"_self\"> <br>REST커뮤니케이션 관전에서 자세하게 설명하면,<br>TCC REST API Consumer(여기선 OrderService)가 Try요청\n<br>TCC REST API Provider (여기선 StockService/PaymentService)는 응답으로 Confirm하거나 Cancel할 수 있는 URI를 반환\n<br>이를 사용하여 API Consumer는 DELETE HTTP Method로 예약한 리소스에 대한 해제를 요청한다.\n<br><img alt=\"Pasted image 20240604144026.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20240604144026.png\" target=\"_self\"><br>클라이언트가 주문을하고, OrderService는 StockService와 PaymentService로 Try한다.<br>\n그리고 구매 주문을 생성 후 Confirm하였다. StockService는 재고 처리에 성공을 한 반면, PaymentService는 결제에 실패한다.<br>\n이경우에는 어떻게 일관성을 유지할 수 있을까?\n<br>\n<br>관계형 데이터베이스에서 트랜젝션을 처리할 때에는 데이터 적합성을 보장해야 하기 때문에 엄격한 일관성 모델을 사용한다.\n<br>하지만 결제시스템 하나의 문제로 모든 비즈니스가 멈추게 되는 문제가 발생한다.(보통은 멈추는게 맞다)\n<br>\n<br>\nStockService와 PaymentService는 OrderService로부터 받은 Confirm요청을 Queue나 Log파일에 큐잉 하고, 이를 비동기적으로 처리한다. Confirm처리 과정에서 오류가 나는 경우 계속해서 재시도하여 결국(언젠가) 처리하게 한다. <br>\n이렇게 단기적으로 일관성을 잃더라도(클라이언트 입장에서는 성공했다고 느끼지만, 실제 결제처리가 되지 않았을 수도 있다.) 결국에서는 일관성을 유지하는 모델을 결과적 일관성 이라고 한다. <br>\n단, 결과적 일관성 모델은 단기적으로 일관성을 잃어버렸을 때를 대비한 화면 처리 등이 필요하다. <br>\nex) 아마존에서 전자책을 구입한 후, 결제 과정이 진행되었고 이후 카드가 정상처리되지 않는 메일을 받아, 2일후에 제대로 결제처리를 하였다.","aliases":[],"tags":["#공부","#Server"],"headers":[{"heading":"📭 Server","level":1,"id":"📭 Server"},{"heading":"Load Balancer란??","level":1,"id":"Load_Balancer란??"},{"heading":"많이 사용하는 로드 밸런서의 종류는 Layer4 와 Layer7이다.","level":3,"id":"많이_사용하는_로드_밸런서의_종류는_Layer4_와_Layer7이다."},{"heading":"CND(Content Delivery Network)란??","level":1,"id":"CND(Content_Delivery_Network)란??"},{"heading":"동작 방식","level":3,"id":"동작_방식"},{"heading":"REST 기반의 트랜잭션","level":1,"id":"REST_기반의_트랜잭션"},{"heading":"모놀리틱 아키텍처에서는 일반적으로 데이터베이스의 트렌젝션에 의존한다.","level":3,"id":"모놀리틱_아키텍처에서는_일반적으로_데이터베이스의_트렌젝션에_의존한다."},{"heading":"TCC ( Try-Confirm/Cancel)","level":2,"id":"TCC_(_Try-Confirm/Cancel)"},{"heading":"@RestController를 사용하여 HTTP POST Method와 연결할 수 있다.","level":3,"id":"@RestController를_사용하여_HTTP_POST_Method와_연결할_수_있다."},{"heading":"이후 @PutMapping을 사용하여 HTTP PUT Method와 연결된다.","level":3,"id":"이후_@PutMapping을_사용하여_HTTP_PUT_Method와_연결된다."},{"heading":"예약한 리소스 문제","level":2,"id":"예약한_리소스_문제"},{"heading":"엄격한 일관성과 결과적 일관성","level":2,"id":"엄격한_일관성과_결과적_일관성"},{"heading":"엄격한 일관성","level":4,"id":"엄격한_일관성"},{"heading":"결과적 일관성","level":4,"id":"결과적_일관성"}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:Server","study/cs/📭-server.html#📭 Server","study/cs/📭-server.html#Load_Balancer란??","study/cs/📭-server.html#많이_사용하는_로드_밸런서의_종류는_Layer4_와_Layer7이다.","study/cs/📭-server.html#CND(Content_Delivery_Network)란??","study/cs/📭-server.html#동작_방식","study/cs/📭-server.html#REST_기반의_트랜잭션","study/cs/📭-server.html#모놀리틱_아키텍처에서는_일반적으로_데이터베이스의_트렌젝션에_의존한다.","study/cs/📭-server.html#TCC_(_Try-Confirm/Cancel)","study/cs/📭-server.html#@RestController를_사용하여_HTTP_POST_Method와_연결할_수_있다.","study/cs/📭-server.html#이후_@PutMapping을_사용하여_HTTP_PUT_Method와_연결된다.","study/cs/📭-server.html#예약한_리소스_문제","study/cs/📭-server.html#엄격한_일관성과_결과적_일관성","study/cs/📭-server.html#엄격한_일관성","study/cs/📭-server.html#결과적_일관성"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/cs/📭-server.html","pathToRoot":"../..","createdTime":1739844706654,"modifiedTime":1739946645157,"sourceSize":6987,"sourcePath":"study/CS/📭 Server.md","exportPath":"study/cs/📭-server.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20240603173517.png","사진-및-문서/pasted-image-20240603180042.png","사진-및-문서/pasted-image-20240604102140.png","사진-및-문서/pasted-image-20240604144026.png"]},"study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html":{"title":"🍂 JPA, Mybatis , Dead Lock","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:JPA\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#JPA</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Java\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Java</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Mybatis\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Mybatis</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:DeadLock\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#DeadLock</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:JPA\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#JPA\">#JPA</a> <a href=\"http://lts.kr?query=tag:Java\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Java\">#Java</a> <a href=\"http://lts.kr?query=tag:Mybatis\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Mybatis\">#Mybatis</a> <a href=\"http://lts.kr?query=tag:DeadLock\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#DeadLock\">#DeadLock</a><br>...Stack trace 중 일부 발췌<br>HikariPool Dead lock Caused by: org.apache.ibatis.exceptions.PersistenceException:\n###Error querying database. Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLTransientConnectionException: HikariPool-1 - Connection is not available, request timed out after 30008ms.\n###The error occurred while executing a query\n###Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLTransientConnectionException: HikariPool-1 - Connection is not available, request timed out after 30008ms.\nCaused by: java.sql.SQLTransientConnectionException: HikariPool-1 - Connection is not available, request timed out after 30008ms.\nat com.zaxxer.hikari.pool.HikariPool.createTimeoutException(HikariPool.java:696)\nat com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:197)\nat com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:162)\n<br>// 위 조건 발생 코드 예시\npublic void deadLockMethod(){ mybatisSelectMethod(); jpaSelectMethod(); mybatisSelectMethod();\n}\n<br>데드락 문제는 데이터베이스 커넥션 고갈과 트랜잭션 리소스 경합이 복합적으로 작용하여 발생합니다.<br>\n<br>\n공유 커넥션 풀(HikariCP): <br>JPA와 MyBatis 모두 HikariCP를 통해 동일한 데이터베이스 커넥션 풀을 공유합니다.\n<br>한쪽에서 커넥션을 점유하고 반환하지 않으면, 다른 쪽에서 커넥션 요청 시 대기 상태가 길어지고, 결국 시간 초과(timeout)로 이어집니다. <br>\n트랜잭션 관리의 복잡성: <br>JPA와 MyBatis가 서로 다른 방식으로 커넥션을 관리하면서 동일 트랜잭션 내에서 서로 경합을 벌일 가능성이 큽니다.\n<br>트랜잭션의 범위가 너무 크거나, 트랜잭션 경계에서 커넥션이 제대로 정리되지 않으면 커넥션 고갈 상태가 발생합니다. <br>\nNested Query 및 커넥션 잠금: <br>deadLockMethod() 코드처럼 동일 메서드 내에서 JPA와 MyBatis를 교차 호출하면, 커넥션이 중복 점유(lock)될 가능성이 있습니다.\n<br>예를 들어, MyBatis가 첫 번째 호출에서 커넥션을 점유한 상태에서 JPA가 새로운 커넥션을 요청하면, 풀에서 여유가 없을 경우 대기 상태가 발생합니다. <br>\n<br>\nJPA와 MyBatis의 동시 사용 <br>JPA는 엔터티 매니저(EntityManager)를 통해 트랜잭션을 관리하고, MyBatis는 SQL 세션(SqlSession)을 통해 관리합니다.\n<br>이 둘은 서로 독립적으로 작동하기 때문에 동일한 트랜잭션 내에서 하나의 커넥션을 공유하지 못하고, 각자 별도의 커넥션을 요청할 수 있습니다. <br>\n커넥션 반환 누락 <br>MyBatis 또는 JPA 메서드 호출 후 커넥션이 적절히 반환되지 않으면(pool로 반환되지 않음), 커넥션 풀이 고갈될 가능성이 높아집니다. <br>\nConnection Pool 고갈 <br>HikariCP의 기본 maxPoolSize(기본값: 10)가 초과되면 대기 상태가 발생하며, 대기 시간(connectionTimeout)이 지나면 SQLTransientConnectionException이 발생합니다. <br>\n<br>최대 커넥션 수 증가: HikariCP의 maximumPoolSize를 늘려 충분한 커넥션을 사용할 수 있도록 설정합니다. properties spring.datasource.hikari.maximum-pool-size=30 spring.datasource.hikari.connection-timeout=30000<br>최소 유휴 커넥션 유지: properties spring.datasource.hikari.minimum-idle=10<br>\n<br>JPA와 MyBatis 호출이 동일한 트랜잭션 내에서 실행되도록 스프링 트랜잭션 관리를 통합합니다.\n<br>@Transactional 어노테이션을 적용하여 트랜잭션 범위를 명시적으로 정의합니다.<br>@Transactional\npublic void deadLockMethod() { mybatisSelectMethod(); jpaSelectMethod(); mybatisSelectMethod();\n}\n<br>\n<br>JPA와 MyBatis가 동일한 트랜잭션 안에서 하나의 커넥션을 공유하도록 설정합니다.\n<br>Spring의 DataSourceTransactionManager를 사용하여 데이터 소스 기반으로 트랜잭션을 관리합니다.<br> @Bean public PlatformTransactionManager transactionManager(DataSource dataSource) { return new DataSourceTransactionManager(dataSource); } <br>\n<br>JPA에서 Lazy Loading이 과도하게 사용될 경우, 예상치 못한 시점에서 데이터베이스 호출이 발생하며 추가적인 커넥션 요청을 유발할 수 있습니다.\n<br>가능하면 즉시 로딩(Eager Fetch)을 사용하거나, 필요한 데이터를 명시적으로 로딩합니다.<br>@EntityGraph(attributePaths = {\"childEntities\"}) List&lt;ParentEntity&gt; findWithChildren();\n<br>\n<br>MyBatis 사용 시 SqlSession을 명시적으로 닫아 커넥션이 즉시 반환되도록 합니다. try (SqlSession session = sqlSessionFactory.openSession()) { // MyBatis 작업 수행 }\n<br>@Service\npublic class DeadlockService { private final SqlSessionFactory sqlSessionFactory; private final JpaRepository jpaRepository; public DeadlockService(SqlSessionFactory sqlSessionFactory, JpaRepository jpaRepository) { this.sqlSessionFactory = sqlSessionFactory; this.jpaRepository = jpaRepository; } @Transactional public void resolveDeadlockMethod() { // MyBatis 호출 try (SqlSession session = sqlSessionFactory.openSession()) { session.selectList(\"namespace.mybatisSelect\"); } // JPA 호출 jpaRepository.findAll(); // 다시 MyBatis 호출 try (SqlSession session = sqlSessionFactory.openSession()) { session.selectList(\"namespace.mybatisSelect\"); } }\n}\n<br><a data-tooltip-position=\"top\" aria-label=\"https://velog.io/@12onetwo12/%EC%9E%A5%EC%95%A0%ED%9A%8C%EA%B3%A0-DBCP-Connection-Leak-%ED%95%B4%EA%B2%B0-%EC%97%AC%EC%A0%95-feat.HikariCP-Dead-lock-QueryDSL\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://velog.io/@12onetwo12/%EC%9E%A5%EC%95%A0%ED%9A%8C%EA%B3%A0-DBCP-Connection-Leak-%ED%95%B4%EA%B2%B0-%EC%97%AC%EC%A0%95-feat.HikariCP-Dead-lock-QueryDSL\" target=\"_self\">[ 트러블슈팅 ] JPA, Mybatis 동시 사용시 발생할 수 있는 HikariCP Dead lock 해결 여정 ( feat.OSIV )</a>","aliases":[],"tags":["#공부","#JPA","#Java","#Mybatis","#DeadLock"],"headers":[{"heading":"🍂 JPA, Mybatis , Dead Lock","level":1,"id":"🍂 JPA, Mybatis , Dead Lock"},{"heading":"1. 데드락이 발생하는 주요 조건:","level":1,"id":"1._데드락이_발생하는_주요_조건"},{"heading":"2. 데드락 발생 원인:","level":1,"id":"2._데드락_발생_원인"},{"heading":"해결 방안 및 설계 지침","level":1,"id":"해결_방안_및_설계_지침"},{"heading":"1. HikariCP 설정 조정","level":3,"id":"1._HikariCP_설정_조정"},{"heading":"2. 트랜잭션 경계 명확히 하기","level":3,"id":"2._트랜잭션_경계_명확히_하기"},{"heading":"3. 동일 커넥션 공유","level":3,"id":"3._동일_커넥션_공유"},{"heading":"4. Lazy Loading 사용 최소화","level":3,"id":"4._Lazy_Loading_사용_최소화"},{"heading":"5. 커넥션 반환 명시","level":3,"id":"5._커넥션_반환_명시"},{"heading":"헬로에서의 데드락 원인","level":1,"id":"헬로에서의_데드락_원인"},{"heading":"하나의 동작(트렌젝션)에서 커넥션을 하나 점유한 상태에서,","level":3,"id":"하나의_동작(트렌젝션)에서_커넥션을_하나_점유한_상태에서,"},{"heading":"추가적으로 요구하고, 추가적으로 요구된 커넥션풀을 다른 트렌젝션에서 점유하고있을때.","level":3,"id":"추가적으로_요구하고,_추가적으로_요구된_커넥션풀을_다른_트렌젝션에서_점유하고있을때."},{"heading":"JPA의 영속성 컨텍스트가 커넥션을 놓는 순간?","level":1,"id":"JPA의_영속성_컨텍스트가_커넥션을_놓는_순간?"},{"heading":"Entity Manger -> 영속성 컨텍스트","level":2,"id":"Entity_Manger_->_영속성_컨텍스트"},{"heading":"OSIV(Open Session In View)","level":4,"id":"OSIV(Open_Session_In_View)"},{"heading":"정리글","level":1,"id":"정리글"}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:JPA","?query=tag:Java","?query=tag:Mybatis","?query=tag:DeadLock","https://velog.io/@12onetwo12/%EC%9E%A5%EC%95%A0%ED%9A%8C%EA%B3%A0-DBCP-Connection-Leak-%ED%95%B4%EA%B2%B0-%EC%97%AC%EC%A0%95-feat.HikariCP-Dead-lock-QueryDSL","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#🍂 JPA, Mybatis , Dead Lock","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#1._데드락이_발생하는_주요_조건","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#2._데드락_발생_원인","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#해결_방안_및_설계_지침","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#1._HikariCP_설정_조정","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#2._트랜잭션_경계_명확히_하기","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#3._동일_커넥션_공유","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#4._Lazy_Loading_사용_최소화","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#5._커넥션_반환_명시","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#헬로에서의_데드락_원인","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#하나의_동작(트렌젝션)에서_커넥션을_하나_점유한_상태에서,","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#추가적으로_요구하고,_추가적으로_요구된_커넥션풀을_다른_트렌젝션에서_점유하고있을때.","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#JPA의_영속성_컨텍스트가_커넥션을_놓는_순간?","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#Entity_Manger_->_영속성_컨텍스트","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#OSIV(Open_Session_In_View)","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html#정리글"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html","pathToRoot":"../..","createdTime":1739950661685,"modifiedTime":1739951453006,"sourceSize":7041,"sourcePath":"study/Dev Seminar/🍂 JPA, Mybatis , Dead Lock.md","exportPath":"study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html","showInTree":true,"treeOrder":0,"attachments":[]},"study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html":{"title":"📔 DB 테이블 설계, 어떻게 하는게 옳은 방법인가","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:DB\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#DB</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:DataBase\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#DataBase</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:설계\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#설계</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:DB\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#DB\">#DB</a> <a href=\"http://lts.kr?query=tag:DataBase\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#DataBase\">#DataBase</a> <a href=\"http://lts.kr?query=tag:설계\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#설계\">#설계</a><br><img alt=\"Pasted image 20241220113308.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241220113308.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20241220113315.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241220113315.png\" target=\"_self\"><br>\n<br>위 예시의 경우 데이터를 행(Row)이 아닌 열(Column)로 저장한 것으로 보인다.\n<br>\n<br>\n페이지가 10개를 초과하면 새로운 페이지에 대해 var11, var12 등의 컬럼을 추가로 만들어야한다. ( 실제로 일어날 뻔 했다. ) <br>\n이는 테이블 스키마를 수정하는 작업이며, 다음과 같은 위험을 수반한다. <br>서비스 중단: 테이블 스키마 변경 중 데이터베이스가 잠기거나 애플리케이션이 중단될 가능성이 있다.\n<br>코드 변경 필요: 새로운 컬럼에 맞춰 애플리케이션 로직(예: 데이터 입력, 조회 쿼리)을 수정해야 한다.\n<br>관리 복잡성 증가: 테이블 구조가 복잡해져 유지보수 비용이 증가한다. <br> -현재 구조는 hit 수 외의 추가 정보를 기록하기 어렵다. ( 나중에 추가해달라고 할것같음. ) <br>예: 페이지별 방문자의 디바이스 정보, 지역 정보 등. <br>\n<br>열로 데이터를 저장하면 특정 페이지의 hit 수를 조회할 때, 각 컬럼을 명시적으로 참조해야 합니다. <br>예: 특정 날짜에 대해 var1 ~ var10의 데이터를 모두 합산하려면 SELECT var1 + var2 + ... + var10 FROM table 같은 비효율적인 쿼리를 작성해야 합니다. <br>페이지별 hit 데이터를 통계적으로 분석하려는 경우(예: 총합, 평균 등) 쿼리가 복잡해지며, 컬럼이 늘어나면 쿼리 수정이 필요합니다.\n<br>idx (PK) | xdate (PK) | page_id | hit_count\n--------------------------------------------- 1 | 20241208 | var1 | 21 2 | 20241208 | var2 | 15 3 | 20241209 | var1 | 13\n<br>새로운 페이지를 추가할 때 스키마 변경 불필요.\n<br>스토리지 효율성 향상 (0 또는 NULL 값 제거).\n<br>데이터 분석 및 통계 작업 간소화.\n<br>검색, 집계 성능 최적화 가능.\n<br>변경 전 (비정규화된 테이블):<br>\n<br>맞다. var1, var2 .. 는 각기 다른 페이지의 hit를 저장한다.\n<br>하지만, \"페이지의 hit 수\"라는 속성에서 본다면, 동일한 의미를 여러 셀에 분산 저장한다고 볼 수 있다.<br>\n따라서 데이터의 동일 속성을 위반했다고 볼 수 있다.<br>따라서 다음과 같이 각 컬럼이 진짜 원자값을 갖도록 수정할 수 있다.<br>다음과 같은 형태를 띄게 된다.<br>\n<br>여기서, category는 page_name에 종속되어있으며, page_name은 page_id에 종속되어있다.\n<br>페이지 속성(비기본 속성)들이 기본키의 부분적으로 종속되어있다.<br>hit_count는 xdate, page_id를 기본키로 갖는다 <br>category는 page_name를 종속하며, page_name은 page_id -&gt; page_id처럼 간접 종속을 하기 때문에 만족<br>속성 A → 속성 B → 속성 C로 이루어진 종속 관계에서, A가 C를 직접 결정하지 않고, B를 통해 C를 결정하는 경우를 말한다.<br>해당 테이블에서 간접 종속을 제외한다.<br>","aliases":[],"tags":["#공부","#DB","#DataBase","#설계"],"headers":[{"heading":"📔 DB 테이블 설계, 어떻게 하는게 옳은 방법인가","level":1,"id":"📔 DB 테이블 설계, 어떻게 하는게 옳은 방법인가"},{"heading":"어느? 데이터 테이블의 예시","level":1,"id":"어느?_데이터_테이블의_예시"},{"heading":"테이블의 효율성과 확장성","level":1,"id":"테이블의_효율성과_확장성"},{"heading":"위 테이블의 비효율성은 무엇인가?","level":2,"id":"위_테이블의_비효율성은_무엇인가?"},{"heading":"1. 확장 시 문제점:","level":3,"id":"1._**확장_시_문제점**"},{"heading":"데이터 활용도 제한","level":4,"id":"데이터_활용도_제한"},{"heading":"2. 비효율적인 데이터 조회:","level":3,"id":"2._**비효율적인_데이터_조회**"},{"heading":"- 위의 데이터 테이블의 설계자가, 데이터 테이블을 총 컬럼수를 줄이고","level":1,"id":"-_위의_데이터_테이블의_설계자가,_데이터_테이블을_총_컬럼수를_줄이고"},{"heading":"페이지당 hit수 만을 필요로 하기 때문에, 가볍게 작성했다면 어떻게 반박할 것인가?","level":1,"id":"페이지당_hit수_만을_필요로_하기_때문에,_가볍게_작성했다면_어떻게_반박할_것인가?"},{"heading":"적어도 이렇게는 만들었어야 하지 않았나?","level":2,"id":"적어도_이렇게는_만들었어야_하지_않았나?"},{"heading":"정규화 해보자!","level":1,"id":"정규화_해보자!"},{"heading":"제 1정규화 - 모든 도메인이 원자 값으로만 구성","level":2,"id":"제_1정규화_-_모든_도메인이_원자_값으로만_구성"},{"heading":"원자값을 갖는것 같은데??","level":4,"id":"원자값을_갖는것_같은데??"},{"heading":"제 2정규화 - 모든 비기본 속성이 기본키의 전체에 종속되어야 하며, 기본키의 일부에만 종속되는 부분 종속성이 없어야 함.","level":2,"id":"제_2정규화_-_모든_비기본_속성이_기본키의_**전체**에_종속되어야_하며,_기본키의_**일부에만_종속되는_부분_종속성**이_없어야_함."},{"heading":"- 간접 종속 가능*","level":4,"id":"*_간접_종속_가능*"},{"heading":"예를 들어 누군가.. page_id에 대한 속성을 만들어달라고 하신다면..","level":3,"id":"예를_들어_누군가..__page_id에_대한_속성을_만들어달라고_하신다면.."},{"heading":"결과","level":3,"id":"결과"},{"heading":"제 3정규화 - 이행성 함수 종속관계 삭제 (모든 비기본 속성이 기본키에 직접 종속)","level":2,"id":"제_3정규화_-_이행성_함수_종속관계_삭제_(모든_비기본_속성이_기본키에_직접_종속)"},{"heading":"결과","level":3,"id":"결과"}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:DB","?query=tag:DataBase","?query=tag:%EC%84%A4%EA%B3%84","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#📔 DB 테이블 설계, 어떻게 하는게 옳은 방법인가","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#어느?_데이터_테이블의_예시","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#테이블의_효율성과_확장성","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#위_테이블의_비효율성은_무엇인가?","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#1._**확장_시_문제점**","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#데이터_활용도_제한","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#2._**비효율적인_데이터_조회**","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#-_위의_데이터_테이블의_설계자가,_데이터_테이블을_총_컬럼수를_줄이고","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#페이지당_hit수_만을_필요로_하기_때문에,_가볍게_작성했다면_어떻게_반박할_것인가?","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#적어도_이렇게는_만들었어야_하지_않았나?","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#정규화_해보자!","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#제_1정규화_-_모든_도메인이_원자_값으로만_구성","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#원자값을_갖는것_같은데??","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#제_2정규화_-_모든_비기본_속성이_기본키의_**전체**에_종속되어야_하며,_기본키의_**일부에만_종속되는_부분_종속성**이_없어야_함.","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#*_간접_종속_가능*","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#예를_들어_누군가..__page_id에_대한_속성을_만들어달라고_하신다면..","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#결과","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#제_3정규화_-_이행성_함수_종속관계_삭제_(모든_비기본_속성이_기본키에_직접_종속)","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html#결과"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html","pathToRoot":"../..","createdTime":1739950797888,"modifiedTime":1739951081414,"sourceSize":6184,"sourcePath":"study/Dev Seminar/📔 DB 테이블 설계, 어떻게 하는게 옳은 방법인가.md","exportPath":"study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20241220113308.png","사진-및-문서/pasted-image-20241220113315.png"]},"study/dev-seminar/🔹-tdd에-대하여.html":{"title":"🔹 TDD에 대하여","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Java\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Java</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:TDD\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#TDD</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Test\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Test</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:Java\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Java\">#Java</a> <a href=\"http://lts.kr?query=tag:TDD\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#TDD\">#TDD</a> <a href=\"http://lts.kr?query=tag:Test\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Test\">#Test</a><br>\n<br>\n코드 품질 향상 <br>TDD는 먼저 테스트를 작성한 후 코드를 구현하므로, 요구사항이 코드로 명확히 반영됩니다.\n<br>코드의 결함이 초기에 발견되어 수정 비용이 감소합니다. <br>\n유지보수성 강화 <br>잘 작성된 테스트는 코드가 리팩토링될 때 문제를 방지합니다.\n<br>신규 기능 추가 시, 기존 코드와의 충돌을 빠르게 감지할 수 있습니다. <br>\n명확한 설계 유도 <br>TDD는 코드를 작고 독립적인 단위로 나누어 설계하도록 장려합니다.\n<br>자연스럽게 SRP(Single Responsibility Principle) 등 객체지향 원칙을 따르게 됩니다. <br>\n개발자 간 협업 강화 <br>테스트는 개발자들 간의 명세서 역할을 하며, 코드의 동작을 명확히 설명합니다.\n<br>코드리뷰 시 테스트를 통해 의도한 동작을 검증할 수 있습니다. <br>\n<br>\n적용이 적합한 상황 <br>핵심 비즈니스 로직: 제품의 주요 기능이나 서비스 로직은 테스트가 필수적입니다.\n<br>복잡한 계산이나 알고리즘: 오작동이 치명적인 로직에는 TDD가 효과적입니다.\n<br>API 개발: REST API나 GraphQL과 같은 인터페이스는 TDD로 사전 정의하여 일관성을 보장합니다.\n<br>CI/CD 파이프라인: 자동화된 테스트를 활용하여 배포 전에 코드를 검증합니다. <br>\n적용이 어려운 상황 <br>UI/UX: 사용자 인터페이스는 변동이 잦아 TDD를 적용하기 어렵습니다. 대신 e2e 테스트를 고려할 수 있습니다.\n<br>초기 프로토타입 개발: 초기에는 빠른 구현이 우선이므로 TDD를 생략할 수 있습니다.\n<br>시간/리소스 부족: 모든 코드를 테스트하기 어려운 경우, 핵심 영역에 우선순위를 두어야 합니다. <br>\n테스트의 범위 조정 <br>유닛 테스트: 가장 작은 단위의 코드 동작을 테스트합니다.\n<br>통합 테스트: 여러 모듈이 함께 작동하는지 확인합니다.\n<br>엔드투엔드 테스트(e2e): 사용자가 시스템 전체를 사용할 때의 흐름을 테스트합니다. <br>\n<br>\n우선순위를 정하라 <br>모든 코드를 테스트하기보다는 핵심적인 기능에 집중합니다.\n<br>낮은 리스크 영역은 이후에 커버리지를 추가할 수 있습니다. <br>\n자동화와 병행하라 <br>CI/CD 환경에서 테스트가 자동으로 실행되도록 설정하여, 코드 품질을 지속적으로 유지합니다. <br>\n테스트를 문서로 활용하라 <br>테스트는 단순히 검증 도구가 아니라, 코드의 의도를 설명하는 문서 역할을 합니다.\n<br>\n<br>사례: 금융 계산, 결제 시스템, 인증 시스템.\n<br>이유: 로직 오류가 사용자 신뢰에 큰 영향을 미칠 수 있으며, 수정 비용이 크기 때문.\n<br>장점: <br>요구사항 변경 시 빠르게 대응 가능.\n<br>결함 발생 확률 감소. <br>TDD 도입 판단 기준: <br>로직 복잡도: 복잡할수록 도입 우선순위가 높음.\n<br>장애 비용: 장애 발생 시 손실이 크면 반드시 도입. <br>\n<br>사례: 여러 팀이 API를 개발하고 사용하는 상황.\n<br>이유: 인터페이스 사양이 변경되면 다른 팀에 영향을 줄 수 있음.\n<br>장점: <br>명확한 명세서 제공으로 의사소통 오류 감소.\n<br>코드 변경 시, 관련 기능이 깨지지 않도록 보호. <br>TDD 도입 판단 기준: <br>팀 간 의존도가 높을수록 도입 가치 증가.\n<br>계약 기반 API 설계(contract-first approach)에 적합. <br>\n<br>사례: 추천 시스템, 머신러닝 모델 전처리 로직.\n<br>이유: 알고리즘의 정확도가 비즈니스 성과와 직결.\n<br>장점: <br>다양한 입력 데이터에 대한 처리 검증 가능.\n<br>결과의 일관성 유지. <br>TDD 도입 판단 기준: <br>입력/출력 데이터의 조합이 복잡할수록 필요성 증가.\n<br>정형화된 테스트 케이스 작성이 용이한 경우 적합. <br>\n<br>사례: 스타트업 초기 제품.\n<br>이유: 빠른 피드백과 시장 검증이 우선.\n<br>단점: <br>초기에는 개발 속도가 저하될 수 있음.\n<br>불필요한 테스트 작성 가능성. <br>TDD 도입 판단 기준: <br>제품 성공 가능성이 높은 핵심 기능에만 제한적으로 적용.\n<br>테스트는 리팩토링 이후 작성하는 방식을 병행. <br>\n<br>사례: 장기 유지보수가 필요한 레거시 시스템.\n<br>이유: 시간이 지나도 코드 품질을 유지해야 함.\n<br>장점: <br>기존 코드를 안전하게 리팩토링 가능.\n<br>신규 개발자 온보딩 시 유용한 학습 자료 제공. <br>TDD 도입 판단 기준: <br>유지보수 비용이 크거나, 새로운 요구사항이 자주 추가되는 프로젝트. <br>JUnit 5는 단위 테스트(Unit Test)를 작성하기 위한 핵심 도구입니다. Spring Boot는 기본적으로 JUnit 5를 지원하며, 다양한 애너테이션과 Assertions API를 통해 테스트를 쉽게 작성할 수 있습니다.<br>\n<br>@Test <br>테스트 메서드를 정의. <br>@BeforeEach / @AfterEach <br>각각 테스트 메서드 실행 전후에 실행될 로직 정의. <br>@BeforeAll / @AfterAll <br>각각 테스트 클래스 실행 전후에 한 번만 실행. <br>@Disabled <br>테스트 메서드나 클래스를 비활성화. <br>@Tag <br>테스트 그룹화(tagging) 기능 제공. <br>\n<br>assertEquals(expected, actual): 두 값이 동일한지 비교.\n<br>assertTrue(condition): 조건이 참인지 확인.\n<br>assertThrows(exception, executable): 특정 예외가 발생하는지 확인.\n<br>import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*; class CalculatorTest { @Test void additionShouldBeCorrect() { Calculator calculator = new Calculator(); int result = calculator.add(2, 3); assertEquals(5, result, \"2 + 3은 5여야 합니다.\"); } @Test void divisionShouldThrowExceptionForZero() { Calculator calculator = new Calculator(); assertThrows(ArithmeticException.class, () -&gt; calculator.divide(5, 0)); }\n}\n<br>\n<br>빠른 실행: 단위 테스트는 다른 계층과 독립적이므로 빠르게 실행 가능.\n<br>간단한 설정: 별도의 컨텍스트 로딩 없이 메서드 단위로 검증 가능.\n<br>Spring Test Framework는 Spring Boot 애플리케이션의 통합 테스트를 지원합니다. 스프링 컨텍스트를 로드하여 Spring Bean, 의존성 주입, 데이터베이스 연동 등을 테스트할 수 있습니다.<br>\n<br>\n@SpringBootTest <br>전체 애플리케이션 컨텍스트를 로드.\n<br>단위 테스트와 통합 테스트를 모두 지원.\n<br>@SpringBootTest\nclass MyAppTests { @Test void contextLoads() { }\n}\n<br>@WebMvcTest\n<br>컨트롤러 테스트 전용으로 사용.\n<br>MVC 관련 빈만 로드하여 REST API 테스트에 최적화.\n<br>@WebMvcTest(controllers = MyController.class)\nclass MyControllerTest { @Autowired private MockMvc mockMvc; @Test void shouldReturnDefaultMessage() throws Exception { mockMvc.perform(get(\"/api/hello\")) .andExpect(status().isOk()) .andExpect(content().string(\"Hello, World!\")); }\n} <br>@DataJpaTest\n<br>JPA와 관련된 빈만 로드하여 테스트 속도를 최적화.\n<br>H2 Database와 함께 사용하여 데이터 계층 테스트.\n<br>@DataJpaTest\nclass UserRepositoryTest { @Autowired private UserRepository userRepository; @Test void shouldSaveAndFindUser() { User user = new User(\"John Doe\", \"john@example.com\"); userRepository.save(user); Optional&lt;User&gt; result = userRepository.findByEmail(\"john@example.com\"); assertTrue(result.isPresent()); assertEquals(\"John Doe\", result.get().getName()); }\n} <br>4.@MockBean<br>특정 빈을 모킹하여 테스트 시 실제 구현체 대신 사용할 수 있음.\n<br>@SpringBootTest\nclass MyServiceTest { @MockBean private MyRepository myRepository; @Autowired private MyService myService; @Test void shouldUseMockedRepository() { when(myRepository.findSomething()).thenReturn(\"Mocked Result\"); String result = myService.getSomething(); assertEquals(\"Mocked Result\", result); }\n} <br>\n<br>\nJDBC 드라이버 준비 <br>테스트할 데이터베이스의 JDBC 드라이버를 다운로드하여 JMeter의 lib 디렉토리에 복사. <br>예: MySQL은 mysql-connector-java, PostgreSQL은 postgresql.jar. <br>\n테스트 대상 애플리케이션 준비 <br>JPA가 사용하는 데이터베이스를 직접 테스트하려면 데이터베이스 접속 정보가 필요.\n<br>Spring Boot 애플리케이션을 통해 동적으로 데이터를 생성하고 쿼리를 실행. <br>\n<br>JMeter의 Thread Group에 JDBC Connection Configuration을 추가.\n<br>설정: <br>Variable Name: 커넥션을 참조할 이름 (예: DBConnection).\n<br>Database URL: JDBC URL (예: jdbc:mysql://localhost:3306/testdb).\n<br>JDBC Driver class: 드라이버 클래스 이름 (예: com.mysql.cj.jdbc.Driver).\n<br>Username/Password: 데이터베이스 접속 정보. <br>\n<br>\nThread Group에 JDBC Request를 추가. <br>\n설정: <br>Variable Name: 이전 단계에서 설정한 Variable Name 입력 (DBConnection).\n<br>Query Type: <br>Select Statement: 데이터 조회 쿼리.\n<br>Update Statement: 데이터 수정 쿼리. <br>Query: 실행할 SQL 쿼리. <br>예: SELECT * FROM users WHERE status = 'ACTIVE'; <br>\n매개변수를 동적으로 설정하려면 Prepared Statement를 사용할 수 있음: <br>SQL: SELECT * FROM users WHERE age &gt; ?;\n<br>Parameters: 30 (동적으로 전달할 값). <br>\n<br>\nThread Group 설정: <br>Number of Threads (Users): 동시 실행 사용자 수.\n<br>Ramp-Up Period: 사용자가 몇 초에 걸쳐 증가할지 설정.\n<br>Loop Count: 각 사용자가 실행할 요청 반복 횟수. <br>\n부하를 동적으로 변경: <br>스레드 그룹에서 Scheduler를 활성화하여 특정 시간 간격으로 부하를 증감 가능. <br>\n<br>\nHTTP 요청을 통해 JPA 메서드 호출 <br>REST API 엔드포인트를 호출하여 JPA 쿼리 실행.\n<br>JMeter의 HTTP Sampler로 테스트: <br>URL: http://localhost:8080/api/users?status=ACTIVE\n<br>Method: GET/POST. <br>\nJPA 쿼리 매개변수 동적 설정 <br>REST API에 쿼리 매개변수 전달.\n<br>JMeter의 CSV Data Set Config를 사용하여 다양한 입력값 시뮬레이션: <br>CSV 파일: age,status 25,ACTIVE 30,INACTIVE 35,ACTIVE<br>테스트 설정: <br>Parameter: ${age}와 ${status}로 대체. <br>\n<br>\nJMeter View Results Tree <br>쿼리 실행 결과 및 응답 시간 확인. <br>\nDatabase Monitoring Tools <br>데이터베이스의 실행 계획(EXPLAIN) 확인.\n<br>DB에서 쿼리 실행 시간, CPU 사용량, I/O 병목 파악. <br>\nSpring Actuator Metrics <br>@Timed 애너테이션 또는 Actuator 메트릭을 통해 JPA 메서드의 실행 시간 측정. <br>\n<br>\n데이터베이스 상태 초기화 <br>테스트 전에 데이터베이스 상태를 초기화하여 결과의 일관성 유지. <br>\n실제 환경과 동일한 설정 <br>실제 운영 환경의 DB 크기, 커넥션 풀 크기, 네트워크 조건을 반영. <br>\n적정 부하 설정 <br>TPS(Transactions Per Second)를 기준으로 동시 요청 수 결정","aliases":[],"tags":["#공부","#Java","#TDD","#Test"],"headers":[{"heading":"🔹 TDD에 대하여","level":1,"id":"🔹 TDD에 대하여"},{"heading":"TDD가 필요한 이유","level":1,"id":"TDD가_필요한_이유"},{"heading":"TDD 적용 범위?","level":2,"id":"TDD_적용_범위?"},{"heading":"실무 팁: TDD를 효과적으로 적용하려면?","level":2,"id":"실무_팁_TDD를_효과적으로_적용하려면?"},{"heading":"필요하다면 실무에서의 범위는 어디까지일까?","level":1,"id":"필요하다면_실무에서의_범위는_어디까지일까?"},{"heading":"1. 핵심 비즈니스 로직","level":2,"id":"1._**핵심_비즈니스_로직**"},{"heading":"2. 대규모 협업 프로젝트","level":2,"id":"2._**대규모_협업_프로젝트**"},{"heading":"3. 복잡한 알고리즘","level":2,"id":"3._**복잡한_알고리즘**"},{"heading":"4. 프로토타입 개발","level":2,"id":"4._**프로토타입_개발**"},{"heading":"5. 긴 수명 주기를 가진 프로젝트","level":2,"id":"5._**긴_수명_주기를_가진_프로젝트**"},{"heading":"테스트 툴","level":1,"id":"테스트_툴"},{"heading":"1. JUnit 5 (Jupiter)","level":2,"id":"1._**JUnit_5_(Jupiter)**"},{"heading":"주요 애너테이션","level":3,"id":"주요_애너테이션"},{"heading":"Assertions API","level":3,"id":"Assertions_API"},{"heading":"예제: 간단한 JUnit 테스트","level":3,"id":"예제_간단한_JUnit_테스트"},{"heading":"장점","level":3,"id":"장점"},{"heading":"2. Spring Test Framework","level":2,"id":"2._**Spring_Test_Framework**"},{"heading":"주요 애너테이션","level":3,"id":"주요_애너테이션"},{"heading":"최근 자체 디도스(내부 로직 부하)에 대한 대책","level":1,"id":"최근_자체_디도스(내부_로직_부하)에_대한_대책"},{"heading":"1. JMeter로 JPA 쿼리 부하 테스트 준비","level":2,"id":"**1._JMeter로_JPA_쿼리_부하_테스트_준비**"},{"heading":"필수 요구사항","level":3,"id":"**필수_요구사항**"},{"heading":"2. JMeter에서 JDBC Request 설정","level":2,"id":"**2._JMeter에서_JDBC_Request_설정**"},{"heading":"1단계: JDBC Connection Configuration 추가","level":3,"id":"**1단계_JDBC_Connection_Configuration_추가**"},{"heading":"2단계: JDBC Request 추가","level":3,"id":"**2단계_JDBC_Request_추가**"},{"heading":"3단계: 동적 부하 생성","level":3,"id":"**3단계_동적_부하_생성**"},{"heading":"3. JMeter와 JPA 연동 전략","level":2,"id":"**3._JMeter와_JPA_연동_전략**"},{"heading":"JPA 애플리케이션 직접 테스트","level":3,"id":"**JPA_애플리케이션_직접_테스트**"},{"heading":"4. 결과 분석","level":2,"id":"**4._결과_분석**"},{"heading":"JPA 쿼리 성능 확인","level":3,"id":"**JPA_쿼리_성능_확인**"},{"heading":"5. 부하 테스트 시 주의사항","level":2,"id":"**5._부하_테스트_시_주의사항**"}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:Java","?query=tag:TDD","?query=tag:Test","study/dev-seminar/🔹-tdd에-대하여.html#🔹 TDD에 대하여","study/dev-seminar/🔹-tdd에-대하여.html#TDD가_필요한_이유","study/dev-seminar/🔹-tdd에-대하여.html#TDD_적용_범위?","study/dev-seminar/🔹-tdd에-대하여.html#실무_팁_TDD를_효과적으로_적용하려면?","study/dev-seminar/🔹-tdd에-대하여.html#필요하다면_실무에서의_범위는_어디까지일까?","study/dev-seminar/🔹-tdd에-대하여.html#1._**핵심_비즈니스_로직**","study/dev-seminar/🔹-tdd에-대하여.html#2._**대규모_협업_프로젝트**","study/dev-seminar/🔹-tdd에-대하여.html#3._**복잡한_알고리즘**","study/dev-seminar/🔹-tdd에-대하여.html#4._**프로토타입_개발**","study/dev-seminar/🔹-tdd에-대하여.html#5._**긴_수명_주기를_가진_프로젝트**","study/dev-seminar/🔹-tdd에-대하여.html#테스트_툴","study/dev-seminar/🔹-tdd에-대하여.html#1._**JUnit_5_(Jupiter)**","study/dev-seminar/🔹-tdd에-대하여.html#주요_애너테이션","study/dev-seminar/🔹-tdd에-대하여.html#Assertions_API","study/dev-seminar/🔹-tdd에-대하여.html#예제_간단한_JUnit_테스트","study/dev-seminar/🔹-tdd에-대하여.html#장점","study/dev-seminar/🔹-tdd에-대하여.html#2._**Spring_Test_Framework**","study/dev-seminar/🔹-tdd에-대하여.html#주요_애너테이션","study/dev-seminar/🔹-tdd에-대하여.html#최근_자체_디도스(내부_로직_부하)에_대한_대책","study/dev-seminar/🔹-tdd에-대하여.html#**1._JMeter로_JPA_쿼리_부하_테스트_준비**","study/dev-seminar/🔹-tdd에-대하여.html#**필수_요구사항**","study/dev-seminar/🔹-tdd에-대하여.html#**2._JMeter에서_JDBC_Request_설정**","study/dev-seminar/🔹-tdd에-대하여.html#**1단계_JDBC_Connection_Configuration_추가**","study/dev-seminar/🔹-tdd에-대하여.html#**2단계_JDBC_Request_추가**","study/dev-seminar/🔹-tdd에-대하여.html#**3단계_동적_부하_생성**","study/dev-seminar/🔹-tdd에-대하여.html#**3._JMeter와_JPA_연동_전략**","study/dev-seminar/🔹-tdd에-대하여.html#**JPA_애플리케이션_직접_테스트**","study/dev-seminar/🔹-tdd에-대하여.html#**4._결과_분석**","study/dev-seminar/🔹-tdd에-대하여.html#**JPA_쿼리_성능_확인**","study/dev-seminar/🔹-tdd에-대하여.html#**5._부하_테스트_시_주의사항**"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/dev-seminar/🔹-tdd에-대하여.html","pathToRoot":"../..","createdTime":1739950748159,"modifiedTime":1739951382850,"sourceSize":13216,"sourcePath":"study/Dev Seminar/🔹 TDD에 대하여.md","exportPath":"study/dev-seminar/🔹-tdd에-대하여.html","showInTree":true,"treeOrder":0,"attachments":[]},"study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html":{"title":"🔻 Redis 캐쉬 전략 - hello 서비스에 적용하여 성능개선 가능성","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Hello\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Hello</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Redis\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Redis</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Cash\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Cash</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:설계\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#설계</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:Hello\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Hello\">#Hello</a> <a href=\"http://lts.kr?query=tag:Redis\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Redis\">#Redis</a> <a href=\"http://lts.kr?query=tag:Cash\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Cash\">#Cash</a> <a href=\"http://lts.kr?query=tag:설계\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#설계\">#설계</a><br>\n<br>\nSpring Cache Abstraction 사용 <br>Spring Boot는 @Cacheable, @CachePut, @CacheEvict와 같은 어노테이션을 제공하여 간단히 캐싱을 설정할 수 있습니다.\n<br>Redis는 Spring의 캐시 추상화(CacheManager)를 구현하는 데 사용되며, 손쉽게 통합할 수 있습니다. <br>\n데이터 계층 캐싱 <br>데이터베이스 조회를 대신하여 Redis에 데이터를 저장함으로써 반복적인 DB 호출을 줄입니다.\n<br>예를 들어, 자주 조회되는 데이터(예: 상품 목록, 사용자 프로필)를 캐시에 저장하여 DB 부하를 줄일 수 있습니다. <br>\n분할 키 전략(Key Partitioning) <br>Redis의 키는 고유해야 하므로, 데이터 유형에 따라 네임스페이스를 설정합니다.\n<br>예: user:{id}, product:{id}와 같은 구조로 관리하여 충돌 방지. <br>\nTTL(Time-To-Live) 설정 <br>캐시 데이터에 TTL을 설정하여 데이터가 일정 시간이 지나면 만료되도록 구성합니다.\n<br>이를 통해 오래된 데이터를 제거하고 메모리 관리 효율성을 높일 수 있습니다. <br>\nEviction 정책 <br>Redis의 LRU(Least Recently Used) 정책을 활용하여 메모리 한계에 도달하면 오래 사용되지 않은 데이터를 제거합니다.\n<br>필요에 따라 LFU(Least Frequently Used) 또는 FIFO(First In First Out) 정책을 선택. <br>\nMulti-Level 캐싱 <br>Redis 캐시를 1차 캐시로 사용하고, 애플리케이션 내 로컬 메모리(예: Caffeine)를 2차 캐시로 설정하여 자주 액세스하는 데이터를 더 빠르게 제공합니다. <br>\n대량 데이터 처리 <br>Redis의 Hash 또는 Set 자료구조를 사용하여 대량 데이터를 효율적으로 저장 및 관리합니다.\n<br>예: 사용자의 여러 설정값을 Redis의 Hash로 저장. <br>\nPub/Sub를 활용한 캐시 무효화 <br>Redis의 Pub/Sub 기능을 사용하여 캐시 갱신이나 무효화 이벤트를 동기화합니다.\n<br>이를 통해 여러 인스턴스 간 캐시 일관성을 유지할 수 있습니다. <br>\n분산 환경에서 캐시 <br>Redis는 클러스터링과 샤딩을 통해 분산 환경에서 확장성을 제공합니다.\n<br>Spring Boot 애플리케이션이 여러 인스턴스에서 실행 중이라면, 단일 Redis 서버 또는 클러스터를 활용하여 공유 캐시를 사용할 수 있습니다. <br>\n<br>\nDB 쿼리 감소 <br>자주 사용하는 데이터를 Redis에 저장하여 DB 호출 횟수를 줄입니다.\n<br>읽기 요청이 많은 서비스에서 DB 부하를 대폭 감소시킬 수 있습니다. <br>\n빠른 데이터 액세스 <br>Redis는 메모리 기반 데이터 저장소로, 읽기/쓰기 속도가 매우 빠릅니다. 이는 데이터베이스와 비교해 성능을 극대화할 수 있습니다. <br>\n높은 확장성 <br>Redis는 샤딩 및 클러스터링을 통해 수평적으로 확장할 수 있어, 트래픽 증가에 효과적으로 대응 가능합니다. <br>\n데이터 동기화 비용 절감 <br>여러 애플리케이션 인스턴스에서 동일한 Redis 캐시를 사용함으로써 데이터 동기화 비용을 줄입니다. <br>\n캐시 적중률 증가 <br>캐시 히트율이 높아지면 요청 응답 속도가 비약적으로 증가합니다. 이를 통해 사용자 경험(UX)을 향상시킬 수 있습니다. <br>\n결과적으로 비용 절감 <br>DB 스케일링이나 고사양 서버로의 업그레이드 비용을 절감할 수 있습니다. <br>\n<br>\n데이터 일관성 <br>캐시와 데이터베이스 간의 일관성 문제가 발생할 수 있습니다. 이를 해결하기 위해 TTL, Pub/Sub, 캐시 무효화 전략을 적절히 사용해야 합니다. <br>\n메모리 사용량 <br>Redis는 메모리 기반이므로, 메모리 관리에 주의해야 합니다. TTL 설정과 적절한 Eviction 정책을 적용해야 합니다. <br>\n복잡성 증가 <br>Redis 캐시 도입은 초기 설정과 유지보수 복잡도를 증가시킬 수 있습니다. <br>\n<br>모든 데이터가 메모리에 저장되어 읽기 및 쓰기 속도가 매우 빠릅니다.\n<br>레이지 이베이션(Lazy Eviction): 메모리 초과 시 LRU(Least Recently Used), LFU(Least Frequently Used) 등의 정책으로 데이터를 자동 제거.\n<br>데이터가 메모리에서 처리되기 때문에 실시간 분석, 캐싱, 세션 관리와 같은 고속 처리가 필요한 작업에 적합.\n<br>\n<br>Redis는 단순 문자열(String)뿐 아니라 다음과 같은 다양한 데이터 구조를 지원합니다: <br>String: 단순 키-값 저장.\n<br>Hash: 필드와 값을 저장하는 Key-Value Map 구조.\n<br>List: 순서가 있는 문자열 리스트.\n<br>Set: 고유한 값들의 집합.\n<br>Sorted Set: 값과 함께 점수(Score)를 저장하며, 정렬된 집합.\n<br>Stream: 로그 데이터나 메시지 스트리밍을 위한 데이터 구조.\n<br>HyperLogLog: 메모리 효율적인 고유 값 개수 추정.\n<br>Bitmap: 비트 조작 가능.\n<br>Geospatial: 지리적 좌표를 저장하고 반경 검색 지원. <br>\n<br>RDB (Redis DataBase) 스냅샷: 특정 시간 간격으로 데이터를 디스크에 저장.\n<br>AOF (Append Only File): 모든 쓰기 연산을 로그로 저장하여 데이터 복원 가능.\n<br>RDB와 AOF를 조합해 사용할 수 있어 데이터 손실과 복원 속도를 조정 가능.\n<br>\n<br>Redis는 퍼블리셔-구독자(Pub/Sub) 모델을 지원합니다.\n<br>메시지 브로커처럼 동작하며, 다수의 클라이언트 간 메시지를 주고받을 수 있습니다.\n<br>채널 또는 패턴 기반 메시징 지원.\n<br>\n<br>Redis Cluster: <br>데이터를 여러 노드에 분산 저장.\n<br>노드 간 데이터 자동 샤딩 및 장애 복구 제공. <br>Sentinel: <br>마스터-슬레이브 복제를 관리하여 고가용성 제공.\n<br>마스터 장애 시 자동 장애 조치 및 슬레이브 승격. <br>\n<br>서버에서 실행할 수 있는 Lua 스크립트를 지원하여 일괄 처리나 원자적 연산이 가능.\n<br>클라이언트-서버 간 왕복 비용을 줄이고 성능 최적화.\n<br>\n<br>초당 수백만 개의 읽기/쓰기 요청을 처리할 수 있는 속도를 자랑.\n<br>낮은 지연 시간과 높은 처리량 제공.\n<br>\n<br>각 키에 TTL(Time-To-Live)을 설정하여 만료 시간을 지정 가능.\n<br>Redis는 다양한 메모리 정책을 지원하여 메모리 사용량 관리: <br>noeviction, allkeys-lru, allkeys-lfu, volatile-lru, volatile-lfu, volatile-ttl 등. <br>\n<br>Redis는 MULTI, EXEC, WATCH 명령어를 통해 트랜잭션 지원.\n<br>기본적으로 모든 명령은 원자적으로 처리되며, MULTI/EXEC로 묶어서 실행 가능.\n<br>\n<br>Master-Slave 구조를 통해 데이터를 복제.\n<br>마스터에서 발생한 모든 데이터 변경 사항이 슬레이브 노드로 전파.\n<br>읽기 분산 및 장애 복구 시 활용.\n<br>\n<br>위치 정보를 기반으로 거리 계산 및 반경 검색을 수행.\n<br>예: 특정 반경 내의 상점 목록 검색.\n<br>\n<br>Redis CLI: 기본 제공 명령줄 도구로 상태 점검 및 관리 가능.\n<br>INFO 명령어: 메모리 사용량, 연결, 키 개수 등 서버 상태를 제공.\n<br>다양한 대시보드 도구와 통합 가능(예: RedisInsight).\n<br>\n<br>수평 확장을 지원하여 대규모 트래픽을 처리 가능.\n<br>클러스터링, 샤딩, 복제를 통해 장애를 대비한 고가용성 보장.\n<br>\n<br>Redis는 오픈소스이므로 자유롭게 사용 가능.\n<br>클라우드 제공 업체(AWS ElastiCache, Azure Redis Cache, Google Cloud Memorystore)와 쉽게 통합 가능.\n<br>\n<br>Stream 처리: 실시간 데이터 스트림 저장 및 처리 가능.\n<br>Bloom Filter 및 Cuckoo Filter: 확률적 자료구조 지원.\n<br>Modules: 확장 기능(예: RedisJSON, RedisGraph, RedisAI) 추가 가능.\n<br>\n<br>빠른 성능: 메모리 기반 아키텍처로 낮은 지연 시간과 높은 처리량 제공.\n<br>다양한 데이터 구조: 폭넓은 데이터 유형을 효율적으로 저장 및 관리.\n<br>유연성: 캐싱, 메시징, 세션 관리 등 다양한 사용 사례에 적합.\n<br>확장성: 클러스터링과 복제를 통해 대규모 트래픽 처리 가능.\n<br>간단한 설정: 빠른 설치와 간단한 설정으로 쉽게 시작 가능.\n<br>\n<br>메모리 한계: Redis는 메모리 기반이므로 큰 데이터를 다룰 경우 메모리 용량이 제한 요인이 될 수 있음.\n<br>데이터 손실 가능성: AOF를 사용하지 않거나 RDB만 사용하면 마지막 스냅샷 이후 데이터가 손실될 가능성이 있음.\n<br>멀티쓰레드 부재: Redis는 기본적으로 싱글쓰레드로 동작하므로, CPU 활용 측면에서 제한이 있을 수 있음.\n<br>\n<br>캐시와 DB 간의 일관성 문제를 발생시키지 않을 select(조회) 쿼리, 재사용률이 높은 데이터 <br>다른 프로젝트 인스턴스에서 데이터 교환이 자주 일어나는 경우 <br>\n<br>사용자 별로 문서 크기가 크게 상이해도 동적으로 메모리를 관리하여 저장 실패 확률을 줄일수 있다.\n<br>장애가 발생 하더라도 앱서버와 분리되어있으므로 서비스 영향도를 더욱 줄일 수있을것 같다.\n<br>\n<br>정적오브젝트 로딩 후 동작하는 js특성\n<br>다양한 오브젝트를 저장할 수 있는 redis특성 사용\n<br>로직을 변경 하지 않고, 재진입시 js대기 시간을 크게 줄일 수 있을것으로 생각됨\n<br><img alt=\"Pasted image 20241206140739.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241206140739.png\" target=\"_self\"><br><img alt=\"Pasted image 20241206140822.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20241206140822.png\" target=\"_self\"><br>\n<br>\n이러한 경우 재 조회나, 검색 필터 적용시 데이터 최신화 필요도가 떨어지기 때문에, 캐쉬 전략을 사용했을 때<br>\n데이터를 받아오는 시간을 크게 줄일 수 있을것으로 예상됨 <br>\n또한 성공 실패여부 및 횟수를 저장하여 리트라이 로직 등도 추가할 수있으며,<br>\n모든 프로젝트의 api에 공통으로 적용하여 사용할 수 있음. <br> \"coordinates\": [<br>\n128.0827,<br>\n37.6061<br>\n],<br>\n위도/경도 및 시간 정보를 캐쉬에 취합 후, 영구저장 DB 대분류(지역 및 시간대) 로 카운트를 집계하여,<br>\n마케팅 요청시 광고 타겟 위치 및 시간대를 지정하여 광고 요청을 한다면 적은비용 대비 높은 효과를 기대할 수 있다.","aliases":[],"tags":["#공부","#Hello","#Redis","#Cash","#설계"],"headers":[{"heading":"🔻 Redis 캐쉬 전략 - hello 서비스에 적용하여 성능개선 가능성","level":1,"id":"🔻 Redis 캐쉬 전략 - hello 서비스에 적용하여 성능개선 가능성"},{"heading":"Redis 캐시 적용 전략","level":1,"id":"Redis_캐시_적용_전략"},{"heading":"성능 개선 가능성","level":1,"id":"성능_개선_가능성"},{"heading":"고려해야 할 사항","level":1,"id":"고려해야_할_사항"},{"heading":"Redis의 주요 특징","level":1,"id":"Redis의_주요_특징"},{"heading":"1. 인메모리 데이터 저장소","level":4,"id":"1._**인메모리_데이터_저장소**"},{"heading":"2. 다양한 데이터 구조 지원","level":4,"id":"2._**다양한_데이터_구조_지원**"},{"heading":"3. 퍼시스턴스 지원","level":4,"id":"3._**퍼시스턴스_지원**"},{"heading":"4. 고급 Pub/Sub 기능","level":4,"id":"4._**고급_Pub/Sub_기능**"},{"heading":"5. 분산 환경 지원","level":4,"id":"5._**분산_환경_지원**"},{"heading":"6. Lua 스크립트 지원","level":4,"id":"6._**Lua_스크립트_지원**"},{"heading":"7. 높은 성능","level":4,"id":"7._**높은_성능**"},{"heading":"8. TTL(Timeout) 및 Eviction 정책","level":4,"id":"8._**TTL(Timeout)_및_Eviction_정책**"},{"heading":"9. 트랜잭션 지원","level":4,"id":"9._**트랜잭션_지원**"},{"heading":"10. 복제(Replication)","level":4,"id":"10._**복제(Replication)**"},{"heading":"11. 지리 데이터 처리(Geospatial)","level":4,"id":"11._**지리_데이터_처리(Geospatial)**"},{"heading":"12. 모니터링 및 관리 도구","level":4,"id":"12._**모니터링_및_관리_도구**"},{"heading":"13. 확장성 및 가용성","level":4,"id":"13._**확장성_및_가용성**"},{"heading":"14. 오픈소스 및 클라우드 지원","level":4,"id":"14._**오픈소스_및_클라우드_지원**"},{"heading":"15. 특수 기능","level":4,"id":"15._**특수_기능**"},{"heading":"Redis의 장점","level":3,"id":"Redis의_장점"},{"heading":"Redis를 사용할 때의 고려 사항","level":3,"id":"Redis를_사용할_때의_고려_사항"},{"heading":"Redis 캐시를 적용하기 적절한 hello 서비스","level":1,"id":"Redis_캐시를_적용하기_적절한_hello_서비스"},{"heading":"hello service 에서의 사용 예","level":2,"id":"hello_service_에서의_사용_예"},{"heading":"1. 주담대 수취문서 발급 시 사용되는 hexString","level":3,"id":"1._주담대_수취문서_발급_시_사용되는_hexString"},{"heading":"2. 정적 오브젝트 로딩으로 인한 총 로딩시간 지연 문제","level":3,"id":"2._정적_오브젝트_로딩으로_인한_총_로딩시간_지연_문제"},{"heading":"메인 페이지","level":4,"id":"메인_페이지"},{"heading":"투자 페이지","level":4,"id":"투자_페이지"},{"heading":"3. 주담대 주소/시세 조회나, ADMIN의 모든 리스트 재검색 등..","level":3,"id":"3._주담대_주소/시세_조회나,_ADMIN의_모든_리스트_재검색_등.."},{"heading":"매번 데이터 최신화가 필요하지 않는 모든 경우","level":3,"id":"매번_데이터_최신화가_필요하지_않는_모든_경우"},{"heading":"4. 마케팅에 활용할 수 있다.(클라우드 아날리틱스에 있는지 아직 모름)","level":3,"id":"4._마케팅에_활용할_수_있다.(클라우드_아날리틱스에_있는지_아직_모름)"}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:Hello","?query=tag:Redis","?query=tag:Cash","?query=tag:%EC%84%A4%EA%B3%84","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#🔻 Redis 캐쉬 전략 - hello 서비스에 적용하여 성능개선 가능성","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#Redis_캐시_적용_전략","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#성능_개선_가능성","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#고려해야_할_사항","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#Redis의_주요_특징","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#1._**인메모리_데이터_저장소**","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#2._**다양한_데이터_구조_지원**","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#3._**퍼시스턴스_지원**","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#4._**고급_Pub/Sub_기능**","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#5._**분산_환경_지원**","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#6._**Lua_스크립트_지원**","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#7._**높은_성능**","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#8._**TTL(Timeout)_및_Eviction_정책**","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#9._**트랜잭션_지원**","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#10._**복제(Replication)**","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#11._**지리_데이터_처리(Geospatial)**","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#12._**모니터링_및_관리_도구**","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#13._**확장성_및_가용성**","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#14._**오픈소스_및_클라우드_지원**","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#15._**특수_기능**","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#Redis의_장점","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#Redis를_사용할_때의_고려_사항","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#Redis_캐시를_적용하기_적절한_hello_서비스","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#hello_service_에서의_사용_예","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#1._주담대_수취문서_발급_시_사용되는_hexString","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#2._정적_오브젝트_로딩으로_인한_총_로딩시간_지연_문제","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#메인_페이지","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#투자_페이지","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#3._주담대_주소/시세_조회나,_ADMIN의_모든_리스트_재검색_등..","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#매번_데이터_최신화가_필요하지_않는_모든_경우","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html#4._마케팅에_활용할_수_있다.(클라우드_아날리틱스에_있는지_아직_모름)"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html","pathToRoot":"../..","createdTime":1739950696311,"modifiedTime":1739951282911,"sourceSize":11984,"sourcePath":"study/Dev Seminar/🔻 Redis 캐쉬 전략 - hello 서비스에 적용하여 성능개선 가능성.md","exportPath":"study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20241206140739.png","사진-및-문서/pasted-image-20241206140822.png"]},"study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html":{"title":"🥗 Spring Security_토큰-세션-쿠키-JWT 에 대하여","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Java\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Java</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:SPRING\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#SPRING</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Security\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Security</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Tokken\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Tokken</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Session\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Session</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Cookie\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Cookie</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:Java\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Java\">#Java</a> <a href=\"http://lts.kr?query=tag:SPRING\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SPRING\">#SPRING</a> <a href=\"http://lts.kr?query=tag:Security\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Security\">#Security</a> <a href=\"http://lts.kr?query=tag:Tokken\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Tokken\">#Tokken</a> <a href=\"http://lts.kr?query=tag:Session\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Session\">#Session</a> <a href=\"http://lts.kr?query=tag:Cookie\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Cookie\">#Cookie</a><br>\n<br>Spring Security는 Spring 기반 애플리케이션에서 인증(Authentication)과 권한 부여(Authorization)를 제공하는 강력한 보안 프레임워크입니다.\n<br>다양한 보안 요구사항(예: HTTP 인증, OAuth2, JWT 등)을 처리할 수 있도록 확장 가능합니다.\n<br>\n<br>\n인증(Authentication): <br>사용자가 애플리케이션에 접근하기 전에 신원을 확인.\n<br>일반적으로 사용자 이름과 비밀번호를 기반으로 인증. <br>\n권한 부여(Authorization): <br>인증된 사용자가 애플리케이션의 특정 리소스나 작업에 접근할 수 있는지 확인. <br>\n보안 필터: <br>요청과 응답을 처리하기 위한 필터 체인을 제공.\n<br>요청이 필터 체인을 통과하면 보안 정책이 적용됨. <br>\n확장성: <br>OAuth2, JWT, LDAP 등 다양한 인증 방식과 통합 가능. <br>\n<br>토큰(Token)은 인증 정보를 포함하는 문자열로, 클라이언트와 서버 간 인증 및 권한 부여를 간편화합니다.\n<br>사용자가 인증을 완료하면 서버가 토큰을 발급하고, 클라이언트는 이후 요청에 토큰을 포함하여 인증을 유지합니다.\n<br>\n<br>\n무상태성: <br>토큰은 상태 정보를 포함하므로 서버가 세션을 유지할 필요 없음.\n<br>클라이언트가 모든 요청에 토큰을 포함하여 서버로 전송. <br>\n토큰 종류: <br>Bearer Token: 요청 헤더에 포함되어 인증.\n<br>Refresh Token: Access Token이 만료되었을 때 재발급에 사용. <br>\n<br>세션(Session)은 사용자가 서버에 접속한 동안 유지되는 상태 정보입니다.\n<br>서버는 클라이언트의 각 요청을 식별하기 위해 세션 ID를 생성하고, 이를 클라이언트에 제공.\n<br>\n<br>사용자가 로그인하면 서버가 고유한 세션 ID를 생성.\n<br>세션 ID는 클라이언트의 쿠키에 저장.\n<br>이후 요청에서 클라이언트는 세션 ID를 포함하여 서버로 전송.\n<br>서버는 세션 저장소(Session Store)에 저장된 정보를 기반으로 클라이언트를 식별.\n<br>\n<br>상태 유지: <br>서버는 클라이언트별로 상태 정보를 유지. <br>확장성 문제: <br>서버가 클라이언트별로 상태를 저장하므로 대규모 확장성이 떨어질 수 있음. <br>\n<br>쿠키(Cookie)는 클라이언트 브라우저에 저장되는 데이터 조각으로, 서버와 클라이언트 간 정보를 유지하기 위해 사용.\n<br>\n<br>서버가 응답에 쿠키를 설정하면 클라이언트는 쿠키를 저장.\n<br>클라이언트는 이후 요청에 저장된 쿠키를 자동으로 서버에 포함.\n<br>서버는 쿠키를 기반으로 요청을 처리.\n<br>\n<br>키-값 쌍: <br>쿠키는 key=value 형태로 저장. <br>보안 옵션: <br>HttpOnly: 자바스크립트를 통해 접근 불가.\n<br>Secure: HTTPS 요청에서만 전송. <br>유효 기간: <br>쿠키는 만료 시간이 지나면 자동 삭제. <br>\n<br>JWT는 JSON 형식으로 인코딩된 토큰으로, 클라이언트와 서버 간 인증 정보를 안전하게 전달하기 위해 사용.\n<br>무상태 인증 방식에서 많이 사용됨.\n<br>JWT는 세 부분으로 구성:<br>Header: <br>토큰 타입(JWT)과 알고리즘(HMAC, RSA 등) 정보를 포함.\n<br>예: {\"alg\": \"HS256\", \"typ\": \"JWT\"} <br>Payload: <br>토큰에 포함된 클레임(Claim) 정보를 포함.\n<br>예: {\"sub\": \"user123\", \"role\": \"admin\"} <br>Signature: <br>Header와 Payload를 비밀키로 서명하여 생성.\n<br>예: HMACSHA256(base64UrlEncode(header) + \".\" + base64UrlEncode(payload), secret) <br>\n<br>사용자가 로그인하면 서버가 JWT를 생성하여 클라이언트에 전달.\n<br>클라이언트는 이후 요청에서 JWT를 Authorization 헤더에 포함.\n<br>서버는 JWT를 검증하여 사용자를 인증.\n<br>\n<br>자체 포함(Self-contained): <br>JWT는 인증 정보와 사용자 정보를 모두 포함. <br>무상태성: <br>서버는 JWT를 저장하지 않으므로 확장성이 뛰어남. <br>보안: <br>서명(Signature)을 통해 변조를 방지.\n<br>그러나 암호화되지 않은 Payload는 누구나 읽을 수 있음. <br>\n<br>상태 정보 저장 없음: <br>서버는 클라이언트의 상태 정보를 유지하지 않습니다.\n<br>즉, 서버는 이전 요청에 대한 정보를 기억하지 않고, 요청마다 필요한 인증 정보를 다시 받아야 합니다. <br>클라이언트 책임: <br>인증 정보(예: JWT 토큰)는 클라이언트가 관리합니다.\n<br>클라이언트는 매 요청마다 서버에 인증 정보를 제공해야 합니다. <br>확장성: <br>서버 간 상태 동기화가 필요 없으므로 수평 확장이 용이합니다.\n<br>로드 밸런싱을 사용하는 다중 서버 환경에서 적합. <br>\n<br>\nSpring Security: <br>인증과 권한 부여를 처리하는 보안 프레임워크.\n<br>세션, 쿠키, 토큰(JWT 포함)과 통합 가능. <br>\nToken: <br>인증 정보를 포함한 문자열.\n<br>서버-클라이언트 간 무상태 인증을 위해 사용. <br>\nSession: <br>서버가 클라이언트별 상태 정보를 유지.\n<br>확장성이 낮지만 단순한 구조. <br>\nCookie: <br>클라이언트에 저장되는 작은 데이터 조각.\n<br>세션 ID 또는 JWT 저장에 사용. <br>\nJWT: <br>JSON 형식의 자체 포함 토큰.\n<br>무상태 인증 및 높은 확장성을 제공.","aliases":[],"tags":["#공부","#Java","#SPRING","#Security","#Tokken","#Session","#Cookie"],"headers":[{"heading":"🥗 Spring Security_토큰-세션-쿠키-JWT 에 대하여","level":1,"id":"🥗 Spring Security_토큰-세션-쿠키-JWT 에 대하여"},{"heading":"Spring Security , 토큰 , 세션, 쿠키, JWT 각각 무엇인가?","level":1,"id":"Spring_Security_,_토큰_,_세션,_쿠키,_JWT_각각_무엇인가?"},{"heading":"1. Spring Security","level":2,"id":"1._Spring_Security"},{"heading":"개요","level":3,"id":"개요"},{"heading":"기본 기능","level":3,"id":"기본_기능"},{"heading":"AOP 필터와 Security 필터의 차이점","level":2,"id":"**AOP_필터와_Security_필터의_차이점**"},{"heading":"2. Token","level":2,"id":"2._Token"},{"heading":"개요","level":3,"id":"개요"},{"heading":"특징","level":3,"id":"특징"},{"heading":"3. Session","level":2,"id":"3._Session"},{"heading":"개요","level":3,"id":"개요"},{"heading":"작동 방식","level":3,"id":"작동_방식"},{"heading":"특징","level":3,"id":"특징"},{"heading":"4. Cookie","level":2,"id":"4._Cookie"},{"heading":"개요","level":3,"id":"개요"},{"heading":"작동 방식","level":3,"id":"작동_방식"},{"heading":"특징","level":3,"id":"특징"},{"heading":"1. 저장소의 차이","level":3,"id":"**1._저장소의_차이**"},{"heading":"5. JWT (JSON Web Token)","level":2,"id":"5._JWT_(JSON_Web_Token)"},{"heading":"개요","level":3,"id":"개요"},{"heading":"구조","level":3,"id":"구조"},{"heading":"작동 방식","level":3,"id":"작동_방식"},{"heading":"특징","level":3,"id":"특징"},{"heading":"비교","level":3,"id":"비교"},{"heading":"3. 주요 차이점","level":2,"id":"**3._주요_차이점**"},{"heading":"JWT의 장점","level":3,"id":"JWT의_장점"},{"heading":"6. 요약","level":2,"id":"6._요약"}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:Java","?query=tag:SPRING","?query=tag:Security","?query=tag:Tokken","?query=tag:Session","?query=tag:Cookie","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#🥗 Spring Security_토큰-세션-쿠키-JWT 에 대하여","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#Spring_Security_,_토큰_,_세션,_쿠키,_JWT_각각_무엇인가?","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#1._Spring_Security","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#개요","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#기본_기능","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#**AOP_필터와_Security_필터의_차이점**","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#2._Token","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#개요","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#특징","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#3._Session","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#개요","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#작동_방식","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#특징","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#4._Cookie","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#개요","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#작동_방식","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#특징","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#**1._저장소의_차이**","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#5._JWT_(JSON_Web_Token)","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#개요","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#구조","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#작동_방식","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#특징","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#비교","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#**3._주요_차이점**","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#JWT의_장점","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html#6._요약"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html","pathToRoot":"../..","createdTime":1739950706177,"modifiedTime":1740127908434,"sourceSize":9716,"sourcePath":"study/Dev Seminar/🥗 Spring Security_토큰-세션-쿠키-JWT 에 대하여.md","exportPath":"study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html","showInTree":true,"treeOrder":0,"attachments":[]},"study/dev-seminar/🪕-jpa-에-대한-고찰.html":{"title":"🪕 JPA 에 대한 고찰","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:JPA\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#JPA</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:DB\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#DB</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:SPRING\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#SPRING</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:JPA\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#JPA\">#JPA</a> <a href=\"http://lts.kr?query=tag:DB\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#DB\">#DB</a> <a href=\"http://lts.kr?query=tag:SPRING\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SPRING\">#SPRING</a><br>\n<br>java에서 DB를 사용할 수 있도록 연결해주는 응용프로그램 인터페이스인 java api이다.\n<br>java와 연동되는 DBMS에 따라 그에 맞는 JDBC(ex. MySQL Connector)를 설치해야 한다.\n<br>그에 맞는 드라이버만 존재한다면, java에서 DB에 구애받지 않고 똑같은 코드로 사용이 가능하다.\n<br>\n<br>SQL명령을 명시적으로 작성해야 한다.\n<br>객치지향 프로그래밍과의 괴리가 있다.\n<br>\n<br>DB를 엑세스 하기 위한 표준 개방형 응용 프로그램 인터페이스를 뜻한다.\n<br>ODBC는 JDBC와 달리 모든 어떠한 DBMS인지와 상관없이 적용된다. <br>\n<br>jpa는 서로 다른 두 개념을 매핑해주는 ORM(Object Relational Mapping)중 하나이다.\n<br>DB와 java객체간의 매핑을 자동화하여, SQL대신 java객체와 상호작용 하도록 설계되어있다. <br>RDB는 하나의 row를 하나의 인스턴스라고 생각한다면 컬럼의 값은 필드의 값으로 매핑할 수 있다.\n<br>하지만 객체의 필드에 리스트가 존재하는 경우 상황이 애매해진다.\n<br>또한 java객체의 필드에 또 다른 객체가 존재한는 경우 java는 참조를 하지만, DB는 Join으로 접근하기 때문에 다르다.\n<br>이러한 비슷한 두 개념을 매핑해주는 역할을 하는것이다. <br>JPA는 DB와 객체를 매핑하는 기술일 뿐,<br>\n내부적으로 DB와 통신을 위해서는 JDBC를 필요로 하게된다.<br>또한 JPA도 JDBC와 마찬가지로 인터페이스이기 때문에 구현체가 필요하고, 그 구현체 중 하나가 Hibernate이다.<br>\n<br>Spring Data JPA란 JPA를 Repository 기반으로 간편하고 효율적으로 사용할 수 있는 모듈이다.\n<br>Repository의 메서드를 통해 쿼리를 날릴 수 있다.\n<br>또는 직접 쿼리를 만들고 싶다면 @Query 어노테이션을 사용한다.\n<br> <img alt=\"Pasted image 20250110144021.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250110144021.png\" target=\"_self\"><br>\n<br>JPQL은 JPA에서 사용되는 쿼리 언어로, SQL과 비슷하지만 객체를 대상을 쿼리를 작성하게된다.\n<br>테이블이 아닌 엔티티 객체를 대상으로 하기 때문에, 객체지향적이다.\n<br>\n<br>SQL 유사성 : select, where, group by 등 SQL 과 유사한 문법 사용\n<br>엔티티 중심 : DB테이블 대신 엔티티 클래스와 속성을 기준으로 작성한다.\n<br>동적 쿼리 지원 : 런타임에 JPQL 문자열 생성 실행 가능\n<br>별칠(alias) 사용 필수\n<br>\n<br>문자열(String)형태 이기에 개발자 의존적 형태이다 <br>컴파일 단계에서 타입체크가 불가능하다 <br>런타임단계에서 오류가 발생할 수 있다 <br>\n<br>위에서 기술한 JPQL의 문제점을 보완하기 위해 나온것이 query dsl이다.\n<br>정적 타입을 이용해, SQL, JPQL을 코드로 작성할 수 있도록 도와주는 오픈소스 API\n<br>\n<br>컴파일 단계에서 오류 확인 가능, 후속 조치 가능 <br>JPQL의 단점들을 거의 보완\n<br>\n<br>코드가 너무 길어진다... <br>FROM절의 서브쿼리를 사용하는것에 제약이 있다. <br>세세한 튜닝이나, DBMS의 고유기능을 유연하게 사용할 수 없다. <br>N+1 문제는 데이터베이스와 애플리케이션 간의 비효율적인 쿼리 실행으로 인해 발생하는 성능 문제를 지칭합니다.<br>\n이는 주로 ORM(Object-Relational Mapping) 기술(JPA, Hibernate 등)을 사용할 때 발생하며, 한 번의 데이터베이스 조회로 해결할 수 있는 작업에 대해 추가적인 N개의 쿼리가 실행되는 상황을 의미합니다.<br>N+1 문제는 주로 지연 로딩(Lazy Loading)으로 인해 발생합니다.<br>\n지연 로딩은 관련 엔티티를 필요할 때만 로딩하는 방식으로, 기본적으로 효율적인 방법이지만 아래와 같은 상황에서 문제가 발생합니다.<br>\n<br>\n두 개의 엔티티 간 관계: <br>Parent(부모 엔티티)와 Child(자식 엔티티) 관계.\n<br>Parent 1개에는 여러 Child가 연결. <br>\n문제 발생 과정: <br>부모 엔티티를 조회하는 쿼리 1번 실행.\n<br>각 부모 엔티티에 연결된 자식 엔티티를 조회하는 쿼리 N번 실행. <br>List&lt;Parent&gt; parents = entityManager.createQuery(\"SELECT p FROM Parent p\", Parent.class).getResultList(); // 각 Parent 엔티티의 자식 엔티티를 로드 (지연 로딩)\nfor (Parent parent : parents) { System.out.println(parent.getChildren().size()); // 자식 엔티티 조회 쿼리 발생\n} <br>\n<br>SELECT * FROM Parent; → 부모 엔티티를 조회하는 쿼리 1번 실행.\n<br>SELECT * FROM Child WHERE parent_id = ?; → 각 부모 엔티티마다 자식 데이터를 조회하는 쿼리 N번 실행.\n<br>결과적으로 1 + N개의 쿼리가 실행됩니다.\n<br>데이터가 많을수록 성능 저하가 극심해집니다.\n<br>\n<br>데이터베이스와 애플리케이션 간의 불필요한 트래픽 증가.\n<br>쿼리 실행 횟수가 많아져 응답 시간이 느려짐.\n<br>대량의 데이터가 있을 경우 애플리케이션 성능이 크게 저하.\n<br>\n<br>페치 조인은 SQL의 JOIN을 사용해 관련된 엔티티를 한 번의 쿼리로 로드하는 방식입니다.\n<br>String jpql = \"SELECT p FROM Parent p JOIN FETCH p.children\";\nList&lt;Parent&gt; parents = entityManager.createQuery(jpql, Parent.class).getResultList();\n<br>JOIN FETCH를 사용하면 부모와 자식 엔티티를 한 번에 가져옵니다.\n<br>장점: 데이터베이스 쿼리를 최소화.\n<br>단점: 데이터가 많을 경우 메모리 사용량 증가.\n<br>\n<br>JPA에서 제공하는 기능으로, 로딩 시 어떤 관계를 함께 로드할지 명시적으로 정의합니다\n<br>@Entity\n@NamedEntityGraph( name = \"Parent.withChildren\", attributeNodes = @NamedAttributeNode(\"children\")\n)\npublic class Parent { ... } // 사용 시\nEntityGraph&lt;?&gt; entityGraph = em.getEntityGraph(\"Parent.withChildren\");\nList&lt;Parent&gt; parents = em.createQuery(\"SELECT p FROM Parent p\", Parent.class) .setHint(\"javax.persistence.fetchgraph\", entityGraph) .getResultList(); <br>장점: 명시적으로 필요한 관계만 가져올 수 있음.\n<br>단점: 추가적인 설정 필요.\n<br>\n<br>필요한 데이터만 직접 SQL 또는 JPQL로 조회하여 반환.\n<br>String jpql = \"SELECT new com.example.dto.ParentChildDTO(p.name, c.name) \" + \"FROM Parent p JOIN p.children c\";\nList&lt;ParentChildDTO&gt; dtos = entityManager.createQuery(jpql, ParentChildDTO.class).getResultList(); <br>장점: 불필요한 엔티티 로드 방지.\n<br>단점: 객체 매핑 작업 추가.\n<br>- 데이터베이스의 상태를 변화시키기 위해 수행하는 작업의 단위\n<br>- Spring에서 제공하는 트렌젝션 관리 기능과 JPA를 연결하는 역할을 수행.\n<br>- 클래스나 메서드에 삽입하면, AOP레벨(프록시를 사용하여)에서 트렌젝션매니저를 이용한 동작을 공통으로 적용.\n<br>- 영속성 컨텍스트를 관리하는 인터페이스\n- 엔티티의 저장/수정/삭제/조회 작업을 수행\n- 스레드 세이프하지 않으므로 한트레젝션 내에서만 사용\n- 앤티티매니저펙토리는 스레드세이프하므로 공유 가능\n<br>- JPA의 엔티티를 관리하는 1차 캐시 역할을 하는 메모리 공간\n- 엔티티와 DB데이터간의 상태 동기화를 책임\n- 1차캐싱 / 변경 감지 / 지연 로딩 의 특징을 갖는다\n- 지연로딩 : 관계된 엔티티를 실제로 필요할때만 가져오며, 변경점을 한번만 commit한다\n<br>- DB스냅샷 : - 트렌젝션이 시작될때 생성된다. - 독립적인 데이터베이스 복사본으로, 원본데이터 변경과 무관하다. - 고급 격리 수준(REPEATABLE READ, SERIALIZABLE)에서 MVCC(Multi-Version Concurrency Control)를 구현할 때 사용한다. - 물리적인 복사본이 아닌, 논리적으로 매 쿼리마다 동적으로 가공이 되는 방식이다.\n- 앤티티매니저_스냅샷 : - 엔티티가 영속성 컨텍스트에 로드될 때 생성된다. - 엔티티의 초기 상태를 저장하여 변경 감지에 사용된다.","aliases":[],"tags":["#공부","#JPA","#DB","#SPRING"],"headers":[{"heading":"🪕 JPA 에 대한 고찰","level":1,"id":"🪕 JPA 에 대한 고찰"},{"heading":"JDBC - Java Database Connectivity","level":1,"id":"JDBC_-_Java_Database_Connectivity"},{"heading":"즉 JDBC는 공통으로 사용가능한 인터페이스이며, 각 DB에 맞는 구현체는 JDBC드라이버이다. - MySQL Connector","level":4,"id":"즉_JDBC는_공통으로_사용가능한_인터페이스이며,_각_DB에_맞는_구현체는_JDBC드라이버이다._-_MySQL_Connector"},{"heading":"특징","level":3,"id":"특징"},{"heading":"ODBC - Open Database Connectivity","level":1,"id":"ODBC_-_Open_Database_Connectivity"},{"heading":"그렇다면 JPA(Java Persistence API)는 무엇일까?","level":1,"id":"그렇다면_JPA(Java_Persistence_API)는_무엇일까?"},{"heading":"그렇다면 JDBC와 JPA는 서로 다른것인가?","level":4,"id":"그렇다면_JDBC와_JPA는_서로_다른것인가?"},{"heading":"Spring Data JPA","level":1,"id":"Spring_Data_JPA"},{"heading":"대략적인 관계도","level":1,"id":"대략적인_관계도"},{"heading":"JPQL(Java Persistence Query Language)는 또 무엇인가?","level":1,"id":"JPQL(Java_Persistence_Query_Language)는_또_무엇인가?"},{"heading":"특징","level":3,"id":"특징"},{"heading":"문제점","level":3,"id":"문제점"},{"heading":"Query DSL(Domain Specific Language)???","level":1,"id":"Query_DSL(Domain_Specific_Language)???"},{"heading":"특징","level":3,"id":"특징"},{"heading":"단점","level":3,"id":"단점"},{"heading":"JPA n+1 문제?","level":1,"id":"JPA_n+1_문제?"},{"heading":"1. 개념","level":4,"id":"**1._개념**"},{"heading":"2. 어떻게 발생하나?","level":4,"id":"**2._어떻게_발생하나?**"},{"heading":"예시 상황","level":5,"id":"**예시_상황**"},{"heading":"쿼리 실행","level":5,"id":"**쿼리_실행**"},{"heading":"3. N+1 문제의 영향","level":4,"id":"**3._N+1_문제의_영향**"},{"heading":"4. 해결 방법","level":4,"id":"**4._해결_방법**"},{"heading":"(1) 페치 조인(Fetch Join)","level":5,"id":"**(1)_페치_조인(Fetch_Join)**"},{"heading":"(2) 엔티티 그래프(Entity Graph)","level":5,"id":"**(2)_엔티티_그래프(Entity_Graph)**"},{"heading":"(4) DTO로 데이터 조회","level":5,"id":"**(4)_DTO로_데이터_조회**"},{"heading":"트렌젝션 / DB스냅샷 / 앤티티매니저 / 영속성컨텍스트 / JPA","level":1,"id":"트렌젝션_/_DB스냅샷_/_앤티티매니저_/_영속성컨텍스트_/_JPA"},{"heading":"각각의 정의","level":2,"id":"각각의_정의"},{"heading":"트렌젝션","level":4,"id":"트렌젝션"},{"heading":"트렌젝션매니저","level":4,"id":"트렌젝션매니저"},{"heading":"@Transactional","level":4,"id":"@Transactional"},{"heading":"앤티티매니저","level":4,"id":"앤티티매니저"},{"heading":"영속성컨텍스트","level":4,"id":"영속성컨텍스트"},{"heading":"스냅샷","level":4,"id":"스냅샷"}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:JPA","?query=tag:DB","?query=tag:SPRING","study/dev-seminar/🪕-jpa-에-대한-고찰.html#🪕 JPA 에 대한 고찰","study/dev-seminar/🪕-jpa-에-대한-고찰.html#JDBC_-_Java_Database_Connectivity","study/dev-seminar/🪕-jpa-에-대한-고찰.html#즉_JDBC는_공통으로_사용가능한_인터페이스이며,_각_DB에_맞는_구현체는_JDBC드라이버이다._-_MySQL_Connector","study/dev-seminar/🪕-jpa-에-대한-고찰.html#특징","study/dev-seminar/🪕-jpa-에-대한-고찰.html#ODBC_-_Open_Database_Connectivity","study/dev-seminar/🪕-jpa-에-대한-고찰.html#그렇다면_JPA(Java_Persistence_API)는_무엇일까?","study/dev-seminar/🪕-jpa-에-대한-고찰.html#그렇다면_JDBC와_JPA는_서로_다른것인가?","study/dev-seminar/🪕-jpa-에-대한-고찰.html#Spring_Data_JPA","study/dev-seminar/🪕-jpa-에-대한-고찰.html#대략적인_관계도","study/dev-seminar/🪕-jpa-에-대한-고찰.html#JPQL(Java_Persistence_Query_Language)는_또_무엇인가?","study/dev-seminar/🪕-jpa-에-대한-고찰.html#특징","study/dev-seminar/🪕-jpa-에-대한-고찰.html#문제점","study/dev-seminar/🪕-jpa-에-대한-고찰.html#Query_DSL(Domain_Specific_Language)???","study/dev-seminar/🪕-jpa-에-대한-고찰.html#특징","study/dev-seminar/🪕-jpa-에-대한-고찰.html#단점","study/dev-seminar/🪕-jpa-에-대한-고찰.html#JPA_n+1_문제?","study/dev-seminar/🪕-jpa-에-대한-고찰.html#**1._개념**","study/dev-seminar/🪕-jpa-에-대한-고찰.html#**2._어떻게_발생하나?**","study/dev-seminar/🪕-jpa-에-대한-고찰.html#**예시_상황**","study/dev-seminar/🪕-jpa-에-대한-고찰.html#**쿼리_실행**","study/dev-seminar/🪕-jpa-에-대한-고찰.html#**3._N+1_문제의_영향**","study/dev-seminar/🪕-jpa-에-대한-고찰.html#**4._해결_방법**","study/dev-seminar/🪕-jpa-에-대한-고찰.html#**(1)_페치_조인(Fetch_Join)**","study/dev-seminar/🪕-jpa-에-대한-고찰.html#**(2)_엔티티_그래프(Entity_Graph)**","study/dev-seminar/🪕-jpa-에-대한-고찰.html#**(4)_DTO로_데이터_조회**","study/dev-seminar/🪕-jpa-에-대한-고찰.html#트렌젝션_/_DB스냅샷_/_앤티티매니저_/_영속성컨텍스트_/_JPA","study/dev-seminar/🪕-jpa-에-대한-고찰.html#각각의_정의","study/dev-seminar/🪕-jpa-에-대한-고찰.html#트렌젝션","study/dev-seminar/🪕-jpa-에-대한-고찰.html#트렌젝션매니저","study/dev-seminar/🪕-jpa-에-대한-고찰.html#@Transactional","study/dev-seminar/🪕-jpa-에-대한-고찰.html#앤티티매니저","study/dev-seminar/🪕-jpa-에-대한-고찰.html#영속성컨텍스트","study/dev-seminar/🪕-jpa-에-대한-고찰.html#스냅샷"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/dev-seminar/🪕-jpa-에-대한-고찰.html","pathToRoot":"../..","createdTime":1739950614572,"modifiedTime":1739951494022,"sourceSize":9300,"sourcePath":"study/Dev Seminar/🪕 JPA 에 대한 고찰.md","exportPath":"study/dev-seminar/🪕-jpa-에-대한-고찰.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20250110144021.png"]},"study/📕-공부.html":{"title":"📕 공부","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:모음\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#모음</a> <br> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a> <a href=\"http://lts.kr?query=tag:모음\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#모음\">#모음</a><br>공부\n보고 배운 지식 중 공유하고 싶은 정보를 모아둔 카테고리 입니다.\n<br>\n<br><a data-href=\"⏰ Script 로딩 지연 이슈\" href=\"http://lts.kr/issue_troubleshooting/⏰-script-로딩-지연-이슈.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">⏰ Script 로딩 지연 이슈</a>⭐\n<br><a data-href=\"🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안\" href=\"http://lts.kr/issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안</a>⭐\n<br><a data-href=\"🚦 Spring Batch(스레드와 트렌젝션) 트러블슈팅\" href=\"http://lts.kr/issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🚦 Spring Batch(스레드와 트렌젝션) 트러블슈팅</a>\n<br><a data-href=\"⚔ StckOverflow 이슈와 QueryDSL\" href=\"http://lts.kr/issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">⚔ StckOverflow 이슈와 QueryDSL</a>\n<br>\n<br><a data-href=\"☕ JAVA , OOP\" href=\"http://lts.kr/study/cs/☕-java-,-oop.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">☕ JAVA , OOP</a>\n<br><a data-href=\"🍃 Spring\" href=\"http://lts.kr/study/cs/🍃-spring.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🍃 Spring</a>\n<br><a data-href=\"🎩 DevOps\" href=\"http://lts.kr/study/cs/🎩-devops.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🎩 DevOps</a>\n<br><a data-href=\"📔 DataBase\" href=\"http://lts.kr/study/cs/📔-database.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">📔 DataBase</a>\n<br><a data-href=\"📭 Server\" href=\"http://lts.kr/study/cs/📭-server.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">📭 Server</a>\n<br><a data-href=\"🐞 etc\" href=\"http://lts.kr/study/cs/🐞-etc.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🐞 etc</a>\n<br>\n<br><a data-href=\"🤠 Coding Test 풀이 모음\" href=\"http://lts.kr/study/coding-test/🤠-coding-test-풀이-모음.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🤠 Coding Test 풀이 모음</a>\n<br><a data-href=\"👽 Algorithm\" href=\"http://lts.kr/study/coding-test/👽-algorithm.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">👽 Algorithm</a>\n<br>\n<br><a data-href=\"🔻 Redis 캐쉬 전략 - hello 서비스에 적용하여 성능개선 가능성\" href=\"http://lts.kr/study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🔻 Redis 캐쉬 전략 - hello 서비스에 적용하여 성능개선 가능성</a>\n<br><a data-href=\"🍂 JPA, Mybatis , Dead Lock\" href=\"http://lts.kr/study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🍂 JPA, Mybatis , Dead Lock</a>\n<br><a data-href=\"🔹 TDD에 대하여\" href=\"http://lts.kr/study/dev-seminar/🔹-tdd에-대하여.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🔹 TDD에 대하여</a>\n<br><a data-href=\"🪕 JPA 에 대한 고찰\" href=\"http://lts.kr/study/dev-seminar/🪕-jpa-에-대한-고찰.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🪕 JPA 에 대한 고찰</a>\n<br><a data-href=\"🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안\" href=\"http://lts.kr/issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안</a>\n<br><a data-href=\"🥗 Spring Security_토큰-세션-쿠키-JWT 에 대하여\" href=\"http://lts.kr/study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥗 Spring Security_토큰-세션-쿠키-JWT 에 대하여</a>\n<br><a data-href=\"📔 DB 테이블 설계, 어떻게 하는게 옳은 방법인가\" href=\"http://lts.kr/study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">📔 DB 테이블 설계, 어떻게 하는게 옳은 방법인가</a>\n<br>\n<br><a data-href=\"🥈 필기 1과목 - 소프트웨어 설계\" href=\"http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥈 필기 1과목 - 소프트웨어 설계</a>\n<br><a data-href=\"🥈 필기 2과목 - 소프트웨어 개발\" href=\"http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥈 필기 2과목 - 소프트웨어 개발</a>\n<br><a data-href=\"🥈 필기 3과목 - 데이터베이스 구축\" href=\"http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥈 필기 3과목 - 데이터베이스 구축</a>\n<br><a data-href=\"🥈 필기 4과목 - 프로그래밍 언어 활용\" href=\"http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥈 필기 4과목 - 프로그래밍 언어 활용</a>\n<br><a data-href=\"🥈 필기 5과목 - 정보시스템 구축관리\" href=\"http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥈 필기 5과목 - 정보시스템 구축관리</a>\n<br>\n<br><a data-href=\"🥇 정보처리 기사 실기 키워드\" href=\"http://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥇 정보처리 기사 실기 키워드</a>\n<br><a data-href=\"🥇 정보처리 기사 실기 SQL 문제\" href=\"http://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥇 정보처리 기사 실기 SQL 문제</a>\n<br><a data-href=\"🥇 정보처리 기사 실기 프로그래밍-제어문\" href=\"http://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🥇 정보처리 기사 실기 프로그래밍-제어문</a>","aliases":[],"tags":["#공부","#모음"],"headers":[{"heading":"📕 공부","level":1,"id":"📕 공부"},{"heading":"Issue / TroubleShooting⭐","level":2,"id":"**Issue_/_TroubleShooting**⭐"},{"heading":"Computer Science","level":2,"id":"*Computer_Science*"},{"heading":"CodingTest","level":2,"id":"*CodingTest*"},{"heading":"Company Seminar","level":2,"id":"**Company_Seminar**"},{"heading":"license","level":2,"id":"*license*"},{"heading":"정보처리기사 필기","level":3,"id":"정보처리기사_필기"},{"heading":"정보처리기사 실기","level":3,"id":"정보처리기사_실기"}],"backlinks":[],"links":["?query=tag:%EA%B3%B5%EB%B6%80","?query=tag:%EB%AA%A8%EC%9D%8C","issue_troubleshooting/⏰-script-로딩-지연-이슈.html","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html","issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html","issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html","study/cs/☕-java-,-oop.html","study/cs/🍃-spring.html","study/cs/🎩-devops.html","study/cs/📔-database.html","study/cs/📭-server.html","study/cs/🐞-etc.html","study/coding-test/🤠-coding-test-풀이-모음.html","study/coding-test/👽-algorithm.html","study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html","study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html","study/dev-seminar/🔹-tdd에-대하여.html","study/dev-seminar/🪕-jpa-에-대한-고찰.html","issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html","study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html","study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html","study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html","study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html","study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html","study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html","study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html","study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html","study/📕-공부.html#📕 공부","study/📕-공부.html#**Issue_/_TroubleShooting**⭐","study/📕-공부.html#*Computer_Science*","study/📕-공부.html#*CodingTest*","study/📕-공부.html#**Company_Seminar**","study/📕-공부.html#*license*","study/📕-공부.html#정보처리기사_필기","study/📕-공부.html#정보처리기사_실기"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/study/📕-공부.html","pathToRoot":"..","createdTime":1740028632740,"modifiedTime":1741575458535,"sourceSize":1558,"sourcePath":"study/📕 공부.md","exportPath":"study/📕-공부.html","showInTree":true,"treeOrder":0,"attachments":[]},"tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html":{"title":"🌥 aws(EC2)셋팅부터 배포까지","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:Tools\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Tools</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:AWS\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#AWS</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Amazon\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Amazon</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Cloud\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Cloud</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Docker\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Docker</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Redis\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Redis</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:EC2\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#EC2</a> <br> <a href=\"http://lts.kr?query=tag:Tools\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Tools\">#Tools</a> <a href=\"http://lts.kr?query=tag:AWS\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#AWS\">#AWS</a> <a href=\"http://lts.kr?query=tag:Amazon\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Amazon\">#Amazon</a> <a href=\"http://lts.kr?query=tag:Cloud\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Cloud\">#Cloud</a> <a href=\"http://lts.kr?query=tag:Docker\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Docker\">#Docker</a> <a href=\"http://lts.kr?query=tag:Redis\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Redis\">#Redis</a> <a href=\"http://lts.kr?query=tag:EC2\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#EC2\">#EC2</a><br><img alt=\"Pasted image 20250221112429.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221112429.png\" target=\"_self\"><br>\n<br>AWS가 제공하는&nbsp;'클라우드 컴퓨팅 서비스'&nbsp;이다.\n<br>예전의 쓴 더 자세한 글.<br>- Amazon Elastic Compute Cloud으로써 AWS에서 제공하는 클라우드 컴퓨팅 서비스이다. 즉, 독립괸 컴퓨터를 임대해주는 aws의\n<br>오늘은 EC2에서 인스턴스를 생성하고, docker를 통해 Spring boot 프로젝트를 띄워보겠다.<br>\n천천히 따라가 보자.<br>먼저&nbsp; 프로젝트가 설치된 경로에서 ' mvn install '명령어를 사용하여 jar 파일을 생성한다<br><img alt=\"Pasted image 20250221114856.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114856.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250221114901.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114901.png\" target=\"_self\"><br>docker build -t [이미지 이름]:[태그] [dockerfile이 저장된 경로]\n<br><img alt=\"Pasted image 20250221114932.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114932.png\" target=\"_self\"><br><img alt=\"Pasted image 20250221114945.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114945.png\" target=\"_self\"><br><img alt=\"Pasted image 20250221114951.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114951.png\" target=\"_self\"><br>이제 docker는 준비가 끝났다...<br>자세한 설명은 생략한다. 검색해 보시길<br><img alt=\"Pasted image 20250221114959.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114959.png\" target=\"_self\"><br>4.번의 주소를 사용해서 접속한다.<br>\n이때!,&nbsp;.pem&nbsp;파일이 저장 되어있는 경로에서 진행한다<br><img alt=\"Pasted image 20250221115004.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115004.png\" target=\"_self\"><br>접속완료.<br><img alt=\"Pasted image 20250221115010.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115010.png\" target=\"_self\"><br>먼저, aws 무료 버전 인스턴스를 생성하고자 한다.<br>aws 사이트에 접속하여 개인계정을 생성한다. (aws 프리티어 서비스를 이용하면 1년 무료로 사용가능 함)\n<br>sudo docker pull [image이름]:[태그]\n<br><img alt=\"Pasted image 20250221115019.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115019.png\" target=\"_self\"><br>sudo docker images\n<br>명령어를 통해 생성된것을 확인할 수 있다.<br><img alt=\"Pasted image 20250221115024.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115024.png\" target=\"_self\"><br>1.2의 과정에서 ' --platform linux/amd64 ' 태그를 추가해 주고, 태그에 -linux를 붙였다.<br><img alt=\"Pasted image 20250221115030.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115030.png\" target=\"_self\"><br><img alt=\"Pasted image 20250221115035.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115035.png\" target=\"_self\"><br>잘 따라왔다면 EC2 환경에서 docker를 통해 받은 jar파일이 잘 실행되는 것을 볼 수 있다.<br>내가 만든 포트는 8000번이며 IP주소는 AWS의 인스턴스에서 찾아볼 수있다.<br>퍼블릭 IP주소 를 통해 접속을 확인해보기 전에..<br><img alt=\"Pasted image 20250221115040.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115040.png\" target=\"_self\"><br>해당 인스턴스의 보안그룹을 확인하고, 내가 설정한 포트(:8000)에 대한 접근을 허가해주어야한다.<br>\n보안그룹 확인 후,<br><img alt=\"Pasted image 20250221115046.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115046.png\" target=\"_self\"><br>네트워크 및 보안 -&gt; 해당 보안그룹 -&gt;&nbsp; 인바운드 규칙 편집 ( 인바운드란, 외부에서 해당 인스턴스로 접근하는 것)<br><img alt=\"Pasted image 20250221115052.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115052.png\" target=\"_self\"><br>8000번 포트 추가<br><img alt=\"Pasted image 20250221115058.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115058.png\" target=\"_self\"><br>이렇게 과정을 마치면...<br>http://[인스턴스의 퍼블릭 IP주소]:[포트번호]\n<br> 로 접속이 가능하다!<br>\n<img alt=\"Pasted image 20250221115102.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115102.png\" target=\"_self\"><br>다음의 대략정인 과정을 통해 진행될 것이다.<br>1. Docker를 통해 Redis 다운받기<br>2. Redis config 파일 생성/수정 및 docker file 생성하기<br>3. 2에서 생성한 conf 파일과 dockerfile로 docker image 생성하기<br>4. 생성한 image 를 docker hub에 올리기<br>5. EC2에서 redis image와 spring(jar)image 내려받기<br>6. 내려받은 image를 container로 실행하고, EC2 포트 열기<br>EC2셋팅법과 docker 및 redis를 셋팅하는 방법은 이전 글에서 찾아볼 수 있다.<br>spring + docker 셋팅<br>로컬에 도커가 셋팅되어있다고 가정하고,&nbsp; redis를 최신으로 내려받는다.<br>docker pull redis\n<br><img alt=\"Pasted image 20250221115117.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115117.png\" target=\"_self\"><br>docker desktop을 통해 확인할 수 있고,&nbsp;<br>docker images\n<br>명령어를 통해서 확인 할 수 있다.<br><img alt=\"Pasted image 20250221115122.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115122.png\" target=\"_self\"><br>1.에서 redis를 내려받았다면 해당하는 디렉토리에 redis.conf 파일이 생성된다.<br>\n생성되지 않았을경우 text파일 형식으로 생성해도 문제없다.<br>생성된 conf파일을 다음과 같이 수정하였다.<br># 연결 가능한 네트위크(0.0.0.0 = Anywhere)\nbind 0.0.0.0 # 연결 포트\nport 6379 # Master 노드의 기본 사용자 비밀번호\nrequirepass 사용할비밀번호입력 # 최대 사용 메모리 용량(지정하지 않으면 시스템 전체 용량)\nmaxmemory 2gb # 설정된 최대 사용 메모리 용량을 초과했을때 처리 방식\n# - noeviction : 쓰기 동작에 대해 error 반환 (Default)\n# - volatile-lru : expire 가 설정된 key 들중에서 LRU algorithm 에 의해서 선택된 key 제거\n# - allkeys-lru : 모든 key 들 중 LRU algorithm에 의해서 선택된 key 제거\n# - volatile-random : expire 가 설정된 key 들 중 임의의 key 제거\n# - allkeys-random : 모든 key 들 중 임의의 key 제거\n# - volatile-ttl : expire time(TTL)이 가장 적게 남은 key 제거 (minor TTL)\nmaxmemory-policy volatile-ttl # == RDB 관련 설정 ==\n# 저장할 RDB 파일명\ndbfilename backup.rdb\n# 15분 안에 최소 1개 이상의 key가 변경 되었을 때\nsave 900 1\n# 5분 안에 최소 10개 이상의 key가 변경 되었을 때\nsave 300 10\n# 60초 안에 최소 10000개 이상의 key가 변경 되었을 때\nsave 60 10000\n# RDB 저장 실패 시 write 명령 차단 여부\nstop-writes-on-bgsave-error no # == AOF 관련 설정 ==\n# AOF 사용 여부\nappendonly yes\n# 저장할 AOF 파일명\nappendfilename appendonly.aof\n# 디스크와 동기화 처리 방식\n# - always : AOF 값을 추가할 때마다 fsync를 호출해서 디스크에 쓰기\n# - everysec : 매초마다 fsync를 호출해서 디스크에 쓰기\n# - no : OS가 실제 sync를 할 때까지 따로 설정하지 않음\nappendfsync everysec # == Replication 관련 설정테스트 ==\n# Slave Redis 설정\n#임시주석slaveof 127.0.0.1 6380\n<br>docker file도 생성하여 준다.<br>FROM redis:latest\nCOPY redis.conf /저장디렉토리/redis.conf\nCMD [ \"redis-server\", \"/저장디렉토리/redis.conf\" ]\nEXPOSE 6379\n<br><img alt=\"Pasted image 20250221115129.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115129.png\" target=\"_self\"><br>docker build --platform linux/amd64 -t 이미지이름:태그 디렉토리\n----\ndocker build --platform linux/amd64 -t springredis:linux .\n<br>dockerfile이 있는 디렉토리에서 해당 명령어를 실행한다.<br>* --platform linux/amd64 태그는 본인의 ec2환경이 리눅스64 환경이기 때문에 추가했다.<br><img alt=\"Pasted image 20250221115132.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115132.png\" target=\"_self\"><br>docker push xotjd794613/springredis:linux\n------\ndocker push 계정명/이미지이름:태그\n<br><img alt=\"Pasted image 20250221115136.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115136.png\" target=\"_self\"><br><img alt=\"Pasted image 20250221115140.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115140.png\" target=\"_self\"><br>업로드까지 완료했다.<br>이전에 만들어두었던 Spring(jar)이미지&nbsp;와 방금 push한 redis이미지를 받는다<br>docker pull xotjd794613/funfun:0.0.1-linux\ndocker pull xotjd794613/springredis:linux\n--\ndocker pull 계정명/이미지이름:태그\n<br>docker images\n<br>명령어로 확인 할 수 있다.<br><img alt=\"Pasted image 20250221115146.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115146.png\" target=\"_self\"><br>이미지를 컨테이너로 실행하자.<br>Spring 이미지 실행<br>sudo docker run -d -p 8000:8080 xotjd794613/funfun:0.0.1-linux\n------\nsudo docker run -d -p 포트 계정명/이미지명:태그\n<br>redis 이미지 실행<br>docker run --name springredis -p 6379:6379 -v /home/ec2-user/redis:/data -d xotjd794613/springredis:linux --appendonly yes ---------- docker run --name 컨테이너이름 -p 포트 -v 데이터저장할디렉토리:/data -d 계정명/이미지명:태그 --appendonly yes\n<br>'docker ps -a' 명령어로 실행중인 모든 컨테이너를 확인 할 수 있다.<br><img alt=\"Pasted image 20250221115151.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115151.png\" target=\"_self\"><br>http://ec2주소:포트번호로 접속시 정상적으로 spring기반 페이지와 redis가 연결된 것을 확인할 수 있다.<br><img alt=\"Pasted image 20250221115157.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115157.png\" target=\"_self\"><br>오류\n만약,&nbsp;해당주소로 접속시 접속이 안되거나, redis가 정상적으로 실행되지 않는경우\n<br>\n<br><img alt=\"Pasted image 20250221115201.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115201.png\" target=\"_self\">\n<br><img alt=\"Pasted image 20250221115214.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115214.png\" target=\"_self\"><br>2.1 ec2 redis 컨테이너 포트 확인<br>docker ps -a\n<br>로 redis 컨테이너 ID 확인<br><img alt=\"Pasted image 20250221115220.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115220.png\" target=\"_self\"><br>docker inspect 컨테이너ID\n<br>명령어로 IP 확인<br><img alt=\"Pasted image 20250221115224.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115224.png\" target=\"_self\"><br><img alt=\"Pasted image 20250221115228.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115228.png\" target=\"_self\"><br>spring 프로젝트에 ip 정보 추가<br>\n<img alt=\"Pasted image 20250221115232.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221115232.png\" target=\"_self\"><br>","aliases":[],"tags":["#Tools","#AWS","#Amazon","#Cloud","#Docker","#Redis","#EC2"],"headers":[{"heading":"🌥 aws(EC2)셋팅부터 배포까지","level":1,"id":"🌥 aws(EC2)셋팅부터 배포까지"},{"heading":"AWS의 EC2란 무엇인가?","level":3,"id":"AWS의_EC2란_무엇인가?"},{"heading":"→ 여기로 🍊 aws EC2란","level":1,"id":"→_**여기로**_[[🍊_aws_EC2란]]"},{"heading":"→ 여기로 📘 SpringBoot & Docker + Reids 연동","level":1,"id":"→_**여기로**_[[📘_SpringBoot_&_Docker_+_Reids_연동]]"},{"heading":"AWS의 EC2는 무엇이며, 왜 사용하는가? 에 대해 알아보겠다.","level":1,"id":"AWS의_EC2는_무엇이며,_왜_사용하는가?_에_대해_알아보겠다."},{"heading":"EC2란 무엇인가?","level":4,"id":"EC2란_무엇인가?"},{"heading":"1. DOCKER 셋팅","level":2,"id":"1. DOCKER 셋팅"},{"heading":"1.1 SpringBoot프로젝트에 Docker파일 생성하기","level":3,"id":"_1.1 SpringBoot프로젝트에 Docker파일 생성하기_"},{"heading":"1.2 Docker파일로 image 생성","level":3,"id":"_1.2 Docker파일로_image_생성_"},{"heading":"1.3 생성한 image를 dockerhub에 push","level":3,"id":"_1.3 생성한 image를_dockerhub에 **push**_"},{"heading":"2. EC2 셋팅","level":2,"id":"2. EC2 셋팅"},{"heading":"2.1  EC2 인스턴스 생성","level":3,"id":"_2.1 _EC2_인스턴스_생성_"},{"heading":"2.2 쉘스크립트로 들어가기","level":3,"id":"_2.2 쉘스크립트로_들어가기_"},{"heading":"2.3 쉘스크립트에서 docker 다운로드 및 image PULL 받기","level":3,"id":"_2.3 쉘스크립트에서_docker_다운로드_및_image_PULL_받기_"},{"heading":"쉘스크립트에서 도커를 다운받은 후,  1번에서 올려놓은 image를 PULL 받는다.","level":4,"id":"쉘스크립트에서_도커를_다운받은_후, _1번에서_올려놓은_image를_PULL_받는다."},{"heading":"※ 나는 Apple m1 mac을 사용 중 이기 때문에 호환성 문제로 linux환경에 맞는 이미지를 한개 더 올렸다.","level":4,"id":"※_나는_Apple_m1_mac을_사용_중_이기_때문에_호환성_문제로_linux환경에_맞는_이미지를_한개_더_올렸다."},{"heading":"2.4 image컨테이너로 실행 시키기","level":3,"id":"_2.4 image컨테이너로_실행_시키기_"},{"heading":"- Redis도 함께 올려보자!","level":1,"id":"+_<font_color=\"#c0504d\">Redis</font>도_함께_올려보자!"},{"heading":"AWS EC2에 Redis를 설치하고, Spring 프로젝트까지 연동을 해볼것이다.","level":2,"id":"AWS_EC2에_Redis를_설치하고,_Spring_프로젝트까지_연동을_해볼것이다."},{"heading":"📘 SpringBoot & Docker + Reids 연동 를 먼저 보고오면 도음이 됩니다.","level":1,"id":"[[📘_SpringBoot_&_Docker_+_Reids_연동]]_를_먼저_보고오면_도음이_됩니다."},{"heading":"1. docker 로 redis 최신으로 내려받기","level":2,"id":"1. docker_로_redis_최신으로_내려받기"},{"heading":"2.  redis.conf 파일 생성 및 docker file 생성","level":2,"id":"2. _redis.conf_파일_생성_및_docker_file_생성"},{"heading":"3.  dockerfile로 원본 redis 이미지를 사용하여 EC2용 이미지 생성하기","level":2,"id":"3. _dockerfile로_원본_redis_이미지를_사용하여_EC2용_이미지_생성하기"},{"heading":"4.  생성한 ec2용 이미지 docker 허브에 push하기","level":2,"id":"4. _생성한_ec2용_이미지_docker_허브에_push하기"},{"heading":"5.  ec2 ssh에서 도커로 이미지 pull받고 컨테이너 실행하기","level":2,"id":"5. _ec2_ssh에서_도커로_이미지_pull받고_컨테이너_실행하기"},{"heading":"1. EC2의 인바운드 규칙에 redis포트번호를 추가하여 준다","level":2,"id":"1._EC2의_인바운드_규칙에_redis포트번호를_추가하여_준다"},{"heading":"2. Spring 프로젝트의 properties파일의 redis host를 ec2 redis 컨테이너의 ip로 잡아준다.","level":2,"id":"2._Spring_프로젝트의_properties파일의_redis_host를_ec2_redis_컨테이너의_ip로_잡아준다."}],"backlinks":[],"links":["?query=tag:Tools","?query=tag:AWS","?query=tag:Amazon","?query=tag:Cloud","?query=tag:Docker","?query=tag:Redis","?query=tag:EC2","tools/aws/🍊-aws-ec2란.html","tools/docker/📘-springboot-&-docker-+-reids-연동.html","tools/docker/📘-springboot-&-docker-+-reids-연동.html","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#🌥 aws(EC2)셋팅부터 배포까지","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#AWS의_EC2란_무엇인가?","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#→_**여기로**_[[🍊_aws_EC2란]]","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#→_**여기로**_[[📘_SpringBoot_&_Docker_+_Reids_연동]]","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#AWS의_EC2는_무엇이며,_왜_사용하는가?_에_대해_알아보겠다.","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#EC2란_무엇인가?","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#1. DOCKER 셋팅","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#_1.1 SpringBoot프로젝트에 Docker파일 생성하기_","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#_1.2 Docker파일로_image_생성_","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#_1.3 생성한 image를_dockerhub에 **push**_","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#2. EC2 셋팅","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#_2.1 _EC2_인스턴스_생성_","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#_2.2 쉘스크립트로_들어가기_","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#_2.3 쉘스크립트에서_docker_다운로드_및_image_PULL_받기_","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#쉘스크립트에서_도커를_다운받은_후, _1번에서_올려놓은_image를_PULL_받는다.","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#※_나는_Apple_m1_mac을_사용_중_이기_때문에_호환성_문제로_linux환경에_맞는_이미지를_한개_더_올렸다.","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#_2.4 image컨테이너로_실행_시키기_","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#+_<font_color=\"#c0504d\">Redis</font>도_함께_올려보자!","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#AWS_EC2에_Redis를_설치하고,_Spring_프로젝트까지_연동을_해볼것이다.","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#[[📘_SpringBoot_&_Docker_+_Reids_연동]]_를_먼저_보고오면_도음이_됩니다.","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#1. docker_로_redis_최신으로_내려받기","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#2. _redis.conf_파일_생성_및_docker_file_생성","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#3. _dockerfile로_원본_redis_이미지를_사용하여_EC2용_이미지_생성하기","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#4. _생성한_ec2용_이미지_docker_허브에_push하기","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#5. _ec2_ssh에서_도커로_이미지_pull받고_컨테이너_실행하기","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#1._EC2의_인바운드_규칙에_redis포트번호를_추가하여_준다","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html#2._Spring_프로젝트의_properties파일의_redis_host를_ec2_redis_컨테이너의_ip로_잡아준다."],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html","pathToRoot":"../..","createdTime":1740105237396,"modifiedTime":1740361077682,"sourceSize":9994,"sourcePath":"Tools/aws/🌥 aws(EC2)셋팅부터 배포까지.md","exportPath":"tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20250221112429.png","사진-및-문서/pasted-image-20250221114856.png","사진-및-문서/pasted-image-20250221114901.png","사진-및-문서/pasted-image-20250221114932.png","사진-및-문서/pasted-image-20250221114945.png","사진-및-문서/pasted-image-20250221114951.png","사진-및-문서/pasted-image-20250221114959.png","사진-및-문서/pasted-image-20250221115004.png","사진-및-문서/pasted-image-20250221115010.png","사진-및-문서/pasted-image-20250221115019.png","사진-및-문서/pasted-image-20250221115024.png","사진-및-문서/pasted-image-20250221115030.png","사진-및-문서/pasted-image-20250221115035.png","사진-및-문서/pasted-image-20250221115040.png","사진-및-문서/pasted-image-20250221115046.png","사진-및-문서/pasted-image-20250221115052.png","사진-및-문서/pasted-image-20250221115058.png","사진-및-문서/pasted-image-20250221115102.png","사진-및-문서/pasted-image-20250221115117.png","사진-및-문서/pasted-image-20250221115122.png","사진-및-문서/pasted-image-20250221115129.png","사진-및-문서/pasted-image-20250221115132.png","사진-및-문서/pasted-image-20250221115136.png","사진-및-문서/pasted-image-20250221115140.png","사진-및-문서/pasted-image-20250221115146.png","사진-및-문서/pasted-image-20250221115151.png","사진-및-문서/pasted-image-20250221115157.png","사진-및-문서/pasted-image-20250221115201.png","사진-및-문서/pasted-image-20250221115214.png","사진-및-문서/pasted-image-20250221115220.png","사진-및-문서/pasted-image-20250221115224.png","사진-및-문서/pasted-image-20250221115228.png","사진-및-문서/pasted-image-20250221115232.png"]},"tools/aws/🍊-aws-ec2란.html":{"title":"🍊 aws EC2란","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:Tools\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Tools</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:AWS\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#AWS</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Amazon\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Amazon</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Cloud\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Cloud</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:EC2\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#EC2</a> <br> <a href=\"http://lts.kr?query=tag:Tools\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Tools\">#Tools</a> <a href=\"http://lts.kr?query=tag:AWS\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#AWS\">#AWS</a> <a href=\"http://lts.kr?query=tag:Amazon\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Amazon\">#Amazon</a> <a href=\"http://lts.kr?query=tag:Cloud\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Cloud\">#Cloud</a> <a href=\"http://lts.kr?query=tag:EC2\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#EC2\">#EC2</a><br><img alt=\"Pasted image 20250221114152.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114152.png\" target=\"_self\"><br>\nAWS의 EC2는 무엇이며, 왜 사용하는가? 에 대해 알아보겠다.<br>\n<br>\nAmazon Elastic Compute Cloud으로써 AWS에서 제공하는 클라우드 컴퓨팅 서비스이다.<br>\n즉, 독립괸 컴퓨터를 임대해주는 aws의 대표적인 서비스상품 이다. <br>\n클라우드 컴퓨팅 서비스로 컴퓨팅 요구사항의 변화에 따라 컴퓨팅 파워를 조정할 수 있다. <br>\n실제로 사용한 용량 만큼만 지불하여, 서비스 요금을 미리 선입금 할 필요가 없다. <br>\nLinux / Window 중 OS선택이 자유롭다. <br>\n머신러닝, 웹서버, 게임서버 등 다양한 용도에 최적화된 서버를 쉽게 구성 가능하다. <br>\n여러 aws서비스와 유기적인 연동이 가능하다. <br>\n<br>\n인스턴스란 aws클라우드에서 사용하는&nbsp;가상컴퓨터&nbsp;이다. <br>\ncpu, 메모리, 그래픽카드 등 연산을 위한 하드웨어 부분을 담당한다. <br>\naws는 각 사용 사례에 맞게 최적화된 다양한 인스턴스 유형을 제공한다. <br>-&nbsp;한정된 요금으로&nbsp;유형(사용목적)을 정하고,&nbsp;사이즈를 골라, 각 인스턴스별 사용 목적에 따라 최적화 시킨다.<br>\n<img alt=\"Pasted image 20250221114208.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114208.png\" target=\"_self\"><br>\n<br>\n인스턴스가 연산(cpu, 메모리 등) 처리를 담당한다면, EBS는&nbsp;데이터를 저장하는&nbsp;역할을 한다. <br>\n즉, 클라우드에서 사용하는 가상 HDD이다. <br>\n손쉽게 사용량을 많게, 혹은 적게 확장할 수 있으며, 빌린 부분에 대한 부분만 저렴하게 비용을 지불 할 수 있다. <br>\n총 5가지 타입을 제공하는데, 다음과 같다.<br>\n<img alt=\"Pasted image 20250221114220.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114220.png\" target=\"_self\"> <br>\n<br>\nAMI는 인스턴스를 실행하기 위한 정보를 모은 단위이다. <br>\nEC2를 실행하기 위해서, cpu프로세서 타입, 저장공간 용량, 32/64비트, OS정보, 설치된 소프트웨어 정보 등 <br>세팅정보(템플릿)을 저장한 단위 이다.<br>\n즉, 서버에 필요한 운영체제와 다양한 소프트웨어로 구성된 탬플릿 <br>\nAMI를 사용하여&nbsp;현재 상태의 EC2셋팅(템플릿)을 복제하여 다른 계정이나, 다른 리전에 전달이 가능하다. <br>\n<br>위의 이유들로 생각할 수 있는&nbsp;장점들!\n<br>. 클라우드에서 확장 가능한 컴퓨팅 용량을 제공하기 때문에, 하드웨어에 대한 투자를 앞당길 필요가 없기 때문에,<br>신속하게 개발하고 배포 할 수 있다!<br>. 컴퓨팅 요구가 변화했을 때,&nbsp;용량을 빠르게 확장/축소&nbsp;할 수 있다. 즉, 비용을 아낄 수 있다.<br>. 일반적인 실패 시나리오를 방지하고, 장애 복구 능력이 뛰어난 도구를 제공한다.<br>. 이렇게 유연한 구조/사이즈 변경이 가능한 호스팅 서비스와 더불어, 안정적인 환경을 제공하며,<br>본안성이 매우 높은 네트워킹 기능을 제공한다.<br>","aliases":[],"tags":["#Tools","#AWS","#Amazon","#Cloud","#EC2"],"headers":[{"heading":"🍊 aws EC2란","level":1,"id":"🍊 aws EC2란"},{"heading":"1. EC2란 무엇인가?","level":2,"id":"1._*EC2*란_무엇인가?"},{"heading":"2. EC2의 구성","level":2,"id":"2._*EC2*의_구성"},{"heading":"ec2는 Instance / EBS / AMI 로 이루어져있다.","level":4,"id":"ec2는_Instance_/_EBS_/_AMI_로_이루어져있다."},{"heading":"2.1 Instance","level":3,"id":"**_2.1_Instance_**"},{"heading":"2.2 EBS(Elastic Block Storage)","level":3,"id":"**_2.2_EBS(Elastic_Block_Storage)_**"},{"heading":"2.3 AMI(Amazon Machin Image)","level":3,"id":"_**2.3_AMI(Amazon_Machin_Image)**_"},{"heading":"3. EC2를 그래서 왜 사용하는데?","level":2,"id":"3._EC2를_그래서_왜_사용하는데?"},{"heading":"AWS(EC2) 실습 보러가기-","level":4,"id":"AWS(EC2)_실습_보러가기-"},{"heading":"🌥 aws(EC2)셋팅부터 배포까지","level":2,"id":"[[🌥_aws(EC2)셋팅부터_배포까지]]"}],"backlinks":[],"links":["?query=tag:Tools","?query=tag:AWS","?query=tag:Amazon","?query=tag:Cloud","?query=tag:EC2","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html","tools/aws/🍊-aws-ec2란.html#🍊 aws EC2란","tools/aws/🍊-aws-ec2란.html#1._*EC2*란_무엇인가?","tools/aws/🍊-aws-ec2란.html#2._*EC2*의_구성","tools/aws/🍊-aws-ec2란.html#ec2는_Instance_/_EBS_/_AMI_로_이루어져있다.","tools/aws/🍊-aws-ec2란.html#**_2.1_Instance_**","tools/aws/🍊-aws-ec2란.html#**_2.2_EBS(Elastic_Block_Storage)_**","tools/aws/🍊-aws-ec2란.html#_**2.3_AMI(Amazon_Machin_Image)**_","tools/aws/🍊-aws-ec2란.html#3._EC2를_그래서_왜_사용하는데?","tools/aws/🍊-aws-ec2란.html#AWS(EC2)_실습_보러가기-","tools/aws/🍊-aws-ec2란.html#[[🌥_aws(EC2)셋팅부터_배포까지]]"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/tools/aws/🍊-aws-ec2란.html","pathToRoot":"../..","createdTime":1740105237396,"modifiedTime":1740361069051,"sourceSize":3324,"sourcePath":"Tools/aws/🍊 aws EC2란.md","exportPath":"tools/aws/🍊-aws-ec2란.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20250221114152.png","사진-및-문서/pasted-image-20250221114208.png","사진-및-문서/pasted-image-20250221114220.png"]},"tools/aws/🍌-elastic-ip(탄력적-ip)란.html":{"title":"🍌 Elastic IP(탄력적 IP)란","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:Tools\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Tools</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:AWS\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#AWS</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Amazon\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Amazon</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Cloud\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Cloud</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:EC2\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#EC2</a> <br> <a href=\"http://lts.kr?query=tag:Tools\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Tools\">#Tools</a> <a href=\"http://lts.kr?query=tag:AWS\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#AWS\">#AWS</a> <a href=\"http://lts.kr?query=tag:Amazon\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Amazon\">#Amazon</a> <a href=\"http://lts.kr?query=tag:Cloud\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Cloud\">#Cloud</a> <a href=\"http://lts.kr?query=tag:EC2\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#EC2\">#EC2</a><br>\n<br>EIP는 인터넷을 통해 접속할 수 있는 고정적인 IP주소를 할당하고, 인스턴스에 연결할 수 있는 서비스를 말한다.\n<br>모든 인스턴스 또는 네트워크 인터페이스에 EIP 연결이 가능하다.\n<br>EIP를 할당받고 삭제하기 전까지, 해당 EIP를 쭉 유지할 수 있다.\n<br>정보\n도메인과 IP주소를 연결할 떄, IP주소의 변동이 있어선 안되기 때문에, EIP를 사용한다.\n<br>\n<br>aws Ec2를 올리게 되면 ENI(Elastic network interface)가 함께 생성이된다. <br>ENI는 일종의 가상 랜카드 로써, MAC주소와 보안그룹에 연결되어있으며 IP도 갖고있다.<br>\n여기서 ENI에 public IP를 달게 되면 외부에서 접속이 가능하게 되는것이다.\n<br>하지만, EC2 인스턴스의 Public IP는 고정된 주소가 아니라 유동적인 IP이다.<br>만약 DNS에 인스턴스의 Public IP를 연결해놓았는데, 해당 IP주소가 변경된다면 문제가 발생할 수 있다.<br>\n이러한 문제를 해결하고자 AWS에서 한 번 할당하면 바뀌지 않는 EIP를 제공하는 것이다.<br>주의\n다만 AWS EIP(탄력적 IP)는 유료 서비스 임으로, 사용량에 따른 월 사용료를 지불해야 사용할 수 있다.<br>\nfree요금제 또한 마찬가지로 금액이 부과된다.","aliases":[],"tags":["#Tools","#AWS","#Amazon","#Cloud","#EC2"],"headers":[{"heading":"🍌 Elastic IP(탄력적 IP)란","level":1,"id":"🍌 Elastic IP(탄력적 IP)란"},{"heading":"EIP(Elastic IP Address)","level":1,"id":"EIP(Elastic_IP_Address)"},{"heading":"EIP의 사용이유?","level":1,"id":"EIP의_사용이유?"},{"heading":"설명 보러가기🍊 aws EC2란","level":4,"id":"설명_보러가기[[🍊_aws_EC2란]]"}],"backlinks":[],"links":["?query=tag:Tools","?query=tag:AWS","?query=tag:Amazon","?query=tag:Cloud","?query=tag:EC2","tools/aws/🍊-aws-ec2란.html","tools/aws/🍌-elastic-ip(탄력적-ip)란.html#🍌 Elastic IP(탄력적 IP)란","tools/aws/🍌-elastic-ip(탄력적-ip)란.html#EIP(Elastic_IP_Address)","tools/aws/🍌-elastic-ip(탄력적-ip)란.html#EIP의_사용이유?","tools/aws/🍌-elastic-ip(탄력적-ip)란.html#설명_보러가기[[🍊_aws_EC2란]]"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/tools/aws/🍌-elastic-ip(탄력적-ip)란.html","pathToRoot":"../..","createdTime":1740361053654,"modifiedTime":1740646202048,"sourceSize":1519,"sourcePath":"Tools/aws/🍌 Elastic IP(탄력적 IP)란.md","exportPath":"tools/aws/🍌-elastic-ip(탄력적-ip)란.html","showInTree":true,"treeOrder":0,"attachments":[]},"tools/docker/🐋-docker.html":{"title":"🐋 docker","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:Tools\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Tools</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:도커\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#도커</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Docker\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Docker</a> <br> <a href=\"http://lts.kr?query=tag:Tools\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Tools\">#Tools</a> <a href=\"http://lts.kr?query=tag:도커\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#도커\">#도커</a> <a href=\"http://lts.kr?query=tag:Docker\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Docker\">#Docker</a><br><img alt=\"Pasted image 20250221114743.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114743.png\" target=\"_self\"><br>...aws의 설명에 의하면<br>\n<br>애플리케이션을 신속하게 구축, 테스트 및 배포할 수 있는 소프트웨어 플랫폼이다.\n<br>소프트웨어를&nbsp;컨테이너&nbsp;라는 표준화된 유닛으로 패키징하여 관리한다.<br>\n2-1. 컨테이너에는 라이브러리, 시스템 도구, 코드, 런타임 등 소프트웨어를 실행하는 데 필요한 모든것이 포함되어 있다.\n<br>Docker는 AWS와 협업하여 다양한 규모에서 안정적이고 저렴하게 애플리케이션을 구축, 제공할 수 있게 한다.\n<br>\n<br>코드, 런타임, 시스템도구 등등등 소프트웨어를 실행하는 데 필요한 모든 것을 포함하는 독립 실행형 실행 가능 패키지 이다.\n<br>다른컨테이너나 호스트 시스템을 방해하지 않고, Docker runtime을 사용하여 모든 호스트에서 실행할 수 있는 소프트웨어의 격리된 단위로 설계되어있다.\n<br>\n<br>별도의 하드웨어 에뮬레이션 없이 리눅스 커널을 공유해 컨테이너를 실행한다.\n<br>\n<br>하드웨어 에뮬레이션이 없어서 매우 빠르다. 또한 하나의 머신에서 프로세스만큼 많이 실행하는 것이 가능하다.\n<br>\n<br>컨테이너는 호스트의 환경이 아닌 독자적인 실행환경을 갖고 있다.\n<br>이 환경은 파일(Dockerfile)들로 구성되며, 공유될 수 있다.\n<br>\n<br>모든 이미지에는 계층이 있으며, 현재의 이미지가 적절하지 않은 경우 이전 버전으로 롤백이 가능하다.\n<br>CI/CD를 수행하는 데 도움을 준다.\n<br>\n<br>\n서버를 처음 설정할때, OS, 라이브러리, 컴파일러 등 많은 설정이 필요하고, 버전으 변경되고 업데이트 될 때 마다 다시 재설정이 필요하다. <br>\n하지만, 이러한 설정 등을 도커 컨테이너 위에서 진행한다면, 호스트 OS에 아무런 영향을 주지 않는다.<br>\n즉, 로컬 환경의 간섭 없이 독립적으로 구동된다! <br>\n또한 다른 서버로 이사를 가는 상황에서 이미지만을 가져와 새로운 서버에 컨테이너를 만들어 쉽게 동일한 환경을 구성할 수 있다. <br>\n<br>마이크로 서비스 구조로, 애플리케이션이 독립적인 구성 요소로 구축되어 각 애플리케이션 프로세스가 서비스로 실행된다.\n<br>\n<br>도커는 각 환경마다 쓸 수 있는 자원이 고정적으로 정해져 있지 않기 때문에, 유동적으로 자원을 할당하여 기존의 가상화 방식보다 훨씬 자원적, 성능적으로 뛰어나다\n<br>","aliases":[],"tags":["#Tools","#도커","#Docker"],"headers":[{"heading":"🐋 docker","level":1,"id":"🐋 docker"},{"heading":"Docker란","level":1,"id":"**Docker란**"},{"heading":"여기서 Container란 정확히 무엇인가?","level":3,"id":"여기서 Container란_정확히_무엇인가?"},{"heading":"특징","level":2,"id":"특징"},{"heading":"운영체제 수준의 가상화","level":3,"id":"운영체제_수준의_가상화"},{"heading":"빠른 속도와 효율성","level":3,"id":"빠른_속도와_효율성"},{"heading":"높은 이식성(확장성)","level":3,"id":"높은_이식성(확장성)"},{"heading":"롤백","level":3,"id":"롤백"},{"heading":"장점","level":2,"id":"**장점**"},{"heading":"애플리케이션 개발과 배포의 편의성","level":3,"id":"애플리케이션_개발과_배포의_편의성"},{"heading":"여러 애플리케이션에서의 독립성과 확정성 증가","level":3,"id":"여러_애플리케이션에서의_독립성과_확정성_증가"},{"heading":"자원,성능이 뛰어나다","level":3,"id":"자원,성능이_뛰어나다"},{"heading":"도커 실습 보러가기.","level":4,"id":"도커_실습_보러가기."},{"heading":"📘 SpringBoot & Docker + Reids 연동","level":2,"id":"[[📘_SpringBoot_&_Docker_+_Reids_연동]]"},{"heading":"🌥 aws(EC2)셋팅부터 배포까지","level":2,"id":"[[🌥_aws(EC2)셋팅부터_배포까지]]"}],"backlinks":[],"links":["?query=tag:Tools","?query=tag:%EB%8F%84%EC%BB%A4","?query=tag:Docker","tools/docker/📘-springboot-&-docker-+-reids-연동.html","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html","tools/docker/🐋-docker.html#🐋 docker","tools/docker/🐋-docker.html#**Docker란**","tools/docker/🐋-docker.html#여기서 Container란_정확히_무엇인가?","tools/docker/🐋-docker.html#특징","tools/docker/🐋-docker.html#운영체제_수준의_가상화","tools/docker/🐋-docker.html#빠른_속도와_효율성","tools/docker/🐋-docker.html#높은_이식성(확장성)","tools/docker/🐋-docker.html#롤백","tools/docker/🐋-docker.html#**장점**","tools/docker/🐋-docker.html#애플리케이션_개발과_배포의_편의성","tools/docker/🐋-docker.html#여러_애플리케이션에서의_독립성과_확정성_증가","tools/docker/🐋-docker.html#자원,성능이_뛰어나다","tools/docker/🐋-docker.html#도커_실습_보러가기.","tools/docker/🐋-docker.html#[[📘_SpringBoot_&_Docker_+_Reids_연동]]","tools/docker/🐋-docker.html#[[🌥_aws(EC2)셋팅부터_배포까지]]"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/tools/docker/🐋-docker.html","pathToRoot":"../..","createdTime":1740105237396,"modifiedTime":1740108237156,"sourceSize":3097,"sourcePath":"Tools/docker/🐋 docker.md","exportPath":"tools/docker/🐋-docker.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20250221114743.png"]},"tools/docker/📘-springboot-&-docker-+-reids-연동.html":{"title":"📘 SpringBoot &amp; Docker + Reids 연동","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:Tools\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Tools</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:도커\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#도커</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Docker\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Docker</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:SPRING\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#SPRING</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Boot\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Boot</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Redis\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Redis</a> <br> <a href=\"http://lts.kr?query=tag:Tools\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Tools\">#Tools</a> <a href=\"http://lts.kr?query=tag:도커\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#도커\">#도커</a> <a href=\"http://lts.kr?query=tag:Docker\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Docker\">#Docker</a> <a href=\"http://lts.kr?query=tag:SPRING\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#SPRING\">#SPRING</a> <a href=\"http://lts.kr?query=tag:Boot\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Boot\">#Boot</a> <a href=\"http://lts.kr?query=tag:Redis\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Redis\">#Redis</a> <br><img alt=\"Pasted image 20250221114306.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114306.png\" target=\"_self\"><br>먼저 도커에 대한 간단한 이전 글!<br>aws의 설명에 의하면 Docker란 <br>애플리케이션을 신속하게 구축, 테스트 및 배포할 수 있는 소프트웨어 플랫폼이다. <br>소프트웨어를 컨테이너 라는 표준화된 유닛으로 패키징하여 관리한다. <br><a data-tooltip-position=\"top\" aria-label=\"https://docs.docker.com/desktop/install/mac-install/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://docs.docker.com/desktop/install/mac-install/\" target=\"_self\">도커 다운로드 링크</a><br>각 기기에 맞는 docker 버전을 다운로드 받는다.<br>\n<img alt=\"Pasted image 20250221114324.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114324.png\" target=\"_self\"><br>다운로드 받은 후 명령어를 입력하여 docker의 현재 버전을 볼 수 있다.<br>※ 터미널에 'docker' 를 입력하게 되면 다양한 명령어들을 확인할 수 있다.<br>\n<img alt=\"Pasted image 20250221114327.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114327.png\" target=\"_self\"><br>제대로 다운로드 받았다면 docker에 기본적으로 만들어져있는 이미지들을 확인 할수 있다. 밑에 사진은 도커 데스트톱 이라는 앱이다.<br><img alt=\"Pasted image 20250221114334.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114334.png\" target=\"_self\"><br>터미널에서도 확인할 수 있다.<br><img alt=\"Pasted image 20250221114339.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114339.png\" target=\"_self\"><br>이제&nbsp;도커 파일&nbsp;을 이용하여&nbsp;도커 이미지를 생성한 후, 이미지를 빌드하여&nbsp;컨테이너를 생성해 줄것이다.<br>여기서 여러 용어들이 나오는데...<br>용어들에 대한 설명이다<br><img alt=\"Pasted image 20250221114345.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114345.png\" target=\"_self\"><br><img alt=\"Pasted image 20250221114353.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114353.png\" target=\"_self\"><br>Dockerfile을 생성하기에 앞서, .jar 파일을 생성해야한다.<br>gradle 이나 maven 을 사용하여 프로젝트를 빌드 할것이다.<br>여기서는 Maven 을 사용한다.<br><a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://maven.apache.org/download.cgi\" target=\"_self\">https://maven.apache.org/download.cgi</a><br>홈페이지에서 직접 다운받아도 되고, brew를 사용해 각자 다운받으면 된다.<br>이후에, 프로젝트의 루트 디렉토리에서 'mvn install' 명령어를 사용하여 프로젝트를 빌드 할 수 있다.<br><img alt=\"Pasted image 20250221114400.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114400.png\" target=\"_self\"><br>빌드를 마치면, 프로젝트 내에&nbsp;target이 생성 됨을 볼 수 있다.<br><img alt=\"Pasted image 20250221114406.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114406.png\" target=\"_self\"><br>그 후, 루트 디렉토리에 'Dockerfile' 을 생성하여 준다.<br><img alt=\"Pasted image 20250221114411.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114411.png\" target=\"_self\"><br><img alt=\"Pasted image 20250221114423.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114423.png\" target=\"_self\"><br>Dockerfile 생성시 사용되는 명령어들은 다음과 같다.<br><img alt=\"Pasted image 20250221114428.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114428.png\" target=\"_self\"><br>나는 기본적인 옵션만 넣어서 test 하였다.<br>FROM 태그에 나의 java(jdk)버전을 확인하여 baseimage를 지정하고<br>\n( dockerRpository에서 다양한 이미지를 가져다 사용할 수 있으므로 찾아보세요)<br>ADD 태그에 maven을 통해 생성된 .jar파일과 경로를 입력한다<br>이외에 태그는 자유롭게 작성해 줄 수 있다.<br>프롬프트에 <br>docker build -t ${\"도커파일 명\"} ${\"디렉토리\"} <br>형식으로 사용할 수 있다.<br><img alt=\"Pasted image 20250221114434.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114434.png\" target=\"_self\"><br><img alt=\"Pasted image 20250221114439.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114439.png\" target=\"_self\"><br>해당 단계를 마치면 이미지가 생성된 것을 확인할 수 있다.<br>프롬프트에 <br>docker run -p ${사용할 포트번호} ${이미지 명}\n<br>을 사용한다.<br>본인은 8000번 포트를 직접 사용하여 8080포트인 도커 컨테이너에 접근할 것이다.<br><img alt=\"Pasted image 20250221114443.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114443.png\" target=\"_self\"><br>짜잔!&nbsp; &nbsp;정상적으로 동작한다.<br>\n<img alt=\"Pasted image 20250221114501.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114501.png\" target=\"_self\"><br>\n<img alt=\"Pasted image 20250221114448.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114448.png\" target=\"_self\"><br>docker는 다운받아져 있는걸로 알고..&nbsp;<br>'docker pull redis:latest' 명령어를 사용하여 최신버전의 redis를 받아온다.<br><img alt=\"Pasted image 20250221114522.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114522.png\" target=\"_self\"><br>그 다음, <br>docker network create redis-network --driver bridge\n<br>명령어를 사용하여 네트워크를 생성해 준다.<br>※ docker network : 컨테이너간의 통신 및 데이터 공유를 위한 가상 네트워크<br><img alt=\"Pasted image 20250221114527.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114527.png\" target=\"_self\"><br>이제, 'sudo vim redis.conf' 명령어를 사용하여 redis.conf 파일을 수정하여 설정을 잡아준다.<br><img alt=\"Pasted image 20250221114531.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114531.png\" target=\"_self\"><br>docker run \\ -d \\ --name redis \\ -p 6379:6379 \\ --network redis-network \\ -v ~/${데이터를 저장할 파일 경로} /redis.conf:/etc/redis/redis.conf \\ -v redis_data:/data \\\nredis:latest redis-server /etc/redis/redis.conf\n<br><img alt=\"Pasted image 20250221114535.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114535.png\" target=\"_self\"><br>포트번호와, 방금 설정한 네트워크, 데이터 저장 경로를 잡아준다.<br>이렇게 설정을 마쳤으면 redis 이미지가 생성되었음을 확인할 수 있다.<br><img alt=\"Pasted image 20250221114539.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114539.png\" target=\"_self\"><br>최종적으로 생성된 이미지로 컨테이너를 만들어 준다.<br><img alt=\"Pasted image 20250221114543.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114543.png\" target=\"_self\"><br>docker run --name myredis \\ -p 6379:6379 \\ --network redis-network \\ -v /Users/lts/Desktop/docker/redis:/data \\ -d redis:latest redis-server \\ --appendonly yes\n<br><img alt=\"Pasted image 20250221114600.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114600.png\" target=\"_self\"><br>컨테이너까지 생성완료!<br>docker exec -it myredis redis-cli --raw\n<br>명령어를 사용하여 컨테이너 실행<br><img alt=\"Pasted image 20250221114605.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114605.png\" target=\"_self\"><br>프롬프트를 보면 정상적으로 접속됨을 확인할 수 있다.<br>※ 해당 프로젝트는 Maven 을 사용한 프로젝트이다.<br>spring.cache.type=redis\nspring.redis.host=localhost\nspring.redis.port=6379\n<br><img alt=\"Pasted image 20250221114610.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114610.png\" target=\"_self\"><br><img alt=\"Pasted image 20250221114616.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114616.png\" target=\"_self\"><br>import org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.data.redis.serializer.StringRedisSerializer; @Configuration\npublic class RedisConfig { @Value(\"${spring.redis.host}\") private String host; @Value(\"${spring.redis.port}\") private int port; @Bean public LettuceConnectionFactory redisConnectionFactory() { return new LettuceConnectionFactory(host, port); } @Bean public RedisTemplate&lt;String, Object&gt; redisTemplate() { RedisTemplate&lt;String, Object&gt; redisTemplate = new RedisTemplate&lt;&gt;(); redisTemplate.setKeySerializer(new StringRedisSerializer()); redisTemplate.setValueSerializer(new StringRedisSerializer()); redisTemplate.setConnectionFactory(redisConnectionFactory()); return redisTemplate; } @Bean public StringRedisTemplate stringRedisTemplate() { final StringRedisTemplate stringRedisTemplate = new StringRedisTemplate(); stringRedisTemplate.setKeySerializer(new StringRedisSerializer()); stringRedisTemplate.setValueSerializer(new StringRedisSerializer()); stringRedisTemplate.setConnectionFactory(redisConnectionFactory()); return stringRedisTemplate; }\n}\n<br><img alt=\"Pasted image 20250221114621.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114621.png\" target=\"_self\"><br>import lombok.AllArgsConstructor; import lombok.Builder;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.redis.core.RedisHash;\nimport org.springframework.data.redis.core.index.Indexed; import java.time.LocalDateTime; @Getter\n@RedisHash(value = \"resultHistory\", timeToLive = 3600) // Redis Repository 사용을 위한\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ResultHistory { @Id private String id; @Indexed // 필드 값으로 데이터를 찾을 수 있도록 설정 (findByAccessToken) private String ip; private String originalText; private String translatedText; @Indexed private LocalDateTime createDateTime; @Builder public ResultHistory(String ip, String originalText, String translatedText, LocalDateTime createDateTime) { this.ip = ip; this.originalText = originalText; this.translatedText = translatedText; this.createDateTime = createDateTime; }\n}\n<br><img alt=\"Pasted image 20250221114628.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114628.png\" target=\"_self\"><br>import com.teamTS.funfun.model.ResultHistory;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository; import java.util.List;\nimport java.util.Optional; @Repository\npublic interface ResultRedisRepository extends JpaRepository&lt;ResultHistory, String&gt; { Optional&lt;List&lt;ResultHistory&gt;&gt; findByIpOrderByCreateDateTimeAsc(String ip);\n}\n<br><img alt=\"Pasted image 20250221114633.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114633.png\" target=\"_self\"><br> @GetMapping(\"/hello\") public String HelloWorld(Model model) { redisConnectionTest(); List&lt;TestModel&gt; tm = testRepository.getTestData(); model.addAttribute(\"data\", tm.get(0).getTitle()); return \"home/homeView\"; } void redisConnectionTest() { final String key = \"a\"; final String data = \"1\"; final ValueOperations&lt;String, String&gt; valueOperations = redisTemplate.opsForValue(); valueOperations.set(key, data); final String s = valueOperations.get(key); } }\n<br><img alt=\"Pasted image 20250221114638.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114638.png\" target=\"_self\"><br>Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.\n<br>원인은 기존 MapperRepository와 Redis용 JpaRepository에서<br>@Repository\n<br>해당 어노테이션을 사용하여 충돌한듯 하다.<br>\n이럴때는<br>spring.main.allow-bean-definition-overriding=true\n<br>한 줄을 추가하여 준다.<br><img alt=\"Pasted image 20250221114644.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114644.png\" target=\"_self\"><br>성공적인 실행.<br><img alt=\"Pasted image 20250221114648.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250221114648.png\" target=\"_self\"><br>&nbsp;이후 ' keys * ' 명령어를 사용하여 데이터가 정상적으로 추가된 것을 확인할 수 있다.<br>","aliases":[],"tags":["#Tools","#도커","#Docker","#SPRING","#Boot","#Redis"],"headers":[{"heading":"📘 SpringBoot & Docker + Reids 연동","level":1,"id":"📘 SpringBoot &amp; Docker + Reids 연동"},{"heading":"→ 여기로 🐋 docker","level":1,"id":"→_**여기로**_[[🐋_docker]]"},{"heading":"이번 시간에는 스프링 부트 프로젝트에 Docker를 연동하여 local 서버를 만들어보겠다.","level":4,"id":"이번_시간에는_스프링_부트_프로젝트에_Docker를_연동하여_local_서버를_만들어보겠다."},{"heading":"1. Docker다운로드 받기","level":1,"id":"1._Docker다운로드_받기"},{"heading":"2.  Spring 프로젝트 내에 DockerFile 생성하기","level":2,"id":"2. _Spring_프로젝트_내에_DockerFile_생성하기"},{"heading":"아주 기본적인 Spring 프로젝트이다.","level":4,"id":"아주_기본적인_Spring_프로젝트이다."},{"heading":"3. dockerfile 을 실행하여 이미지를 생성한다.","level":2,"id":"3._dockerfile_을_실행하여_이미지를_생성한다."},{"heading":"4. 마지막으로, 생성된 이미지을 RUN 명령어를 통해  컨테이너로 실행하기!!","level":2,"id":"4._마지막으로,_생성된_이미지을_RUN_명령어를_통해 _컨테이너로_실행하기!!"},{"heading":"- 같은 방법으로 Redis 연동하기!(실습)","level":1,"id":"+_*같은_방법으로_Redis_연동하기!(실습)*"},{"heading":"Step 1. Docker를 이용하여 Redis를 받아보자!","level":2,"id":"Step_1._Docker를_이용하여_Redis를_받아보자!"},{"heading":"Step 2. Redis와 Spring Boot 연동하기","level":2,"id":"Step_2._Redis와_Spring_Boot_연동하기"},{"heading":"먼저 application.properties 에 redis 포트를 추가하여준다","level":3,"id":"먼저_application.properties_에_redis_포트를_추가하여준다"},{"heading":"그 다음 config 파일을 작성하여준다.","level":3,"id":"그_다음_config_파일을_작성하여준다."},{"heading":"Model과 Repository 도 작성해준다.","level":3,"id":"Model과_Repository_도_작성해준다."},{"heading":"controller 에 간단한 테스트 코드를 작성하여 값을 확인해보자!","level":3,"id":"controller_에_간단한_테스트_코드를_작성하여_값을_확인해보자!"},{"heading":"그런데...","level":2,"id":"**그런데...**"},{"heading":"대충 빈 생성이 중복으로 발생하여 생긴 오류인듯 하다..","level":4,"id":"대충_빈_생성이_중복으로_발생하여_생긴_오류인듯_하다.."},{"heading":"application.properties 에","level":3,"id":"application.properties_에"},{"heading":"-> AWS로 배포하기! 🌥 aws(EC2)셋팅부터 배포까지","level":1,"id":"->_AWS로_배포하기!_[[🌥_aws(EC2)셋팅부터_배포까지]]"}],"backlinks":[],"links":["?query=tag:Tools","?query=tag:%EB%8F%84%EC%BB%A4","?query=tag:Docker","?query=tag:SPRING","?query=tag:Boot","?query=tag:Redis","tools/docker/🐋-docker.html","https://docs.docker.com/desktop/install/mac-install/","https://maven.apache.org/download.cgi","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html","tools/docker/📘-springboot-&-docker-+-reids-연동.html#📘 SpringBoot &amp; Docker + Reids 연동","tools/docker/📘-springboot-&-docker-+-reids-연동.html#→_**여기로**_[[🐋_docker]]","tools/docker/📘-springboot-&-docker-+-reids-연동.html#이번_시간에는_스프링_부트_프로젝트에_Docker를_연동하여_local_서버를_만들어보겠다.","tools/docker/📘-springboot-&-docker-+-reids-연동.html#1._Docker다운로드_받기","tools/docker/📘-springboot-&-docker-+-reids-연동.html#2. _Spring_프로젝트_내에_DockerFile_생성하기","tools/docker/📘-springboot-&-docker-+-reids-연동.html#아주_기본적인_Spring_프로젝트이다.","tools/docker/📘-springboot-&-docker-+-reids-연동.html#3._dockerfile_을_실행하여_이미지를_생성한다.","tools/docker/📘-springboot-&-docker-+-reids-연동.html#4._마지막으로,_생성된_이미지을_RUN_명령어를_통해 _컨테이너로_실행하기!!","tools/docker/📘-springboot-&-docker-+-reids-연동.html#+_*같은_방법으로_Redis_연동하기!(실습)*","tools/docker/📘-springboot-&-docker-+-reids-연동.html#Step_1._Docker를_이용하여_Redis를_받아보자!","tools/docker/📘-springboot-&-docker-+-reids-연동.html#Step_2._Redis와_Spring_Boot_연동하기","tools/docker/📘-springboot-&-docker-+-reids-연동.html#먼저_application.properties_에_redis_포트를_추가하여준다","tools/docker/📘-springboot-&-docker-+-reids-연동.html#그_다음_config_파일을_작성하여준다.","tools/docker/📘-springboot-&-docker-+-reids-연동.html#Model과_Repository_도_작성해준다.","tools/docker/📘-springboot-&-docker-+-reids-연동.html#controller_에_간단한_테스트_코드를_작성하여_값을_확인해보자!","tools/docker/📘-springboot-&-docker-+-reids-연동.html#**그런데...**","tools/docker/📘-springboot-&-docker-+-reids-연동.html#대충_빈_생성이_중복으로_발생하여_생긴_오류인듯_하다..","tools/docker/📘-springboot-&-docker-+-reids-연동.html#application.properties_에","tools/docker/📘-springboot-&-docker-+-reids-연동.html#->_AWS로_배포하기!_[[🌥_aws(EC2)셋팅부터_배포까지]]"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/tools/docker/📘-springboot-&-docker-+-reids-연동.html","pathToRoot":"../..","createdTime":1740105237396,"modifiedTime":1740113417219,"sourceSize":10946,"sourcePath":"Tools/docker/📘 SpringBoot & Docker + Reids 연동.md","exportPath":"tools/docker/📘-springboot-&-docker-+-reids-연동.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20250221114306.png","사진-및-문서/pasted-image-20250221114324.png","사진-및-문서/pasted-image-20250221114327.png","사진-및-문서/pasted-image-20250221114334.png","사진-및-문서/pasted-image-20250221114339.png","사진-및-문서/pasted-image-20250221114345.png","사진-및-문서/pasted-image-20250221114353.png","사진-및-문서/pasted-image-20250221114400.png","사진-및-문서/pasted-image-20250221114406.png","사진-및-문서/pasted-image-20250221114411.png","사진-및-문서/pasted-image-20250221114423.png","사진-및-문서/pasted-image-20250221114428.png","사진-및-문서/pasted-image-20250221114434.png","사진-및-문서/pasted-image-20250221114439.png","사진-및-문서/pasted-image-20250221114443.png","사진-및-문서/pasted-image-20250221114501.png","사진-및-문서/pasted-image-20250221114448.png","사진-및-문서/pasted-image-20250221114522.png","사진-및-문서/pasted-image-20250221114527.png","사진-및-문서/pasted-image-20250221114531.png","사진-및-문서/pasted-image-20250221114535.png","사진-및-문서/pasted-image-20250221114539.png","사진-및-문서/pasted-image-20250221114543.png","사진-및-문서/pasted-image-20250221114600.png","사진-및-문서/pasted-image-20250221114605.png","사진-및-문서/pasted-image-20250221114610.png","사진-및-문서/pasted-image-20250221114616.png","사진-및-문서/pasted-image-20250221114621.png","사진-및-문서/pasted-image-20250221114628.png","사진-및-문서/pasted-image-20250221114633.png","사진-및-문서/pasted-image-20250221114638.png","사진-및-문서/pasted-image-20250221114644.png","사진-및-문서/pasted-image-20250221114648.png"]},"tools/🎵-obsidian.html":{"title":"🎵 Obsidian","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:Tools\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Tools</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:메모\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#메모</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:Obsidian\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Obsidian</a> <br> <a href=\"http://lts.kr?query=tag:Tools\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Tools\">#Tools</a> <a href=\"http://lts.kr?query=tag:메모\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#메모\">#메모</a> <a href=\"http://lts.kr?query=tag:Obsidian\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Obsidian\">#Obsidian</a><br>\n<br>옵시디언은 Markdow기반의 노트 작성 및 지식 관리 어플이다.\n<br>특히, 데이터 시각화 및 개인지식관리에 뛰어나다.\n<br>\n<br>옵시디언은 Markdown 형식을 기반으로 노트를 작성하며, 간단한 텍스트 포맷팅(굵게, 기울임, 리스트, 링크 등)이 가능.\n<br>.md 파일로 저장되어 데이터 이동 및 백업이 자유로움.\n<br>\n<br>옵시디언은 위키 스타일의 링크([[노트 제목]])를 사용하여 노트 간 연결이 가능.\n<br>노트 간의 관계를 자동으로 분석하여 연결된 구조를 보여줌.\n<br>\n<br>연결된 노트들을 시각적으로 보여주는 그래프 뷰 제공.\n<br>노트 간의 관계를 네트워크 그래프 형태로 표현하여 지식 네트워크 구축에 용이.\n<br>\n<br>기본 기능 외에도 다양한 플러그인을 추가하여 확장 가능.\n<br>공식 플러그인 및 커뮤니티에서 제공하는 다양한 기능 추가 가능. <br>예: 캘린더, 태그 관리, LaTeX 지원, AI 플러그인 등. <br>\n<br>클라우드가 아닌 로컬 저장 방식을 기본으로 하여 데이터 소유권을 보장.\n<br>추가적으로 Obsidian Sync를 사용하면 여러 기기 간 동기화 가능.\n<br>\n<br>Windows, macOS, Linux, iOS, Android에서 사용 가능.\n<br>모바일에서도 원활한 노트 작성과 검색이 가능.\n<br>\n<br>자주 사용하는 노트 형식을 템플릿으로 저장하여 반복 사용 가능.\n<br>태그(#태그이름)를 활용하여 노트 분류 및 검색 가능.\n<br>\n<br>특정 키워드를 기반으로 노트 검색 가능.\n<br>정규 표현식(Regex) 지원으로 복잡한 검색도 가능\n<br><img alt=\"Pasted image 20250218145702.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218145702.png\" target=\"_self\"><br><img alt=\"Pasted image 20250218145823.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250218145823.png\" target=\"_self\"><br>노션이란? - 올인원 생산성 및 노트 관리 도구로, 노트 작성, 데이터베이스, 프로젝트 관리, 협업 기능을 통합적으로 제공하는 플랫폼이다<br>단편적으로 기능의 차이를 보면 다음과 같다.<br>\n<br>옵시디언의 최대 장점으로는 다양한 유저 커스텀 플러그인이 있다.\n<br>노션에서 기본으로 지원하는 캘린더, 데이터베이스, 클라우드, 템플릿 등을 모두 사용 가능하다.\n<br>또한, 해당되는 플러그인 들은 유저들에 의해 지속적으로 업데이트 된다.\n<br>EX) ChatGPT / HTML Export / Git 등등..<br>\n<br>옵시디언은 노션과 달리 로컬 네이티브앱으로 인터넷 연결없이도 사용이 가능하다.\n<br>로컬환경에서 Markdown문법만으로 문서가 작성되기 때문에 속도가 무척 빠르고 쾌적하다.\n<br>또한, 로컬 저장 방식으로 직접적인 데이터의 소유가 가능하다. → 보안이 뛰어나다고 볼 수 있다.\n<br>\n<br>옵시디언은 기본적으로 모든 기능이 제한없이 무료이다.<br>\n! 유료 서비스인 Obsidian Sync(클라우드 동기화 서비스) 가 있지만, Git을 통한 형상관리를 한다면 전혀 사용할 필요가 없다\n<br>따라서, 용량에 구애받지 않고 무제한 확장이 가능하다고 볼 수 있다.\n<br>\n<br>그럼에도 노션이 가지는 장점도 만만치 않으며, 옵시디언의 단점 또한 존재한다.\n<br>즉, 각자의 작업 환경 및 취향에 맞추어서 최적의 Tool을 선택하는 것이 바람직 하다고 볼 수 있다.\n<br>나는 그래도 옵시디언이다.","aliases":[],"tags":["#Tools","#메모","#Obsidian"],"headers":[{"heading":"🎵 Obsidian","level":1,"id":"🎵 Obsidian"},{"heading":"개요","level":1,"id":"개요"},{"heading":"옵시디언(Obsidian)이란 무엇인가?","level":2,"id":"옵시디언(Obsidian)이란_무엇인가?"},{"heading":"주요 기능엔 어떠한 것이 있나?","level":2,"id":"주요_기능엔_어떠한_것이_있나?"},{"heading":"✅ Markdown 기반 노트 작성","level":3,"id":"**✅_Markdown_기반_노트_작성**"},{"heading":"✅ 노트 간 연결 (Linking)","level":3,"id":"**✅_노트_간_연결_(Linking)**"},{"heading":"✅ 그래프 뷰 (Graph View)","level":3,"id":"**✅_그래프_뷰_(Graph_View)**"},{"heading":"✅ 플러그인 시스템 지원","level":3,"id":"**✅_플러그인_시스템_지원**"},{"heading":"✅ 로컬 저장 방식 (데이터 소유권)","level":3,"id":"**✅_로컬_저장_방식_(데이터_소유권)**"},{"heading":"✅ 다양한 플랫폼 지원","level":3,"id":"**✅_다양한_플랫폼_지원**"},{"heading":"✅ 템플릿 및 태그 기능","level":3,"id":"**✅_템플릿_및_태그_기능**"},{"heading":"✅ 고급 검색 기능","level":3,"id":"**✅_고급_검색_기능**"},{"heading":"이렇게 칙칙한 옵시디언도 플러그인을 통한 커스텀을 거치면..","level":5,"id":"이렇게_칙칙한_옵시디언도_플러그인을_통한_커스텀을_거치면.."},{"heading":"몰라보게 달라진다.","level":5,"id":"몰라보게_달라진다."},{"heading":"Obsidian VS Notion","level":1,"id":"Obsidian_**VS**_Notion"},{"heading":"노션과의 비교","level":2,"id":"노션과의_비교"},{"heading":"내가 Obsidian을 선택한 이유?","level":1,"id":"내가_Obsidian을_선택한_이유?"},{"heading":"첫 번째","level":2,"id":"첫_번째"},{"heading":"옵시디언의 다양한 플러그인","level":3,"id":"옵시디언의_다양한_플러그인"},{"heading":"Git 플러그인을 통해 형상관리 및 통합, 배포가 가능하다.","level":4,"id":"Git_플러그인을_통해_형상관리_및_통합,_배포가_가능하다."},{"heading":"두 번째","level":2,"id":"두_번째"},{"heading":"네이티브 앱만의 장점","level":3,"id":"네이티브_앱만의_장점"},{"heading":"세 번째","level":2,"id":"세_번째"},{"heading":"무료!","level":3,"id":"무료!"},{"heading":"결론","level":1,"id":"결론"}],"backlinks":[],"links":["?query=tag:Tools","?query=tag:%EB%A9%94%EB%AA%A8","?query=tag:Obsidian","tools/🎵-obsidian.html#🎵 Obsidian","tools/🎵-obsidian.html#개요","tools/🎵-obsidian.html#옵시디언(Obsidian)이란_무엇인가?","tools/🎵-obsidian.html#주요_기능엔_어떠한_것이_있나?","tools/🎵-obsidian.html#**✅_Markdown_기반_노트_작성**","tools/🎵-obsidian.html#**✅_노트_간_연결_(Linking)**","tools/🎵-obsidian.html#**✅_그래프_뷰_(Graph_View)**","tools/🎵-obsidian.html#**✅_플러그인_시스템_지원**","tools/🎵-obsidian.html#**✅_로컬_저장_방식_(데이터_소유권)**","tools/🎵-obsidian.html#**✅_다양한_플랫폼_지원**","tools/🎵-obsidian.html#**✅_템플릿_및_태그_기능**","tools/🎵-obsidian.html#**✅_고급_검색_기능**","tools/🎵-obsidian.html#이렇게_칙칙한_옵시디언도_플러그인을_통한_커스텀을_거치면..","tools/🎵-obsidian.html#몰라보게_달라진다.","tools/🎵-obsidian.html#Obsidian_**VS**_Notion","tools/🎵-obsidian.html#노션과의_비교","tools/🎵-obsidian.html#내가_Obsidian을_선택한_이유?","tools/🎵-obsidian.html#첫_번째","tools/🎵-obsidian.html#옵시디언의_다양한_플러그인","tools/🎵-obsidian.html#Git_플러그인을_통해_형상관리_및_통합,_배포가_가능하다.","tools/🎵-obsidian.html#두_번째","tools/🎵-obsidian.html#네이티브_앱만의_장점","tools/🎵-obsidian.html#세_번째","tools/🎵-obsidian.html#무료!","tools/🎵-obsidian.html#결론"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/tools/🎵-obsidian.html","pathToRoot":"..","createdTime":1739863713458,"modifiedTime":1739954777611,"sourceSize":5657,"sourcePath":"Tools/🎵 Obsidian.md","exportPath":"tools/🎵-obsidian.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20250218145702.png","사진-및-문서/pasted-image-20250218145823.png"]},"tools/🪓-도구.html":{"title":"🪓 도구","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:Tools\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#Tools</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:모음\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#모음</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:도구\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#도구</a> <br> <a href=\"http://lts.kr?query=tag:Tools\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#Tools\">#Tools</a> <a href=\"http://lts.kr?query=tag:모음\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#모음\">#모음</a> <a href=\"http://lts.kr?query=tag:도구\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#도구\">#도구</a><br>툴 모음\n제가 사용하고 있는 편리/유용한 TOOL을 소개하고 설명하는 곳 입니다.\n<br>\n<br><a data-href=\"🍊 aws EC2란\" href=\"http://lts.kr/tools/aws/🍊-aws-ec2란.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🍊 aws EC2란</a>\n<br><a data-href=\"🌥 aws(EC2)셋팅부터 배포까지\" href=\"http://lts.kr/tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🌥 aws(EC2)셋팅부터 배포까지</a>\n<br><a data-href=\"🍌 Elastic IP(탄력적 IP)란\" href=\"http://lts.kr/tools/aws/🍌-elastic-ip(탄력적-ip)란.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🍌 Elastic IP(탄력적 IP)란</a>\n<br>\n<br><a data-href=\"🐋 docker\" href=\"http://lts.kr/tools/docker/🐋-docker.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🐋 docker</a>\n<br><a data-href=\"📘 SpringBoot &amp; Docker + Reids 연동\" href=\"http://lts.kr/tools/docker/📘-springboot-&amp;-docker-+-reids-연동.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">📘 SpringBoot &amp; Docker + Reids 연동</a>\n<br>\n<br><a data-href=\"🎵 Obsidian\" href=\"http://lts.kr/tools/🎵-obsidian.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">🎵 Obsidian</a>\n<br><a data-href=\"👻 Obsidian 정적호스팅 CICD 과정\" href=\"http://lts.kr/project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">👻 Obsidian 정적호스팅 CICD 과정</a>\n<br><a data-href=\"⛈ Obsidian-AWS연동\" href=\"http://lts.kr/project/note-ci_cd/⛈-obsidian-aws연동.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">⛈ Obsidian-AWS연동</a>\n<br>\n<br>🩹추가예정!!","aliases":[],"tags":["#Tools","#모음","#도구"],"headers":[{"heading":"🪓 도구","level":1,"id":"🪓 도구"},{"heading":"☁ AWS","level":2,"id":"☁_*AWS*"},{"heading":"AWS cloude","level":3,"id":"AWS_cloude"},{"heading":"🐳 Docker","level":2,"id":"🐳_*Docker*"},{"heading":"docker app","level":3,"id":"docker_app"},{"heading":"🐻 Obsidian","level":2,"id":"*🐻_Obsidian*"},{"heading":"옵시디언 App","level":3,"id":"옵시디언_App"},{"heading":"plugin","level":3,"id":"plugin"}],"backlinks":[],"links":["?query=tag:Tools","?query=tag:%EB%AA%A8%EC%9D%8C","?query=tag:%EB%8F%84%EA%B5%AC","tools/aws/🍊-aws-ec2란.html","tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html","tools/aws/🍌-elastic-ip(탄력적-ip)란.html","tools/docker/🐋-docker.html","tools/docker/📘-springboot-&-docker-+-reids-연동.html","tools/🎵-obsidian.html","project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html","project/note-ci_cd/⛈-obsidian-aws연동.html","tools/🪓-도구.html#🪓 도구","tools/🪓-도구.html#☁_*AWS*","tools/🪓-도구.html#AWS_cloude","tools/🪓-도구.html#🐳_*Docker*","tools/🪓-도구.html#docker_app","tools/🪓-도구.html#*🐻_Obsidian*","tools/🪓-도구.html#옵시디언_App","tools/🪓-도구.html#plugin"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/tools/🪓-도구.html","pathToRoot":"..","createdTime":1740028927813,"modifiedTime":1741336333312,"sourceSize":573,"sourcePath":"Tools/🪓 도구.md","exportPath":"tools/🪓-도구.html","showInTree":true,"treeOrder":0,"attachments":[]},"index.html":{"title":"🏠 taesung's Blog","icon":"","description":"<a class=\"tag\" href=\"http://lts.kr/?query=tag:home\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#home</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:index\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#index</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:blog\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#blog</a> <a class=\"tag\" href=\"http://lts.kr/?query=tag:공부\" style=\"background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;\">#공부</a> <br> <a href=\"http://lts.kr?query=tag:home\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#home\">#home</a> <a href=\"http://lts.kr?query=tag:index\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#index\">#index</a> <a href=\"http://lts.kr?query=tag:blog\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#blog\">#blog</a> <a href=\"http://lts.kr?query=tag:공부\" class=\"tag is-unresolved\" target=\"_self\" rel=\"noopener nofollow\" data-href=\"#공부\">#공부</a><br><a data-tooltip-position=\"top\" aria-label=\"https://github.com/LeeTaeSung0628\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/LeeTaeSung0628\" target=\"_self\"><span alt=\"Pasted image 20250220144552.png\" src=\"Pasted image 20250220144552.png\" class=\"internal-embed media-embed image-embed is-loaded\" style=\"width: 220px; max-width: 100%;\"></span></a><img alt=\"Pasted image 20250220144552.png\" src=\"http://lts.kr/사진-및-문서/pasted-image-20250220144552.png\" style=\"width: 220px; max-width: 100%;\" target=\"_self\"><br>\n<a data-tooltip-position=\"top\" aria-label=\"https://github.com/LeeTaeSung0628\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/LeeTaeSung0628\" target=\"_self\"><font color=\"#ffffff\"></font></a>🔗git Hub ▶ ...<br><a data-tooltip-position=\"top\" aria-label=\"https://git.io/typing-svg\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://git.io/typing-svg\" target=\"_self\"></a><img alt=\"Typing SVG\" src=\"https://readme-typing-svg.demolab.com?font=Fira+Code&amp;pause=1000&amp;color=36A9F7&amp;random=false&amp;width=435&amp;lines=%EC%97%AC%EA%B8%B0%EB%8A%94+%EA%B3%B5%EB%B6%80%ED%95%98%EA%B3%A0%2C+%EA%B8%B0%EB%A1%9D%ED%95%98%EB%8A%94+%EA%B3%B3%EC%9E%85%EB%8B%88%EB%8B%A4\" referrerpolicy=\"no-referrer\" target=\"_self\" class=\"is-unresolved\"><br> <br> <br> <br> <br> <br> <br> <br> <br> <br>","aliases":[],"tags":["#home","#index","#blog","#공부"],"headers":[{"heading":"🏠 taesung's Blog","level":1,"id":"🏠 taesung's Blog"},{"heading":"Hi, there ","level":1,"id":"Hi,_there_<img_src=\"https//raw.githubusercontent.com/Tarikul-Islam-Anik/Animated-Fluent-Emojis/master/Emojis/Hand%20gestures/Hand%20with%20Fingers%20Splayed%20Light%20Skin%20Tone.png\"_alt=\"Hand_with_Fingers_Splayed_Light_Skin_Tone\"_width=\"25\"_height=\"25\"_/>"},{"heading":"💻 프로젝트 🖱Click!","level":1,"id":"[[💻_프로젝트]]_<font_color=\"#7f7f7f\"_size=3.5px>🖱Click!</font>"},{"heading":"🍃 Spring Batch⭐","level":2,"id":"🍃_**Spring_Batch**⭐"},{"heading":"〽 Spring AOP⭐","level":2,"id":"〽_**Spring_AOP**⭐"},{"heading":"🌍 Obsidian CI/CD","level":2,"id":"🌍_**Obsidian_CI/CD**"},{"heading":"💁 infra settings","level":2,"id":"💁_**infra_settings**"},{"heading":"📕 공부 🖱Click!","level":1,"id":"[[📕_공부]]_<font_color=\"#7f7f7f\"_size=3.5px>🖱Click!</font>"},{"heading":"🌺 Issue / TroubleShooting⭐","level":2,"id":"🌺_**Issue_/_TroubleShooting**⭐"},{"heading":"❄ Computer Science","level":2,"id":"❄_**Computer_Science**"},{"heading":"🧪 Coding Test","level":2,"id":"🧪_**Coding_Test**"},{"heading":"🧑‍🤝‍🧑 Company Seminar","level":2,"id":"🧑‍🤝‍🧑_**Company_Seminar**"},{"heading":"📔 license","level":2,"id":"📔_**license**"},{"heading":"🪓 도구 🖱Click!","level":1,"id":"[[🪓_도구]]_<font_color=\"#7f7f7f\"_size=3.5px>🖱Click!</font>"},{"heading":"🐻 Obsidian","level":2,"id":"🐻_**Obsidian**"},{"heading":"☁ AWS","level":2,"id":"☁_**AWS**"},{"heading":"🐋 docker","level":2,"id":"🐋_**docker**"},{"heading":"🏫 강의 🖱Click!","level":1,"id":"[[🏫_강의]]_<font_color=\"#7f7f7f\"_size=3.5px>🖱Click!</font>"},{"heading":"🐊 Spring Core Basic","level":2,"id":"🐊_**Spring_Core_Basic**"}],"backlinks":[],"links":["?query=tag:home","?query=tag:index","?query=tag:blog","?query=tag:%EA%B3%B5%EB%B6%80","https://github.com/LeeTaeSung0628","https://github.com/LeeTaeSung0628","https://git.io/typing-svg","project/💻-프로젝트.html","study/📕-공부.html","tools/🪓-도구.html","lectur/🏫-강의.html","index.html#🏠 taesung's Blog","index.html#Hi,_there_<img_src=\"https//raw.githubusercontent.com/Tarikul-Islam-Anik/Animated-Fluent-Emojis/master/Emojis/Hand%20gestures/Hand%20with%20Fingers%20Splayed%20Light%20Skin%20Tone.png\"_alt=\"Hand_with_Fingers_Splayed_Light_Skin_Tone\"_width=\"25\"_height=\"25\"_/>","index.html#[[💻_프로젝트]]_<font_color=\"#7f7f7f\"_size=3.5px>🖱Click!</font>","index.html#🍃_**Spring_Batch**⭐","index.html#〽_**Spring_AOP**⭐","index.html#🌍_**Obsidian_CI/CD**","index.html#💁_**infra_settings**","index.html#[[📕_공부]]_<font_color=\"#7f7f7f\"_size=3.5px>🖱Click!</font>","index.html#🌺_**Issue_/_TroubleShooting**⭐","index.html#❄_**Computer_Science**","index.html#🧪_**Coding_Test**","index.html#🧑‍🤝‍🧑_**Company_Seminar**","index.html#📔_**license**","index.html#[[🪓_도구]]_<font_color=\"#7f7f7f\"_size=3.5px>🖱Click!</font>","index.html#🐻_**Obsidian**","index.html#☁_**AWS**","index.html#🐋_**docker**","index.html#[[🏫_강의]]_<font_color=\"#7f7f7f\"_size=3.5px>🖱Click!</font>","index.html#🐊_**Spring_Core_Basic**"],"author":"taesung's Blog","coverImageURL":"","fullURL":"http://lts.kr/index.html","pathToRoot":"","createdTime":1739779810544,"modifiedTime":1741327956252,"sourceSize":1464,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":0,"attachments":["사진-및-문서/pasted-image-20250220144552.png"]}},"fileInfo":{"issue_troubleshooting/⏰-script-로딩-지연-이슈.html":{"createdTime":1740732986345,"modifiedTime":1741077398363,"sourceSize":4413,"sourcePath":"Issue_TroubleShooting/⏰ Script 로딩 지연 이슈.md","exportPath":"issue_troubleshooting/⏰-script-로딩-지연-이슈.html"},"issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html":{"createdTime":1740733661950,"modifiedTime":1741574975039,"sourceSize":5733,"sourcePath":"Issue_TroubleShooting/⚔ StckOverflow 이슈와 QueryDSL.md","exportPath":"issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html"},"issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html":{"createdTime":1740733250038,"modifiedTime":1741571757986,"sourceSize":10291,"sourcePath":"Issue_TroubleShooting/🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안.md","exportPath":"issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html"},"issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html":{"createdTime":1740733171557,"modifiedTime":1741077442587,"sourceSize":5286,"sourcePath":"Issue_TroubleShooting/🚦 Spring Batch(스레드와 트렌젝션) 트러블슈팅.md","exportPath":"issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html"},"lectur/🏫-강의.html":{"createdTime":1740115400228,"modifiedTime":1741591509697,"sourceSize":553,"sourcePath":"lectur/🏫 강의.md","exportPath":"lectur/🏫-강의.html"},"lectur/1.-객체-지향-설계와-스프링.html":{"createdTime":1740116090884,"modifiedTime":1741163322925,"sourceSize":11487,"sourcePath":"lectur/1. 객체 지향 설계와 스프링.md","exportPath":"lectur/1.-객체-지향-설계와-스프링.html"},"lectur/2.-스프링-핵심-원리-이해.html":{"createdTime":1741159406082,"modifiedTime":1741165171235,"sourceSize":375,"sourcePath":"lectur/2. 스프링 핵심 원리 이해.md","exportPath":"lectur/2.-스프링-핵심-원리-이해.html"},"project/hello-batch/✏-chunk_partitioning-batch-구조-드로잉.html":{"createdTime":1739843285680,"modifiedTime":1739844018493,"sourceSize":57706,"sourcePath":"project/hello Batch/✏ Chunk_Partitioning Batch 구조 드로잉.md","exportPath":"project/hello-batch/✏-chunk_partitioning-batch-구조-드로잉.html"},"project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html":{"createdTime":1739842773924,"modifiedTime":1741248951797,"sourceSize":20485,"sourcePath":"project/hello Batch/🏹 예치금 차액 비교 Spring Batch 리펙토링.md","exportPath":"project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html"},"project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html":{"createdTime":1739842890772,"modifiedTime":1741249020914,"sourceSize":6664,"sourcePath":"project/hello Batch/🏹 예치금 차액 비교 Spring Batch 리펙토링 부록.md","exportPath":"project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html"},"project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html":{"createdTime":1739783488509,"modifiedTime":1740733843766,"sourceSize":3178,"sourcePath":"project/hello marketing/👩‍👧‍👦 Analytics 공통모듈 ADMIN용 데이터 추출.md","exportPath":"project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html"},"project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html":{"createdTime":1739783337843,"modifiedTime":1741567717373,"sourceSize":19371,"sourcePath":"project/hello marketing/👩‍👧‍👦 marketing Analytics 공통모듈 제작기.md","exportPath":"project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html"},"project/note-ci_cd/⛈-obsidian-aws연동.html":{"createdTime":1740035686504,"modifiedTime":1740558017469,"sourceSize":95,"sourcePath":"project/note CI_CD/⛈ Obsidian-AWS연동.md","exportPath":"project/note-ci_cd/⛈-obsidian-aws연동.html"},"project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html":{"createdTime":1739783693575,"modifiedTime":1741573960767,"sourceSize":6394,"sourcePath":"project/note CI_CD/👻 Obsidian 정적호스팅 CICD 과정.md","exportPath":"project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html"},"project/💻-프로젝트.html":{"createdTime":1740028413454,"modifiedTime":1741241128511,"sourceSize":763,"sourcePath":"project/💻 프로젝트.md","exportPath":"project/💻-프로젝트.html"},"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html":{"createdTime":1739777477564,"modifiedTime":1740028264015,"sourceSize":52862,"sourcePath":"study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 키워드.md","exportPath":"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html"},"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html":{"createdTime":1741575459595,"modifiedTime":1741592944477,"sourceSize":5238,"sourcePath":"study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 프로그래밍-제어문.md","exportPath":"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html"},"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html":{"createdTime":1740464273334,"modifiedTime":1741575034597,"sourceSize":13348,"sourcePath":"study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 SQL 문제.md","exportPath":"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html"},"study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html":{"createdTime":1739783025899,"modifiedTime":1739946883587,"sourceSize":21325,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 1과목 - 소프트웨어 설계.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html"},"study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html":{"createdTime":1739783025899,"modifiedTime":1739946885204,"sourceSize":11745,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 2과목 - 소프트웨어 개발.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html"},"study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html":{"createdTime":1739783025899,"modifiedTime":1739946886923,"sourceSize":11355,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 3과목 - 데이터베이스 구축.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html"},"study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html":{"createdTime":1739783025899,"modifiedTime":1739946888780,"sourceSize":25268,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 4과목 - 프로그래밍 언어 활용.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html"},"study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html":{"createdTime":1739783043089,"modifiedTime":1739946892799,"sourceSize":21328,"sourcePath":"study/정보처리기사/정보처리기사 필기/🥈 필기 5과목 - 정보시스템 구축관리.md","exportPath":"study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html"},"study/커리큘럼/🆕-dev-커리큘럼.html":{"createdTime":1740017929179,"modifiedTime":1740027066919,"sourceSize":69,"sourcePath":"study/커리큘럼/🆕 Dev 커리큘럼.md","exportPath":"study/커리큘럼/🆕-dev-커리큘럼.html"},"study/coding-test/👽-algorithm.html":{"createdTime":1740031282530,"modifiedTime":1740107593302,"sourceSize":140,"sourcePath":"study/Coding Test/👽 Algorithm.md","exportPath":"study/coding-test/👽-algorithm.html"},"study/coding-test/🤠-coding-test-풀이-모음.html":{"createdTime":1740030994816,"modifiedTime":1740032047241,"sourceSize":673,"sourcePath":"study/Coding Test/🤠 Coding Test 풀이 모음.md","exportPath":"study/coding-test/🤠-coding-test-풀이-모음.html"},"study/cs/☕-java-,-oop.html":{"createdTime":1739844224869,"modifiedTime":1739946524872,"sourceSize":36029,"sourcePath":"study/CS/☕ JAVA , OOP.md","exportPath":"study/cs/☕-java-,-oop.html"},"study/cs/🍃-spring.html":{"createdTime":1739844578975,"modifiedTime":1739946652730,"sourceSize":46710,"sourcePath":"study/CS/🍃 Spring.md","exportPath":"study/cs/🍃-spring.html"},"study/cs/🎩-devops.html":{"createdTime":1739844345143,"modifiedTime":1739946867084,"sourceSize":14371,"sourcePath":"study/CS/🎩 DevOps.md","exportPath":"study/cs/🎩-devops.html"},"study/cs/🐞-etc.html":{"createdTime":1739844790888,"modifiedTime":1739946635882,"sourceSize":3884,"sourcePath":"study/CS/🐞 etc.md","exportPath":"study/cs/🐞-etc.html"},"study/cs/📔-database.html":{"createdTime":1739844411985,"modifiedTime":1741077360007,"sourceSize":19424,"sourcePath":"study/CS/📔 DataBase.md","exportPath":"study/cs/📔-database.html"},"study/cs/📭-server.html":{"createdTime":1739844706654,"modifiedTime":1739946645157,"sourceSize":6987,"sourcePath":"study/CS/📭 Server.md","exportPath":"study/cs/📭-server.html"},"study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html":{"createdTime":1739950661685,"modifiedTime":1739951453006,"sourceSize":7041,"sourcePath":"study/Dev Seminar/🍂 JPA, Mybatis , Dead Lock.md","exportPath":"study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html"},"study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html":{"createdTime":1739950797888,"modifiedTime":1739951081414,"sourceSize":6184,"sourcePath":"study/Dev Seminar/📔 DB 테이블 설계, 어떻게 하는게 옳은 방법인가.md","exportPath":"study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html"},"study/dev-seminar/🔹-tdd에-대하여.html":{"createdTime":1739950748159,"modifiedTime":1739951382850,"sourceSize":13216,"sourcePath":"study/Dev Seminar/🔹 TDD에 대하여.md","exportPath":"study/dev-seminar/🔹-tdd에-대하여.html"},"study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html":{"createdTime":1739950696311,"modifiedTime":1739951282911,"sourceSize":11984,"sourcePath":"study/Dev Seminar/🔻 Redis 캐쉬 전략 - hello 서비스에 적용하여 성능개선 가능성.md","exportPath":"study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html"},"study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html":{"createdTime":1739950706177,"modifiedTime":1740127908434,"sourceSize":9716,"sourcePath":"study/Dev Seminar/🥗 Spring Security_토큰-세션-쿠키-JWT 에 대하여.md","exportPath":"study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html"},"study/dev-seminar/🪕-jpa-에-대한-고찰.html":{"createdTime":1739950614572,"modifiedTime":1739951494022,"sourceSize":9300,"sourcePath":"study/Dev Seminar/🪕 JPA 에 대한 고찰.md","exportPath":"study/dev-seminar/🪕-jpa-에-대한-고찰.html"},"study/📕-공부.html":{"createdTime":1740028632740,"modifiedTime":1741575458535,"sourceSize":1558,"sourcePath":"study/📕 공부.md","exportPath":"study/📕-공부.html"},"tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html":{"createdTime":1740105237396,"modifiedTime":1740361077682,"sourceSize":9994,"sourcePath":"Tools/aws/🌥 aws(EC2)셋팅부터 배포까지.md","exportPath":"tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html"},"tools/aws/🍊-aws-ec2란.html":{"createdTime":1740105237396,"modifiedTime":1740361069051,"sourceSize":3324,"sourcePath":"Tools/aws/🍊 aws EC2란.md","exportPath":"tools/aws/🍊-aws-ec2란.html"},"tools/aws/🍌-elastic-ip(탄력적-ip)란.html":{"createdTime":1740361053654,"modifiedTime":1740646202048,"sourceSize":1519,"sourcePath":"Tools/aws/🍌 Elastic IP(탄력적 IP)란.md","exportPath":"tools/aws/🍌-elastic-ip(탄력적-ip)란.html"},"tools/docker/🐋-docker.html":{"createdTime":1740105237396,"modifiedTime":1740108237156,"sourceSize":3097,"sourcePath":"Tools/docker/🐋 docker.md","exportPath":"tools/docker/🐋-docker.html"},"tools/docker/📘-springboot-&-docker-+-reids-연동.html":{"createdTime":1740105237396,"modifiedTime":1740113417219,"sourceSize":10946,"sourcePath":"Tools/docker/📘 SpringBoot & Docker + Reids 연동.md","exportPath":"tools/docker/📘-springboot-&-docker-+-reids-연동.html"},"tools/🎵-obsidian.html":{"createdTime":1739863713458,"modifiedTime":1739954777611,"sourceSize":5657,"sourcePath":"Tools/🎵 Obsidian.md","exportPath":"tools/🎵-obsidian.html"},"tools/🪓-도구.html":{"createdTime":1740028927813,"modifiedTime":1741336333312,"sourceSize":573,"sourcePath":"Tools/🪓 도구.md","exportPath":"tools/🪓-도구.html"},"index.html":{"createdTime":1739779810544,"modifiedTime":1741327956252,"sourceSize":1464,"sourcePath":"index.md","exportPath":"index.html"},"사진-및-문서/pasted-image-20250225161448.png":{"createdTime":1740467688598,"modifiedTime":1740467688599,"sourceSize":8167,"sourcePath":"사진 및 문서/Pasted image 20250225161448.png","exportPath":"사진-및-문서/pasted-image-20250225161448.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250307172522.png":{"createdTime":1741335922954,"modifiedTime":1741335922955,"sourceSize":40146,"sourcePath":"사진 및 문서/Pasted image 20250307172522.png","exportPath":"사진-및-문서/pasted-image-20250307172522.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218151731.png":{"createdTime":1739863854055,"modifiedTime":1739859451768,"sourceSize":36657,"sourcePath":"사진 및 문서/Pasted image 20250218151731.png","exportPath":"사진-및-문서/pasted-image-20250218151731.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218151806.png":{"createdTime":1739863854057,"modifiedTime":1739859486188,"sourceSize":23625,"sourcePath":"사진 및 문서/Pasted image 20250218151806.png","exportPath":"사진-및-문서/pasted-image-20250218151806.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218152044.png":{"createdTime":1739863854062,"modifiedTime":1739859644718,"sourceSize":46477,"sourcePath":"사진 및 문서/Pasted image 20250218152044.png","exportPath":"사진-및-문서/pasted-image-20250218152044.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218152103.png":{"createdTime":1739863854063,"modifiedTime":1739859663830,"sourceSize":47581,"sourcePath":"사진 및 문서/Pasted image 20250218152103.png","exportPath":"사진-및-문서/pasted-image-20250218152103.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218153131.png":{"createdTime":1739863854065,"modifiedTime":1739860291108,"sourceSize":5662,"sourcePath":"사진 및 문서/Pasted image 20250218153131.png","exportPath":"사진-및-문서/pasted-image-20250218153131.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218153319.png":{"createdTime":1739863854066,"modifiedTime":1739860399141,"sourceSize":4846,"sourcePath":"사진 및 문서/Pasted image 20250218153319.png","exportPath":"사진-및-문서/pasted-image-20250218153319.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218153445.png":{"createdTime":1739863854070,"modifiedTime":1739860485474,"sourceSize":3834,"sourcePath":"사진 및 문서/Pasted image 20250218153445.png","exportPath":"사진-및-문서/pasted-image-20250218153445.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218153543.png":{"createdTime":1739863854071,"modifiedTime":1739860543611,"sourceSize":51007,"sourcePath":"사진 및 문서/Pasted image 20250218153543.png","exportPath":"사진-및-문서/pasted-image-20250218153543.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218153553.png":{"createdTime":1739863854073,"modifiedTime":1739860553053,"sourceSize":36756,"sourcePath":"사진 및 문서/Pasted image 20250218153553.png","exportPath":"사진-및-문서/pasted-image-20250218153553.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218151330.png":{"createdTime":1739863854053,"modifiedTime":1739859210349,"sourceSize":323323,"sourcePath":"사진 및 문서/Pasted image 20250218151330.png","exportPath":"사진-및-문서/pasted-image-20250218151330.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218153814.png":{"createdTime":1739863854075,"modifiedTime":1739860694285,"sourceSize":94156,"sourcePath":"사진 및 문서/Pasted image 20250218153814.png","exportPath":"사진-및-문서/pasted-image-20250218153814.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218153858.png":{"createdTime":1739863854077,"modifiedTime":1739860738867,"sourceSize":18633,"sourcePath":"사진 및 문서/Pasted image 20250218153858.png","exportPath":"사진-및-문서/pasted-image-20250218153858.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218154352.png":{"createdTime":1739863854079,"modifiedTime":1739861032727,"sourceSize":32120,"sourcePath":"사진 및 문서/Pasted image 20250218154352.png","exportPath":"사진-및-문서/pasted-image-20250218154352.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218154433.png":{"createdTime":1739863854079,"modifiedTime":1739861073109,"sourceSize":71085,"sourcePath":"사진 및 문서/Pasted image 20250218154433.png","exportPath":"사진-및-문서/pasted-image-20250218154433.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218154615.png":{"createdTime":1739863854079,"modifiedTime":1739861175610,"sourceSize":19734,"sourcePath":"사진 및 문서/Pasted image 20250218154615.png","exportPath":"사진-및-문서/pasted-image-20250218154615.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218154633.png":{"createdTime":1739863854079,"modifiedTime":1739861193533,"sourceSize":7603,"sourcePath":"사진 및 문서/Pasted image 20250218154633.png","exportPath":"사진-및-문서/pasted-image-20250218154633.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218154647.png":{"createdTime":1739863854079,"modifiedTime":1739861207274,"sourceSize":79039,"sourcePath":"사진 및 문서/Pasted image 20250218154647.png","exportPath":"사진-및-문서/pasted-image-20250218154647.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218155524.png":{"createdTime":1739863854079,"modifiedTime":1739861724018,"sourceSize":72167,"sourcePath":"사진 및 문서/Pasted image 20250218155524.png","exportPath":"사진-및-문서/pasted-image-20250218155524.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218160328.png":{"createdTime":1739863854079,"modifiedTime":1739862208474,"sourceSize":15278,"sourcePath":"사진 및 문서/Pasted image 20250218160328.png","exportPath":"사진-및-문서/pasted-image-20250218160328.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218160359.png":{"createdTime":1739863854079,"modifiedTime":1739862239425,"sourceSize":15865,"sourcePath":"사진 및 문서/Pasted image 20250218160359.png","exportPath":"사진-및-문서/pasted-image-20250218160359.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218160428.png":{"createdTime":1739863854096,"modifiedTime":1739862268957,"sourceSize":43414,"sourcePath":"사진 및 문서/Pasted image 20250218160428.png","exportPath":"사진-및-문서/pasted-image-20250218160428.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218160532.png":{"createdTime":1739863854099,"modifiedTime":1739862332221,"sourceSize":16755,"sourcePath":"사진 및 문서/Pasted image 20250218160532.png","exportPath":"사진-및-문서/pasted-image-20250218160532.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218160956.png":{"createdTime":1739863854101,"modifiedTime":1739862596018,"sourceSize":71694,"sourcePath":"사진 및 문서/Pasted image 20250218160956.png","exportPath":"사진-및-문서/pasted-image-20250218160956.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218161424.png":{"createdTime":1739863854104,"modifiedTime":1739863222819,"sourceSize":88775,"sourcePath":"사진 및 문서/Pasted image 20250218161424.png","exportPath":"사진-및-문서/pasted-image-20250218161424.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218161515.png":{"createdTime":1739863854106,"modifiedTime":1739863222820,"sourceSize":66971,"sourcePath":"사진 및 문서/Pasted image 20250218161515.png","exportPath":"사진-및-문서/pasted-image-20250218161515.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218161728.png":{"createdTime":1739863854109,"modifiedTime":1739863222821,"sourceSize":36864,"sourcePath":"사진 및 문서/Pasted image 20250218161728.png","exportPath":"사진-및-문서/pasted-image-20250218161728.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218161824.png":{"createdTime":1739863854112,"modifiedTime":1739863222822,"sourceSize":81212,"sourcePath":"사진 및 문서/Pasted image 20250218161824.png","exportPath":"사진-및-문서/pasted-image-20250218161824.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218161847.png":{"createdTime":1739863854114,"modifiedTime":1739863222823,"sourceSize":57171,"sourcePath":"사진 및 문서/Pasted image 20250218161847.png","exportPath":"사진-및-문서/pasted-image-20250218161847.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218161937.png":{"createdTime":1739863854116,"modifiedTime":1739863222823,"sourceSize":47752,"sourcePath":"사진 및 문서/Pasted image 20250218161937.png","exportPath":"사진-및-문서/pasted-image-20250218161937.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218162355.png":{"createdTime":1739863854120,"modifiedTime":1739863435970,"sourceSize":174935,"sourcePath":"사진 및 문서/Pasted image 20250218162355.png","exportPath":"사진-및-문서/pasted-image-20250218162355.png","showInTree":false,"treeOrder":0},"사진-및-문서/do-messenger_screenshot_2025-02-19_16_19_04.png":{"createdTime":1739950849162,"modifiedTime":1739949560211,"sourceSize":174630,"sourcePath":"사진 및 문서/do-messenger_screenshot_2025-02-19_16_19_04.png","exportPath":"사진-및-문서/do-messenger_screenshot_2025-02-19_16_19_04.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250219154331.png":{"createdTime":1739950852026,"modifiedTime":1739947411858,"sourceSize":151126,"sourcePath":"사진 및 문서/Pasted image 20250219154331.png","exportPath":"사진-및-문서/pasted-image-20250219154331.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250219154315.png":{"createdTime":1739950852024,"modifiedTime":1739947395101,"sourceSize":32194,"sourcePath":"사진 및 문서/Pasted image 20250219154315.png","exportPath":"사진-및-문서/pasted-image-20250219154315.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241224144309.png":{"createdTime":1739839894811,"modifiedTime":1739424429296,"sourceSize":65503,"sourcePath":"사진 및 문서/Pasted image 20241224144309.png","exportPath":"사진-및-문서/pasted-image-20241224144309.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241226111559.png":{"createdTime":1739839894815,"modifiedTime":1739424429298,"sourceSize":55022,"sourcePath":"사진 및 문서/Pasted image 20241226111559.png","exportPath":"사진-및-문서/pasted-image-20241226111559.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250102160223.png":{"createdTime":1739839894828,"modifiedTime":1739424429303,"sourceSize":29848,"sourcePath":"사진 및 문서/Pasted image 20250102160223.png","exportPath":"사진-및-문서/pasted-image-20250102160223.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241226152219.png":{"createdTime":1739839894817,"modifiedTime":1739424429298,"sourceSize":5000,"sourcePath":"사진 및 문서/Pasted image 20241226152219.png","exportPath":"사진-및-문서/pasted-image-20241226152219.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241226171158.png":{"createdTime":1739783575051,"modifiedTime":1739424429299,"sourceSize":37765,"sourcePath":"사진 및 문서/Pasted image 20241226171158.png","exportPath":"사진-및-문서/pasted-image-20241226171158.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241230135801.png":{"createdTime":1739839894821,"modifiedTime":1739424429300,"sourceSize":120367,"sourcePath":"사진 및 문서/Pasted image 20241230135801.png","exportPath":"사진-및-문서/pasted-image-20241230135801.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250102160213.png":{"createdTime":1739839894826,"modifiedTime":1739424429302,"sourceSize":108505,"sourcePath":"사진 및 문서/Pasted image 20250102160213.png","exportPath":"사진-및-문서/pasted-image-20250102160213.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250226145129.png":{"createdTime":1740549089449,"modifiedTime":1740549089450,"sourceSize":38384,"sourcePath":"사진 및 문서/Pasted image 20250226145129.png","exportPath":"사진-및-문서/pasted-image-20250226145129.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250220144552.png":{"createdTime":1740030352059,"modifiedTime":1740030352059,"sourceSize":133564,"sourcePath":"사진 및 문서/Pasted image 20250220144552.png","exportPath":"사진-및-문서/pasted-image-20250220144552.png","showInTree":false,"treeOrder":0},"사진-및-문서/output-(9).png":{"createdTime":1739842929649,"modifiedTime":1739424429383,"sourceSize":156393,"sourcePath":"사진 및 문서/output (9).png","exportPath":"사진-및-문서/output-(9).png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241206113120.png":{"createdTime":1739842930067,"modifiedTime":1739424429278,"sourceSize":53681,"sourcePath":"사진 및 문서/Pasted image 20241206113120.png","exportPath":"사진-및-문서/pasted-image-20241206113120.png","showInTree":false,"treeOrder":0},"사진-및-문서/회사-은행-서비스1111.png":{"createdTime":1739842929615,"modifiedTime":1739424429407,"sourceSize":82216,"sourcePath":"사진 및 문서/회사 은행 서비스1111.png","exportPath":"사진-및-문서/회사-은행-서비스1111.png","showInTree":false,"treeOrder":0},"사진-및-문서/spring-batch-tasklet-예치금-잔액-비교-1.png":{"createdTime":1739842930208,"modifiedTime":1739424429372,"sourceSize":104557,"sourcePath":"사진 및 문서/Spring Batch Tasklet 예치금 잔액 비교 1.png","exportPath":"사진-및-문서/spring-batch-tasklet-예치금-잔액-비교-1.png","showInTree":false,"treeOrder":0},"사진-및-문서/spring-batch-tasklet-예치금-잔액-비교-잘못된-차액발생-인식-타임라인.png":{"createdTime":1739842930210,"modifiedTime":1739424429373,"sourceSize":113338,"sourcePath":"사진 및 문서/Spring Batch Tasklet 예치금 잔액 비교 잘못된 차액발생 인식 타임라인.png","exportPath":"사진-및-문서/spring-batch-tasklet-예치금-잔액-비교-잘못된-차액발생-인식-타임라인.png","showInTree":false,"treeOrder":0},"사진-및-문서/output-(1).png":{"createdTime":1739842929644,"modifiedTime":1739424429378,"sourceSize":145878,"sourcePath":"사진 및 문서/output (1).png","exportPath":"사진-및-문서/output-(1).png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241217150339.png":{"createdTime":1739842930081,"modifiedTime":1739424429290,"sourceSize":140545,"sourcePath":"사진 및 문서/Pasted image 20241217150339.png","exportPath":"사진-및-문서/pasted-image-20241217150339.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241219145746.png":{"createdTime":1739842930081,"modifiedTime":1739424429291,"sourceSize":86893,"sourcePath":"사진 및 문서/Pasted image 20241219145746.png","exportPath":"사진-및-문서/pasted-image-20241219145746.png","showInTree":false,"treeOrder":0},"사진-및-문서/output-(9)-1.png":{"createdTime":1739842929647,"modifiedTime":1739424429382,"sourceSize":156393,"sourcePath":"사진 및 문서/output (9) 1.png","exportPath":"사진-및-문서/output-(9)-1.png","showInTree":false,"treeOrder":0},"사진-및-문서/output-(10).png":{"createdTime":1739842929651,"modifiedTime":1739424429379,"sourceSize":133656,"sourcePath":"사진 및 문서/output (10).png","exportPath":"사진-및-문서/output-(10).png","showInTree":false,"treeOrder":0},"사진-및-문서/do-messenger_screenshot_2024-12-23_14_40_21.png":{"createdTime":1739842929615,"modifiedTime":1739424429375,"sourceSize":146024,"sourcePath":"사진 및 문서/do-messenger_screenshot_2024-12-23_14_40_21.png","exportPath":"사진-및-문서/do-messenger_screenshot_2024-12-23_14_40_21.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241224093159.png":{"createdTime":1739842930090,"modifiedTime":1739424429294,"sourceSize":85534,"sourcePath":"사진 및 문서/Pasted image 20241224093159.png","exportPath":"사진-및-문서/pasted-image-20241224093159.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241224093207.png":{"createdTime":1739842930092,"modifiedTime":1739424429294,"sourceSize":25919,"sourcePath":"사진 및 문서/Pasted image 20241224093207.png","exportPath":"사진-및-문서/pasted-image-20241224093207.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241224093225.png":{"createdTime":1739842930093,"modifiedTime":1739424429295,"sourceSize":39658,"sourcePath":"사진 및 문서/Pasted image 20241224093225.png","exportPath":"사진-및-문서/pasted-image-20241224093225.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250305173344.png":{"createdTime":1741163624706,"modifiedTime":1741163624707,"sourceSize":45439,"sourcePath":"사진 및 문서/Pasted image 20250305173344.png","exportPath":"사진-및-문서/pasted-image-20250305173344.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250305175924.png":{"createdTime":1741165164553,"modifiedTime":1741165164554,"sourceSize":74967,"sourcePath":"사진 및 문서/Pasted image 20250305175924.png","exportPath":"사진-및-문서/pasted-image-20250305175924.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241213102128.png":{"createdTime":1739842930072,"modifiedTime":1739424429282,"sourceSize":22774,"sourcePath":"사진 및 문서/Pasted image 20241213102128.png","exportPath":"사진-및-문서/pasted-image-20241213102128.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250304170347.png":{"createdTime":1741075427118,"modifiedTime":1741075427119,"sourceSize":5935,"sourcePath":"사진 및 문서/Pasted image 20250304170347.png","exportPath":"사진-및-문서/pasted-image-20250304170347.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250304170412.png":{"createdTime":1741075452166,"modifiedTime":1741075452167,"sourceSize":5849,"sourcePath":"사진 및 문서/Pasted image 20250304170412.png","exportPath":"사진-및-문서/pasted-image-20250304170412.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250304171240.png":{"createdTime":1741075960529,"modifiedTime":1741075960535,"sourceSize":2347,"sourcePath":"사진 및 문서/Pasted image 20250304171240.png","exportPath":"사진-및-문서/pasted-image-20250304171240.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241213102229.png":{"createdTime":1739842930074,"modifiedTime":1739424429284,"sourceSize":212552,"sourcePath":"사진 및 문서/Pasted image 20241213102229.png","exportPath":"사진-및-문서/pasted-image-20241213102229.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241213143101.png":{"createdTime":1739842930077,"modifiedTime":1739424429288,"sourceSize":547915,"sourcePath":"사진 및 문서/Pasted image 20241213143101.png","exportPath":"사진-및-문서/pasted-image-20241213143101.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241213143217.png":{"createdTime":1739842930079,"modifiedTime":1739424429289,"sourceSize":19870,"sourcePath":"사진 및 문서/Pasted image 20241213143217.png","exportPath":"사진-및-문서/pasted-image-20241213143217.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241213103503.png":{"createdTime":1739842930076,"modifiedTime":1739424429285,"sourceSize":86553,"sourcePath":"사진 및 문서/Pasted image 20241213103503.png","exportPath":"사진-및-문서/pasted-image-20241213103503.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241105110415.png":{"createdTime":1740733427059,"modifiedTime":1739424429176,"sourceSize":48800,"sourcePath":"사진 및 문서/Pasted image 20241105110415.png","exportPath":"사진-및-문서/pasted-image-20241105110415.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250227140437.png":{"createdTime":1740733431199,"modifiedTime":1740632677974,"sourceSize":44294,"sourcePath":"사진 및 문서/Pasted image 20250227140437.png","exportPath":"사진-및-문서/pasted-image-20250227140437.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250227140620.png":{"createdTime":1740733431201,"modifiedTime":1740632780208,"sourceSize":7828,"sourcePath":"사진 및 문서/Pasted image 20250227140620.png","exportPath":"사진-및-문서/pasted-image-20250227140620.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241105110637.png":{"createdTime":1740733427093,"modifiedTime":1739424429177,"sourceSize":122628,"sourcePath":"사진 및 문서/Pasted image 20241105110637.png","exportPath":"사진-및-문서/pasted-image-20241105110637.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241105110713.png":{"createdTime":1740733427109,"modifiedTime":1739424429179,"sourceSize":121987,"sourcePath":"사진 및 문서/Pasted image 20241105110713.png","exportPath":"사진-및-문서/pasted-image-20241105110713.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241107115602.png":{"createdTime":1740733427276,"modifiedTime":1739424429183,"sourceSize":165029,"sourcePath":"사진 및 문서/Pasted image 20241107115602.png","exportPath":"사진-및-문서/pasted-image-20241107115602.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241107115830.png":{"createdTime":1740733427316,"modifiedTime":1739424429184,"sourceSize":108952,"sourcePath":"사진 및 문서/Pasted image 20241107115830.png","exportPath":"사진-및-문서/pasted-image-20241107115830.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241107121044.png":{"createdTime":1740733427415,"modifiedTime":1739424429187,"sourceSize":154790,"sourcePath":"사진 및 문서/Pasted image 20241107121044.png","exportPath":"사진-및-문서/pasted-image-20241107121044.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241107121202.png":{"createdTime":1740733427459,"modifiedTime":1739424429188,"sourceSize":129945,"sourcePath":"사진 및 문서/Pasted image 20241107121202.png","exportPath":"사진-및-문서/pasted-image-20241107121202.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241107121939.png":{"createdTime":1740733427504,"modifiedTime":1739424429189,"sourceSize":139893,"sourcePath":"사진 및 문서/Pasted image 20241107121939.png","exportPath":"사진-및-문서/pasted-image-20241107121939.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250227114750.png":{"createdTime":1740733431139,"modifiedTime":1740624470242,"sourceSize":6008,"sourcePath":"사진 및 문서/Pasted image 20250227114750.png","exportPath":"사진-및-문서/pasted-image-20250227114750.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250227114826.png":{"createdTime":1740733431143,"modifiedTime":1740624506390,"sourceSize":8757,"sourcePath":"사진 및 문서/Pasted image 20250227114826.png","exportPath":"사진-및-문서/pasted-image-20250227114826.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250227115004.png":{"createdTime":1740733431143,"modifiedTime":1740624604117,"sourceSize":6917,"sourcePath":"사진 및 문서/Pasted image 20250227115004.png","exportPath":"사진-및-문서/pasted-image-20250227115004.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250227115015.png":{"createdTime":1740733431147,"modifiedTime":1740624615279,"sourceSize":4891,"sourcePath":"사진 및 문서/Pasted image 20250227115015.png","exportPath":"사진-및-문서/pasted-image-20250227115015.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250227115158.png":{"createdTime":1740733431152,"modifiedTime":1740624718349,"sourceSize":5677,"sourcePath":"사진 및 문서/Pasted image 20250227115158.png","exportPath":"사진-및-문서/pasted-image-20250227115158.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250227115148.png":{"createdTime":1740733431150,"modifiedTime":1740624708781,"sourceSize":5084,"sourcePath":"사진 및 문서/Pasted image 20250227115148.png","exportPath":"사진-및-문서/pasted-image-20250227115148.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250227121009.png":{"createdTime":1740733431157,"modifiedTime":1740625809747,"sourceSize":37181,"sourcePath":"사진 및 문서/Pasted image 20250227121009.png","exportPath":"사진-및-문서/pasted-image-20250227121009.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250227121046.png":{"createdTime":1740733431159,"modifiedTime":1740625846453,"sourceSize":79963,"sourcePath":"사진 및 문서/Pasted image 20250227121046.png","exportPath":"사진-및-문서/pasted-image-20250227121046.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250227121942.png":{"createdTime":1740733431160,"modifiedTime":1740626382860,"sourceSize":78688,"sourcePath":"사진 및 문서/Pasted image 20250227121942.png","exportPath":"사진-및-문서/pasted-image-20250227121942.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250227122010.png":{"createdTime":1740733431192,"modifiedTime":1740626410321,"sourceSize":15254,"sourcePath":"사진 및 문서/Pasted image 20250227122010.png","exportPath":"사진-및-문서/pasted-image-20250227122010.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250227122736.png":{"createdTime":1740733431195,"modifiedTime":1740626856166,"sourceSize":15665,"sourcePath":"사진 및 문서/Pasted image 20250227122736.png","exportPath":"사진-및-문서/pasted-image-20250227122736.png","showInTree":false,"treeOrder":0},"사진-및-문서/output-(14).png":{"createdTime":1740733423096,"modifiedTime":1740632277026,"sourceSize":93796,"sourcePath":"사진 및 문서/output (14).png","exportPath":"사진-및-문서/output-(14).png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250304121056.png":{"createdTime":1741057856115,"modifiedTime":1741057856115,"sourceSize":315526,"sourcePath":"사진 및 문서/Pasted image 20250304121056.png","exportPath":"사진-및-문서/pasted-image-20250304121056.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250304121009.png":{"createdTime":1741057809965,"modifiedTime":1741057809965,"sourceSize":37710,"sourcePath":"사진 및 문서/Pasted image 20250304121009.png","exportPath":"사진-및-문서/pasted-image-20250304121009.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250304121455.png":{"createdTime":1741058095886,"modifiedTime":1741058095886,"sourceSize":17334,"sourcePath":"사진 및 문서/Pasted image 20250304121455.png","exportPath":"사진-및-문서/pasted-image-20250304121455.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250304121338.png":{"createdTime":1741058018696,"modifiedTime":1741058018697,"sourceSize":1826,"sourcePath":"사진 및 문서/Pasted image 20250304121338.png","exportPath":"사진-및-문서/pasted-image-20250304121338.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240610171904.png":{"createdTime":1739844879954,"modifiedTime":1739424428655,"sourceSize":48061,"sourcePath":"사진 및 문서/Pasted image 20240610171904.png","exportPath":"사진-및-문서/pasted-image-20240610171904.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240531103441.png":{"createdTime":1739844879928,"modifiedTime":1739424428629,"sourceSize":13085,"sourcePath":"사진 및 문서/Pasted image 20240531103441.png","exportPath":"사진-및-문서/pasted-image-20240531103441.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240531103549.png":{"createdTime":1739844879930,"modifiedTime":1739424428629,"sourceSize":13731,"sourcePath":"사진 및 문서/Pasted image 20240531103549.png","exportPath":"사진-및-문서/pasted-image-20240531103549.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240531105228.png":{"createdTime":1739844879938,"modifiedTime":1739424428647,"sourceSize":68992,"sourcePath":"사진 및 문서/Pasted image 20240531105228.png","exportPath":"사진-및-문서/pasted-image-20240531105228.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240531105241.png":{"createdTime":1739844879940,"modifiedTime":1739424428648,"sourceSize":74304,"sourcePath":"사진 및 문서/Pasted image 20240531105241.png","exportPath":"사진-및-문서/pasted-image-20240531105241.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240531104351.png":{"createdTime":1739844879931,"modifiedTime":1739424428630,"sourceSize":47662,"sourcePath":"사진 및 문서/Pasted image 20240531104351.png","exportPath":"사진-및-문서/pasted-image-20240531104351.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240531104418.png":{"createdTime":1739844879933,"modifiedTime":1739424428631,"sourceSize":27661,"sourcePath":"사진 및 문서/Pasted image 20240531104418.png","exportPath":"사진-및-문서/pasted-image-20240531104418.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240531104751.png":{"createdTime":1739844879935,"modifiedTime":1739424428631,"sourceSize":24466,"sourcePath":"사진 및 문서/Pasted image 20240531104751.png","exportPath":"사진-및-문서/pasted-image-20240531104751.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240531104803.png":{"createdTime":1739844879937,"modifiedTime":1739424428632,"sourceSize":35445,"sourcePath":"사진 및 문서/Pasted image 20240531104803.png","exportPath":"사진-및-문서/pasted-image-20240531104803.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240828104032.png":{"createdTime":1739844880154,"modifiedTime":1739424429090,"sourceSize":89251,"sourcePath":"사진 및 문서/Pasted image 20240828104032.png","exportPath":"사진-및-문서/pasted-image-20240828104032.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240828104728.png":{"createdTime":1739844880156,"modifiedTime":1739424429091,"sourceSize":123190,"sourcePath":"사진 및 문서/Pasted image 20240828104728.png","exportPath":"사진-및-문서/pasted-image-20240828104728.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250228150552.png":{"createdTime":1740727471570,"modifiedTime":1740727471571,"sourceSize":28810,"sourcePath":"사진 및 문서/Pasted image 20250228150552.png","exportPath":"사진-및-문서/pasted-image-20250228150552.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250102181842.png":{"createdTime":1739783575073,"modifiedTime":1739424429304,"sourceSize":30146,"sourcePath":"사진 및 문서/Pasted image 20250102181842.png","exportPath":"사진-및-문서/pasted-image-20250102181842.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221112429.png":{"createdTime":1740105237396,"modifiedTime":1740105237396,"sourceSize":64954,"sourcePath":"사진 및 문서/Pasted image 20250221112429.png","exportPath":"사진-및-문서/pasted-image-20250221112429.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114856.png":{"createdTime":1740106714988,"modifiedTime":1740106714988,"sourceSize":65325,"sourcePath":"사진 및 문서/Pasted image 20250221114856.png","exportPath":"사진-및-문서/pasted-image-20250221114856.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114901.png":{"createdTime":1740106714989,"modifiedTime":1740106714989,"sourceSize":11769,"sourcePath":"사진 및 문서/Pasted image 20250221114901.png","exportPath":"사진-및-문서/pasted-image-20250221114901.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114932.png":{"createdTime":1740106714990,"modifiedTime":1740106714990,"sourceSize":61109,"sourcePath":"사진 및 문서/Pasted image 20250221114932.png","exportPath":"사진-및-문서/pasted-image-20250221114932.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114945.png":{"createdTime":1740106714991,"modifiedTime":1740106714991,"sourceSize":23711,"sourcePath":"사진 및 문서/Pasted image 20250221114945.png","exportPath":"사진-및-문서/pasted-image-20250221114945.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114951.png":{"createdTime":1740106714991,"modifiedTime":1740106714992,"sourceSize":50550,"sourcePath":"사진 및 문서/Pasted image 20250221114951.png","exportPath":"사진-및-문서/pasted-image-20250221114951.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114959.png":{"createdTime":1740106714992,"modifiedTime":1740106714992,"sourceSize":58138,"sourcePath":"사진 및 문서/Pasted image 20250221114959.png","exportPath":"사진-및-문서/pasted-image-20250221114959.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115004.png":{"createdTime":1740106714993,"modifiedTime":1740106714993,"sourceSize":69732,"sourcePath":"사진 및 문서/Pasted image 20250221115004.png","exportPath":"사진-및-문서/pasted-image-20250221115004.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115010.png":{"createdTime":1740106714994,"modifiedTime":1740106714994,"sourceSize":27832,"sourcePath":"사진 및 문서/Pasted image 20250221115010.png","exportPath":"사진-및-문서/pasted-image-20250221115010.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115019.png":{"createdTime":1740106714994,"modifiedTime":1740106714994,"sourceSize":18871,"sourcePath":"사진 및 문서/Pasted image 20250221115019.png","exportPath":"사진-및-문서/pasted-image-20250221115019.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115024.png":{"createdTime":1740106714995,"modifiedTime":1740106714995,"sourceSize":13209,"sourcePath":"사진 및 문서/Pasted image 20250221115024.png","exportPath":"사진-및-문서/pasted-image-20250221115024.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115030.png":{"createdTime":1740106714996,"modifiedTime":1740106714996,"sourceSize":119401,"sourcePath":"사진 및 문서/Pasted image 20250221115030.png","exportPath":"사진-및-문서/pasted-image-20250221115030.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115035.png":{"createdTime":1740106714997,"modifiedTime":1740106714997,"sourceSize":129628,"sourcePath":"사진 및 문서/Pasted image 20250221115035.png","exportPath":"사진-및-문서/pasted-image-20250221115035.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115040.png":{"createdTime":1740106714998,"modifiedTime":1740106714998,"sourceSize":82286,"sourcePath":"사진 및 문서/Pasted image 20250221115040.png","exportPath":"사진-및-문서/pasted-image-20250221115040.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115046.png":{"createdTime":1740106714999,"modifiedTime":1740106714999,"sourceSize":65882,"sourcePath":"사진 및 문서/Pasted image 20250221115046.png","exportPath":"사진-및-문서/pasted-image-20250221115046.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115052.png":{"createdTime":1740106715000,"modifiedTime":1740106715000,"sourceSize":53469,"sourcePath":"사진 및 문서/Pasted image 20250221115052.png","exportPath":"사진-및-문서/pasted-image-20250221115052.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115058.png":{"createdTime":1740106715001,"modifiedTime":1740106715001,"sourceSize":43462,"sourcePath":"사진 및 문서/Pasted image 20250221115058.png","exportPath":"사진-및-문서/pasted-image-20250221115058.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115102.png":{"createdTime":1740106715001,"modifiedTime":1740106715002,"sourceSize":22627,"sourcePath":"사진 및 문서/Pasted image 20250221115102.png","exportPath":"사진-및-문서/pasted-image-20250221115102.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115117.png":{"createdTime":1740106715003,"modifiedTime":1740106715003,"sourceSize":176301,"sourcePath":"사진 및 문서/Pasted image 20250221115117.png","exportPath":"사진-및-문서/pasted-image-20250221115117.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115122.png":{"createdTime":1740106715003,"modifiedTime":1740106715004,"sourceSize":17792,"sourcePath":"사진 및 문서/Pasted image 20250221115122.png","exportPath":"사진-및-문서/pasted-image-20250221115122.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115129.png":{"createdTime":1740106715004,"modifiedTime":1740106715005,"sourceSize":17789,"sourcePath":"사진 및 문서/Pasted image 20250221115129.png","exportPath":"사진-및-문서/pasted-image-20250221115129.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115132.png":{"createdTime":1740106715006,"modifiedTime":1740106715006,"sourceSize":130355,"sourcePath":"사진 및 문서/Pasted image 20250221115132.png","exportPath":"사진-및-문서/pasted-image-20250221115132.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115136.png":{"createdTime":1740106715006,"modifiedTime":1740106715007,"sourceSize":40025,"sourcePath":"사진 및 문서/Pasted image 20250221115136.png","exportPath":"사진-및-문서/pasted-image-20250221115136.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115140.png":{"createdTime":1740106715008,"modifiedTime":1740106715008,"sourceSize":130307,"sourcePath":"사진 및 문서/Pasted image 20250221115140.png","exportPath":"사진-및-문서/pasted-image-20250221115140.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115146.png":{"createdTime":1740106715008,"modifiedTime":1740106715008,"sourceSize":12192,"sourcePath":"사진 및 문서/Pasted image 20250221115146.png","exportPath":"사진-및-문서/pasted-image-20250221115146.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115151.png":{"createdTime":1740106715009,"modifiedTime":1740106715009,"sourceSize":23806,"sourcePath":"사진 및 문서/Pasted image 20250221115151.png","exportPath":"사진-및-문서/pasted-image-20250221115151.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115157.png":{"createdTime":1740106715010,"modifiedTime":1740106715010,"sourceSize":22775,"sourcePath":"사진 및 문서/Pasted image 20250221115157.png","exportPath":"사진-및-문서/pasted-image-20250221115157.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115201.png":{"createdTime":1740106715011,"modifiedTime":1740106715011,"sourceSize":53316,"sourcePath":"사진 및 문서/Pasted image 20250221115201.png","exportPath":"사진-및-문서/pasted-image-20250221115201.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115214.png":{"createdTime":1740106715011,"modifiedTime":1740106715011,"sourceSize":94161,"sourcePath":"사진 및 문서/Pasted image 20250221115214.png","exportPath":"사진-및-문서/pasted-image-20250221115214.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115220.png":{"createdTime":1740106715011,"modifiedTime":1740106715011,"sourceSize":23961,"sourcePath":"사진 및 문서/Pasted image 20250221115220.png","exportPath":"사진-및-문서/pasted-image-20250221115220.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115224.png":{"createdTime":1740106715011,"modifiedTime":1740106715011,"sourceSize":3897,"sourcePath":"사진 및 문서/Pasted image 20250221115224.png","exportPath":"사진-및-문서/pasted-image-20250221115224.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115228.png":{"createdTime":1740106715011,"modifiedTime":1740106715011,"sourceSize":39103,"sourcePath":"사진 및 문서/Pasted image 20250221115228.png","exportPath":"사진-및-문서/pasted-image-20250221115228.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221115232.png":{"createdTime":1740106715011,"modifiedTime":1740106715011,"sourceSize":71492,"sourcePath":"사진 및 문서/Pasted image 20250221115232.png","exportPath":"사진-및-문서/pasted-image-20250221115232.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114152.png":{"createdTime":1740106714939,"modifiedTime":1740106714939,"sourceSize":38552,"sourcePath":"사진 및 문서/Pasted image 20250221114152.png","exportPath":"사진-및-문서/pasted-image-20250221114152.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114208.png":{"createdTime":1740106714939,"modifiedTime":1740106714939,"sourceSize":237325,"sourcePath":"사진 및 문서/Pasted image 20250221114208.png","exportPath":"사진-및-문서/pasted-image-20250221114208.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114220.png":{"createdTime":1740106714939,"modifiedTime":1740106714939,"sourceSize":338363,"sourcePath":"사진 및 문서/Pasted image 20250221114220.png","exportPath":"사진-및-문서/pasted-image-20250221114220.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114306.png":{"createdTime":1740106714939,"modifiedTime":1740106714939,"sourceSize":33790,"sourcePath":"사진 및 문서/Pasted image 20250221114306.png","exportPath":"사진-및-문서/pasted-image-20250221114306.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114324.png":{"createdTime":1740106714939,"modifiedTime":1740106714939,"sourceSize":4466,"sourcePath":"사진 및 문서/Pasted image 20250221114324.png","exportPath":"사진-및-문서/pasted-image-20250221114324.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114327.png":{"createdTime":1740106714954,"modifiedTime":1740106714955,"sourceSize":95731,"sourcePath":"사진 및 문서/Pasted image 20250221114327.png","exportPath":"사진-및-문서/pasted-image-20250221114327.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114334.png":{"createdTime":1740106714955,"modifiedTime":1740106714955,"sourceSize":47629,"sourcePath":"사진 및 문서/Pasted image 20250221114334.png","exportPath":"사진-및-문서/pasted-image-20250221114334.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114339.png":{"createdTime":1740106714956,"modifiedTime":1740106714956,"sourceSize":8362,"sourcePath":"사진 및 문서/Pasted image 20250221114339.png","exportPath":"사진-및-문서/pasted-image-20250221114339.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114345.png":{"createdTime":1740106714957,"modifiedTime":1740106714958,"sourceSize":228624,"sourcePath":"사진 및 문서/Pasted image 20250221114345.png","exportPath":"사진-및-문서/pasted-image-20250221114345.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114353.png":{"createdTime":1740106714960,"modifiedTime":1740106714960,"sourceSize":169113,"sourcePath":"사진 및 문서/Pasted image 20250221114353.png","exportPath":"사진-및-문서/pasted-image-20250221114353.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114400.png":{"createdTime":1740106714960,"modifiedTime":1740106714960,"sourceSize":142112,"sourcePath":"사진 및 문서/Pasted image 20250221114400.png","exportPath":"사진-및-문서/pasted-image-20250221114400.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114406.png":{"createdTime":1740106714962,"modifiedTime":1740106714962,"sourceSize":124822,"sourcePath":"사진 및 문서/Pasted image 20250221114406.png","exportPath":"사진-및-문서/pasted-image-20250221114406.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114411.png":{"createdTime":1740106714962,"modifiedTime":1740106714962,"sourceSize":63825,"sourcePath":"사진 및 문서/Pasted image 20250221114411.png","exportPath":"사진-및-문서/pasted-image-20250221114411.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114423.png":{"createdTime":1740106714962,"modifiedTime":1740106714962,"sourceSize":99423,"sourcePath":"사진 및 문서/Pasted image 20250221114423.png","exportPath":"사진-및-문서/pasted-image-20250221114423.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114428.png":{"createdTime":1740106714962,"modifiedTime":1740106714962,"sourceSize":347892,"sourcePath":"사진 및 문서/Pasted image 20250221114428.png","exportPath":"사진-및-문서/pasted-image-20250221114428.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114434.png":{"createdTime":1740106714962,"modifiedTime":1740106714962,"sourceSize":119362,"sourcePath":"사진 및 문서/Pasted image 20250221114434.png","exportPath":"사진-및-문서/pasted-image-20250221114434.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114439.png":{"createdTime":1740106714962,"modifiedTime":1740106714962,"sourceSize":29445,"sourcePath":"사진 및 문서/Pasted image 20250221114439.png","exportPath":"사진-및-문서/pasted-image-20250221114439.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114443.png":{"createdTime":1740106714962,"modifiedTime":1740106714962,"sourceSize":137427,"sourcePath":"사진 및 문서/Pasted image 20250221114443.png","exportPath":"사진-및-문서/pasted-image-20250221114443.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114501.png":{"createdTime":1740106714971,"modifiedTime":1740106714971,"sourceSize":9241,"sourcePath":"사진 및 문서/Pasted image 20250221114501.png","exportPath":"사진-및-문서/pasted-image-20250221114501.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114448.png":{"createdTime":1740106714962,"modifiedTime":1740106714962,"sourceSize":10082,"sourcePath":"사진 및 문서/Pasted image 20250221114448.png","exportPath":"사진-및-문서/pasted-image-20250221114448.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114522.png":{"createdTime":1740106714972,"modifiedTime":1740106714972,"sourceSize":41499,"sourcePath":"사진 및 문서/Pasted image 20250221114522.png","exportPath":"사진-및-문서/pasted-image-20250221114522.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114527.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":3613,"sourcePath":"사진 및 문서/Pasted image 20250221114527.png","exportPath":"사진-및-문서/pasted-image-20250221114527.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114531.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":2824,"sourcePath":"사진 및 문서/Pasted image 20250221114531.png","exportPath":"사진-및-문서/pasted-image-20250221114531.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114535.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":9670,"sourcePath":"사진 및 문서/Pasted image 20250221114535.png","exportPath":"사진-및-문서/pasted-image-20250221114535.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114539.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":47345,"sourcePath":"사진 및 문서/Pasted image 20250221114539.png","exportPath":"사진-및-문서/pasted-image-20250221114539.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114543.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":12542,"sourcePath":"사진 및 문서/Pasted image 20250221114543.png","exportPath":"사진-및-문서/pasted-image-20250221114543.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114600.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":170307,"sourcePath":"사진 및 문서/Pasted image 20250221114600.png","exportPath":"사진-및-문서/pasted-image-20250221114600.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114605.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":5144,"sourcePath":"사진 및 문서/Pasted image 20250221114605.png","exportPath":"사진-및-문서/pasted-image-20250221114605.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114610.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":117785,"sourcePath":"사진 및 문서/Pasted image 20250221114610.png","exportPath":"사진-및-문서/pasted-image-20250221114610.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114616.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":9310,"sourcePath":"사진 및 문서/Pasted image 20250221114616.png","exportPath":"사진-및-문서/pasted-image-20250221114616.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114621.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":6945,"sourcePath":"사진 및 문서/Pasted image 20250221114621.png","exportPath":"사진-및-문서/pasted-image-20250221114621.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114628.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":11755,"sourcePath":"사진 및 문서/Pasted image 20250221114628.png","exportPath":"사진-및-문서/pasted-image-20250221114628.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114633.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":109806,"sourcePath":"사진 및 문서/Pasted image 20250221114633.png","exportPath":"사진-및-문서/pasted-image-20250221114633.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114638.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":145560,"sourcePath":"사진 및 문서/Pasted image 20250221114638.png","exportPath":"사진-및-문서/pasted-image-20250221114638.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114644.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":285677,"sourcePath":"사진 및 문서/Pasted image 20250221114644.png","exportPath":"사진-및-문서/pasted-image-20250221114644.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114648.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":2556,"sourcePath":"사진 및 문서/Pasted image 20250221114648.png","exportPath":"사진-및-문서/pasted-image-20250221114648.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250221114743.png":{"createdTime":1740106714973,"modifiedTime":1740106714973,"sourceSize":27587,"sourcePath":"사진 및 문서/Pasted image 20250221114743.png","exportPath":"사진-및-문서/pasted-image-20250221114743.png","showInTree":false,"treeOrder":0},"사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png":{"createdTime":1739783573850,"modifiedTime":1739424428406,"sourceSize":99317,"sourcePath":"사진 및 문서/do-messenger_screenshot_2025-02-10_15_04_45.png","exportPath":"사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png","showInTree":false,"treeOrder":0},"사진-및-문서/do-messenger_screenshot_2025-02-10_17_10_58.png":{"createdTime":1739783573853,"modifiedTime":1739424428407,"sourceSize":122009,"sourcePath":"사진 및 문서/do-messenger_screenshot_2025-02-10_17_10_58.png","exportPath":"사진-및-문서/do-messenger_screenshot_2025-02-10_17_10_58.png","showInTree":false,"treeOrder":0},"사진-및-문서/do-messenger_screenshot_2025-02-11_13_47_16.png":{"createdTime":1739783573857,"modifiedTime":1739424428408,"sourceSize":220968,"sourcePath":"사진 및 문서/do-messenger_screenshot_2025-02-11_13_47_16.png","exportPath":"사진-및-문서/do-messenger_screenshot_2025-02-11_13_47_16.png","showInTree":false,"treeOrder":0},"사진-및-문서/do-messenger_screenshot_2025-02-11_15_32_34.png":{"createdTime":1739783573860,"modifiedTime":1739424428409,"sourceSize":63401,"sourcePath":"사진 및 문서/do-messenger_screenshot_2025-02-11_15_32_34.png","exportPath":"사진-및-문서/do-messenger_screenshot_2025-02-11_15_32_34.png","showInTree":false,"treeOrder":0},"사진-및-문서/do-messenger_screenshot_2025-02-11_16_31_10.png":{"createdTime":1739783573863,"modifiedTime":1739424428411,"sourceSize":131078,"sourcePath":"사진 및 문서/do-messenger_screenshot_2025-02-11_16_31_10.png","exportPath":"사진-및-문서/do-messenger_screenshot_2025-02-11_16_31_10.png","showInTree":false,"treeOrder":0},"사진-및-문서/do-messenger_screenshot_2025-02-12_14_04_58.png":{"createdTime":1739783573867,"modifiedTime":1739424428412,"sourceSize":159770,"sourcePath":"사진 및 문서/do-messenger_screenshot_2025-02-12_14_04_58.png","exportPath":"사진-및-문서/do-messenger_screenshot_2025-02-12_14_04_58.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218145702.png":{"createdTime":1739863854050,"modifiedTime":1739858222077,"sourceSize":27774,"sourcePath":"사진 및 문서/Pasted image 20250218145702.png","exportPath":"사진-및-문서/pasted-image-20250218145702.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250218145823.png":{"createdTime":1739863854052,"modifiedTime":1739858303156,"sourceSize":178936,"sourcePath":"사진 및 문서/Pasted image 20250218145823.png","exportPath":"사진-및-문서/pasted-image-20250218145823.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250110144021.png":{"createdTime":1739950851777,"modifiedTime":1739424429322,"sourceSize":46877,"sourcePath":"사진 및 문서/Pasted image 20250110144021.png","exportPath":"사진-및-문서/pasted-image-20250110144021.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241206140739.png":{"createdTime":1739950851625,"modifiedTime":1739424429279,"sourceSize":207335,"sourcePath":"사진 및 문서/Pasted image 20241206140739.png","exportPath":"사진-및-문서/pasted-image-20241206140739.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241206140822.png":{"createdTime":1739950851626,"modifiedTime":1739424429282,"sourceSize":402790,"sourcePath":"사진 및 문서/Pasted image 20241206140822.png","exportPath":"사진-및-문서/pasted-image-20241206140822.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241220113308.png":{"createdTime":1739950851645,"modifiedTime":1739424429291,"sourceSize":45942,"sourcePath":"사진 및 문서/Pasted image 20241220113308.png","exportPath":"사진-및-문서/pasted-image-20241220113308.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20241220113315.png":{"createdTime":1739950851648,"modifiedTime":1739424429292,"sourceSize":29805,"sourcePath":"사진 및 문서/Pasted image 20241220113315.png","exportPath":"사진-및-문서/pasted-image-20241220113315.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240531162124.png":{"createdTime":1739844879942,"modifiedTime":1739424428649,"sourceSize":142328,"sourcePath":"사진 및 문서/Pasted image 20240531162124.png","exportPath":"사진-및-문서/pasted-image-20240531162124.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240722180706.png":{"createdTime":1739844880028,"modifiedTime":1739424428938,"sourceSize":191141,"sourcePath":"사진 및 문서/Pasted image 20240722180706.png","exportPath":"사진-및-문서/pasted-image-20240722180706.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240611144129.png":{"createdTime":1739844879956,"modifiedTime":1739424428657,"sourceSize":167252,"sourcePath":"사진 및 문서/Pasted image 20240611144129.png","exportPath":"사진-및-문서/pasted-image-20240611144129.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240605160336.png":{"createdTime":1739844879953,"modifiedTime":1739424428654,"sourceSize":84155,"sourcePath":"사진 및 문서/Pasted image 20240605160336.png","exportPath":"사진-및-문서/pasted-image-20240605160336.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240723134224.png":{"createdTime":1739844880035,"modifiedTime":1739424428974,"sourceSize":33317,"sourcePath":"사진 및 문서/Pasted image 20240723134224.png","exportPath":"사진-및-문서/pasted-image-20240723134224.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240723134333.png":{"createdTime":1739844880037,"modifiedTime":1739424428975,"sourceSize":27480,"sourcePath":"사진 및 문서/Pasted image 20240723134333.png","exportPath":"사진-및-문서/pasted-image-20240723134333.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240603173517.png":{"createdTime":1739844879943,"modifiedTime":1739424428650,"sourceSize":35221,"sourcePath":"사진 및 문서/Pasted image 20240603173517.png","exportPath":"사진-및-문서/pasted-image-20240603173517.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240603180042.png":{"createdTime":1739844879946,"modifiedTime":1739424428651,"sourceSize":54764,"sourcePath":"사진 및 문서/Pasted image 20240603180042.png","exportPath":"사진-및-문서/pasted-image-20240603180042.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240604102140.png":{"createdTime":1739844879948,"modifiedTime":1739424428652,"sourceSize":70352,"sourcePath":"사진 및 문서/Pasted image 20240604102140.png","exportPath":"사진-및-문서/pasted-image-20240604102140.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20240604144026.png":{"createdTime":1739844879949,"modifiedTime":1739424428653,"sourceSize":65753,"sourcePath":"사진 및 문서/Pasted image 20240604144026.png","exportPath":"사진-및-문서/pasted-image-20240604144026.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250110101642.png":{"createdTime":1739844880435,"modifiedTime":1739424429320,"sourceSize":69526,"sourcePath":"사진 및 문서/Pasted image 20250110101642.png","exportPath":"사진-및-문서/pasted-image-20250110101642.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250110103409.png":{"createdTime":1739844880437,"modifiedTime":1739424429321,"sourceSize":95529,"sourcePath":"사진 및 문서/Pasted image 20250110103409.png","exportPath":"사진-및-문서/pasted-image-20250110103409.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250110122312.png":{"createdTime":1739844880438,"modifiedTime":1739424429321,"sourceSize":33411,"sourcePath":"사진 및 문서/Pasted image 20250110122312.png","exportPath":"사진-및-문서/pasted-image-20250110122312.png","showInTree":false,"treeOrder":0},"사진-및-문서/pasted-image-20250122111223.png":{"createdTime":1739844880474,"modifiedTime":1739424429368,"sourceSize":228572,"sourcePath":"사진 및 문서/Pasted image 20250122111223.png","exportPath":"사진-및-문서/pasted-image-20250122111223.png","showInTree":false,"treeOrder":0},"lib/html/custom-head-content.html":{"createdTime":1741251096686,"modifiedTime":1741595844503,"sourceSize":4165,"sourcePath":"custom_header_content.html","exportPath":"lib/html/custom-head-content.html","showInTree":false,"treeOrder":0},"lib/scripts/graph-wasm.wasm":{"createdTime":1741314249588,"modifiedTime":1739944056206.8618,"sourceSize":23377,"sourcePath":"","exportPath":"lib/scripts/graph-wasm.wasm","showInTree":false,"treeOrder":0},"lib/fonts/94f2f163d4b698242fef.otf":{"createdTime":1741657604958,"modifiedTime":1741657604958,"sourceSize":66800,"sourcePath":"","exportPath":"lib/fonts/94f2f163d4b698242fef.otf","showInTree":false,"treeOrder":0},"lib/fonts/72505e6a122c6acd5471.woff2":{"createdTime":1741657604959,"modifiedTime":1741657604959,"sourceSize":104232,"sourcePath":"","exportPath":"lib/fonts/72505e6a122c6acd5471.woff2","showInTree":false,"treeOrder":0},"lib/fonts/2d5198822ab091ce4305.woff2":{"createdTime":1741657604960,"modifiedTime":1741657604960,"sourceSize":104332,"sourcePath":"","exportPath":"lib/fonts/2d5198822ab091ce4305.woff2","showInTree":false,"treeOrder":0},"lib/fonts/c8ba52b05a9ef10f4758.woff2":{"createdTime":1741657604961,"modifiedTime":1741657604961,"sourceSize":98868,"sourcePath":"","exportPath":"lib/fonts/c8ba52b05a9ef10f4758.woff2","showInTree":false,"treeOrder":0},"lib/fonts/cb10ffd7684cd9836a05.woff2":{"createdTime":1741657604961,"modifiedTime":1741657604961,"sourceSize":106876,"sourcePath":"","exportPath":"lib/fonts/cb10ffd7684cd9836a05.woff2","showInTree":false,"treeOrder":0},"lib/fonts/b5f0f109bc88052d4000.woff2":{"createdTime":1741657604962,"modifiedTime":1741657604962,"sourceSize":105804,"sourcePath":"","exportPath":"lib/fonts/b5f0f109bc88052d4000.woff2","showInTree":false,"treeOrder":0},"lib/fonts/cbe0ae49c52c920fd563.woff2":{"createdTime":1741657604963,"modifiedTime":1741657604963,"sourceSize":106108,"sourcePath":"","exportPath":"lib/fonts/cbe0ae49c52c920fd563.woff2","showInTree":false,"treeOrder":0},"lib/fonts/535a6cf662596b3bd6a6.woff2":{"createdTime":1741657604964,"modifiedTime":1741657604964,"sourceSize":111708,"sourcePath":"","exportPath":"lib/fonts/535a6cf662596b3bd6a6.woff2","showInTree":false,"treeOrder":0},"lib/fonts/70cc7ff27245e82ad414.ttf":{"createdTime":1741657604964,"modifiedTime":1741657604964,"sourceSize":192740,"sourcePath":"","exportPath":"lib/fonts/70cc7ff27245e82ad414.ttf","showInTree":false,"treeOrder":0},"lib/fonts/454577c22304619db035.ttf":{"createdTime":1741657604967,"modifiedTime":1741657604967,"sourceSize":161376,"sourcePath":"","exportPath":"lib/fonts/454577c22304619db035.ttf","showInTree":false,"treeOrder":0},"lib/fonts/52ac8f3034507f1d9e53.ttf":{"createdTime":1741657604965,"modifiedTime":1741657604965,"sourceSize":191568,"sourcePath":"","exportPath":"lib/fonts/52ac8f3034507f1d9e53.ttf","showInTree":false,"treeOrder":0},"lib/fonts/05b618077343fbbd92b7.ttf":{"createdTime":1741657604966,"modifiedTime":1741657604966,"sourceSize":155288,"sourcePath":"","exportPath":"lib/fonts/05b618077343fbbd92b7.ttf","showInTree":false,"treeOrder":0},"lib/fonts/4bb6ac751d1c5478ff3a.woff2":{"createdTime":1741657604956,"modifiedTime":1741657604956,"sourceSize":7876,"sourcePath":"","exportPath":"lib/fonts/4bb6ac751d1c5478ff3a.woff2","showInTree":false,"treeOrder":0},"lib/media/6155340132a851f6089e.svg":{"createdTime":1741657604956,"modifiedTime":1741657604956,"sourceSize":315,"sourcePath":"","exportPath":"lib/media/6155340132a851f6089e.svg","showInTree":false,"treeOrder":0},"lib/media/2308ab1944a6bfa5c5b8.svg":{"createdTime":1741657604958,"modifiedTime":1741657604958,"sourceSize":278,"sourcePath":"","exportPath":"lib/media/2308ab1944a6bfa5c5b8.svg","showInTree":false,"treeOrder":0},"lib/html/file-tree.html":{"createdTime":1741657605231,"modifiedTime":1741657605231,"sourceSize":34101,"sourcePath":"","exportPath":"lib/html/file-tree.html","showInTree":false,"treeOrder":0},"lib/scripts/webpage.js":{"createdTime":1741314251103,"modifiedTime":1741314251103,"sourceSize":49059,"sourcePath":"","exportPath":"lib/scripts/webpage.js","showInTree":false,"treeOrder":0},"lib/scripts/graph-view.js":{"createdTime":1741314251103,"modifiedTime":1741314251103,"sourceSize":15519,"sourcePath":"","exportPath":"lib/scripts/graph-view.js","showInTree":false,"treeOrder":0},"lib/scripts/graph-wasm.js":{"createdTime":1741314251103,"modifiedTime":1741314251103,"sourceSize":14021,"sourcePath":"","exportPath":"lib/scripts/graph-wasm.js","showInTree":false,"treeOrder":0},"lib/scripts/graph-render-worker.js":{"createdTime":1741314251103,"modifiedTime":1741314251103,"sourceSize":5179,"sourcePath":"","exportPath":"lib/scripts/graph-render-worker.js","showInTree":false,"treeOrder":0},"lib/scripts/tinycolor.js":{"createdTime":1741314251103,"modifiedTime":1741314251103,"sourceSize":29832,"sourcePath":"","exportPath":"lib/scripts/tinycolor.js","showInTree":false,"treeOrder":0},"lib/scripts/pixi.js":{"createdTime":1741314251103,"modifiedTime":1741314251103,"sourceSize":449509,"sourcePath":"","exportPath":"lib/scripts/pixi.js","showInTree":false,"treeOrder":0},"lib/scripts/minisearch.js":{"createdTime":1741314251103,"modifiedTime":1741314251103,"sourceSize":29422,"sourcePath":"","exportPath":"lib/scripts/minisearch.js","showInTree":false,"treeOrder":0},"lib/media/favicon.png":{"createdTime":1741327695723.0007,"modifiedTime":1740030352058.8838,"sourceSize":133564,"sourcePath":"","exportPath":"lib/media/favicon.png","showInTree":false,"treeOrder":0},"lib/scripts/graph-data.js":{"createdTime":1741657605233,"modifiedTime":1741657605233,"sourceSize":4532,"sourcePath":"","exportPath":"lib/scripts/graph-data.js","showInTree":false,"treeOrder":0},"lib/styles/obsidian.css":{"createdTime":1741657605057,"modifiedTime":1741657605057,"sourceSize":399091,"sourcePath":"","exportPath":"lib/styles/obsidian.css","showInTree":false,"treeOrder":0},"lib/styles/other-plugins.css":{"createdTime":1741314251413,"modifiedTime":1741314251413,"sourceSize":2702,"sourcePath":"","exportPath":"lib/styles/other-plugins.css","showInTree":false,"treeOrder":0},"lib/styles/theme.css":{"createdTime":1741314251373,"modifiedTime":1741314251373,"sourceSize":41426,"sourcePath":"","exportPath":"lib/styles/theme.css","showInTree":false,"treeOrder":0},"lib/styles/global-variable-styles.css":{"createdTime":1741657604952,"modifiedTime":1741657604952,"sourceSize":417,"sourcePath":"","exportPath":"lib/styles/global-variable-styles.css","showInTree":false,"treeOrder":0},"lib/styles/supported-plugins.css":{"createdTime":1741657604952,"modifiedTime":1741657604952,"sourceSize":1640,"sourcePath":"","exportPath":"lib/styles/supported-plugins.css","showInTree":false,"treeOrder":0},"lib/styles/main-styles.css":{"createdTime":1741314251127,"modifiedTime":1741314251127,"sourceSize":19271,"sourcePath":"","exportPath":"lib/styles/main-styles.css","showInTree":false,"treeOrder":0},"lib/metadata.json":{"createdTime":1741657644327,"modifiedTime":1741657644327,"sourceSize":809302,"sourcePath":"","exportPath":"lib/metadata.json","showInTree":false,"treeOrder":0},"lib/search-index.json":{"createdTime":1741657644327,"modifiedTime":1741657644327,"sourceSize":712287,"sourcePath":"","exportPath":"lib/search-index.json","showInTree":false,"treeOrder":0}},"sourceToTarget":{"Issue_TroubleShooting/⏰ Script 로딩 지연 이슈.md":"issue_troubleshooting/⏰-script-로딩-지연-이슈.html","Issue_TroubleShooting/⚔ StckOverflow 이슈와 QueryDSL.md":"issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html","Issue_TroubleShooting/🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안.md":"issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html","Issue_TroubleShooting/🚦 Spring Batch(스레드와 트렌젝션) 트러블슈팅.md":"issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html","lectur/🏫 강의.md":"lectur/🏫-강의.html","lectur/1. 객체 지향 설계와 스프링.md":"lectur/1.-객체-지향-설계와-스프링.html","lectur/2. 스프링 핵심 원리 이해.md":"lectur/2.-스프링-핵심-원리-이해.html","project/hello Batch/✏ Chunk_Partitioning Batch 구조 드로잉.md":"project/hello-batch/✏-chunk_partitioning-batch-구조-드로잉.html","project/hello Batch/🏹 예치금 차액 비교 Spring Batch 리펙토링.md":"project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html","project/hello Batch/🏹 예치금 차액 비교 Spring Batch 리펙토링 부록.md":"project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html","project/hello marketing/👩‍👧‍👦 Analytics 공통모듈 ADMIN용 데이터 추출.md":"project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html","project/hello marketing/👩‍👧‍👦 marketing Analytics 공통모듈 제작기.md":"project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html","project/note CI_CD/⛈ Obsidian-AWS연동.md":"project/note-ci_cd/⛈-obsidian-aws연동.html","project/note CI_CD/👻 Obsidian 정적호스팅 CICD 과정.md":"project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html","project/💻 프로젝트.md":"project/💻-프로젝트.html","study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 키워드.md":"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html","study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 프로그래밍-제어문.md":"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html","study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 SQL 문제.md":"study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html","study/정보처리기사/정보처리기사 필기/🥈 필기 1과목 - 소프트웨어 설계.md":"study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html","study/정보처리기사/정보처리기사 필기/🥈 필기 2과목 - 소프트웨어 개발.md":"study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html","study/정보처리기사/정보처리기사 필기/🥈 필기 3과목 - 데이터베이스 구축.md":"study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html","study/정보처리기사/정보처리기사 필기/🥈 필기 4과목 - 프로그래밍 언어 활용.md":"study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html","study/정보처리기사/정보처리기사 필기/🥈 필기 5과목 - 정보시스템 구축관리.md":"study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html","study/커리큘럼/🆕 Dev 커리큘럼.md":"study/커리큘럼/🆕-dev-커리큘럼.html","study/Coding Test/👽 Algorithm.md":"study/coding-test/👽-algorithm.html","study/Coding Test/🤠 Coding Test 풀이 모음.md":"study/coding-test/🤠-coding-test-풀이-모음.html","study/CS/☕ JAVA , OOP.md":"study/cs/☕-java-,-oop.html","study/CS/🍃 Spring.md":"study/cs/🍃-spring.html","study/CS/🎩 DevOps.md":"study/cs/🎩-devops.html","study/CS/🐞 etc.md":"study/cs/🐞-etc.html","study/CS/📔 DataBase.md":"study/cs/📔-database.html","study/CS/📭 Server.md":"study/cs/📭-server.html","study/Dev Seminar/🍂 JPA, Mybatis , Dead Lock.md":"study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html","study/Dev Seminar/📔 DB 테이블 설계, 어떻게 하는게 옳은 방법인가.md":"study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html","study/Dev Seminar/🔹 TDD에 대하여.md":"study/dev-seminar/🔹-tdd에-대하여.html","study/Dev Seminar/🔻 Redis 캐쉬 전략 - hello 서비스에 적용하여 성능개선 가능성.md":"study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html","study/Dev Seminar/🥗 Spring Security_토큰-세션-쿠키-JWT 에 대하여.md":"study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html","study/Dev Seminar/🪕 JPA 에 대한 고찰.md":"study/dev-seminar/🪕-jpa-에-대한-고찰.html","study/📕 공부.md":"study/📕-공부.html","Tools/aws/🌥 aws(EC2)셋팅부터 배포까지.md":"tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html","Tools/aws/🍊 aws EC2란.md":"tools/aws/🍊-aws-ec2란.html","Tools/aws/🍌 Elastic IP(탄력적 IP)란.md":"tools/aws/🍌-elastic-ip(탄력적-ip)란.html","Tools/docker/🐋 docker.md":"tools/docker/🐋-docker.html","Tools/docker/📘 SpringBoot & Docker + Reids 연동.md":"tools/docker/📘-springboot-&-docker-+-reids-연동.html","Tools/🎵 Obsidian.md":"tools/🎵-obsidian.html","Tools/🪓 도구.md":"tools/🪓-도구.html","index.md":"index.html","사진 및 문서/Pasted image 20250225161448.png":"사진-및-문서/pasted-image-20250225161448.png","사진 및 문서/Pasted image 20250307172522.png":"사진-및-문서/pasted-image-20250307172522.png","사진 및 문서/Pasted image 20250218151731.png":"사진-및-문서/pasted-image-20250218151731.png","사진 및 문서/Pasted image 20250218151806.png":"사진-및-문서/pasted-image-20250218151806.png","사진 및 문서/Pasted image 20250218152044.png":"사진-및-문서/pasted-image-20250218152044.png","사진 및 문서/Pasted image 20250218152103.png":"사진-및-문서/pasted-image-20250218152103.png","사진 및 문서/Pasted image 20250218153131.png":"사진-및-문서/pasted-image-20250218153131.png","사진 및 문서/Pasted image 20250218153319.png":"사진-및-문서/pasted-image-20250218153319.png","사진 및 문서/Pasted image 20250218153445.png":"사진-및-문서/pasted-image-20250218153445.png","사진 및 문서/Pasted image 20250218153543.png":"사진-및-문서/pasted-image-20250218153543.png","사진 및 문서/Pasted image 20250218153553.png":"사진-및-문서/pasted-image-20250218153553.png","사진 및 문서/Pasted image 20250218151330.png":"사진-및-문서/pasted-image-20250218151330.png","사진 및 문서/Pasted image 20250218153814.png":"사진-및-문서/pasted-image-20250218153814.png","사진 및 문서/Pasted image 20250218153858.png":"사진-및-문서/pasted-image-20250218153858.png","사진 및 문서/Pasted image 20250218154352.png":"사진-및-문서/pasted-image-20250218154352.png","사진 및 문서/Pasted image 20250218154433.png":"사진-및-문서/pasted-image-20250218154433.png","사진 및 문서/Pasted image 20250218154615.png":"사진-및-문서/pasted-image-20250218154615.png","사진 및 문서/Pasted image 20250218154633.png":"사진-및-문서/pasted-image-20250218154633.png","사진 및 문서/Pasted image 20250218154647.png":"사진-및-문서/pasted-image-20250218154647.png","사진 및 문서/Pasted image 20250218155524.png":"사진-및-문서/pasted-image-20250218155524.png","사진 및 문서/Pasted image 20250218160328.png":"사진-및-문서/pasted-image-20250218160328.png","사진 및 문서/Pasted image 20250218160359.png":"사진-및-문서/pasted-image-20250218160359.png","사진 및 문서/Pasted image 20250218160428.png":"사진-및-문서/pasted-image-20250218160428.png","사진 및 문서/Pasted image 20250218160532.png":"사진-및-문서/pasted-image-20250218160532.png","사진 및 문서/Pasted image 20250218160956.png":"사진-및-문서/pasted-image-20250218160956.png","사진 및 문서/Pasted image 20250218161424.png":"사진-및-문서/pasted-image-20250218161424.png","사진 및 문서/Pasted image 20250218161515.png":"사진-및-문서/pasted-image-20250218161515.png","사진 및 문서/Pasted image 20250218161728.png":"사진-및-문서/pasted-image-20250218161728.png","사진 및 문서/Pasted image 20250218161824.png":"사진-및-문서/pasted-image-20250218161824.png","사진 및 문서/Pasted image 20250218161847.png":"사진-및-문서/pasted-image-20250218161847.png","사진 및 문서/Pasted image 20250218161937.png":"사진-및-문서/pasted-image-20250218161937.png","사진 및 문서/Pasted image 20250218162355.png":"사진-및-문서/pasted-image-20250218162355.png","사진 및 문서/do-messenger_screenshot_2025-02-19_16_19_04.png":"사진-및-문서/do-messenger_screenshot_2025-02-19_16_19_04.png","사진 및 문서/Pasted image 20250219154331.png":"사진-및-문서/pasted-image-20250219154331.png","사진 및 문서/Pasted image 20250219154315.png":"사진-및-문서/pasted-image-20250219154315.png","사진 및 문서/Pasted image 20241224144309.png":"사진-및-문서/pasted-image-20241224144309.png","사진 및 문서/Pasted image 20241226111559.png":"사진-및-문서/pasted-image-20241226111559.png","사진 및 문서/Pasted image 20250102160223.png":"사진-및-문서/pasted-image-20250102160223.png","사진 및 문서/Pasted image 20241226152219.png":"사진-및-문서/pasted-image-20241226152219.png","사진 및 문서/Pasted image 20241226171158.png":"사진-및-문서/pasted-image-20241226171158.png","사진 및 문서/Pasted image 20241230135801.png":"사진-및-문서/pasted-image-20241230135801.png","사진 및 문서/Pasted image 20250102160213.png":"사진-및-문서/pasted-image-20250102160213.png","사진 및 문서/Pasted image 20250226145129.png":"사진-및-문서/pasted-image-20250226145129.png","사진 및 문서/Pasted image 20250220144552.png":"사진-및-문서/pasted-image-20250220144552.png","사진 및 문서/output (9).png":"사진-및-문서/output-(9).png","사진 및 문서/Pasted image 20241206113120.png":"사진-및-문서/pasted-image-20241206113120.png","사진 및 문서/회사 은행 서비스1111.png":"사진-및-문서/회사-은행-서비스1111.png","사진 및 문서/Spring Batch Tasklet 예치금 잔액 비교 1.png":"사진-및-문서/spring-batch-tasklet-예치금-잔액-비교-1.png","사진 및 문서/Spring Batch Tasklet 예치금 잔액 비교 잘못된 차액발생 인식 타임라인.png":"사진-및-문서/spring-batch-tasklet-예치금-잔액-비교-잘못된-차액발생-인식-타임라인.png","사진 및 문서/output (1).png":"사진-및-문서/output-(1).png","사진 및 문서/Pasted image 20241217150339.png":"사진-및-문서/pasted-image-20241217150339.png","사진 및 문서/Pasted image 20241219145746.png":"사진-및-문서/pasted-image-20241219145746.png","사진 및 문서/output (9) 1.png":"사진-및-문서/output-(9)-1.png","사진 및 문서/output (10).png":"사진-및-문서/output-(10).png","사진 및 문서/do-messenger_screenshot_2024-12-23_14_40_21.png":"사진-및-문서/do-messenger_screenshot_2024-12-23_14_40_21.png","사진 및 문서/Pasted image 20241224093159.png":"사진-및-문서/pasted-image-20241224093159.png","사진 및 문서/Pasted image 20241224093207.png":"사진-및-문서/pasted-image-20241224093207.png","사진 및 문서/Pasted image 20241224093225.png":"사진-및-문서/pasted-image-20241224093225.png","사진 및 문서/Pasted image 20250305173344.png":"사진-및-문서/pasted-image-20250305173344.png","사진 및 문서/Pasted image 20250305175924.png":"사진-및-문서/pasted-image-20250305175924.png","사진 및 문서/Pasted image 20241213102128.png":"사진-및-문서/pasted-image-20241213102128.png","사진 및 문서/Pasted image 20250304170347.png":"사진-및-문서/pasted-image-20250304170347.png","사진 및 문서/Pasted image 20250304170412.png":"사진-및-문서/pasted-image-20250304170412.png","사진 및 문서/Pasted image 20250304171240.png":"사진-및-문서/pasted-image-20250304171240.png","사진 및 문서/Pasted image 20241213102229.png":"사진-및-문서/pasted-image-20241213102229.png","사진 및 문서/Pasted image 20241213143101.png":"사진-및-문서/pasted-image-20241213143101.png","사진 및 문서/Pasted image 20241213143217.png":"사진-및-문서/pasted-image-20241213143217.png","사진 및 문서/Pasted image 20241213103503.png":"사진-및-문서/pasted-image-20241213103503.png","사진 및 문서/Pasted image 20241105110415.png":"사진-및-문서/pasted-image-20241105110415.png","사진 및 문서/Pasted image 20250227140437.png":"사진-및-문서/pasted-image-20250227140437.png","사진 및 문서/Pasted image 20250227140620.png":"사진-및-문서/pasted-image-20250227140620.png","사진 및 문서/Pasted image 20241105110637.png":"사진-및-문서/pasted-image-20241105110637.png","사진 및 문서/Pasted image 20241105110713.png":"사진-및-문서/pasted-image-20241105110713.png","사진 및 문서/Pasted image 20241107115602.png":"사진-및-문서/pasted-image-20241107115602.png","사진 및 문서/Pasted image 20241107115830.png":"사진-및-문서/pasted-image-20241107115830.png","사진 및 문서/Pasted image 20241107121044.png":"사진-및-문서/pasted-image-20241107121044.png","사진 및 문서/Pasted image 20241107121202.png":"사진-및-문서/pasted-image-20241107121202.png","사진 및 문서/Pasted image 20241107121939.png":"사진-및-문서/pasted-image-20241107121939.png","사진 및 문서/Pasted image 20250227114750.png":"사진-및-문서/pasted-image-20250227114750.png","사진 및 문서/Pasted image 20250227114826.png":"사진-및-문서/pasted-image-20250227114826.png","사진 및 문서/Pasted image 20250227115004.png":"사진-및-문서/pasted-image-20250227115004.png","사진 및 문서/Pasted image 20250227115015.png":"사진-및-문서/pasted-image-20250227115015.png","사진 및 문서/Pasted image 20250227115158.png":"사진-및-문서/pasted-image-20250227115158.png","사진 및 문서/Pasted image 20250227115148.png":"사진-및-문서/pasted-image-20250227115148.png","사진 및 문서/Pasted image 20250227121009.png":"사진-및-문서/pasted-image-20250227121009.png","사진 및 문서/Pasted image 20250227121046.png":"사진-및-문서/pasted-image-20250227121046.png","사진 및 문서/Pasted image 20250227121942.png":"사진-및-문서/pasted-image-20250227121942.png","사진 및 문서/Pasted image 20250227122010.png":"사진-및-문서/pasted-image-20250227122010.png","사진 및 문서/Pasted image 20250227122736.png":"사진-및-문서/pasted-image-20250227122736.png","사진 및 문서/output (14).png":"사진-및-문서/output-(14).png","사진 및 문서/Pasted image 20250304121056.png":"사진-및-문서/pasted-image-20250304121056.png","사진 및 문서/Pasted image 20250304121009.png":"사진-및-문서/pasted-image-20250304121009.png","사진 및 문서/Pasted image 20250304121455.png":"사진-및-문서/pasted-image-20250304121455.png","사진 및 문서/Pasted image 20250304121338.png":"사진-및-문서/pasted-image-20250304121338.png","사진 및 문서/Pasted image 20240610171904.png":"사진-및-문서/pasted-image-20240610171904.png","사진 및 문서/Pasted image 20240531103441.png":"사진-및-문서/pasted-image-20240531103441.png","사진 및 문서/Pasted image 20240531103549.png":"사진-및-문서/pasted-image-20240531103549.png","사진 및 문서/Pasted image 20240531105228.png":"사진-및-문서/pasted-image-20240531105228.png","사진 및 문서/Pasted image 20240531105241.png":"사진-및-문서/pasted-image-20240531105241.png","사진 및 문서/Pasted image 20240531104351.png":"사진-및-문서/pasted-image-20240531104351.png","사진 및 문서/Pasted image 20240531104418.png":"사진-및-문서/pasted-image-20240531104418.png","사진 및 문서/Pasted image 20240531104751.png":"사진-및-문서/pasted-image-20240531104751.png","사진 및 문서/Pasted image 20240531104803.png":"사진-및-문서/pasted-image-20240531104803.png","사진 및 문서/Pasted image 20240828104032.png":"사진-및-문서/pasted-image-20240828104032.png","사진 및 문서/Pasted image 20240828104728.png":"사진-및-문서/pasted-image-20240828104728.png","사진 및 문서/Pasted image 20250228150552.png":"사진-및-문서/pasted-image-20250228150552.png","사진 및 문서/Pasted image 20250102181842.png":"사진-및-문서/pasted-image-20250102181842.png","사진 및 문서/Pasted image 20250221112429.png":"사진-및-문서/pasted-image-20250221112429.png","사진 및 문서/Pasted image 20250221114856.png":"사진-및-문서/pasted-image-20250221114856.png","사진 및 문서/Pasted image 20250221114901.png":"사진-및-문서/pasted-image-20250221114901.png","사진 및 문서/Pasted image 20250221114932.png":"사진-및-문서/pasted-image-20250221114932.png","사진 및 문서/Pasted image 20250221114945.png":"사진-및-문서/pasted-image-20250221114945.png","사진 및 문서/Pasted image 20250221114951.png":"사진-및-문서/pasted-image-20250221114951.png","사진 및 문서/Pasted image 20250221114959.png":"사진-및-문서/pasted-image-20250221114959.png","사진 및 문서/Pasted image 20250221115004.png":"사진-및-문서/pasted-image-20250221115004.png","사진 및 문서/Pasted image 20250221115010.png":"사진-및-문서/pasted-image-20250221115010.png","사진 및 문서/Pasted image 20250221115019.png":"사진-및-문서/pasted-image-20250221115019.png","사진 및 문서/Pasted image 20250221115024.png":"사진-및-문서/pasted-image-20250221115024.png","사진 및 문서/Pasted image 20250221115030.png":"사진-및-문서/pasted-image-20250221115030.png","사진 및 문서/Pasted image 20250221115035.png":"사진-및-문서/pasted-image-20250221115035.png","사진 및 문서/Pasted image 20250221115040.png":"사진-및-문서/pasted-image-20250221115040.png","사진 및 문서/Pasted image 20250221115046.png":"사진-및-문서/pasted-image-20250221115046.png","사진 및 문서/Pasted image 20250221115052.png":"사진-및-문서/pasted-image-20250221115052.png","사진 및 문서/Pasted image 20250221115058.png":"사진-및-문서/pasted-image-20250221115058.png","사진 및 문서/Pasted image 20250221115102.png":"사진-및-문서/pasted-image-20250221115102.png","사진 및 문서/Pasted image 20250221115117.png":"사진-및-문서/pasted-image-20250221115117.png","사진 및 문서/Pasted image 20250221115122.png":"사진-및-문서/pasted-image-20250221115122.png","사진 및 문서/Pasted image 20250221115129.png":"사진-및-문서/pasted-image-20250221115129.png","사진 및 문서/Pasted image 20250221115132.png":"사진-및-문서/pasted-image-20250221115132.png","사진 및 문서/Pasted image 20250221115136.png":"사진-및-문서/pasted-image-20250221115136.png","사진 및 문서/Pasted image 20250221115140.png":"사진-및-문서/pasted-image-20250221115140.png","사진 및 문서/Pasted image 20250221115146.png":"사진-및-문서/pasted-image-20250221115146.png","사진 및 문서/Pasted image 20250221115151.png":"사진-및-문서/pasted-image-20250221115151.png","사진 및 문서/Pasted image 20250221115157.png":"사진-및-문서/pasted-image-20250221115157.png","사진 및 문서/Pasted image 20250221115201.png":"사진-및-문서/pasted-image-20250221115201.png","사진 및 문서/Pasted image 20250221115214.png":"사진-및-문서/pasted-image-20250221115214.png","사진 및 문서/Pasted image 20250221115220.png":"사진-및-문서/pasted-image-20250221115220.png","사진 및 문서/Pasted image 20250221115224.png":"사진-및-문서/pasted-image-20250221115224.png","사진 및 문서/Pasted image 20250221115228.png":"사진-및-문서/pasted-image-20250221115228.png","사진 및 문서/Pasted image 20250221115232.png":"사진-및-문서/pasted-image-20250221115232.png","사진 및 문서/Pasted image 20250221114152.png":"사진-및-문서/pasted-image-20250221114152.png","사진 및 문서/Pasted image 20250221114208.png":"사진-및-문서/pasted-image-20250221114208.png","사진 및 문서/Pasted image 20250221114220.png":"사진-및-문서/pasted-image-20250221114220.png","사진 및 문서/Pasted image 20250221114306.png":"사진-및-문서/pasted-image-20250221114306.png","사진 및 문서/Pasted image 20250221114324.png":"사진-및-문서/pasted-image-20250221114324.png","사진 및 문서/Pasted image 20250221114327.png":"사진-및-문서/pasted-image-20250221114327.png","사진 및 문서/Pasted image 20250221114334.png":"사진-및-문서/pasted-image-20250221114334.png","사진 및 문서/Pasted image 20250221114339.png":"사진-및-문서/pasted-image-20250221114339.png","사진 및 문서/Pasted image 20250221114345.png":"사진-및-문서/pasted-image-20250221114345.png","사진 및 문서/Pasted image 20250221114353.png":"사진-및-문서/pasted-image-20250221114353.png","사진 및 문서/Pasted image 20250221114400.png":"사진-및-문서/pasted-image-20250221114400.png","사진 및 문서/Pasted image 20250221114406.png":"사진-및-문서/pasted-image-20250221114406.png","사진 및 문서/Pasted image 20250221114411.png":"사진-및-문서/pasted-image-20250221114411.png","사진 및 문서/Pasted image 20250221114423.png":"사진-및-문서/pasted-image-20250221114423.png","사진 및 문서/Pasted image 20250221114428.png":"사진-및-문서/pasted-image-20250221114428.png","사진 및 문서/Pasted image 20250221114434.png":"사진-및-문서/pasted-image-20250221114434.png","사진 및 문서/Pasted image 20250221114439.png":"사진-및-문서/pasted-image-20250221114439.png","사진 및 문서/Pasted image 20250221114443.png":"사진-및-문서/pasted-image-20250221114443.png","사진 및 문서/Pasted image 20250221114501.png":"사진-및-문서/pasted-image-20250221114501.png","사진 및 문서/Pasted image 20250221114448.png":"사진-및-문서/pasted-image-20250221114448.png","사진 및 문서/Pasted image 20250221114522.png":"사진-및-문서/pasted-image-20250221114522.png","사진 및 문서/Pasted image 20250221114527.png":"사진-및-문서/pasted-image-20250221114527.png","사진 및 문서/Pasted image 20250221114531.png":"사진-및-문서/pasted-image-20250221114531.png","사진 및 문서/Pasted image 20250221114535.png":"사진-및-문서/pasted-image-20250221114535.png","사진 및 문서/Pasted image 20250221114539.png":"사진-및-문서/pasted-image-20250221114539.png","사진 및 문서/Pasted image 20250221114543.png":"사진-및-문서/pasted-image-20250221114543.png","사진 및 문서/Pasted image 20250221114600.png":"사진-및-문서/pasted-image-20250221114600.png","사진 및 문서/Pasted image 20250221114605.png":"사진-및-문서/pasted-image-20250221114605.png","사진 및 문서/Pasted image 20250221114610.png":"사진-및-문서/pasted-image-20250221114610.png","사진 및 문서/Pasted image 20250221114616.png":"사진-및-문서/pasted-image-20250221114616.png","사진 및 문서/Pasted image 20250221114621.png":"사진-및-문서/pasted-image-20250221114621.png","사진 및 문서/Pasted image 20250221114628.png":"사진-및-문서/pasted-image-20250221114628.png","사진 및 문서/Pasted image 20250221114633.png":"사진-및-문서/pasted-image-20250221114633.png","사진 및 문서/Pasted image 20250221114638.png":"사진-및-문서/pasted-image-20250221114638.png","사진 및 문서/Pasted image 20250221114644.png":"사진-및-문서/pasted-image-20250221114644.png","사진 및 문서/Pasted image 20250221114648.png":"사진-및-문서/pasted-image-20250221114648.png","사진 및 문서/Pasted image 20250221114743.png":"사진-및-문서/pasted-image-20250221114743.png","사진 및 문서/do-messenger_screenshot_2025-02-10_15_04_45.png":"사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png","사진 및 문서/do-messenger_screenshot_2025-02-10_17_10_58.png":"사진-및-문서/do-messenger_screenshot_2025-02-10_17_10_58.png","사진 및 문서/do-messenger_screenshot_2025-02-11_13_47_16.png":"사진-및-문서/do-messenger_screenshot_2025-02-11_13_47_16.png","사진 및 문서/do-messenger_screenshot_2025-02-11_15_32_34.png":"사진-및-문서/do-messenger_screenshot_2025-02-11_15_32_34.png","사진 및 문서/do-messenger_screenshot_2025-02-11_16_31_10.png":"사진-및-문서/do-messenger_screenshot_2025-02-11_16_31_10.png","사진 및 문서/do-messenger_screenshot_2025-02-12_14_04_58.png":"사진-및-문서/do-messenger_screenshot_2025-02-12_14_04_58.png","사진 및 문서/Pasted image 20250218145702.png":"사진-및-문서/pasted-image-20250218145702.png","사진 및 문서/Pasted image 20250218145823.png":"사진-및-문서/pasted-image-20250218145823.png","사진 및 문서/Pasted image 20250110144021.png":"사진-및-문서/pasted-image-20250110144021.png","사진 및 문서/Pasted image 20241206140739.png":"사진-및-문서/pasted-image-20241206140739.png","사진 및 문서/Pasted image 20241206140822.png":"사진-및-문서/pasted-image-20241206140822.png","사진 및 문서/Pasted image 20241220113308.png":"사진-및-문서/pasted-image-20241220113308.png","사진 및 문서/Pasted image 20241220113315.png":"사진-및-문서/pasted-image-20241220113315.png","사진 및 문서/Pasted image 20240531162124.png":"사진-및-문서/pasted-image-20240531162124.png","사진 및 문서/Pasted image 20240722180706.png":"사진-및-문서/pasted-image-20240722180706.png","사진 및 문서/Pasted image 20240611144129.png":"사진-및-문서/pasted-image-20240611144129.png","사진 및 문서/Pasted image 20240605160336.png":"사진-및-문서/pasted-image-20240605160336.png","사진 및 문서/Pasted image 20240723134224.png":"사진-및-문서/pasted-image-20240723134224.png","사진 및 문서/Pasted image 20240723134333.png":"사진-및-문서/pasted-image-20240723134333.png","사진 및 문서/Pasted image 20240603173517.png":"사진-및-문서/pasted-image-20240603173517.png","사진 및 문서/Pasted image 20240603180042.png":"사진-및-문서/pasted-image-20240603180042.png","사진 및 문서/Pasted image 20240604102140.png":"사진-및-문서/pasted-image-20240604102140.png","사진 및 문서/Pasted image 20240604144026.png":"사진-및-문서/pasted-image-20240604144026.png","사진 및 문서/Pasted image 20250110101642.png":"사진-및-문서/pasted-image-20250110101642.png","사진 및 문서/Pasted image 20250110103409.png":"사진-및-문서/pasted-image-20250110103409.png","사진 및 문서/Pasted image 20250110122312.png":"사진-및-문서/pasted-image-20250110122312.png","사진 및 문서/Pasted image 20250122111223.png":"사진-및-문서/pasted-image-20250122111223.png","custom_header_content.html":"lib/html/custom-head-content.html","":"lib/search-index.json"},"modifiedTime":1741657605062,"siteName":"blog","exportRoot":"/","pluginVersion":"1.9.0-3b","themeName":"Things","bodyClasses":"publish css-settings-manager theme-dark show-inline-title show-ribbon is-focused","addCustomHead":true,"addFavicon":true}