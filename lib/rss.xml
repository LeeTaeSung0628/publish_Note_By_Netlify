<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Category]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://lts.kr/</link><image><url>https://lts.kr/lib/media/favicon.png</url><title>Category</title><link>https://lts.kr/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Tue, 10 Jun 2025 02:18:48 GMT</lastBuildDate><atom:link href="https://lts.kr/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Tue, 10 Jun 2025 02:18:42 GMT</pubDate><copyright><![CDATA[taesung's Blog]]></copyright><ttl>60</ttl><dc:creator>taesung's Blog</dc:creator><item><title><![CDATA[☘ ANONI Chat - NGINX(feat. Kibana오류와 HTTPS 적용하기)]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="https://lts.kr/?query=tag:개발" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개발</a> <a class="tag" href="https://lts.kr/?query=tag:보안" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#보안</a> <a class="tag" href="https://lts.kr/?query=tag:인프라" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#인프라</a> <a class="tag" href="https://lts.kr/?query=tag:HTTPS" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#HTTPS</a> <a class="tag" href="https://lts.kr/?query=tag:트러블슈팅" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#트러블슈팅</a> <a class="tag" href="https://lts.kr/?query=tag:NGINX" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#NGINX</a> <br> <a href="https://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="https://lts.kr?query=tag:개발" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개발">#개발</a> <a href="https://lts.kr?query=tag:보안" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#보안">#보안</a> <a href="https://lts.kr?query=tag:인프라" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#인프라">#인프라</a> <a href="https://lts.kr?query=tag:HTTPS" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#HTTPS">#HTTPS</a> <a href="https://lts.kr?query=tag:트러블슈팅" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#트러블슈팅">#트러블슈팅</a> <a href="https://lts.kr?query=tag:NGINX" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#NGINX">#NGINX</a><br>
<br>elasticsearch 라이센스 및 보안 문제
<br>Kibana에 접속시, UI가 안보이고 오류로그가 JSON 형태로만 보이는 오류가 발생.<br><img alt="do-messenger_screenshot_2025-06-09_17_27_36.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-09_17_27_36.png" style="width: 600px; max-width: 100%;" target="_self"><br>찾아보니 elasticsearch 7.11+ 버전에서 발생하는 문제라고 한다.<br>우선 임시방편으로 docker-compose.yml을 수정할 필요가 있다.<br>
라이센스를 basic으로 명시해줘야하고 보안 설정을 false로 해야한다.<br>보안 설정을 해제하는 이유는 보안 설정을 하면 HTTPS 사용이 강제되어서 HTTP로는 접근이 불가능하기 때문이다. <br>정보
현재는 환경 구축 단계이고 HTTPS를 적용하지 않은 상태이기 때문에 나중에 HTTPS 설정을 하고 보안 설정을 다시 할 예정이다.
<br>docker-compose.yml 변경 사항<br>elasticsearch: image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1 environment: - discovery.type=single-node - xpack.security.enabled=false # 보안 기능 비활성화 - xpack.license.self_generated.type=basic # 기본 라이센스 사용 ports: - "9200:9200" networks: - elk volumes: - esdata:/usr/share/elasticsearch/data kibana: image: docker.elastic.co/kibana/kibana:7.11.1 ports: - "5601:5601" networks: - elk environment: - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 - server.host=0.0.0.0 - xpack.security.enabled=false # Kibana 보안 비활성화 - xpack.license.self_generated.type=basic
<br>정상 출력
<img alt="Pasted image 20250609174528.png" src="https://lts.kr/사진-및-문서/pasted-image-20250609174528.png" target="_self">
<br>
<br>HTTPS(HyperText Transfer Protocol Secure)는 HTTP에 SSL/TLS 암호화를 추가한 보안 통신 프로토콜이다.
<br>암호화 : 데이터가 전송 중에 도청당하지 않도록 암호화
<br>무결성 : 데이터가 중간에 조작되지 않았는지 검증
<br>인증 : 서버의 신원을 보장(브라우저의 자물쇠 표시)
<br>SSL인증서
<br>포트 : 443번 (https://URL에 포트명 생략되어있음, http://URL 은 80포트)
<br>
<br>엔진엑스는 웹서버이자 리버스 프록시서버로, 정적 파일을 제공하고, 트래픽 분산, HTTPS 처리, 도메인 라우팅 등 다목적 기능을 수행하는 경량 고성능 서버이다.
<br>정적 웹 서버 : HTML, CSS, JS 등 정적 리소스를 클라이언트에 서빙
<br>리버스 프록시 : 클라이언트 요청을 백엔드(Spring 등)에 전달
<br>로드 벌런싱 : 여러 백엔드 서버에 트래픽 분산
<br>HTTPS 종단 처리 : SSL인증서를 이용해 HTTPS 연결처리
<br>[ 클라이언트 (브라우저) ] ⇩ HTTPS 요청 (443)
┌──────────────────────┐
│ NGINX 서버 │
│ - SSL 인증서 보유 │
│ - HTTPS 처리 │
│ - 요청을 Spring에 전달 │
└─────────┬────────────┘ ⇩ HTTP (80) [ Spring Boot 서버 ]
<br>SSL 오프로드 : SSL 암호화 부담을 NGINX가 맡아 백엔드는 단순 HTTP로 처리
<br>인증서 관리 용이 : 여러 백엔드에 인증서 분산하지 않고 NGINX 한 곳에서 관리
<br>도메인 기반 라우팅 가능 : 여러 도메인 요청을 각기 다른 백엔드로 라우팅 가능 (/api, /admin 등)
<br>정리
HTTPS등 인증서를 Spring에서 직접처리해도 되지만,<br>
NGINX에서 프록시 + 인증서 처리를 담당하는 것이 확장성/유지보수 측면에서 유리하다.
<br>]]></description><link>https://lts.kr/project/new-project/☘-anoni-chat-nginx(feat.-kibana오류와-https-적용하기).html</link><guid isPermaLink="false">project/New Project/☘ ANONI Chat - NGINX(feat. Kibana오류와 HTTPS 적용하기).md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Tue, 10 Jun 2025 02:18:31 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-09_17_27_36.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-09_17_27_36.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[☘ ANONI Chat - ELK Stack setting]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="https://lts.kr/?query=tag:개발" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개발</a> <a class="tag" href="https://lts.kr/?query=tag:인프라" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#인프라</a> <a class="tag" href="https://lts.kr/?query=tag:Elasticsearch" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Elasticsearch</a> <a class="tag" href="https://lts.kr/?query=tag:Logstash" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Logstash</a> <a class="tag" href="https://lts.kr/?query=tag:Kibana" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Kibana</a> <br> <a href="https://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="https://lts.kr?query=tag:개발" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개발">#개발</a> <a href="https://lts.kr?query=tag:인프라" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#인프라">#인프라</a> <a href="https://lts.kr?query=tag:Elasticsearch" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Elasticsearch">#Elasticsearch</a> <a href="https://lts.kr?query=tag:Logstash" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Logstash">#Logstash</a> <a href="https://lts.kr?query=tag:Kibana" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Kibana">#Kibana</a><br>
<br>ELK는 Elasticsearch, Logstash, Kibana의 약자로, 로그 수집, 저장, 분석, 시각화를 위한 오픈소스 로그 플랫폼 스택이다.
<br>최근에는 Beats까지 포함한 "Elastic Stack" 이라고도 부른다.
<br><img alt="do-messenger_screenshot_2025-06-04_13_38_39.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_13_38_39.png" target="_self"><br>
<br>고성능을 위해 많은 메모리가 필요하다.
<br>infra를 셋팅하는데 있어서 러닝커브가 높다..
<br>build.gradle<br>dependencies { implementation 'net.logstash.logback:logstash-logback-encoder:7.4' }
<br>logstash 의존성을 추가해준다.
<br>
<br>spring boot용 Logback 로깅 사용자 정의 설정파일
<br>logback-spring.xml<br>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;configuration&gt; &lt;!--모든 로그를 콘솔에 출력--&gt; &lt;appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender"&gt; &lt;encoder&gt; &lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;!--예: `12:30:15.321 [main] INFO AuctionService - Started`--&gt; &lt;/appender&gt; &lt;appender name="MAIN_LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender"&gt; &lt;destination&gt;logstash:5000&lt;/destination&gt; &lt;!--컨테이너 포트 5000으로 전송--&gt; &lt;encoder class="net.logstash.logback.encoder.LogstashEncoder" /&gt; &lt;!--JSON 형식 로그로 인코딩--&gt; &lt;keepAliveDuration&gt;5 minutes&lt;/keepAliveDuration&gt; &lt;!--TCP연결 5분간 유지--&gt; &lt;/appender&gt; &lt;!-- 추가적으로 로그 분기 가능 (ex) &lt;appender name="CUSTOM_LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender"&gt; &lt;destination&gt;logstash:5001&lt;/destination&gt; &lt;encoder class="net.logstash.logback.encoder.LogstashEncoder" /&gt; &lt;keepAliveDuration&gt;5 minutes&lt;/keepAliveDuration&gt; &lt;/appender&gt;
--&gt; &lt;!--전체 시스템 로그 중 INFO 이상만 콘솔 출력 (별도 logger 설정 없는 경우에 해당)--&gt; &lt;root level="info"&gt; &lt;appender-ref ref="MAIN_LOGSTASH" /&gt; &lt;appender-ref ref="CONSOLE" /&gt; &lt;/root&gt; &lt;!-- 클래스 또는 패키지 이름이 `MainServiceLogger`인 로거에 적용 DEBUG 이상 로그 additivity="false" : 루트로 로그 전파 X (CONSOLE + MAIN_LOGSTASH만 사용) + 콘솔 동시 출력 --java-- 다음 코드로 사용 가능 Logger logger = LoggerFactory.getLogger("MainServiceLogger"); logger.info("{}", bidLogDTO); --&gt; &lt;logger name="MainServiceLogger" level="debug" additivity="false"&gt; &lt;appender-ref ref="MAIN_LOGSTASH" /&gt; &lt;appender-ref ref="CONSOLE" /&gt; &lt;/logger&gt; &lt;!-- &lt;logger name="CustomServiceLogger" level="debug" additivity="false"&gt; &lt;appender-ref ref="CUSTOM_LOGSTASH" /&gt; &lt;appender-ref ref="CONSOLE" /&gt; &lt;/logger&gt;
--&gt;
&lt;/configuration&gt;
<br>mainController<br>@GetMapping(GlobalURL.MAIN_URL) public ModelAndView mainView() { log.info("[MainController Log] mainView 접속 TEST"); return new ModelAndView("main"); }
<br>
<br>DockerComposeTool 설정파일.
<br>여러개의 컨테이너(서비스)를 하나의 애플리케이션 처럼 정의하고 실행하도록 도움.
<br>컨테이너 환경을 코드화/자동화
<br>컨테이너를 띄울 서버(필자는 Ubuntu)에 생성하여 준다.
<br>
<br>Elasticsearch
<br>Logstash
<br>Kibana
<br>Spring Boot 애플리케이션
<br>주석 제외코드 ▶ <a data-href="anoniChat-docker-compose.yml" href="https://lts.kr/project/new-project/anonichat-docker-compose.yml.html" class="internal-link" target="_self" rel="noopener nofollow">anoniChat-docker-compose.yml</a><br># Docker Compose 파일 스펙 버전 3 사용
version: '3' services: elasticsearch: image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1 environment: - discovery.type=single-node # 단일 노드 구성 ports: - "9200:9200" networks: - elk # `elk`키워드 네트워크로 구성 (다른 서비스와 내부 통신) volumes: - esdata:/usr/share/elasticsearch/data logstash: image: docker.elastic.co/logstash/logstash:7.12.0 ports: - "5044:5044" # Filebeat 등 input으로 사용하는 포트 - "5000:5000" # TCP 또는 JSON 로그 input 용 포트 (Spring에서 이 포트를 사용) volumes: - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf networks: - elk # `elk`키워드 네트워크 kibana: image: docker.elastic.co/kibana/kibana:7.11.1 ports: - "5601:5601" # 웹 UI 접근용 포트 networks: - elk # `elk`키워드 네트워크 environment: - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 # Elasticsearch 주소 연결 - server.host=0.0.0.0 # 모든 IP 바인딩 허용 spring: image: ghcr.io/anonichat/app/anonichat ports: - "8081:8080" environment: - ELASTICSEARCH_HOST=elasticsearch:9200 # Elasticsearch의 내부 주소를 환경변수로 주입 depends_on: - elasticsearch # Elasticsearch가 먼저 실행되도록 보장 networks: - elk # 내부 ELK 네트워크로 연결 volumes: esdata: driver: local # Elasticsearch 데이터 저장소를 호스트 볼륨에 영구 저장 networks: elk: # 모든 서비스가 하나의 공용 네트워크 `elk`에서 통신 driver: bridge # `elasticsearch`, `logstash`, `spring`, `kibana`는 서로 이름으로 접근 가능
<br>
<br>Logstash의 데이터 처리 파이프라인을 정의하는 설정 파일이다.
<br>docker-compose.yml파일을 생성한 같은 디렉토리에 생성한다.
<br>주석 제외 코드 ▶ <a data-href="anoniChat-logstash.conf" href="https://lts.kr/project/new-project/anonichat-logstash.conf.html" class="internal-link" target="_self" rel="noopener nofollow">anoniChat-logstash.conf</a><br>input { // 데이터 수신 설정 beats { port =&gt; 5044 } tcp { port =&gt; 5000 codec =&gt; json_lines // json형식으로 한줄씩 파싱 type =&gt; "main_log" // 수산 로그에 type필드로 "auction_log" 부여 } //tcp { // port =&gt; 5001 // codec =&gt; json_lines // type =&gt; "custom_log" //}
} filter { // 수신된 로그를 처리하기위한 전처리 if [type] == "main_log" { // 로그 타입이 `main_log`일 때만 처리. grok { // 정규식으로 메세지 파싱 match =&gt; { "message" =&gt; "%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:thread}\] %{LOGLEVEL:loglevel} %{DATA:logger} - %{GREEDYDATA:logmessage}" } } } // 필터 사용 예시
//	if [type] == "custom_log" {
// if "TestLogDTO" in [message] {
// grok {
// match =&gt; {
// "message" =&gt; "TestLogDTO\(userId=%{NUMBER:user_id}, exchangeAmount=%{NUMBER:exchange_amount}, payType=%{WORD:pay_type}, payStatus=%{WORD:pay_status}\)"
// }
// }
// mutate { // 필드 타입 변환 및 메시지 필드 제거
// remove_field =&gt; ["message"] // }
// } else {
// drop { } // `TestLogDTO`가 포함되지 않으면 해당 로그 삭제(drop).
// }
//	}
} output { // 로그 출력 설정 시작 if [type] == "main_log" { elasticsearch { hosts =&gt; ["http://elasticsearch:9200"] // Elasticsearch로 전송 index =&gt; "main_log" // 인덱스 이름: `main_log`. } }
// if [type] == "custom_log" {
// elasticsearch {
// hosts =&gt; ["http://elasticsearch:9200"]
// index =&gt; "custom_log"
// }
// }
}
<br>임의의 폴더를 지정한 후,<br><a data-href="anoniChat-docker-compose.yml" href="https://lts.kr/project/new-project/anonichat-docker-compose.yml.html" class="internal-link" target="_self" rel="noopener nofollow">anoniChat-docker-compose.yml</a> / <a data-href="anoniChat-logstash.conf" href="https://lts.kr/project/new-project/anonichat-logstash.conf.html" class="internal-link" target="_self" rel="noopener nofollow">anoniChat-logstash.conf</a><br>nano anoniChat-docker-compose.yml
nano logstash.conf
<br>파일을 생성한다.<br><img alt="Pasted image 20250605172214.png" src="https://lts.kr/사진-및-문서/pasted-image-20250605172214.png" style="width: 550px; max-width: 100%;" target="_self"><br>DockerComposeTool이 없다면?
sudo apt install -y docker-compose 해당 명령어로 다운로드 받기
<br>이후,<br>docker-compose up -d
<br>-d : 백그라운드로 실행
<br>http://{‘IP주소‘}:5610 (Kibana port) 로 접속확인<br><img alt="do-messenger_screenshot_2025-06-09_11_03_39.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-09_11_03_39.png" target="_self"><br>로그 출력 정상 확인
<br>위 과정을 거치며, Spring Server가 Docker Compose로 묶이게 되었다.<br>기존의 Jenkins파이프라인으로 Spring Server를 띄울 시 네트워크 연결이 되지 않으므로,
새로 셋팅을 해주어야 한다.<br>기존 Spring Sever 배포 파이프라인
<br>try { sh "docker stop ${CONTAINER_NAME} || true" sh "docker rm ${CONTAINER_NAME} || true" sh "docker rmi ${DOCKER_HUB_REPO}:${DOCKER_LATEST_TAG} || true" sh "docker pull ${DOCKER_HUB_REPO}:${DOCKER_LATEST_TAG}" sh """ docker run -d \ --name ${CONTAINER_NAME} \ --restart always \ -p ${CONTAINER_PORT} \ ${DOCKER_HUB_REPO}:${DOCKER_LATEST_TAG} """ sh "sleep 10" sh "docker ps | grep ${CONTAINER_NAME}"
} catch (Exception e) { echo "❌ 배포 실패: ${e.getMessage()}" throw e
}
<br>변경 후 파이프라인
<br>
environment { COMPOSE_PATH = '/home/hello/Desktop/AnoniChat/elk-stack' SPRING_SERVICE_NAME = 'spring'
} ... try { dir("${COMPOSE_PATH}") { sh """ docker-compose stop ${SPRING_SERVICE_NAME} || true docker-compose rm -f ${SPRING_SERVICE_NAME} || true docker-compose pull ${SPRING_SERVICE_NAME} docker-compose up -d ${SPRING_SERVICE_NAME} docker-compose ps """ }
} catch (Exception e) { echo "❌ 배포 실패: ${e.getMessage()}" throw e
} <br>🚀 최신 이미지로 배포 중...
[Pipeline] script
[Pipeline] {
[Pipeline] dir
Running in /home/hello/Desktop/AnoniChat/elk-stack
[Pipeline] {
[Pipeline] sh
+ docker-compose stop spring
/home/hello/Desktop/AnoniChat/elk-stack@tmp/durable-7c44adc8/script.sh.copy: 2: docker-compose: not found
+ true
+ docker-compose rm -f spring
/home/hello/Desktop/AnoniChat/elk-stack@tmp/durable-7c44adc8/script.sh.copy: 3: docker-compose: not found
+ true
+ docker-compose pull spring
/home/hello/Desktop/AnoniChat/elk-stack@tmp/durable-7c44adc8/script.sh.copy: 4: docker-compose: not found
[Pipeline] }
[Pipeline] // dir
[Pipeline] echo
❌ 배포 실패: script returned exit code 127
<br>답 :<br>
Ubuntu서버에는 docker-compose를 설치했지만,
Jenkins서버(컨테이너)에 설치가 되지 않았다.
이를 해결하기 위해 직접 설치해도 되지만, Jenkins docekrfile을 수정하도록 하겠다.
<br>
<br>도커 컴포즈 다운로드 코드 추가
<br># 3. Docker CLI 설치 (DooD 방식) RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker.gpg &amp;&amp; \ echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \ &gt; /etc/apt/sources.list.d/docker.list &amp;&amp; \ apt-get update &amp;&amp; apt-get install -y docker-ce-cli &amp;&amp; \ # Docker Compose 설치 (v2) DOCKER_COMPOSE_VERSION=2.24.0 &amp;&amp; \ curl -SL https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-linux-$(uname -m) \ -o /usr/local/bin/docker-compose &amp;&amp; \ chmod +x /usr/local/bin/docker-compose &amp;&amp; \ ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
<br>Running in /home/hello/Desktop/AnoniChat/elk-stack
[Pipeline] {
[Pipeline] sh
+ docker-compose stop spring
no configuration file provided: not found
+ true
+ docker-compose rm -f spring
no configuration file provided: not found
+ true
+ docker-compose pull spring
no configuration file provided: not found
<br>이번에는 docker-compose.yml파일을 찾을수가 없다고 한다...
<br>jenkins server에서 해당 경로로 진입시 docker-compose파일을 찾을 수 없다.<br>당연한건가??<br><img alt="Pasted image 20250609165033.png" src="https://lts.kr/사진-및-문서/pasted-image-20250609165033.png" style="width: 500px; max-width: 100%;" target="_self"><br>docker run -d \ --name jenkins-dood \ -p 8080:8080 \ -v /var/run/docker.sock:/var/run/docker.sock \ -v jenkins_home:/home/hello \ -v /home/hello/Desktop/AnoniChat/elk-stack:/home/hello/Desktop/AnoniChat/elk-stack \ ghcr.io/anonichat/app/jenkins-dood:v0.06
<br>기본적인 ELK CI/CD 셋팅 완료.<br><img alt="Pasted image 20250609170633.png" src="https://lts.kr/사진-및-문서/pasted-image-20250609170633.png" style="width: 825px; max-width: 100%;" target="_self"><br>🎉 CI/CD 파이프라인이 성공적으로 완료되었습니다!
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
<br>]]></description><link>https://lts.kr/project/new-project/☘-anoni-chat-elk-stack-setting.html</link><guid isPermaLink="false">project/New Project/☘ ANONI Chat - ELK Stack setting.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Tue, 10 Jun 2025 02:01:38 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_13_38_39.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_13_38_39.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[☘ ANONI Chat - infra setup]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="https://lts.kr/?query=tag:개발" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개발</a> <a class="tag" href="https://lts.kr/?query=tag:개요" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개요</a> <a class="tag" href="https://lts.kr/?query=tag:구상" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#구상</a> <a class="tag" href="https://lts.kr/?query=tag:인프라" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#인프라</a> <a class="tag" href="https://lts.kr/?query=tag:Vultr" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Vultr</a> <a class="tag" href="https://lts.kr/?query=tag:docker" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#docker</a> <br> <a href="https://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="https://lts.kr?query=tag:개발" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개발">#개발</a> <a href="https://lts.kr?query=tag:개요" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개요">#개요</a> <a href="https://lts.kr?query=tag:구상" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#구상">#구상</a> <a href="https://lts.kr?query=tag:인프라" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#인프라">#인프라</a> <a href="https://lts.kr?query=tag:Vultr" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Vultr">#Vultr</a> <a href="https://lts.kr?query=tag:docker" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#docker">#docker</a><br><img alt="Pasted image 20250523150517.png" src="https://lts.kr/사진-및-문서/pasted-image-20250523150517.png" target="_self"><br>스프링 이니셜라이저를 사용하여 java기반의 SpringBoot서버 초기 셋팅
<br>보안과 확장성을 고려하여 Cloud 서버를 구축하고자 Vultr를 선택하였다.<br>▶ <a data-href="🌩 Cloud-Native Architecture 분석" href="https://lts.kr/study/cs/🌩-cloud-native-architecture-분석.html" class="internal-link" target="_self" rel="noopener nofollow">🌩 Cloud-Native Architecture 분석</a><br>그 중 Vultr를 선택한 이유는,<br>성능 대비 가격 효율성 <br>AWS, Azure 등 대형 클라우드 서비스보다 저렴하면서, 높은 성능의 인스턴스를 제공한다. <br>다양한 인스턴스 옵션 <br>공유 CPU / Cloud GPU 등 다양한 유형의 인스턴스를 지원한다. <br>유연한 요금제와 과금 <br>Vultr는 시간 단위로, 사용한 만큼 실시간으로 과금된다.
<br>또한, 포인트를 먼저 결제하고, 그 포인트에서 차감되는 방식으로 초과 과금을 방지하고, 예상하기도 쉽다. <br><img alt="do-messenger_screenshot_2025-05-26_11_02_05.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-26_11_02_05.png" target="_self"><br>서비스 완성 이전까지 월 5달러 스펙의 인스턴스를 띄워놓을 계획이다.
<br>추후, 언제나 server스펙을 업그레이드 할 수 있기 때문이다.
<br>Main ServerOS로는 linux Ubuntu를 선택하였다.
<br>Vultr 인스턴스 생성후, console에서 최소사양으로 ubuntu desktop을 설지하겠다.<br>sudo apt-get update ( apt-get 도구 업데이트 )
sudo apt-get upgrade ( apt-get 도구 업그레이드 )
<br> gui를 설치하기 전에 apt-get 도구를 update와 upgrade를 진행한다.<br>sudo apt-get install --no-install-recommends ubuntu-desktop ( 최소 설치 )
sudo apt-get install ubuntu-desktop ( 전체 설치 )
<br>여타 desktop버전의 프로그램들 ex) 인터넷 브라우저 등 을 설치할 계획이라면, 전체 설치를 하면되고,
<br>DB, jenkins 등 서버용 셋팅만을 원하면 최소 설치를 하기를 권장한다.<br>sudo apt-get install indicator-appmenu-tools ( hud service not connected 오류 해결 ) sudo apt-get install indicator-session ( 계정, 세션 아이콘 추가 ) sudo apt-get install indicator-datetime ( 상단 메뉴 시간 추가 ) sudo apt-get install indicator-applet-complete ( 볼륨 조절 아이콘 추가 )
<br>gui 패키지 설치 후 발생할 수 있는 hud service not connected 오류와 관련하여 indicator-appmenu-tools
패키지를 통해 해결할 수 있다.
<br>나머지 패키지는 사용자의 입장에서 직관적인 편의성을 위한 패지키로써 선택사항입니다.
<br>startx ( xwindow 환경 실행 ) sudo systemctl isolate graphical.target ( runlevel 5 일회성 실행 / init 실행 ) sudo systemctl enable graphical.target ( runlevel 5 영구히 실행 / 활성 ) sudo systemctl set-default graphical.target ( runlevel 5 영구히 실행 / inittab 수정 )
<br>CLI에 startx 명령어를 입력하면 xwindow 환경이 실행이 되면서 gui 환경으로 전환이 된다.
<br>startx 명령어 없이 영구히 적용하기 위해 위 명령어를 입력하면 된다.
<img alt="do-messenger_screenshot_2025-05-26_11_42_35.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-26_11_42_35.png" style="width: 675px; max-width: 100%;" target="_self">
<br>
우분투의 runlevel
<br>0 : poweroff.target 1 : rescue.target 2, 3, 4 : multi-user.target ( CLI 환경 )
5 : graphical.target ( GUI 환경 )
6 : reboot.target <br># 1. 베이스 이미지 (명시적으로 22.04)
FROM ubuntu:22.04 # 2. 작성자 정보 LABEL maintainer="xotjd794613@naver.com" # 3. 환경변수 설정 (비인터랙티브 설치) ENV DEBIAN_FRONTEND=noninteractive # 4. 패키지 업데이트 및 JDK 17 설치 RUN apt-get update &amp;&amp; \ apt-get install -y openjdk-17-jdk curl &amp;&amp; \ apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/* # 5. 작업 디렉토리 설정 WORKDIR /app # 6. 실행할 jar 파일 복사 (빌드된 .jar)
COPY ./build/libs/AnoniChat-0.0.1-SNAPSHOT.jar /app/AnoniChatApp.jar # 7. 포트 노출 (SpringBoot default: 8080)
EXPOSE 8080 # 8. 기본 실행 명령 ENTRYPOINT ["java", "-jar", "/app/AnoniChatApp.jar"]
<br>Spring 프로젝트의 Gradle 빌드 후 .jar파일의 위치를 기준으로 docker파일을 작성해주었다.
<br>이슈
다음과 같은 디렉토리 상황에서 <img alt="do-messenger_screenshot_2025-05-26_17_57_47 1.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-26_17_57_47-1.png" target="_self">
경로를 찾을 수 없는 오류가 발생하였다. <br>C:\Users\User\Desktop\AnoniChat\
├── App\
│ ├── Dockerfile
│ └── build\
│ └── libs\
│ └── AnoniChat-0.0.1-SNAPSHOT.jar
<br>.dockerignore 파일<br>.gradle build target *.iml *.log .DS_Store .git
<br>이그노어 파일에 build를 추가시켜놓고도 모르고있었다..
<br>문제 해결 후<br>gradle빌드 후 도커 이미지파일 생성
<br>gradlew bootJar
docker build -t anonichat .
<br>docker image 생성 완료.<br><img alt="Pasted image 20250527095229.png" src="https://lts.kr/사진-및-문서/pasted-image-20250527095229.png" style="width: 650px; max-width: 100%;" target="_self">
<img alt="Pasted image 20250526182326.png" src="https://lts.kr/사진-및-문서/pasted-image-20250526182326.png" target="_self"><br>build : .(현재 디렉토리)를 기준으로 빌드하여 이미지 생성
<br>tag : 현재 anonichat이미지에 태그를 붙여 복사
<br>docker build -t xotjd794613/anonichat:v0.02 .
docker tag anonichat xotjd794613/anonichat:v0.02
docker push "계정명"/anonichat-app:latest
<br>이미지 생성후 UBUNTU서버에서
<br>docker 다운로드
<br>docker 로그인
<br>image pull 받기
<br>curl -fsSL https://get.docker.com | sh
docker login
sudo docker pull [image이름]:[태그]
<br>sudo docker run -p 8000:8080 "계정명"/anonichat:latest
<br><img alt="Pasted image 20250527103130.png" src="https://lts.kr/사진-및-문서/pasted-image-20250527103130.png" style="width: 925px; max-width: 100%;" target="_self"><br><img alt="Pasted image 20250527144405.png" src="https://lts.kr/사진-및-문서/pasted-image-20250527144405.png" style="width: 575px; max-width: 100%;" target="_self"><br>
<br>개발자는 로컬에서 .jar로 실행
<br>서버는 Ubuntu, 다른 Java 버전, 설정 다를 수 있음 → "로컬에선 되는데 서버에선 안 돼"
<br>
<br>Dockerfile에 명시된 Java 버전, 종속성, 실행 방식이 모두 이미지에 포함
<br>개발/운영 환경 차이가 없음<br>
→ "로컬에선 되는데 서버에선 안 돼" 문제가 사라짐
<br>
<br>.jar 파일을 빌드하고 → 서버에 복사하고 → 수동으로 백업 &amp; 재실행
<br>
<br>Jenkins에서 docker build → docker push → 서버에서 docker pull &amp;&amp; restart
<br>단일 명령으로 배포 자동화됨
<br>docker run xotjd794613/anonichat:v0.02 docker run xotjd794613/anonichat:v0.01<br>→ 이전 버전으로 즉시 롤백 가능<br>과거 방식은 .jar 백업/복원 과정이 필요했음<br>
Docker는 이미지 자체가 버전 단위 배포본<br>
<br>서버에 JDK 없어도 됨
<br>Gradle, Maven, OpenJDK, Node 등 포함해서 독립 실행 가능
<br>Java + Redis + Nginx 등 멀티 컨테이너 서비스화도 가능
<br>→ 서버는 단지 "Docker 런타임"만 제공하면 됨<br>
<br>시스템에 직접 설치하는 것이 아님 → 호스트 오염 없음
<br>서버를 초기화하거나 다른 서버로 옮겨도 → Docker만 깔고 이미지 pull
<br>→ 서버 관리와 인프라 유지 부담 최소화<br>]]></description><link>https://lts.kr/project/new-project/☘-anoni-chat-infra-setup.html</link><guid isPermaLink="false">project/New Project/☘ ANONI Chat - infra setup.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Tue, 10 Jun 2025 02:01:01 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/pasted-image-20250523150517.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/pasted-image-20250523150517.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[☘ ANONI Chat - CICD 구성]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="https://lts.kr/?query=tag:개발" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개발</a> <a class="tag" href="https://lts.kr/?query=tag:개요" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개요</a> <a class="tag" href="https://lts.kr/?query=tag:구상" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#구상</a> <a class="tag" href="https://lts.kr/?query=tag:인프라" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#인프라</a> <a class="tag" href="https://lts.kr/?query=tag:CIDE" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#CIDE</a> <a class="tag" href="https://lts.kr/?query=tag:Jenkins" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Jenkins</a> <a class="tag" href="https://lts.kr/?query=tag:Vultr" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Vultr</a> <br> <a href="https://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="https://lts.kr?query=tag:개발" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개발">#개발</a> <a href="https://lts.kr?query=tag:개요" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개요">#개요</a> <a href="https://lts.kr?query=tag:구상" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#구상">#구상</a> <a href="https://lts.kr?query=tag:인프라" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#인프라">#인프라</a> <a href="https://lts.kr?query=tag:CIDE" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#CIDE">#CIDE</a> <a href="https://lts.kr?query=tag:Jenkins" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Jenkins">#Jenkins</a> <a href="https://lts.kr?query=tag:Vultr" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Vultr">#Vultr</a><br>이전 시간에 Clude환경에 docker컨테이너를 구동시키는 것 까지 진행하였다.<br>▶ <a data-href="☘ ANONI Chat - infra setup" href="https://lts.kr/project/new-project/☘-anoni-chat-infra-setup.html" class="internal-link" target="_self" rel="noopener nofollow">☘ ANONI Chat - infra setup</a><br>이번 시간에는 CICD환경을 구성하겠다.<br>graph TD A[GitHub Push] B[Jenkins Git Pull] C[Gradle Build Jar] D[Docker Build &amp; Tag] E[DockerHub Push] F[서버 Pull + Deploy]
<br>여기서 해당 방식은 Docker-in-Docker(DinD)방식 중 DooD 방식으로 진행한다.
<br>DinD란? - “도커 안에 도커를 실행한다”는 개념.<br>DinD의 종류 <br>일반적인 경우에, Docker에서 Jenkins이미지를 pull받아 컨테이너를 실행시키는 것이 가장 간단하다.
하지만, 이번엔 같은(Ubuntu)서버 내에서 Jenkins와 Spring서버를 Docker로 함께 띄울예정 이다.<br>그렇게 때문에 위에서 기술한 DooD방식으로 Docker로 띄운 Jenkins안에서 Docker를 제어해야한다.<br>이를위해 /var/run/docker.sock을 마운트 해야한다.<br>현재 스펙은 ubuntu:22.04 / Spring 3.3.12 / Java17 이다.<br># 베이스 이미지 설정
FROM ubuntu:22.04 LABEL maintainer="xotjd794613@naver.com" #- **비대화식 모드 설정**
# apt 설치 시 발생하는 `timezone 설정`, `Y/N 질문` 등을 자동으로 건너뛰기 위한 설정
ENV DEBIAN_FRONTEND=noninteractive # 1. UBUNTU 시스템 패키지`s 설치
RUN apt-get update &amp;&amp; apt-get install -y \ curl gnupg2 ca-certificates apt-transport-https software-properties-common \ git sudo unzip wget lsb-release openjdk-17-jdk \ &amp;&amp; apt-get clean # 2. 사용자 hello 생성 및 sudo 권한 부여(비밀번호 묻지 않도록)
# Docker CLI 사용이나 기타 시스템 명령 실행 시 필요
RUN useradd -m -d /home/hello -s /bin/bash hello \ &amp;&amp; echo "hello ALL=(ALL) NOPASSWD:ALL" &gt;&gt; /etc/sudoers ENV JENKINS_HOME=/home/hello # 3. Docker CLI 설치 (DooD 방식) - Jenkins 내부에서 `docker build`, `docker run`, `docker push` 명령 사용 가능
# Jenkins가 호스트의 Docker 데몬을 **/var/run/docker.sock**로 제어하게 되는 구조를 전제로 셋팅
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker.gpg &amp;&amp; \ echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \ &gt; /etc/apt/sources.list.d/docker.list &amp;&amp; \ apt-get update &amp;&amp; apt-get install -y docker-ce-cli # 4. Jenkins WAR 다운로드 (LTS 버전)
# /usr/share/jenkins.war 경로에 배치
ENV JENKINS_VERSION=2.440.1
RUN wget https://get.jenkins.io/war-stable/${JENKINS_VERSION}/jenkins.war -O /usr/share/jenkins.war # 5. 포트 노출
# → 도커 실행 시 `-p 8080:8080 -p 50000:50000` 으로 외부 연결 가능
EXPOSE 8080
EXPOSE 50000 # 6. Jenkins 실행
# Dockerfile 실행 이후 명령은 `jenkins` 사용자 권한으로 실행됨 (보안을 위해 루트 권한 피함)
USER hello
WORKDIR /var/hello # `8080` 포트에서 Jenkins 서비스가 시작됨
CMD ["java", "-jar", "/usr/share/jenkins.war"] <br>Docker이미지 빌드<br>jenkins-dood이름으로 이미지 생성
<br>docker build -t jenkins-dood .
docker tag jenkins-dood xotjd794613/jenkins-dood:v0.01
<br> <br>push/pull 후 docker.sock 사용하여 실행<br>docker run -d \ --name jenkins-dood \ -p 8080:8080 \ -v /var/run/docker.sock:/var/run/docker.sock \ jenkins-dood:v0.01 <br>
permission denied 오류
<img alt="do-messenger_screenshot_2025-05-28_11_42_51.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-28_11_42_51.png" target="_self">
<br>즉, /var/run/docker.sock 파일에 접근할 수 있는 권한이 없기 때문에 발생한 오류이다.
<img alt="do-messenger_screenshot_2025-05-28_12_03_35.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-28_12_03_35.png" target="_self"><br>다음과 같이 docker.sock에 접근권한은 root만이 갖고 있기 때문에,
현재 계정을 docker그룹에 포함시켜야 한다.<br>
<br>Dockerfile에 아래 내용을 추가하기
<br># + Docker 그룹id확인 후(GID: 999)에 추가 (호스트와 GID 일치) RUN groupadd -g 999 docker &amp;&amp; \ useradd -m -d /home/hello -s /bin/bash -G docker hello &amp;&amp; \ echo "hello ALL=(ALL) NOPASSWD:ALL" &gt;&gt; /etc/sudoers
<br>또는<br>root계정으로 변경 후 권한주기<br>sudo usermod -aG docker hello(계정명)
<br>문제 해결 후,
ip주소:8080으로 접속하면 jenkins admin 페이지를 확인할 수 있다.<br><img alt="Pasted image 20250528142521.png" src="https://lts.kr/사진-및-문서/pasted-image-20250528142521.png" target="_self"><br>위 페이지에서 admin passwd를 찾기 위해서는 ssh에서 다음 명령어를 통해 알 수 있다.<br>docker exec -it jenkins-dood cat /home/hello/secrets/initialAdminPassword
<br>admin 로그인 완료
<br><img alt="Pasted image 20250528145922.png" src="https://lts.kr/사진-및-문서/pasted-image-20250528145922.png" target="_self"><br>
<br>Jenkins 커뮤니티에서 추천하는 기본 플러그인 모음을 자동 설치해줌
<br>여기엔 Git, Pipeline, Credentials 등 필수 요소가 포함되어 있음
<br>
!만약 특정한 커스텀 설정이나 최소 설치 환경이 필요한 경우엔 오른쪽을 선택해서 수동으로 선택할 수 있음
<br>에러
<img alt="Pasted image 20250528151309.png" src="https://lts.kr/사진-및-문서/pasted-image-20250528151309.png" style="width: 625px; max-width: 100%;" target="_self"><br>
자동 설치중 대부분에서 fail이 발생했다.
<br>
<br>ubuntu서버가 외부망에 붙지 못했나??
<img alt="Pasted image 20250528151438.png" src="https://lts.kr/사진-및-문서/pasted-image-20250528151438.png" target="_self">
<br> 핑 확인시 정상적으로 붙어있는 모습<br>그렇다면 무엇이 문제일까?<br>호스트 Ubuntu는 인터넷 연결이 되어 있어도, Docker 컨테이너 내부는 DNS나 라우팅 설정이 다를 수 있다.
<br>이를 위한 확인. (컨테이너에 붙기)<br>docker exec -it jenkins-dood bash
# 컨테이너에 붙은 후 `apt update로 확인`
<br><img alt="Pasted image 20250528152038.png" src="https://lts.kr/사진-및-문서/pasted-image-20250528152038.png" style="width: 700px; max-width: 100%;" target="_self"><br> <br>E: Could not open lock file /var/lib/apt/lists/lock - open (13: Permission denied)
E: Unable to lock directory /var/lib/apt/lists/
<br>다음과 같은 로그를 보고 큰 단서를 얻을 수 있었다.
이 에러는 컨테이너 내부에서 apt update를 실행하려 했지만, 현재 사용자가 루트 권한이 아니기 때문에 실패한 것이다.<br>jenkins dockerfile 중,,,
다음 부분을 보면 알 수 있다.<br># 6. Jenkins 실행
# Dockerfile 실행 이후 명령은 `jenkins` 사용자 권한으로 실행됨 (보안을 위해 루트 권한 피함)
USER hello
WORKDIR /var/hello
<br>하지만...
이미 hello 계정에는 /etc/sudoers sudo권한을 준것을 볼 수있다.<br>RUN groupadd -g 999 docker &amp;&amp; \ useradd -m -d /home/hello -s /bin/bash -G docker hello &amp;&amp; \ echo "hello ALL=(ALL) NOPASSWD:ALL" &gt;&gt; /etc/sudoers
<br># /usr/share/jenkins.war 경로에 배치 #ENV JENKINS_VERSION=2.440.1 !!플러그인 설치 실패로 인해 버전업 ENV JENKINS_VERSION=2.462.3 RUN wget https://get.jenkins.io/war-stable/${JENKINS_VERSION}/jenkins.war -O /usr/share/jenkins.war
<br>결론<br>외부망 접근 금지 문제 X
<br>root/sudo 권한 문제 X
<br>Jenkins 버전 문제 O
<br><img alt="do-messenger_screenshot_2025-05-29_11_37_10.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-29_11_37_10.png" target="_self"><br>
<br>
젠킨스 파이프라인(Jenkins Pipeline)이란, 소프트웨어 빌드, 테스트, 배포의 전체 과정을 코드로 정의하고 자동화할 수 있게 해주는 Jenkins의 핵심 기능이다. <br>
CI/CD(지속적 통합/지속적 배포)를 효율적으로 수행하기 위한 필수 도구이다. <br>다음 설정을 통해 파이프라인을 구성할 수 있다.<br>Git repo에 push시 자동적으로 통합 / 배포 할 수 있지만, 일단은 Jenkins Admin에서 수동 트리거 되도록 설정해 두었다.<br>Git repo(prod branch) push 후 → Jenkins 수동 빌드 시<br><img alt="do-messenger_screenshot_2025-06-04_11_29_26.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_11_29_26.png" target="_self"><br><img alt="do-messenger_screenshot_2025-06-04_11_29_14.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_11_29_14.png" target="_self"><br>]]></description><link>https://lts.kr/project/new-project/☘-anoni-chat-cicd-구성.html</link><guid isPermaLink="false">project/New Project/☘ ANONI Chat - CICD 구성.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Tue, 10 Jun 2025 02:00:59 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-28_11_42_51.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-28_11_42_51.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[💻 프로젝트]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="https://lts.kr/?query=tag:모음" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#모음</a> <br> <a href="https://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="https://lts.kr?query=tag:모음" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#모음">#모음</a><br>프로젝트
public하게 공개할 수 있는 프로젝트의 제작 과정입니다.
<br>
<br><a data-href="🏹 예치금 차액 비교 Spring Batch 리펙토링" href="https://lts.kr/project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html" class="internal-link" target="_self" rel="noopener nofollow">🏹 예치금 차액 비교 Spring Batch 리펙토링</a>
<br><a data-href="🏹 예치금 차액 비교 Spring Batch 리펙토링 부록" href="https://lts.kr/project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html" class="internal-link" target="_self" rel="noopener nofollow">🏹 예치금 차액 비교 Spring Batch 리펙토링 부록</a>
<br><a data-href="✏ Chunk_Partitioning Batch 구조 드로잉" href="https://lts.kr/project/hello-batch/✏-chunk_partitioning-batch-구조-드로잉.html" class="internal-link" target="_self" rel="noopener nofollow">✏ Chunk_Partitioning Batch 구조 드로잉</a>
<br>
<br><a data-href="👩‍👧‍👦 marketing Analytics 공통모듈 제작기" href="https://lts.kr/project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html" class="internal-link" target="_self" rel="noopener nofollow">👩‍👧‍👦 marketing Analytics 공통모듈 제작기</a>
<br><a data-href="👩‍👧‍👦 Analytics 공통모듈 ADMIN용 데이터 추출" href="https://lts.kr/project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html" class="internal-link" target="_self" rel="noopener nofollow">👩‍👧‍👦 Analytics 공통모듈 ADMIN용 데이터 추출</a>
<br>
<br><a data-href="🚞 Java 대용량 Excel 리펙토링" href="https://lts.kr/project/🚞-java-대용량-excel-리펙토링.html" class="internal-link" target="_self" rel="noopener nofollow">🚞 Java 대용량 Excel 리펙토링</a>
<br>
<br><a data-href="🖨 NP_시장조사" href="https://lts.kr/project/new-project/🖨-np_시장조사.html" class="internal-link" target="_self" rel="noopener nofollow">🖨 NP_시장조사</a>
<br><a data-href="☘ ANONI Chat - infra setup" href="https://lts.kr/project/new-project/☘-anoni-chat-infra-setup.html" class="internal-link" target="_self" rel="noopener nofollow">☘ ANONI Chat - infra setup</a>
<br><a data-href="☘ ANONI Chat - CICD 구성" href="https://lts.kr/project/new-project/☘-anoni-chat-cicd-구성.html" class="internal-link" target="_self" rel="noopener nofollow">☘ ANONI Chat - CICD 구성</a> <br><a data-href="🔑 Docker Image를 Git repo로 관리하기" href="https://lts.kr/project/new-project/🔑-docker-image를-git-repo로-관리하기.html" class="internal-link" target="_self" rel="noopener nofollow">🔑 Docker Image를 Git repo로 관리하기</a>
<br><a data-href="Jenkins 설정 초기화 문제" href="https://lts.kr/project/new-project/jenkins-설정-초기화-문제.html" class="internal-link" target="_self" rel="noopener nofollow">Jenkins 설정 초기화 문제</a>
<br><a data-href="Jenkins 파이프라인 설정" href="https://lts.kr/project/new-project/jenkins-파이프라인-설정.html" class="internal-link" target="_self" rel="noopener nofollow">Jenkins 파이프라인 설정</a> <br><a data-href="☘ ANONI Chat - ELK Stack setting" href="https://lts.kr/project/new-project/☘-anoni-chat-elk-stack-setting.html" class="internal-link" target="_self" rel="noopener nofollow">☘ ANONI Chat - ELK Stack setting</a>
<br>
<br><a data-href="✈ MM_클라우드 마이그레이션" href="https://lts.kr/project/melometer-project/✈-mm_클라우드-마이그레이션.html" class="internal-link" target="_self" rel="noopener nofollow">✈ MM_클라우드 마이그레이션</a>
<br>
<br><a data-href="👻 Obsidian 정적호스팅 CICD 과정" href="https://lts.kr/project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html" class="internal-link" target="_self" rel="noopener nofollow">👻 Obsidian 정적호스팅 CICD 과정</a>
<br>
<br><a data-href="📘 SpringBoot &amp; Docker + Reids 연동" href="https://lts.kr/tools/docker/📘-springboot-&amp;-docker-+-reids-연동.html" class="internal-link" target="_self" rel="noopener nofollow">📘 SpringBoot &amp; Docker + Reids 연동</a>
<br><a data-href="🌥 aws(EC2)셋팅부터 배포까지" href="https://lts.kr/tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html" class="internal-link" target="_self" rel="noopener nofollow">🌥 aws(EC2)셋팅부터 배포까지</a>]]></description><link>https://lts.kr/project/💻-프로젝트.html</link><guid isPermaLink="false">project/💻 프로젝트.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Tue, 10 Jun 2025 02:00:59 GMT</pubDate></item><item><title><![CDATA[🏠 taesung's Blog]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:home" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#home</a> <a class="tag" href="https://lts.kr/?query=tag:index" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#index</a> <a class="tag" href="https://lts.kr/?query=tag:blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#blog</a> <a class="tag" href="https://lts.kr/?query=tag:공부" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#공부</a> <br> <a href="https://lts.kr?query=tag:home" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#home">#home</a> <a href="https://lts.kr?query=tag:index" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#index">#index</a> <a href="https://lts.kr?query=tag:blog" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#blog">#blog</a> <a href="https://lts.kr?query=tag:공부" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#공부">#공부</a><br><a data-tooltip-position="top" aria-label="https://github.com/LeeTaeSung0628" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/LeeTaeSung0628" target="_self"><span alt="prof2.jpg" src="prof2.jpg" class="internal-embed media-embed image-embed is-loaded" style="width: 250px; max-width: 100%;"></span></a><img alt="prof2.jpg" src="https://lts.kr/사진-및-문서/prof2.jpg" style="width: 250px; max-width: 100%;" target="_self"><br><a data-tooltip-position="top" aria-label="https://git.io/typing-svg" rel="noopener nofollow" class="external-link is-unresolved" href="https://git.io/typing-svg" target="_self"></a><img alt="Typing SVG" src="https://readme-typing-svg.demolab.com?font=Fira+Code&amp;pause=1000&amp;color=36A9F7&amp;random=false&amp;width=435&amp;lines=%EC%97%AC%EA%B8%B0%EB%8A%94+%EA%B3%B5%EB%B6%80%ED%95%98%EA%B3%A0%2C+%EA%B8%B0%EB%A1%9D%ED%95%98%EB%8A%94+%EA%B3%B3%EC%9E%85%EB%8B%88%EB%8B%A4" referrerpolicy="no-referrer" target="_self" class="is-unresolved"><br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>]]></description><link>https://lts.kr/🏠-taesung's-blog.html</link><guid isPermaLink="false">🏠 taesung's Blog.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Tue, 10 Jun 2025 02:00:55 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/prof2.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/prof2.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[UBUNTU sever 명령어 모음]]></title><description><![CDATA[<br><br><br>
<br><br><br><br>sudo apt-get update ( )
sudo apt-get upgrade ( apt-get 도구 업그레이드 )
<br> gui를 설치하기 전에 apt-get 도구를 update와 upgrade를 진행한다.<br><br><br>sudo apt-get install --no-install-recommends ubuntu-desktop ( 최소 설치 )
sudo apt-get install ubuntu-desktop ( 전체 설치 )
<br>
<br>여타 desktop버전의 프로그램들 ex) 인터넷 브라우저 등 을 설치할 계획이라면, 전체 설치를 하면되고,
<br>DB, jenkins 등 서버용 셋팅만을 원하면 최소 설치를 하기를 권장한다.<br><br><br>sudo apt-get install indicator-appmenu-tools ( hud service not connected 오류 해결 ) sudo apt-get install indicator-session ( 계정, 세션 아이콘 추가 ) sudo apt-get install indicator-datetime ( 상단 메뉴 시간 추가 ) sudo apt-get install indicator-applet-complete ( 볼륨 조절 아이콘 추가 )
<br>
<br>gui 패키지 설치 후 발생할 수 있는 hud service not connected 오류와 관련하여 indicator-appmenu-tools
패키지를 통해 해결할 수 있다.
<br>나머지 패키지는 사용자의 입장에서 직관적인 편의성을 위한 패지키로써 선택사항입니다.
<br><br><br>startx ( xwindow 환경 실행 ) sudo systemctl isolate graphical.target ( runlevel 5 일회성 실행 / init 실행 ) sudo systemctl enable graphical.target ( runlevel 5 영구히 실행 / 활성 ) sudo systemctl set-default graphical.target ( runlevel 5 영구히 실행 / inittab 수정 )
<br>
<br>CLI에 startx 명령어를 입력하면 xwindow 환경이 실행이 되면서 gui 환경으로 전환이 된다.
<br>startx 명령어 없이 영구히 적용하기 위해 위 명령어를 입력하면 된다.
<br><br><br>gradlew bootJar
docker build -t anonichat .
docker tag anonichat xotjd794613/anonichat:v0.02
<br>
<br>docker build -t "생성할 이미지 이름" "도커파일을 찾을 위치"
<br>docker tag "복사할 이미지 원본 이름" "복사된 이미지 이름":"태그"
<br><br><br>curl -fsSL https://get.docker.com | sh
docker login
sudo docker pull [image이름]:[태그]
<br><br><br>sudo docker run -p 8000:8080 "계정명"/"이미지이름":"태그"
<br><br><br>docker run -d \ --name jenkins-dood \ -p 8080:8080 \ -v /var/run/docker.sock:/var/run/docker.sock \ -v jenkins_home:/home/hello \ # 볼륨 마운트 적용 ghcr.io/anonichat/app/jenkins-dood:v0.06
<br>
<br>--name jenkins-dood \ 실행시킬 컨테이너 이름
<br>-p 8080:8080 \ 실행시킬 포트번호
<br>xotjd794613/jenkins-dood:v0.01 실행시킬 이미지 명
<br><br><br>su -
<br><br><br>(권한부여 / root계정에서 실행)<br>sudo usermod -aG docker hello(계정명)
<br><br><br>docker exec -it jenkins-dood cat /home/hello/secrets/initialAdminPassword
<br><br><br>docker exec -it &lt;컨테이너_이름&gt; java -jar /usr/share/jenkins.war --version
<br><br><br>$ docker login ghcr.io -u "gitHub아이디" Password: #&lt;Pesonal Access Token&gt; 입력
<br><br><br>docker tag "이미지ID" ghcr.io/"gitHub아이디"/"repo이름"/"이미지:태그"
<br><br><br>docker-compose up -d
<br><br><br># Jenkins run docker run -d \ --name jenkins-dood \ -p 8080:8080 \ -v /var/run/docker.sock:/var/run/docker.sock \ -v jenkins_home:/home/hello \ -v /home/hello/Desktop/AnoniChat/elk-stack:/home/hello/Desktop/AnoniChat/elk-stack \ ghcr.io/anonichat/app/jenkins-dood:v0.07 --- # elk+Spring run docker-compose up -d
]]></description><link>https://lts.kr/project/new-project/ubuntu-sever-명령어-모음.html</link><guid isPermaLink="false">project/New Project/UBUNTU sever 명령어 모음.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Tue, 10 Jun 2025 01:47:17 GMT</pubDate></item></channel></rss>