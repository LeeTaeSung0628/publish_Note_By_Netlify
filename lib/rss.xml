<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[blog]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://lts.kr/</link><image><url>http://lts.kr/lib/media/favicon.png</url><title>blog</title><link>http://lts.kr/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Tue, 25 Mar 2025 07:12:07 GMT</lastBuildDate><atom:link href="http://lts.kr/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Tue, 25 Mar 2025 07:12:06 GMT</pubDate><copyright><![CDATA[taesung's Blog]]></copyright><ttl>60</ttl><dc:creator>taesung's Blog</dc:creator><item><title><![CDATA[🚨 RSA 암호화 방식의 이해와 구현]]></title><description><![CDATA[<a class="tag" href="http://lts.kr/?query=tag:공부" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#공부</a> <a class="tag" href="http://lts.kr/?query=tag:Tokken" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Tokken</a> <a class="tag" href="http://lts.kr/?query=tag:Security" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Security</a> <a class="tag" href="http://lts.kr/?query=tag:SPRING" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SPRING</a> <a class="tag" href="http://lts.kr/?query=tag:보안" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#보안</a> <br> <a href="http://lts.kr?query=tag:공부" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#공부">#공부</a> <a href="http://lts.kr?query=tag:Tokken" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Tokken">#Tokken</a> <a href="http://lts.kr?query=tag:Security" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Security">#Security</a> <a href="http://lts.kr?query=tag:SPRING" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SPRING">#SPRING</a> <a href="http://lts.kr?query=tag:보안" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#보안">#보안</a><br>1977년에 Rivest, Shamir, Adleman 이라는 세 명의 수학자가 고안해서 RSA라고 부른다.<br>
이 방식은 지금도 SSL/TLS, 이메일, 디지털 서명, 인증서 등 보안의 핵심 인프라에서 계속 쓰이고 있는 방식이다.<br>
<br>RSA는 "공개키로 암호화하고, 개인키로 복호화" 또는 그 반대로 동작하는 비대칭 암호화 알고리즘이다.
<br>
<br>공개키로 암호화된 데이터는 개인키를 소유한 공개키 생성자만이 복호화 가능하다.
<br>사용자( Client )마다 공개키와 개인키를 접근 시 새로 생성/발급하여 원본 데이터 추적이 불가하다.
<br>결론
즉, 클라이언트의 요청이 들어오면 서버에서 공개키(클라이언트에게 제공할 키) 와 개인키(서버측에서 갖고있는, 공개키와 한쌍이 되는 키) 를 매번 새로 발급하기 때문에, 추적이 어렵고 암호화에 뛰어나다.
<br>
<br>서비스 특성에 따라 적절하게 적용할 필요가 있다.
<br>정보 <br>RSA 키 객체 (PublicKey, PrivateKey) 는 메모리 상에서만 동작할 수 있다.
<br>우리가 파일, 네트워크, DB로 키를 주고받을 때는 Base64 문자열 로 직렬화해야 해야한다. <br>[로그인 / 회원가입 페이지]<br>클라이언트에서 서버에 공개키 요청
<br>서버에서 키쌍 과 KeyUUID 생성
<br>개인키는 KeyUUID와 함께 캐쉬에 저장 / 공개키는 KeyUUID와 클라이언트에 전달
<br>클라이언트는 서버로부터 받은 공개키로 평문 암호화, 서버에 전달
<br>암호화된 평문을 KeyUUID로 찾은 공개키로 복호화 -&gt; 평문 완성
<br>
<br>암호화, 해시, 키 생성, 인증서 처리, 서명 등 암호학 기반 기능들을 제공하는 클래스들의 모음이다.
<br> private static final String INSTANCE_TYPE = "RSA"; // 2048bit RSA KeyPair 생성. public static KeyPair generateKeypair() throws NoSuchAlgorithmException { KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(INSTANCE_TYPE); keyPairGen.initialize(2048, new SecureRandom()); return keyPairGen.genKeyPair(); } <br>KeyPairGenerator (공개키/개인키 쌍 생성) 을 사용한다.
<br>NoSuchAlgorithmException : 지정한 알고리즘 이름이 현재 JVM 환경에서 지원되지 않거나 잘못된 경우 발생하는 체크 예외다.
<br>KeyPair타입 : PrivateKey와 PublicKey로 이루어져있는 데이터 타입
<br>SecureRandom을 시드로 사용해 보안 수준 향상
<br> 2048bit로 RSA암호화 방식을 사용하여 keyPair를 생성하는 코드이다.<br>	private static final String INSTANCE_TYPE = "RSA"; // 평문 + 공개키 Base64로 암호문 생성 public static String rsaEncode(String plainText, String publicKey) throws InvalidKeyException, InvalidKeySpecException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException { Cipher cipher = Cipher.getInstance(INSTANCE_TYPE); cipher.init(Cipher.ENCRYPT_MODE, convertPublicKey(publicKey)); byte[] plainTextByte = cipher.doFinal(plainText.getBytes()); return base64EncodeToString(plainTextByte); } //Base64 공개키 -&gt; 공개키로 디코딩 public static PublicKey convertPublicKey(String publicKey) throws InvalidKeySpecException, NoSuchAlgorithmException { KeyFactory keyFactory = KeyFactory.getInstance(INSTANCE_TYPE); byte[] publicKeyByte = Base64.getDecoder().decode(publicKey.getBytes()); return keyFactory.generatePublic(new X509EncodedKeySpec(publicKeyByte)); }
<br>
Cipher : Java 보안 API에서 실제 암호화/복호화를 수행하는 핵심 클래스<br>
AES, RAS, DES 같은 알고리즘을 직접 실행하는 암호 모듈 , 암호화 엔진 이다. <br>
Cipher cipher = Cipher.getInstance(INSTANCE_TYPE); : 타입에 따라, 암호화 모드와 패딩 방식이 결정된다. <br>
convertPublicKey : base64기반 코드를 실제 키 객체로 변환 <br>
KeyFactory : 키 복원용 펙토리 객체 <br>
keyFactory.generate... : 실제 키 객체 생성 <br>
X509EncodedKeySpec → 공개키 표준 포맷 스펙 <br>node-forge 패키지를 사용한다. base64, encode등 TLS프로토콜(암호화 도구)를 구혀한 패키지 이다.
<br>&lt;script src="https://cdn.jsdelivr.net/npm/node-forge@1.3.1/dist/forge.min.js"&gt;&lt;/script&gt; &lt;script&gt;
/** * 서버에서 공개키를 받아서 RSA로 암호화하는 함수 * @param {string} plainText - 암호화할 평문 * @param {string} publicKeyBase64 - 서버로부터 받은 Base64 인코딩된 공개키 * @returns {string} 암호화된 Base64 문자열 */
function rsaEncryptWithBase64PublicKey(plainText, publicKeyBase64) { const forge = window.forge; // 1. Base64 디코딩 → DER 바이너리 const der = forge.util.decode64(publicKeyBase64); // 2. DER → ASN.1 파싱 → PublicKey 객체 const asn1 = forge.asn1.fromDer(der); const publicKey = forge.pki.publicKeyFromAsn1(asn1); // 3. RSA 암호화 const encryptedBytes = publicKey.encrypt(plainText, 'RSAES-PKCS1-V1_5'); // 4. 암호문을 Base64 인코딩해서 반환 return forge.util.encode64(encryptedBytes);
}
&lt;/script&gt;
<br>클라이언트 단에서 request전달 전, 암호화 하기 위한 코드 / 동작 구성은 2.1과 동일 하다
<br>	private static final String INSTANCE_TYPE = "RSA"; // 암호문 + 개인키 Base64로 평문 생성 public static String rsaDecode(String encryptedPlainText, String privateKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidKeySpecException, IllegalBlockSizeException, BadPaddingException { byte[] encryptedPlainTextByte = Base64.getDecoder().decode(encryptedPlainText.getBytes()); Cipher cipher = Cipher.getInstance(INSTANCE_TYPE); cipher.init(Cipher.DECRYPT_MODE, convertPrivateKey(privateKey)); return new String(cipher.doFinal(encryptedPlainTextByte)); } //Base64 개인키 -&gt; 개인키로 디코딩 public static PrivateKey convertPrivateKey(String privateKey) throws InvalidKeySpecException, NoSuchAlgorithmException { KeyFactory keyFactory = KeyFactory.getInstance(INSTANCE_TYPE); byte[] privateKeyByte = Base64.getDecoder().decode(privateKey.getBytes()); return keyFactory.generatePrivate(new PKCS8EncodedKeySpec(privateKeyByte)); }
<br>Cipher 객체를 사용하여 위와 동일하게 동작.
<br>PKCS8EncodedKeySpec → 개인키 표준 포맷 스펙
<br> public static String base64EncodeToString(byte[] byteData) { return Base64.getEncoder().encodeToString(byteData); }
<br>cipher.doFinal(...) 과 같은 코드는 바이너리 데이터로 리턴값을 보낸다.
<br>
<br>JUnit → 테스트 프레임워크 <br>AssertJ → 테스트 결과를 검증(assert)할 때 쓰는 강력한 assertion 도구
<br>JS코드는 제외<br>private static final String PLAIN_TEXT = "키 암/복호화 테스트 123 abc !@#"; @Test @DisplayName("RSA 키쌍 생성 및 암/복호화 통합 테스트") public void testGenerateKeypairAndEncryptDecrypt() throws Exception { // 키쌍 생성 KeyPair keyPair = rsaService.generateKeypair(); PublicKey publicKey = keyPair.getPublic(); PrivateKey privateKey = keyPair.getPrivate(); // 공개키, 개인키 → Base64 인코딩 String publicKeyBase64 = rsaService.base64EncodeToString(publicKey.getEncoded()); String privateKeyBase64 = rsaService.base64EncodeToString(privateKey.getEncoded()); System.out.println("공개키Base64 : " + publicKeyBase64); System.out.println("개인키Base64 : " + privateKeyBase64); // 암호화 String encryptedText = rsaService.rsaEncode(PLAIN_TEXT, publicKeyBase64); System.out.println("RSA암호화 텍스트 : " + encryptedText); // 복호화 (개인키 사용해야 함) String decryptedText = rsaService.rsaDecode(encryptedText, privateKeyBase64); System.out.println("RSA복호화 텍스트 : " + decryptedText); // 검증 Assertions.assertThat(decryptedText).isEqualTo(PLAIN_TEXT); }
<br>결과<br>
<img alt="Pasted image 20250325102427.png" src="http://lts.kr/사진-및-문서/pasted-image-20250325102427.png" target="_self"><br>Base64기반 String 변환 및 암/복호화 테스트 완료
<br>js암호화도 동일하게 동작 확인]]></description><link>http://lts.kr/study/cs/🚨-rsa-암호화-방식의-이해와-구현.html</link><guid isPermaLink="false">study/CS/🚨 RSA 암호화 방식의 이해와 구현.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Tue, 25 Mar 2025 07:11:30 GMT</pubDate><enclosure url="http://lts.kr/사진-및-문서/pasted-image-20250325102427.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="http://lts.kr/사진-및-문서/pasted-image-20250325102427.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[🐡 Spring Security와 Filter 적용기]]></title><description><![CDATA[<a class="tag" href="http://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="http://lts.kr/?query=tag:개발" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개발</a> <a class="tag" href="http://lts.kr/?query=tag:SPRING" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SPRING</a> <a class="tag" href="http://lts.kr/?query=tag:Security" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Security</a> <a class="tag" href="http://lts.kr/?query=tag:Filter" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Filter</a> <br> <a href="http://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="http://lts.kr?query=tag:개발" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개발">#개발</a> <a href="http://lts.kr?query=tag:SPRING" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SPRING">#SPRING</a> <a href="http://lts.kr?query=tag:Security" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Security">#Security</a> <a href="http://lts.kr?query=tag:Filter" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Filter">#Filter</a><br>]]></description><link>http://lts.kr/project/🐡-spring-security와-filter-적용기.html</link><guid isPermaLink="false">project/🐡 Spring Security와 Filter 적용기.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Tue, 25 Mar 2025 06:12:17 GMT</pubDate></item><item><title><![CDATA[📕 공부]]></title><description><![CDATA[<a class="tag" href="http://lts.kr/?query=tag:공부" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#공부</a> <a class="tag" href="http://lts.kr/?query=tag:모음" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#모음</a> <br> <a href="http://lts.kr?query=tag:공부" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#공부">#공부</a> <a href="http://lts.kr?query=tag:모음" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#모음">#모음</a><br>공부
보고 배운 지식 중 공유하고 싶은 정보를 모아둔 카테고리 입니다.
<br>
<br><a data-href="🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안" href="http://lts.kr/issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html" class="internal-link" target="_self" rel="noopener nofollow">🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안</a>
<br><a data-href="🍂 JPA, Mybatis , Dead Lock이슈" href="http://lts.kr/study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock이슈.html" class="internal-link" target="_self" rel="noopener nofollow">🍂 JPA, Mybatis , Dead Lock이슈</a>
<br><a data-href="⏰ Script 로딩 지연 이슈" href="http://lts.kr/issue_troubleshooting/⏰-script-로딩-지연-이슈.html" class="internal-link" target="_self" rel="noopener nofollow">⏰ Script 로딩 지연 이슈</a>
<br><a data-href="🚦 Spring Batch 트러블슈팅" href="http://lts.kr/issue_troubleshooting/🚦-spring-batch-트러블슈팅.html" class="internal-link" target="_self" rel="noopener nofollow">🚦 Spring Batch 트러블슈팅</a>
<br><a data-href="⚔ StckOverflow 이슈와 QueryDSL" href="http://lts.kr/issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html" class="internal-link" target="_self" rel="noopener nofollow">⚔ StckOverflow 이슈와 QueryDSL</a>
<br>
<br><a data-href="🐡 Spring Security와 Filter 적용기" href="http://lts.kr/project/🐡-spring-security와-filter-적용기.html" class="internal-link" target="_self" rel="noopener nofollow">🐡 Spring Security와 Filter 적용기</a>
<br><a data-href="🚨 RSA 암호화 방식의 이해와 구현" href="http://lts.kr/study/cs/🚨-rsa-암호화-방식의-이해와-구현.html" class="internal-link" target="_self" rel="noopener nofollow">🚨 RSA 암호화 방식의 이해와 구현</a>
<br><a data-href="🌋 OSIV와 영속성 컨텍스트" href="http://lts.kr/study/cs/🌋-osiv와-영속성-컨텍스트.html" class="internal-link" target="_self" rel="noopener nofollow">🌋 OSIV와 영속성 컨텍스트</a>
<br><a data-href="🐰 Java의 String과 SpringBuffer" href="http://lts.kr/study/cs/🐰-java의-string과-springbuffer.html" class="internal-link" target="_self" rel="noopener nofollow">🐰 Java의 String과 SpringBuffer</a>
<br><a data-href="🛬 JDK와 JRE, JVM" href="http://lts.kr/study/cs/🛬-jdk와-jre,-jvm.html" class="internal-link" target="_self" rel="noopener nofollow">🛬 JDK와 JRE, JVM</a>
<br><a data-href="🍊 Spring의 의존성 주입(DI)" href="http://lts.kr/study/cs/🍊-spring의-의존성-주입(di).html" class="internal-link" target="_self" rel="noopener nofollow">🍊 Spring의 의존성 주입(DI)</a>
<br><a data-href="🪕 JPA 에 대한 고찰" href="http://lts.kr/study/cs/🪕-jpa-에-대한-고찰.html" class="internal-link" target="_self" rel="noopener nofollow">🪕 JPA 에 대한 고찰</a>
<br>
<br><a data-href="☕ JAVA , OOP" href="http://lts.kr/study/cs/☕-java-,-oop.html" class="internal-link" target="_self" rel="noopener nofollow">☕ JAVA , OOP</a>
<br><a data-href="🍃 Spring" href="http://lts.kr/study/cs/🍃-spring.html" class="internal-link" target="_self" rel="noopener nofollow">🍃 Spring</a>
<br><a data-href="🎩 DevOps" href="http://lts.kr/study/cs/🎩-devops.html" class="internal-link" target="_self" rel="noopener nofollow">🎩 DevOps</a>
<br><a data-href="📔 DataBase" href="http://lts.kr/study/cs/📔-database.html" class="internal-link" target="_self" rel="noopener nofollow">📔 DataBase</a>
<br><a data-href="📭 Server" href="http://lts.kr/study/cs/📭-server.html" class="internal-link" target="_self" rel="noopener nofollow">📭 Server</a>
<br><a data-href="🐞 etc" href="http://lts.kr/study/cs/🐞-etc.html" class="internal-link" target="_self" rel="noopener nofollow">🐞 etc</a>
<br>
<br><a data-href="🤠 Coding Test 풀이 모음" href="http://lts.kr/study/coding-test/🤠-coding-test-풀이-모음.html" class="internal-link" target="_self" rel="noopener nofollow">🤠 Coding Test 풀이 모음</a>
<br><a data-href="👽 Algorithm" href="http://lts.kr/study/coding-test/👽-algorithm.html" class="internal-link" target="_self" rel="noopener nofollow">👽 Algorithm</a>
<br>
<br><a data-href="🔻 Redis 캐쉬 전략 - hello 서비스에 적용하여 성능개선 가능성" href="http://lts.kr/study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html" class="internal-link" target="_self" rel="noopener nofollow">🔻 Redis 캐쉬 전략 - hello 서비스에 적용하여 성능개선 가능성</a>
<br><a data-href="🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안" href="http://lts.kr/issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html" class="internal-link" target="_self" rel="noopener nofollow">🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안</a>
<br><a data-href="🔹 TDD에 대하여" href="http://lts.kr/study/dev-seminar/🔹-tdd에-대하여.html" class="internal-link" target="_self" rel="noopener nofollow">🔹 TDD에 대하여</a>
<br><a data-href="🍂 JPA, Mybatis , Dead Lock이슈" href="http://lts.kr/study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock이슈.html" class="internal-link" target="_self" rel="noopener nofollow">🍂 JPA, Mybatis , Dead Lock이슈</a>
<br><a data-href="🥗 Spring Security_토큰-세션-쿠키-JWT 에 대하여" href="http://lts.kr/study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html" class="internal-link" target="_self" rel="noopener nofollow">🥗 Spring Security_토큰-세션-쿠키-JWT 에 대하여</a>
<br><a data-href="📔 DB 테이블 설계, 어떻게 하는게 옳은 방법인가" href="http://lts.kr/study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html" class="internal-link" target="_self" rel="noopener nofollow">📔 DB 테이블 설계, 어떻게 하는게 옳은 방법인가</a>]]></description><link>http://lts.kr/study/📕-공부.html</link><guid isPermaLink="false">study/📕 공부.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Tue, 25 Mar 2025 06:11:08 GMT</pubDate></item></channel></rss>