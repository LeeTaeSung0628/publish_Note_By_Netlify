<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Category]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://lts.kr/</link><image><url>https://lts.kr/lib/media/favicon.png</url><title>Category</title><link>https://lts.kr/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Mon, 23 Jun 2025 03:12:04 GMT</lastBuildDate><atom:link href="https://lts.kr/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Mon, 23 Jun 2025 03:12:03 GMT</pubDate><copyright><![CDATA[taesung's Blog]]></copyright><ttl>60</ttl><dc:creator>taesung's Blog</dc:creator><item><title><![CDATA[☘ ANONI Chat - 모니터링 도구 적용(Elastic APM) + Slack알림]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="https://lts.kr/?query=tag:개발" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개발</a> <a class="tag" href="https://lts.kr/?query=tag:보안" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#보안</a> <a class="tag" href="https://lts.kr/?query=tag:인프라" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#인프라</a> <a class="tag" href="https://lts.kr/?query=tag:HTTPS" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#HTTPS</a> <a class="tag" href="https://lts.kr/?query=tag:트러블슈팅" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#트러블슈팅</a> <a class="tag" href="https://lts.kr/?query=tag:Elasticsearch" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Elasticsearch</a> <a class="tag" href="https://lts.kr/?query=tag:APM" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#APM</a> <a class="tag" href="https://lts.kr/?query=tag:모니터링" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#모니터링</a> <a class="tag" href="https://lts.kr/?query=tag:slack" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#slack</a> <br> <a href="https://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="https://lts.kr?query=tag:개발" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개발">#개발</a> <a href="https://lts.kr?query=tag:보안" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#보안">#보안</a> <a href="https://lts.kr?query=tag:인프라" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#인프라">#인프라</a> <a href="https://lts.kr?query=tag:HTTPS" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#HTTPS">#HTTPS</a> <a href="https://lts.kr?query=tag:트러블슈팅" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#트러블슈팅">#트러블슈팅</a> <a href="https://lts.kr?query=tag:Elasticsearch" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Elasticsearch">#Elasticsearch</a> <a href="https://lts.kr?query=tag:APM" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#APM">#APM</a> <a href="https://lts.kr?query=tag:모니터링" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#모니터링">#모니터링</a> <a href="https://lts.kr?query=tag:slack" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#slack">#slack</a> <br>
<br>기존의 셋팅된 elK-stack에 elastic APM을 적용해 보도록하겠다.
<br>
<br>APM은 Application performance Monitoring 의 약자이다.
<br>애플리케이션의 성능정보 및 발생한 로그정보, 동작중인 서버의 Metric정보를 수집한다.
<br>MSA환경에서 서비스를 구성하는 여러 앱간의 Request를 하나의 Trace로 묶어서 추적할 수 있다.(분산 Tracing)
<br>Application 지연이 발생했을 때, 지연에 대한 병목 구간을 찾아낼 수있는 모니터링 서비스이다.
<br>Metric 정보란?
시간이 지남에 따라 변화하는 데이터를 의미한다.<br>
메모리 사용률, CPU 사용률, 스레드 사용률 등 시간에 따른 추이를 추적할 가치가 있는 데이터이다.
어떤 서비스, 앱이냐에 따라 해석이 달라질 수는 있지만, 보편적으로 대시보드를 볼때 특정 수치들을 그래프로 보여주는 일종의 시각화로 이해하기도 한다.
<br>
<br>ELK의 일부로, 애플리케이션의 성능을 모니터링하고, 문제의 원인을 빠르게 파악할 수 있도록 설계된 도구.
<br>단순한 로그 수집을 넘어서, 분산 트레이싱, 서비스 간 호출 시간 분석 등, 애플리케이션 수준의 관찰 수준을 제공
<br>[클라이언트 요청] ↓
[NGINX Reverse Proxy] ↓
[Spring Boot 컨테이너] ├── Agent가 DispatcherServlet, Service, Repository 등 Hook ├── Transaction 및 Span 객체 생성 └── 비동기로 APM Server로 전송 ↓
[APM Server] └── JSON 수신 후 Elasticsearch로 전송 ↓
[Elasticsearch] └── 문서화된 데이터 저장 ↓
[Kibana] └── 트랜잭션 시각화 및 분석 <br>APM Agent는 애플리케이션 내부에 직접 탑재되어 실행 중인 코드를 자동 또는 수동 계측해 성능 데이터를 수집하는 라이브러리 또는 패키지다. <br>Java에선 Elastic APM Java Agent라는 JVM 에이전트를 등록하여 사용.<br>메소드 실행 시간 측정
<br>HTTP 요청/응답 모니터링
<br>DB 쿼리 실행 시간 추적
<br>JVM 메모리, CPU 사용량 수집
<br>에러/예외 발생 시 스택 트레이스 캡처
<br>수집한 데이터를 APM Server로 전송
<br>APM Server는 다양한 APM Agent가 수집한 trace/metric/error 데이터를 받아 Elasticsearch로 전달해주는 브로커 역할을 한다. <br>즉, APM agent → APM server → Elasticsearch → Kibana 순으로 연결된다.<br>
<br>apm-server를 기존 docker-compose.yml 파일에 추가한다.
<br>Spring셋팅에 필요한 매개변수도 추가해준다.
<br>Kibana에 elastic APM활성화에 필요한 설정을 추가한다.
<br> # APM Server 추가 apm-server: image: docker.elastic.co/apm/apm-server:7.11.1 container_name: apm-server environment: - output.elasticsearch.hosts=["elasticsearch:9200"] - apm-server.host=0.0.0.0:8200 - apm-server.frontend.enabled=true - apm-server.frontend.rate_limit=100000 - apm-server.read_timeout=1m - apm-server.shutdown_timeout=2m - apm-server.write_timeout=1m - logging.level=info ports: - "8200:8200" networks: - elk depends_on: - elasticsearch # Spring app에 필요한 매개변수 추가 spring: image: ghcr.io/anonichat/app/anonichat expose: - "8080" environment: - ELASTICSEARCH_HOST=elasticsearch:9200 ...생략 ELASTIC_APM_SERVICE_NAME=anonichat-app # APM에서 표시될 서비스명 ELASTIC_APM_SERVER_URLS=http://apm-server:8200 # APM 서버 주소 ELASTIC_APM_APPLICATION_PACKAGES=com.anonichat # 모니터링할 패키지 ELASTIC_APM_ENVIRONMENT=docker # 환경 구분 ELASTIC_APM_LOG_LEVEL=INFO # 로그 레벨 ELASTIC_APM_ENABLE_LOG_CORRELATION=true # 로그 연관성 활성화 depends_on: - elasticsearch - mysql networks: - elk - data # Kibana APM 활성화에 필요한 매개변수 추가 kibana: image: docker.elastic.co/kibana/kibana:7.11.1 ports: - "5601:5601" networks: - elk environment: ... 생략 - xpack.apm.ui.enabled=true # Kibana에서 APM 메뉴 활성화 depends_on: - elasticsearch
<br>
<br># apm agent jar 추가
RUN curl -o /app/elastic-apm-agent.jar \ https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.28.4/elastic-apm-agent-1.28.4.jar # apm agent 실행 명령어 추가
ENTRYPOINT ["java", "-javaagent:/app/elastic-apm-agent.jar", "-jar", "/app/AnoniChatApp.jar"]
<br># dependency 추가 // Elastic APM Agent (프로그래밍 방식 연결용)
implementation 'co.elastic.apm:apm-agent-attach:1.50.0' // APM Spring Boot Starter (자동 설정 - Spring Boot 3.x 호환)
implementation 'co.elastic.apm:elastic-apm-spring-boot-starter:1.50.0' // APM과 로그 연동 (ECS 로그 형식)
implementation 'co.elastic.logging:logback-ecs-encoder:1.6.0'
<br>
<br>
<br>위 docker-compose.yml 파일에서 설정한 매개변수를 삽입하여 apm설정
<br># APM 설정
elastic.apm.service-name=${ELASTIC_APM_SERVICE_NAME:anonichat-app}
elastic.apm.server-urls=${ELASTIC_APM_SERVER_URLS:http://localhost:8200}
elastic.apm.application-packages=${ELASTIC_APM_APPLICATION_PACKAGES:Anoni}
elastic.apm.environment=${ELASTIC_APM_ENVIRONMENT:local}
elastic.apm.enabled=${ELASTIC_APM_ENABLED:true}
elastic.apm.transaction-sample-rate=${ELASTIC_APM_SAMPLE_RATE:1.0}
<br>
<br>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;configuration&gt; ... 생략 &lt;!-- ECS 형식 appender (Elastic Stack 최적화, APM 완벽 연동) --&gt; &lt;appender name="ECS_LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender"&gt; &lt;destination&gt;logstash:5000&lt;/destination&gt; &lt;!-- 기존 포트 5000 사용 --&gt; &lt;encoder class="co.elastic.logging.logback.EcsEncoder"&gt; &lt;!-- APM 서비스명 설정 --&gt; &lt;serviceName&gt;${elastic.apm.service-name:-anonichat-app}&lt;/serviceName&gt; &lt;!-- APM 트레이스 정보 자동 포함 --&gt; &lt;includeMarkers&gt;true&lt;/includeMarkers&gt; &lt;includeMdc&gt;true&lt;/includeMdc&gt; &lt;/encoder&gt; &lt;keepAliveDuration&gt;5 minutes&lt;/keepAliveDuration&gt; &lt;/appender&gt; ... 생략 &lt;!-- APM 관련 로그 레벨 설정 --&gt; &lt;logger name="co.elastic.apm" level="INFO" additivity="false"&gt; &lt;appender-ref ref="CONSOLE" /&gt; &lt;/logger&gt; &lt;/configuration&gt;
<br>
로그의 데이터 형식을 json 형식 &gt; ecs 형식으로 변경
<br>ECS(Elastic Common Schema)란? Elasticsearch에서 정의한 표준화된 로그 데이터 형식
<br>ECS형식의 예
<br># 일반 json 형식
{ "timestamp": "2025-06-15T14:30:15.123Z", "level": "INFO", "message": "사용자 로그인", "userId": "user123", "ip": "192.168.1.100", "userAgent": "Chrome/91.0"
} # ECS 형식
{ "@timestamp": "2025-06-15T14:30:15.123Z", "log": { "level": "INFO" }, "message": "사용자 로그인", "user": { "id": "user123" }, "client": { "ip": "192.168.1.100" }, "user_agent": { "original": "Chrome/91.0" }, "service": { "name": "anonichat-app" }, "trace": { "id": "abc123" }, "transaction": { "id": "def456" }
}
<br>
<br>모든 서비스에서 표준화된 필드명을 가진다.
<br>kibana 대시보드와 호환성이 좋다.
<br>apm과 자동 연동이 된다.
<br>일반 json 형식보다 확장성, 호환성이 좋은 ECS로 로그 형식을 변경했다.<br>
<br>
<br>테스트
<img alt="do-messenger_screenshot_2025-06-19_14_08_30.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-19_14_08_30.png" target="_self"> <br> <br>
<br>다음과 같은 특징들을 고려했을 때, Logstash Alerting 를 선택하였다.
<br>현재에도 인스턴스의 리소스 과부하 문제가 있기 때문에, 가벼운 녀석을 골랐다.
<br>ElastAlert은 무겁고, 독립 실행이 필요하기 때문에 리소스 과부하를 피할 수 없다.
<br>Kibana Watcher는 무료 라이센스에서의 제한적인 기능과, 고급 조건이 불가하여 추적 및 디버기에 한계가 있다.
<br>Logstash는 현재 모두 구현되어 있는 상태이고 설정파일에 몇 줄만 추가하면 알림 설정을 마칠 수 있다.<br><img alt="do-messenger_screenshot_2025-06-23_11_43_48.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-23_11_43_48.png" style="width: 550px; max-width: 100%;" target="_self"> <br><img alt="do-messenger_screenshot_2025-06-23_11_43_55.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-23_11_43_55.png" style="width: 775px; max-width: 100%;" target="_self"><br><img alt="do-messenger_screenshot_2025-06-23_11_44_05.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-23_11_44_05.png" style="width: 800px; max-width: 100%;" target="_self"><br>웹훅 url을 발급받는다.
<br>
<br>input { beats { port =&gt; 5044 } tcp { port =&gt; 5000 codec =&gt; json_lines type =&gt; "main_log" } } filter { if [type] == "main_log" { if [log.level] in ["ERROR", "INFO", "FATAL"] { # INFO는 현재 기능 테스트를 위해 넣음 mutate { add_field =&gt; { "alert_needed" =&gt; "true" } } } }
} output { # 5000번 포트로 오는 모든 알림은 `main_log로 들어와 elastic에 저장` if [type] == "main_log" { elasticsearch { hosts =&gt; ["http://elasticsearch:9200"] index =&gt; "main_log" } } ######################## 추가 부분 ########################## # ["ERROR", "INFO", "FATAL"] 에 해당 하는 알림은 슬렉으로 output 처리 if [alert_needed] == "true" { # error 레벨 발생 시 알려줌 http { url =&gt; "https://hooks.slack.com/services/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" # output 플러그인 사용 http_method =&gt; "post" # Slack Webhook URL로 `POST` 요청 전송. content_type =&gt; "application/json" format =&gt; "json" mapping =&gt; { # 메시지는 `%{}` 문법으로 필드 값을 문자열에 삽입: "text" =&gt; "🚨 *AnoniChat 에러 발생!*``` 레벨: %{[log.level]} 시간: %{[@timestamp]} 스레드: %{[process.thread.name]} 로거: %{[log.logger]} 메시지: %{message} Trace ID: %{[trace.id]} 서비스: %{[service.name]} ```" "channel" =&gt; "#anonichat-error-log" } } } ##########################################################
}
<br>
<br>이후에 logstash 재시작.
<br>docker-compose restart logstash
<br>
<br>anonichat.world(APP) 로 접속해서 -info 로그가 두 번 찍히는지 테스트
<br>@GetMapping(GlobalURL.MAIN_URL) public ModelAndView mainView() { log.info("[MainController Log] mainView 접속 TEST"); List&lt;TestEntity&gt; list = testRepository.findAll(); log.info("[MainController Log] test_table data: {}", list); return new ModelAndView("main"); }
<br><img alt="do-messenger_screenshot_2025-06-23_12_07_38.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-23_12_07_38.png" style="width: 1125px; max-width: 100%;" target="_self"><br>INFO 로그가 정상 출력되는 모습. (log.info로 테스트)
<br>이후 logstash.conf에서 INFO를 빼고 error 레벨만 알람이 울리도록 조정을 다시 해줬다.]]></description><link>https://lts.kr/project/new-project/☘-anoni-chat-모니터링-도구-적용(elastic-apm)-+-slack알림.html</link><guid isPermaLink="false">project/New Project/☘ ANONI Chat - 모니터링 도구 적용(Elastic APM) + Slack알림.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Mon, 23 Jun 2025 03:11:29 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-19_14_08_30.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-19_14_08_30.png"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>