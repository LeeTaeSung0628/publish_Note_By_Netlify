<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Category]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://lts.kr/</link><image><url>https://lts.kr/lib/media/favicon.png</url><title>Category</title><link>https://lts.kr/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Mon, 09 Jun 2025 08:07:58 GMT</lastBuildDate><atom:link href="https://lts.kr/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Mon, 09 Jun 2025 08:07:55 GMT</pubDate><copyright><![CDATA[taesung's Blog]]></copyright><ttl>60</ttl><dc:creator>taesung's Blog</dc:creator><item><title><![CDATA[🏠 taesung's Blog]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:home" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#home</a> <a class="tag" href="https://lts.kr/?query=tag:index" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#index</a> <a class="tag" href="https://lts.kr/?query=tag:blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#blog</a> <a class="tag" href="https://lts.kr/?query=tag:공부" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#공부</a> <br> <a href="https://lts.kr?query=tag:home" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#home">#home</a> <a href="https://lts.kr?query=tag:index" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#index">#index</a> <a href="https://lts.kr?query=tag:blog" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#blog">#blog</a> <a href="https://lts.kr?query=tag:공부" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#공부">#공부</a><br><a data-tooltip-position="top" aria-label="https://github.com/LeeTaeSung0628" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/LeeTaeSung0628" target="_self"><span alt="prof2.jpg" src="prof2.jpg" class="internal-embed media-embed image-embed is-loaded" style="width: 250px; max-width: 100%;"></span></a><img alt="prof2.jpg" src="https://lts.kr/사진-및-문서/prof2.jpg" style="width: 250px; max-width: 100%;" target="_self"><br><a data-tooltip-position="top" aria-label="https://git.io/typing-svg" rel="noopener nofollow" class="external-link is-unresolved" href="https://git.io/typing-svg" target="_self"></a><img alt="Typing SVG" src="https://readme-typing-svg.demolab.com?font=Fira+Code&amp;pause=1000&amp;color=36A9F7&amp;random=false&amp;width=435&amp;lines=%EC%97%AC%EA%B8%B0%EB%8A%94+%EA%B3%B5%EB%B6%80%ED%95%98%EA%B3%A0%2C+%EA%B8%B0%EB%A1%9D%ED%95%98%EB%8A%94+%EA%B3%B3%EC%9E%85%EB%8B%88%EB%8B%A4" referrerpolicy="no-referrer" target="_self" class="is-unresolved"><br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>]]></description><link>https://lts.kr/🏠-taesung's-blog.html</link><guid isPermaLink="false">🏠 taesung's Blog.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Mon, 09 Jun 2025 08:07:41 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/prof2.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/prof2.jpg"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[🤑 ANONI Chat 개발기 - ELK Stack setting]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="https://lts.kr/?query=tag:개발" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개발</a> <a class="tag" href="https://lts.kr/?query=tag:인프라" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#인프라</a> <a class="tag" href="https://lts.kr/?query=tag:Elasticsearch" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Elasticsearch</a> <a class="tag" href="https://lts.kr/?query=tag:Logstash" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Logstash</a> <a class="tag" href="https://lts.kr/?query=tag:Kibana" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Kibana</a> <br> <a href="https://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="https://lts.kr?query=tag:개발" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개발">#개발</a> <a href="https://lts.kr?query=tag:인프라" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#인프라">#인프라</a> <a href="https://lts.kr?query=tag:Elasticsearch" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Elasticsearch">#Elasticsearch</a> <a href="https://lts.kr?query=tag:Logstash" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Logstash">#Logstash</a> <a href="https://lts.kr?query=tag:Kibana" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Kibana">#Kibana</a><br>
<br>ELK는 Elasticsearch, Logstash, Kibana의 약자로, 로그 수집, 저장, 분석, 시각화를 위한 오픈소스 로그 플랫폼 스택이다.
<br>최근에는 Beats까지 포함한 "Elastic Stack" 이라고도 부른다.
<br><img alt="do-messenger_screenshot_2025-06-04_13_38_39.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_13_38_39.png" target="_self"><br>
<br>고성능을 위해 많은 메모리가 필요하다.
<br>infra를 셋팅하는데 있어서 러닝커브가 높다..
<br>build.gradle<br>dependencies { implementation 'net.logstash.logback:logstash-logback-encoder:7.4' }
<br>logstash 의존성을 추가해준다.
<br>
<br>spring boot용 Logback 로깅 사용자 정의 설정파일
<br>logback-spring.xml<br>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;configuration&gt; &lt;!--모든 로그를 콘솔에 출력--&gt; &lt;appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender"&gt; &lt;encoder&gt; &lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;!--예: `12:30:15.321 [main] INFO AuctionService - Started`--&gt; &lt;/appender&gt; &lt;appender name="MAIN_LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender"&gt; &lt;destination&gt;logstash:5000&lt;/destination&gt; &lt;!--컨테이너 포트 5000으로 전송--&gt; &lt;encoder class="net.logstash.logback.encoder.LogstashEncoder" /&gt; &lt;!--JSON 형식 로그로 인코딩--&gt; &lt;keepAliveDuration&gt;5 minutes&lt;/keepAliveDuration&gt; &lt;!--TCP연결 5분간 유지--&gt; &lt;/appender&gt; &lt;!-- 추가적으로 로그 분기 가능 (ex) &lt;appender name="CUSTOM_LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender"&gt; &lt;destination&gt;logstash:5001&lt;/destination&gt; &lt;encoder class="net.logstash.logback.encoder.LogstashEncoder" /&gt; &lt;keepAliveDuration&gt;5 minutes&lt;/keepAliveDuration&gt; &lt;/appender&gt;
--&gt; &lt;!--전체 시스템 로그 중 INFO 이상만 콘솔 출력 (별도 logger 설정 없는 경우에 해당)--&gt; &lt;root level="info"&gt; &lt;appender-ref ref="MAIN_LOGSTASH" /&gt; &lt;appender-ref ref="CONSOLE" /&gt; &lt;/root&gt; &lt;!-- 클래스 또는 패키지 이름이 `MainServiceLogger`인 로거에 적용 DEBUG 이상 로그 additivity="false" : 루트로 로그 전파 X (CONSOLE + MAIN_LOGSTASH만 사용) + 콘솔 동시 출력 --java-- 다음 코드로 사용 가능 Logger logger = LoggerFactory.getLogger("MainServiceLogger"); logger.info("{}", bidLogDTO); --&gt; &lt;logger name="MainServiceLogger" level="debug" additivity="false"&gt; &lt;appender-ref ref="MAIN_LOGSTASH" /&gt; &lt;appender-ref ref="CONSOLE" /&gt; &lt;/logger&gt; &lt;!-- &lt;logger name="CustomServiceLogger" level="debug" additivity="false"&gt; &lt;appender-ref ref="CUSTOM_LOGSTASH" /&gt; &lt;appender-ref ref="CONSOLE" /&gt; &lt;/logger&gt;
--&gt;
&lt;/configuration&gt;
<br>mainController<br>@GetMapping(GlobalURL.MAIN_URL) public ModelAndView mainView() { log.info("[MainController Log] mainView 접속 TEST"); return new ModelAndView("main"); }
<br>
<br>DockerComposeTool 설정파일.
<br>여러개의 컨테이너(서비스)를 하나의 애플리케이션 처럼 정의하고 실행하도록 도움.
<br>컨테이너 환경을 코드화/자동화
<br>컨테이너를 띄울 서버(필자는 Ubuntu)에 생성하여 준다.
<br>
<br>Elasticsearch
<br>Logstash
<br>Kibana
<br>Spring Boot 애플리케이션
<br>주석 제외코드 ▶ <a data-href="anoniChat-docker-compose.yml" href="https://lts.kr/project/new-project/anonichat-docker-compose.yml.html" class="internal-link" target="_self" rel="noopener nofollow">anoniChat-docker-compose.yml</a><br># Docker Compose 파일 스펙 버전 3 사용
version: '3' services: elasticsearch: image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1 environment: - discovery.type=single-node # 단일 노드 구성 ports: - "9200:9200" networks: - elk # `elk`키워드 네트워크로 구성 (다른 서비스와 내부 통신) volumes: - esdata:/usr/share/elasticsearch/data logstash: image: docker.elastic.co/logstash/logstash:7.12.0 ports: - "5044:5044" # Filebeat 등 input으로 사용하는 포트 - "5000:5000" # TCP 또는 JSON 로그 input 용 포트 (Spring에서 이 포트를 사용) volumes: - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf networks: - elk # `elk`키워드 네트워크 kibana: image: docker.elastic.co/kibana/kibana:7.11.1 ports: - "5601:5601" # 웹 UI 접근용 포트 networks: - elk # `elk`키워드 네트워크 environment: - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 # Elasticsearch 주소 연결 - server.host=0.0.0.0 # 모든 IP 바인딩 허용 spring: image: ghcr.io/anonichat/app/anonichat ports: - "8081:8080" environment: - ELASTICSEARCH_HOST=elasticsearch:9200 # Elasticsearch의 내부 주소를 환경변수로 주입 depends_on: - elasticsearch # Elasticsearch가 먼저 실행되도록 보장 networks: - elk # 내부 ELK 네트워크로 연결 volumes: esdata: driver: local # Elasticsearch 데이터 저장소를 호스트 볼륨에 영구 저장 networks: elk: # 모든 서비스가 하나의 공용 네트워크 `elk`에서 통신 driver: bridge # `elasticsearch`, `logstash`, `spring`, `kibana`는 서로 이름으로 접근 가능
<br>
<br>Logstash의 데이터 처리 파이프라인을 정의하는 설정 파일이다.
<br>docker-compose.yml파일을 생성한 같은 디렉토리에 생성한다.
<br>주석 제외 코드 ▶ <a data-href="anoniChat-logstash.conf" href="https://lts.kr/project/new-project/anonichat-logstash.conf.html" class="internal-link" target="_self" rel="noopener nofollow">anoniChat-logstash.conf</a><br>input { // 데이터 수신 설정 beats { port =&gt; 5044 } tcp { port =&gt; 5000 codec =&gt; json_lines // json형식으로 한줄씩 파싱 type =&gt; "main_log" // 수산 로그에 type필드로 "auction_log" 부여 } //tcp { // port =&gt; 5001 // codec =&gt; json_lines // type =&gt; "custom_log" //}
} filter { // 수신된 로그를 처리하기위한 전처리 if [type] == "main_log" { // 로그 타입이 `main_log`일 때만 처리. grok { // 정규식으로 메세지 파싱 match =&gt; { "message" =&gt; "%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:thread}\] %{LOGLEVEL:loglevel} %{DATA:logger} - %{GREEDYDATA:logmessage}" } } } // 필터 사용 예시
//	if [type] == "custom_log" {
// if "TestLogDTO" in [message] {
// grok {
// match =&gt; {
// "message" =&gt; "TestLogDTO\(userId=%{NUMBER:user_id}, exchangeAmount=%{NUMBER:exchange_amount}, payType=%{WORD:pay_type}, payStatus=%{WORD:pay_status}\)"
// }
// }
// mutate { // 필드 타입 변환 및 메시지 필드 제거
// remove_field =&gt; ["message"] // }
// } else {
// drop { } // `TestLogDTO`가 포함되지 않으면 해당 로그 삭제(drop).
// }
//	}
} output { // 로그 출력 설정 시작 if [type] == "main_log" { elasticsearch { hosts =&gt; ["http://elasticsearch:9200"] // Elasticsearch로 전송 index =&gt; "main_log" // 인덱스 이름: `main_log`. } }
// if [type] == "custom_log" {
// elasticsearch {
// hosts =&gt; ["http://elasticsearch:9200"]
// index =&gt; "custom_log"
// }
// }
}
<br>임의의 폴더를 지정한 후,<br><a data-href="anoniChat-docker-compose.yml" href="https://lts.kr/project/new-project/anonichat-docker-compose.yml.html" class="internal-link" target="_self" rel="noopener nofollow">anoniChat-docker-compose.yml</a> / <a data-href="anoniChat-logstash.conf" href="https://lts.kr/project/new-project/anonichat-logstash.conf.html" class="internal-link" target="_self" rel="noopener nofollow">anoniChat-logstash.conf</a><br>nano anoniChat-docker-compose.yml
nano logstash.conf
<br>파일을 생성한다.<br><img alt="Pasted image 20250605172214.png" src="https://lts.kr/사진-및-문서/pasted-image-20250605172214.png" style="width: 550px; max-width: 100%;" target="_self"><br>DockerComposeTool이 없다면?
sudo apt install -y docker-compose 해당 명령어로 다운로드 받기
<br>이후,<br>docker-compose up -d
<br>-d : 백그라운드로 실행
<br>http://{‘IP주소‘}:5610 (Kibana port) 로 접속확인<br><img alt="do-messenger_screenshot_2025-06-09_11_03_39.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-09_11_03_39.png" target="_self"><br>로그 출력 정상 확인
<br>위 과정을 거치며, Spring Server가 Docker Compose로 묶이게 되었다.<br>기존의 Jenkins파이프라인으로 Spring Server를 띄울 시 네트워크 연결이 되지 않으므로,
새로 셋팅을 해주어야 한다.<br>기존 Spring Sever 배포 파이프라인
<br>try { sh "docker stop ${CONTAINER_NAME} || true" sh "docker rm ${CONTAINER_NAME} || true" sh "docker rmi ${DOCKER_HUB_REPO}:${DOCKER_LATEST_TAG} || true" sh "docker pull ${DOCKER_HUB_REPO}:${DOCKER_LATEST_TAG}" sh """ docker run -d \ --name ${CONTAINER_NAME} \ --restart always \ -p ${CONTAINER_PORT} \ ${DOCKER_HUB_REPO}:${DOCKER_LATEST_TAG} """ sh "sleep 10" sh "docker ps | grep ${CONTAINER_NAME}"
} catch (Exception e) { echo "❌ 배포 실패: ${e.getMessage()}" throw e
}
<br>변경 후 파이프라인
<br>
environment { COMPOSE_PATH = '/home/hello/Desktop/AnoniChat/elk-stack' SPRING_SERVICE_NAME = 'spring'
} ... try { dir("${COMPOSE_PATH}") { sh """ docker-compose stop ${SPRING_SERVICE_NAME} || true docker-compose rm -f ${SPRING_SERVICE_NAME} || true docker-compose pull ${SPRING_SERVICE_NAME} docker-compose up -d ${SPRING_SERVICE_NAME} docker-compose ps """ }
} catch (Exception e) { echo "❌ 배포 실패: ${e.getMessage()}" throw e
} <br>🚀 최신 이미지로 배포 중...
[Pipeline] script
[Pipeline] {
[Pipeline] dir
Running in /home/hello/Desktop/AnoniChat/elk-stack
[Pipeline] {
[Pipeline] sh
+ docker-compose stop spring
/home/hello/Desktop/AnoniChat/elk-stack@tmp/durable-7c44adc8/script.sh.copy: 2: docker-compose: not found
+ true
+ docker-compose rm -f spring
/home/hello/Desktop/AnoniChat/elk-stack@tmp/durable-7c44adc8/script.sh.copy: 3: docker-compose: not found
+ true
+ docker-compose pull spring
/home/hello/Desktop/AnoniChat/elk-stack@tmp/durable-7c44adc8/script.sh.copy: 4: docker-compose: not found
[Pipeline] }
[Pipeline] // dir
[Pipeline] echo
❌ 배포 실패: script returned exit code 127
<br>답 :<br>
Ubuntu서버에는 docker-compose를 설치했지만,
Jenkins서버(컨테이너)에 설치가 되지 않았다.
이를 해결하기 위해 직접 설치해도 되지만, Jenkins docekrfile을 수정하도록 하겠다.
<br>
<br>도커 컴포즈 다운로드 코드 추가
<br># 3. Docker CLI 설치 (DooD 방식) RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker.gpg &amp;&amp; \ echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \ &gt; /etc/apt/sources.list.d/docker.list &amp;&amp; \ apt-get update &amp;&amp; apt-get install -y docker-ce-cli &amp;&amp; \ # Docker Compose 설치 (v2) DOCKER_COMPOSE_VERSION=2.24.0 &amp;&amp; \ curl -SL https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-linux-$(uname -m) \ -o /usr/local/bin/docker-compose &amp;&amp; \ chmod +x /usr/local/bin/docker-compose &amp;&amp; \ ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
<br>Running in /home/hello/Desktop/AnoniChat/elk-stack
[Pipeline] {
[Pipeline] sh
+ docker-compose stop spring
no configuration file provided: not found
+ true
+ docker-compose rm -f spring
no configuration file provided: not found
+ true
+ docker-compose pull spring
no configuration file provided: not found
<br>이번에는 docker-compose.yml파일을 찾을수가 없다고 한다...
<br>jenkins server에서 해당 경로로 진입시 docker-compose파일을 찾을 수 없다.<br>당연한건가??<br><img alt="Pasted image 20250609165033.png" src="https://lts.kr/사진-및-문서/pasted-image-20250609165033.png" style="width: 500px; max-width: 100%;" target="_self"><br>docker run -d \ --name jenkins-dood \ -p 8080:8080 \ -v /var/run/docker.sock:/var/run/docker.sock \ -v jenkins_home:/home/hello \ -v /home/hello/Desktop/AnoniChat/elk-stack:/home/hello/Desktop/AnoniChat/elk-stack \ ghcr.io/anonichat/app/jenkins-dood:v0.06
<br>기본적인 ELK CI/CD 셋팅 완료.<br><img alt="Pasted image 20250609170633.png" src="https://lts.kr/사진-및-문서/pasted-image-20250609170633.png" style="width: 825px; max-width: 100%;" target="_self"><br>🎉 CI/CD 파이프라인이 성공적으로 완료되었습니다!
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS]]></description><link>https://lts.kr/project/new-project/🤑-anoni-chat-개발기-elk-stack-setting.html</link><guid isPermaLink="false">project/New Project/🤑 ANONI Chat 개발기 - ELK Stack setting.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Mon, 09 Jun 2025 08:06:57 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_13_38_39.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_13_38_39.png"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>