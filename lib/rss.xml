<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[blog]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://lts.kr/</link><image><url>http://lts.kr/lib/media/favicon.png</url><title>blog</title><link>http://lts.kr/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 13 Mar 2025 09:06:50 GMT</lastBuildDate><atom:link href="http://lts.kr/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 13 Mar 2025 09:06:46 GMT</pubDate><copyright><![CDATA[taesung's Blog]]></copyright><ttl>60</ttl><dc:creator>taesung's Blog</dc:creator><item><title><![CDATA[2.4 새로운 할인 정책 개발]]></title><description><![CDATA[<a class="tag" href="http://lts.kr/?query=tag:SpringCoreBasic" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SpringCoreBasic</a> <a class="tag" href="http://lts.kr/?query=tag:SPRING" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SPRING</a> <a class="tag" href="http://lts.kr/?query=tag:lectur" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#lectur</a> <a class="tag" href="http://lts.kr/?query=tag:강의" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#강의</a> <br> <a href="http://lts.kr?query=tag:SpringCoreBasic" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SpringCoreBasic">#SpringCoreBasic</a> <a href="http://lts.kr?query=tag:SPRING" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SPRING">#SPRING</a> <a href="http://lts.kr?query=tag:lectur" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#lectur">#lectur</a> <a href="http://lts.kr?query=tag:강의" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#강의">#강의</a><br>
<br>추가예정]]></description><link>http://lts.kr/lectur/2.4-새로운-할인-정책-개발.html</link><guid isPermaLink="false">lectur/2.4 새로운 할인 정책 개발.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 13 Mar 2025 09:06:17 GMT</pubDate></item><item><title><![CDATA[2. 스프링 핵심 원리 이해]]></title><description><![CDATA[<a class="tag" href="http://lts.kr/?query=tag:SpringCoreBasic" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SpringCoreBasic</a> <a class="tag" href="http://lts.kr/?query=tag:SPRING" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SPRING</a> <a class="tag" href="http://lts.kr/?query=tag:lectur" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#lectur</a> <a class="tag" href="http://lts.kr/?query=tag:강의" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#강의</a> <br> <a href="http://lts.kr?query=tag:SpringCoreBasic" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SpringCoreBasic">#SpringCoreBasic</a> <a href="http://lts.kr?query=tag:SPRING" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SPRING">#SPRING</a> <a href="http://lts.kr?query=tag:lectur" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#lectur">#lectur</a> <a href="http://lts.kr?query=tag:강의" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#강의">#강의</a><br>``<br>]]></description><link>http://lts.kr/lectur/2.-스프링-핵심-원리-이해.html</link><guid isPermaLink="false">lectur/2. 스프링 핵심 원리 이해.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 13 Mar 2025 08:35:50 GMT</pubDate></item><item><title><![CDATA[2.3 주문과 할인 도메인 설계 및 개발]]></title><description><![CDATA[<a class="tag" href="http://lts.kr/?query=tag:SpringCoreBasic" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SpringCoreBasic</a> <a class="tag" href="http://lts.kr/?query=tag:SPRING" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SPRING</a> <a class="tag" href="http://lts.kr/?query=tag:lectur" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#lectur</a> <a class="tag" href="http://lts.kr/?query=tag:강의" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#강의</a> <br> <a href="http://lts.kr?query=tag:SpringCoreBasic" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SpringCoreBasic">#SpringCoreBasic</a> <a href="http://lts.kr?query=tag:SPRING" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SPRING">#SPRING</a> <a href="http://lts.kr?query=tag:lectur" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#lectur">#lectur</a> <a href="http://lts.kr?query=tag:강의" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#강의">#강의</a><br>
<br>주문과 할인 정책 <br>회원은 상품을 주문할 수 있다. <br>회원 등급에 따라 할인 정책을 적용할 수 있다. <br>할인 정책은 모든 VIP는 1000원을 할인해주는 고정 금액 할인을 적용해달라. (나중에 변경 될 수 있다.) <br>할인 정책은 변경 가능성이 높다. 회사의 기본 할인 정책을 아직 정하지 못했고, 오픈 직전까지 고민을 미루 고 싶다. 최악의 경우 할인을 적용하지 않을 수 도 있다. (미확정) <br><img alt="Pasted image 20250313155205.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313155205.png" style="width: 700px; max-width: 100%;" target="_self"><br>주문 생성: 클라이언트는 주문 서비스에 주문 생성을 요청한다. <br>회원 조회: 할인을 위해서는 회원 등급이 필요하다. 그래서 주문 서비스는 회원 저장소에서 회원을 조회한다. <br>할인 적용: 주문 서비스는 회원 등급에 따른 할인 여부를 할인 정책에 위임한다. <br>주문 결과(객체) 반환: 주문 서비스는 할인 결과를 포함한 주문 결과를 반환한다.
<br>(위에서 구현한 회원 저장소와 같이)<br>
<img alt="Pasted image 20250313155459.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313155459.png" style="width: 650px; max-width: 100%;" target="_self"><br><img alt="Pasted image 20250313155555.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313155555.png" style="width: 650px; max-width: 100%;" target="_self"><br><img alt="Pasted image 20250313155756.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313155756.png" target="_self"><br>MemoryMemberRepository를 사용하고, 정액 할인 정책을 사용한 주문 도메인<br>
-메모리 대신 DB회원 저장소를 쓰거나, 정률 할인정책을 지원하더라도 주문서비스의 역할을 변경할 필요가 없다.
<br>
<br>이전 Generate 단축키로 생성자 및 getter / setter / ToString 삽입<br>
<img alt="Pasted image 20250313162400.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313162400.png" target="_self">
<br>package hello.core.order; public class Order { private Long memberId; private String itemName; private int itemPrice; private int discountPrice; public Order(Long memberId, String itemName, int itemPrice, int discountPrice) { this.memberId = memberId; this.itemName = itemName; this.itemPrice = itemPrice; this.discountPrice = discountPrice; } // 비즈니스 계산 로직 - 최종계산 금액 public int calculatePrice() { return itemPrice - discountPrice; } public Long getMemberId() { return memberId; } ... public void setDiscountPrice(int discountPrice) { this.discountPrice = discountPrice; } @Override public String toString() { return "Order{" + "memberId=" + memberId + ", itemName='" + itemName + '\'' + ", itemPrice=" + itemPrice + ", discountPrice=" + discountPrice + '}'; } }
<br>public class OrderServiceImpl implements OrderService { private final MemberRepository memberRepository = new MemoryMemberRepository(); private final DiscountPolicy discountPolicy = new FixDiscountPolicy(); @Override public Order createOrder(Long memberId, String itemName, int itemPrice) { Member member = memberRepository.findById(memberId); /* 해당 부분은 할인과 관련된 부분을 discountPolicy 에 위임하고 있기 때문에 단일 책임 원칙을 잘 지켰다고 볼 수 있다.*/ int discountPrice = discountPolicy.discount(member, itemPrice); return new Order(memberId, itemName, itemPrice, discountPrice); } }
<br>주문 생성 요청이 오면, 회원 정보를 조회 한 후애 할인정책에 회원정보를 단순히 넘겨준다.<br>
-&gt; 단일책임 원칙이 잘 지켜진 것이다.
<br>public class OrderApp { public static void main(String[] args) { MemberService memberService = new MemberServiceImpl(); OrderService orderService = new OrderServiceImpl(); Long memberId = 1L; Member member = new Member(memberId, "memberA", Grade.VIP); memberService.join(member); Order order = orderService.createOrder(memberId, "itemA", 10000); System.out.println("order = " + order);// order.toString 실행 (오버라이드) System.out.println("order.calculatePrice = " + order.calculatePrice()); } }
<br>출력<br>order = Order{memberId=1, itemName='itemA', itemPrice=10000, discountPrice=1000}
order.calculatePrice = 9000 // 할인된 금액
BUILD SUCCESSFUL in 1s
<br>package hello.core.member; import org.assertj.core.api.Assertions; import org.junit.jupiter.api.Test; public class OrderServiceTest { MemberService memberService = new MemberServiceImpl(); OrderService orderService = new OrderServiceImpl(); @Test void createOrder() { Long memberId = 1L; Member member = new Member(memberId, "memberA", Grade.VIP); memberService.join(member); Order order = orderService.createOrder(memberId, "itemA", 10000); Assertions.assertThat(order.getDiscountPrice()).isEqualTo(1000); } }
<br>출력<br>BUILD SUCCESSFUL in 1s
<br><img alt="Pasted image 20250313165833.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313165833.png" target="_self"><br>BUILD SUCCESSFUL in 1s
4 actionable tasks: 2 executed, 2 up-to-date
오후 4:58:55: Execution finished ':test --tests "hello.core.member.MemberServiceTest" --tests "hello.core.member.OrderServiceTest"'.
<br>완료<br>]]></description><link>http://lts.kr/lectur/2.3-주문과-할인-도메인-설계-및-개발.html</link><guid isPermaLink="false">lectur/2.3 주문과 할인 도메인 설계 및 개발.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 13 Mar 2025 08:01:50 GMT</pubDate><enclosure url="http://lts.kr/사진-및-문서/pasted-image-20250313155205.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="http://lts.kr/사진-및-문서/pasted-image-20250313155205.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.2 회원 도메인 설계 및 개발]]></title><description><![CDATA[<a class="tag" href="http://lts.kr/?query=tag:SpringCoreBasic" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SpringCoreBasic</a> <a class="tag" href="http://lts.kr/?query=tag:SPRING" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SPRING</a> <a class="tag" href="http://lts.kr/?query=tag:lectur" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#lectur</a> <a class="tag" href="http://lts.kr/?query=tag:강의" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#강의</a> <br> <a href="http://lts.kr?query=tag:SpringCoreBasic" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SpringCoreBasic">#SpringCoreBasic</a> <a href="http://lts.kr?query=tag:SPRING" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SPRING">#SPRING</a> <a href="http://lts.kr?query=tag:lectur" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#lectur">#lectur</a> <a href="http://lts.kr?query=tag:강의" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#강의">#강의</a><br>
<br>회원 <br>회원을 가입하고 조회할 수 있다. <br>회원은 일반과 VIP 두 가지 등급이 있다. <br>회원 데이터는 자체 DB를 구축할 수 있고, 외부 시스템과 연동할 수 있다. (미확정) <br>회원 데이터, 할인정책 같은 부분은 변경가능성이 상당히 높다.<br>
-&gt; 객체지향 설계 방법을 사용하여, 인터페이스를 만들고 구현체를 언제든지 갈아끼울 수 있도록 설계하자.<br>참고
프로젝트 환경설정을 위해 스프링 부트를 사용했으나,<br>
지금은 스프링 없이 순수한 JAVA로 프로젝트를 개발중이다.
<br>
<br>회원 도메인 요구사항 <br>회원을 가입하고 조회할 수 있다. <br>회원은 일반과 VIP 두 가지 등급이 있다. <br>회원 데이터는 자체 DB를 구축할 수 있고, 외부 시스템과 연동할 수 있다. (미확정) <br><img alt="Pasted image 20250313111121.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313111121.png" target="_self"><br>
회원 저장소 라는 역할(인터페이스)과<br>
메모리 회원 저장소 / DB 회원 저장소 / 외부 연동 저장소 라는 구현(구현체)<br>
미 확정 요소에 대하여 개발 이후 갈아끼울 수 있도록 역할과 구현을 분리 <br>
기획자들도 볼 수 있는 그림이다. <br><img alt="Pasted image 20250313111614.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313111614.png" style="width: 725px; max-width: 100%;" target="_self"><br>
implements : 구현 이라는 뜻으로, 역할(interface)를 실제로 구현하는 것이다.<br>
interface에 대해서 구현체가 단 1개만 존재할 때, 'Impl' 을 붙이는 관행이 있다. <br>
도메인 설계를 구체화 하여, 클래스 다이어그램을 만들어 낸다. <br><img alt="Pasted image 20250313111817.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313111817.png" target="_self"><br>
객체 간, 메모리간의 참조들이 어떠한 방식으로 그려지는지. <br>
회원 서비스 : MemberServiceImpl / 메모리 회원 저장소 : MemoryMemberRepository(클래스)구현체 <br>
객체 다이어그램은 서버가 올라간 이후 (ex. new 해서 참조하는 것) 동적으로 정해지는 것들에 대한,<br>
new로 만들어진 인스턴스끼리의 참조 <br>
<br>인텔리J셋팅에서 - Generate.. 단축키 설정<br>
<img alt="Pasted image 20250313114207.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313114207.png" style="width: 675px; max-width: 100%;" target="_self">
<br>package hello.core.member; public class Member { private Long id; private String name; private Grade grade; //작성 후 위에서 설정한 단축키
}
<br><img alt="Pasted image 20250313114322.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313114322.png" target="_self"><br>
<img alt="Pasted image 20250313114332.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313114332.png" target="_self"><br>생성된 모습
<br>package hello.core.member; public class Member { private Long id; private String name; private Grade grade; //생성자 및 getter/setter 자동 생성 public Member(Long id, String name, Grade grade) { this.id = id; this.name = name; this.grade = grade; } ... public void setName(String name) { this.name = name; } public void setGrade(Grade grade) { this.grade = grade; }
}
<br><img alt="Pasted image 20250313151739.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313151739.png" target="_self"><br>package hello.core.member; public class MemberServiceImpl implements MemberService { // 레파지토리 구현체 생성 private final MemberRepository memberRepository = new MemoryMemberRepository(); @Override public void join(Member member) { // memberRepository 를 호출 하여도, 다형성에 의해서 MemoryMemberRepository 의 save 호출 memberRepository.save(member); } @Override public Member findMember(Long memberId) { return memberRepository.findById(memberId); } }
<br><img alt="Pasted image 20250313152221.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313152221.png" target="_self"><br>✳단축키 psvm 후 enter 시 메인 생성 가능<br>package hello.core; import hello.core.member.Grade; import hello.core.member.Member; import hello.core.member.MemberService; import hello.core.member.MemberServiceImpl; public class MemberApp { //*단축키 psvm 후 enter 시 메인 생성 가능* public static void main(String[] args) { MemberService memberService = new MemberServiceImpl(); Member member = new Member(1L, "memberA", Grade.VIP); memberService.join(member); //가입 확인 Member findMember = memberService.findMember(1L); System.out.println("new member = " + member.getName()); System.out.println("findMember = " + findMember.getName()); } }
<br>// 출력
new member = memberA
findMember = memberA
<br>순수한 자바 코드로 애플리케이션을 개발/테스트 완료.
<br>(기본 디펜던시에 포함)<br>테스트 패키지에 MemberServiceTest 생성하기<br>
<img alt="Pasted image 20250313152958.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313152958.png" target="_self">
<br>
<br>객체 비교<br>
<img alt="Pasted image 20250313153455.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313153455.png" target="_self">
<br>package hello.core.member; import org.assertj.core.api.Assertions; import org.junit.jupiter.api.Test; public class MemberServiceTest { MemberService memberService = new MemberServiceImpl(); @Test void join() { //give (~한 환경에서) Member member = new Member(1L, "memberA", Grade.VIP); //when (~ 했을 때) memberService.join(member); Member findMember = memberService.findMember(1L); //then (~ 결과가 나온다) Assertions.assertThat(member).isEqualTo(findMember); } }
<br>
테스트 실행<br>
<img alt="Pasted image 20250313153605.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313153605.png" target="_self"> <br>
통과<br>
<img alt="Pasted image 20250313153630.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313153630.png" style="width: 750px; max-width: 100%;" target="_self"> <br>
값 변경시 실패 확인 - memberId : 2L<br>
<img alt="Pasted image 20250313153740.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313153740.png" style="width: 750px; max-width: 100%;" target="_self"> <br>
<br>다른 저장소로 변경할 때 OCP 원칙을 잘 준수하고 있는가?
<br>DIP를 잘 지키고 있는가?
<br>'의존관계가 인터페이스 뿐만 아니라, 구현까지 모두 의존하는 문제점이 있음'<br>private final MemberRepository memberRepository = new MemoryMemberRepository();
<br>MemberService에서, 분명히 interface(MemberRepository)를 의존하지만,<br>
실제 할당하는 부분에서 구현체에 의존하고 있다.
<br>=&gt; 추상화에도 의존하고 구체화에도 의존하고 있다. =&gt; DIP(의존관계역전원칙)를 위반하고 있다.<br>]]></description><link>http://lts.kr/lectur/2.2-회원-도메인-설계-및-개발.html</link><guid isPermaLink="false">lectur/2.2 회원 도메인 설계 및 개발.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 13 Mar 2025 06:57:15 GMT</pubDate><enclosure url="http://lts.kr/사진-및-문서/pasted-image-20250313111121.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="http://lts.kr/사진-및-문서/pasted-image-20250313111121.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2.1 스프링 프로젝트 생성]]></title><description><![CDATA[<a class="tag" href="http://lts.kr/?query=tag:SpringCoreBasic" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SpringCoreBasic</a> <a class="tag" href="http://lts.kr/?query=tag:SPRING" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SPRING</a> <a class="tag" href="http://lts.kr/?query=tag:lectur" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#lectur</a> <a class="tag" href="http://lts.kr/?query=tag:강의" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#강의</a> <br> <a href="http://lts.kr?query=tag:SpringCoreBasic" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SpringCoreBasic">#SpringCoreBasic</a> <a href="http://lts.kr?query=tag:SPRING" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SPRING">#SPRING</a> <a href="http://lts.kr?query=tag:lectur" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#lectur">#lectur</a> <a href="http://lts.kr?query=tag:강의" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#강의">#강의</a><br>스타터 사이트 : <a rel="noopener nofollow" class="external-link is-unresolved" href="https://start.spring.io/" target="_self">https://start.spring.io/</a><br>
<img alt="Pasted image 20250305173344.png" src="http://lts.kr/사진-및-문서/pasted-image-20250305173344.png" style="width: 800px; max-width: 100%;" target="_self"><br>
별도의 의존관계는 추가하지 않음<br><img alt="Pasted image 20250313103346.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313103346.png" target="_self"><br>
JVM(jdk)버전이 맞지 않아 Gradle에서 오류 Project source sets cannot be resolved가 발생<br>spring-boot-gradle-plugin:3.4.3.
Dependency requires at least JVM runtime version 17. This build uses a Java 11 JVM.
<br>gradle-plugin:3.4.3. 에는 JVM 17 또는 11 로 셋팅<br><a data-tooltip-position="top" aria-label="https://www.oracle.com/java/technologies/downloads/#java17" rel="noopener nofollow" class="external-link is-unresolved" href="https://www.oracle.com/java/technologies/downloads/#java17" target="_self">오라클 JDK 사이트</a><br>
<img alt="do-messenger_screenshot_2025-03-13_10_41_16.png" src="http://lts.kr/사진-및-문서/do-messenger_screenshot_2025-03-13_10_41_16.png" style="width: 725px; max-width: 100%;" target="_self"><br>Gradle 셋팅에서 jdk 지정<br>
<img alt="Pasted image 20250313104418.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313104418.png" style="width: 625px; max-width: 100%;" target="_self">
<br>성공<br>
<img alt="Pasted image 20250313104505.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313104505.png" target="_self"><br>
<img alt="Pasted image 20250313105635.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313105635.png" style="width: 825px; max-width: 100%;" target="_self">
<br>추가 의존성을 설정하지 않았기 때문에<br>
<img alt="Pasted image 20250313105543.png" src="http://lts.kr/사진-및-문서/pasted-image-20250313105543.png" target="_self"><br>부트 스타터와, 테스트 툴만 설정되어있는 모습
<br>]]></description><link>http://lts.kr/lectur/2.1-스프링-프로젝트-생성.html</link><guid isPermaLink="false">lectur/2.1 스프링 프로젝트 생성.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 13 Mar 2025 02:01:07 GMT</pubDate><enclosure url="http://lts.kr/사진-및-문서/pasted-image-20250305173344.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="http://lts.kr/사진-및-문서/pasted-image-20250305173344.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[📕 공부]]></title><description><![CDATA[<a class="tag" href="http://lts.kr/?query=tag:공부" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#공부</a> <a class="tag" href="http://lts.kr/?query=tag:모음" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#모음</a> <br> <a href="http://lts.kr?query=tag:공부" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#공부">#공부</a> <a href="http://lts.kr?query=tag:모음" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#모음">#모음</a><br>공부
보고 배운 지식 중 공유하고 싶은 정보를 모아둔 카테고리 입니다.
<br>
<br><a data-href="⏰ Script 로딩 지연 이슈" href="http://lts.kr/issue_troubleshooting/⏰-script-로딩-지연-이슈.html" class="internal-link" target="_self" rel="noopener nofollow">⏰ Script 로딩 지연 이슈</a>⭐
<br><a data-href="🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안" href="http://lts.kr/issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html" class="internal-link" target="_self" rel="noopener nofollow">🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안</a>⭐
<br><a data-href="🚦 Spring Batch(스레드와 트렌젝션) 트러블슈팅" href="http://lts.kr/issue_troubleshooting/🚦-spring-batch(스레드와-트렌젝션)-트러블슈팅.html" class="internal-link" target="_self" rel="noopener nofollow">🚦 Spring Batch(스레드와 트렌젝션) 트러블슈팅</a>
<br><a data-href="⚔ StckOverflow 이슈와 QueryDSL" href="http://lts.kr/issue_troubleshooting/⚔-stckoverflow-이슈와-querydsl.html" class="internal-link" target="_self" rel="noopener nofollow">⚔ StckOverflow 이슈와 QueryDSL</a>
<br>
<br><a data-href="🛬 JDK와 JRE, JVM" href="http://lts.kr/study/cs/🛬-jdk와-jre,-jvm.html" class="internal-link" target="_self" rel="noopener nofollow">🛬 JDK와 JRE, JVM</a>
<br><a data-href="🐰 Java의 String과 SpringBuffer" href="http://lts.kr/study/cs/🐰-java의-string과-springbuffer.html" class="internal-link" target="_self" rel="noopener nofollow">🐰 Java의 String과 SpringBuffer</a>
<br>
<br><a data-href="☕ JAVA , OOP" href="http://lts.kr/study/cs/☕-java-,-oop.html" class="internal-link" target="_self" rel="noopener nofollow">☕ JAVA , OOP</a>
<br><a data-href="🍃 Spring" href="http://lts.kr/study/cs/🍃-spring.html" class="internal-link" target="_self" rel="noopener nofollow">🍃 Spring</a>
<br><a data-href="🎩 DevOps" href="http://lts.kr/study/cs/🎩-devops.html" class="internal-link" target="_self" rel="noopener nofollow">🎩 DevOps</a>
<br><a data-href="📔 DataBase" href="http://lts.kr/study/cs/📔-database.html" class="internal-link" target="_self" rel="noopener nofollow">📔 DataBase</a>
<br><a data-href="📭 Server" href="http://lts.kr/study/cs/📭-server.html" class="internal-link" target="_self" rel="noopener nofollow">📭 Server</a>
<br><a data-href="🐞 etc" href="http://lts.kr/study/cs/🐞-etc.html" class="internal-link" target="_self" rel="noopener nofollow">🐞 etc</a>
<br>
<br><a data-href="🤠 Coding Test 풀이 모음" href="http://lts.kr/study/coding-test/🤠-coding-test-풀이-모음.html" class="internal-link" target="_self" rel="noopener nofollow">🤠 Coding Test 풀이 모음</a>
<br><a data-href="👽 Algorithm" href="http://lts.kr/study/coding-test/👽-algorithm.html" class="internal-link" target="_self" rel="noopener nofollow">👽 Algorithm</a>
<br>
<br><a data-href="🔻 Redis 캐쉬 전략 - hello 서비스에 적용하여 성능개선 가능성" href="http://lts.kr/study/dev-seminar/🔻-redis-캐쉬-전략-hello-서비스에-적용하여-성능개선-가능성.html" class="internal-link" target="_self" rel="noopener nofollow">🔻 Redis 캐쉬 전략 - hello 서비스에 적용하여 성능개선 가능성</a>
<br><a data-href="🍂 JPA, Mybatis , Dead Lock" href="http://lts.kr/study/dev-seminar/🍂-jpa,-mybatis-,-dead-lock.html" class="internal-link" target="_self" rel="noopener nofollow">🍂 JPA, Mybatis , Dead Lock</a>
<br><a data-href="🔹 TDD에 대하여" href="http://lts.kr/study/dev-seminar/🔹-tdd에-대하여.html" class="internal-link" target="_self" rel="noopener nofollow">🔹 TDD에 대하여</a>
<br><a data-href="🪕 JPA 에 대한 고찰" href="http://lts.kr/study/dev-seminar/🪕-jpa-에-대한-고찰.html" class="internal-link" target="_self" rel="noopener nofollow">🪕 JPA 에 대한 고찰</a>
<br><a data-href="🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안" href="http://lts.kr/issue_troubleshooting/🔐-상품-투자하기-서비스-이슈-및-lock기법-개선안.html" class="internal-link" target="_self" rel="noopener nofollow">🔐 상품 투자하기 서비스 이슈 및 Lock기법 개선안</a>
<br><a data-href="🥗 Spring Security_토큰-세션-쿠키-JWT 에 대하여" href="http://lts.kr/study/dev-seminar/🥗-spring-security_토큰-세션-쿠키-jwt-에-대하여.html" class="internal-link" target="_self" rel="noopener nofollow">🥗 Spring Security_토큰-세션-쿠키-JWT 에 대하여</a>
<br><a data-href="📔 DB 테이블 설계, 어떻게 하는게 옳은 방법인가" href="http://lts.kr/study/dev-seminar/📔-db-테이블-설계,-어떻게-하는게-옳은-방법인가.html" class="internal-link" target="_self" rel="noopener nofollow">📔 DB 테이블 설계, 어떻게 하는게 옳은 방법인가</a>]]></description><link>http://lts.kr/study/📕-공부.html</link><guid isPermaLink="false">study/📕 공부.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 13 Mar 2025 01:53:56 GMT</pubDate></item><item><title><![CDATA[🐰 Java의 String과 SpringBuffer]]></title><description><![CDATA[<a class="tag" href="http://lts.kr/?query=tag:공부" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#공부</a> <a class="tag" href="http://lts.kr/?query=tag:Java" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Java</a> <a class="tag" href="http://lts.kr/?query=tag:String" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#String</a> <a class="tag" href="http://lts.kr/?query=tag:StringBuffer" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#StringBuffer</a> <br> <a href="http://lts.kr?query=tag:공부" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#공부">#공부</a> <a href="http://lts.kr?query=tag:Java" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Java">#Java</a> <a href="http://lts.kr?query=tag:String" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#String">#String</a> <a href="http://lts.kr?query=tag:StringBuffer" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#StringBuffer">#StringBuffer</a><br>
<br>java에서 String은 객체이다.
<br>int, char와 달리 기본형,원시형(primitive type)이 아닌 참조형(reference type)변수로 분류된다.
<br>메모리의 Stack영역이 아닌, Heap영역에서 문자열 데이터가 생성되고 다뤄진다는 말이다.<br>
<img alt="Pasted image 20250110122312.png" src="http://lts.kr/사진-및-문서/pasted-image-20250110122312.png" target="_self">
<br>또한 String은 불변(Immutable)객체이다. <br>예를들어, s = "a"; 에 s = s + s; 를 하면 "aa"가 되겠지만, heap영역 메모리에 새로운 주소로 생성하게 된다. <br>
<br>JVM에서는 String Constant Pool이라는 독립적인 영억을 Heap영역에 구축하여<br>
문자열들을 Constant화 하여 다른 변수 혹은 객체들과 공유한다.
<br>이 과정에서 데이터 캐싱이 일어나고, 그만큼 성능적인 이득을 취할 수 있게된다.
<br>
<br>데이터가 불변하다면, 멀티 스레드 환경에서 동기화 문제가 발생하지 않기 때문에 안전한 결과를 낼 수 있다.
<br>
<br>만일 번지수의 문자열 값이 변경이 가능하다면, 참조값을 변경하여 애플리케이션에 보안 문제를 일으킬 수 있다.
<br>
<br>먼저 문자열 리터럴 방식으로 변수에 저장하게 되면, 이 값은 string constant pool에 저장이 되지만, new연산자를 사용하여 생성한 값은 Heap영역에 존재하게된다.
<br>
<br>대상 값 자체를 비교
<br>
<br>대상의 주소값을 비교.
<br>즉, new연산자를 통해 만들어진 객체를 equals로 비교한다면 true가 나오겠지만,<br>
== 연산자를 사용한다면 false가 나오게 되는것이다.<br> 두 클래스 모두 문자열을 연산(추가 및 변경)할 때 주로 사용하는 자료형이다.<br>
물론 String자료형 으로도 + 나 concat()으로 문자열을 이어붙일수 있다.<br>
하지만 +를 이용해 String인스턴스의 문자열을 결합하면, 내용이 합쳐진 새로운 String인스턴스를 생성하게된다.<br>
문자열을 많이 결합하면 결합할수록 공간낭비는 물론, 속도 또한 매우 느려진다.<br>이를 해결하기 위해 Java는 문자열 연산을 전용으로 하는 자료형을 따로 만들어 제공하였다.<br>
<br>내부적으로 Buffur라고 하는 독립적인 공간을 가지게 되어
<br>문자열을 바로 추가할 수 있어 공간의 낭비도 없으며, 문자열 연산 속도도 매우 빠르다
<br>기본적으로 16개의 문자를 저장할 수 있는 크기이며,<br>
연산 중 할당된 버퍼의 크기를 넘게되면 자동으로 버퍼를 증강 시킨다.<br>SpringBuffer와 SpringBuilder의 메서드 사용법은 동일하다.<br>
<br>불변자료형 으로써, 초기 공간과 다른 값에 대해서 새로운 메모리 공간을 할당하여 새로 생성한다.
<br>그렇게 남겨진 문자열 값은 java가비지 컬렉터에 의해 제거될 대상에 포함된다.
<br>
<br>즉, 문자열을 조작할 때 새 객체를 생서하지 않고 기존 객체를 수정한다.
<br>메모리 관리 측면에서 효율적
<br>=&gt; 사실 자바는 문자열에 + 연산을 사용하면, 컴파일 전 내부적으로 StringBuilder 클래스를 자동으로 생성한 후 다시 문자열로 돌려준다. 다만, 문자열을 합치는 일이 빈번할 경우에는 단순히 +연산을 사용하는것은 효율이 떨어지므로<br>
SpringBuffer와 SpringBuilde 를 사용하는것이 옳다고 할 수 있다.]]></description><link>http://lts.kr/study/cs/🐰-java의-string과-springbuffer.html</link><guid isPermaLink="false">study/CS/🐰 Java의 String과 SpringBuffer.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 13 Mar 2025 01:53:08 GMT</pubDate><enclosure url="http://lts.kr/사진-및-문서/pasted-image-20250110122312.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="http://lts.kr/사진-및-문서/pasted-image-20250110122312.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[🛬 JDK와 JRE, JVM]]></title><description><![CDATA[<a class="tag" href="http://lts.kr/?query=tag:공부" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#공부</a> <a class="tag" href="http://lts.kr/?query=tag:Java" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Java</a> <a class="tag" href="http://lts.kr/?query=tag:JDK" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#JDK</a> <a class="tag" href="http://lts.kr/?query=tag:JVM" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#JVM</a> <br> <a href="http://lts.kr?query=tag:공부" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#공부">#공부</a> <a href="http://lts.kr?query=tag:Java" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Java">#Java</a> <a href="http://lts.kr?query=tag:JDK" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#JDK">#JDK</a> <a href="http://lts.kr?query=tag:JVM" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#JVM">#JVM</a><br>
<br>자바 개발 키트의 약자로, 개발자들이 자바로 개발하는데 사용되는 SDK키트라고 생각하면 된다.
<br>자바 개발시 필요한 라이브러리와, javac, javadoc 등의 개발도구를 포함한다.
<br>자바 실행 프로그램인 JRE도 포함한다. (JRE에는 JVM이 들어가있다.)
<br>- 대표적으로, 안드로이드 스튜디오 등이 있다.
<br>
<br>Java SE(standard edition) : 가장 기본이 되는 표준 에디션의 자바 플랫폼.
<br>Java EE(enterprise edition) : 대규모 기업용 에디션. SE의 확장판
<br>Java ME(micro edition) : 피쳐폰/셋톱박스/프린터 와 같은 작은 임베디드 기기를 다루는데 이용하는 에디션
<br>Java FX : 가볍고 예쁜 그래픽 사용자 인터페이스를 제공하는 에디션
<br>
<br>JRE는 자바 실행환경의 약자로서, JVM과 자바 프로그램을 실행시킬 때 필요한 라이브러리 API를 함께 묶어서 배포되는 패키지.
<br>또한, 자바 런타임 환경에서 사용하는 프로퍼티 세팅과 리소스(jar)파일을 가지고 있다.
<br>JRE는 기본적으로 JDK에 포함되어있기 때문에 JDK를 설치하면 함께 설치된다.<br>
<img alt="Pasted image 20250110101642.png" src="http://lts.kr/사진-및-문서/pasted-image-20250110101642.png" target="_self">
<br>
<br>JVM은 자바 가상머신의 약자로서, 직역하면 자바를 실행하는 머신, 자바를 돌리는 프로그램이다.
<br>자바로 작성된 모든 프로그램은 JVM에서만 실행될 수 있으므로, 자바 프로그램을 실행하기 위해서는 바늗시 자바 가상머신의 설치가 선행되어야 한다.
<br>
<br>java는 OS에 종속적이지 않다는 특징을 가지고 있다.
<br>
<br>
소스코드를 컴파일하여 기계어를 만드는 과정에서, window/mac/linux가 각기 다르게 컴파일을 시킨다. <br>
때문에 각 OS별로 상이한 문법을 사용하게 되는 일이 벌어진다. <br>
이러한 언어를 "이식성이 낮다" 라고 표한다. <br>
하지만 java는 jvm를 거쳐서 OS와 상호작용 하기때문에, OS에 구애받지 않게 된다. <br>
<br>위에서 c언어는 컴파일을 거치면 기계어가 된다고 했는데,
<br>java는 JVM을 거쳐 바이트 코드로 변환되게 된다. <br>이는 가상 머신이 이해할 수 있는 중간 레벨의 언어로, 반쪽짜리 컴파일 결과물 이라고 할 수 있다.
<br>이는 어떠한 환경에 종속적이지 않고 실행될 수 있다.
<br>즉, 재컴파일 할 필요없이 기계가 바로 읽고 실행 할 수 있는 코드를 만들어 주는것이다.
<br>하지만 자바 프로그램과 달리 JVM은 각 운영체제에 종속적이므로, 각 운영체제에 맞는 JVM을 알맞게 설치해주어야한다.<br>
<br>위의 설명과 같이 java는 일반 프로그램보다 JVM이라는 단계를 한 단계 더 거치기 때문에, 상대적으로 실행속도가 느리다는 단점을 내포하고 있다.
<br>이를 보환하기 위해, 필요한 부분만을 기계어로 바꾸어 속도를 향상시키는 JIT 컴파일러 같은 내부 프로그램이 있지만, 그럼에도 여전히 느리다.
<br><img alt="Pasted image 20250110103409.png" src="http://lts.kr/사진-및-문서/pasted-image-20250110103409.png" target="_self"><br>위 그림에서 Compiler는 javac.exe에 해당되고 JVM은 java.exe에 해당된다.
<br>소스코드(MyPrograme.java)를 작성한다.
<br>컴파일러(Compiler)는 자바 소스코드를 이용하여 클래스 파일(MyProgram.class)을 생성한다. 컴파일 된 클래스 파일은 JVM(Java Virtual Machine)이 인식할 수 있는 바이트 코드 파일이다.
<br>JVM은 클래스 파일의 바이트 코드를 해석하여 바이너리 코드로 변환하고 프로그램을 수행한다.
<br>MyProgram 수행 결과가 컴퓨터에 반영된다
<br>
<br>c또는 c++등으로 작성된 프로그램은 최종 결과물로 exe파일을 만들어낸다.
<br>java도 exe파일을 만들 수 있지만, class파일로 굳이 만들어내는 이유는 다음과 같다 <br>JVM이 exe에 포함되는 형식으로 가능하기 때문에 exe파일이 무척 커지게 되는 단점이 있다.
<br>때문에 보통의 경우 일부러 생성하지 않는것이다.]]></description><link>http://lts.kr/study/cs/🛬-jdk와-jre,-jvm.html</link><guid isPermaLink="false">study/CS/🛬 JDK와 JRE, JVM.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 13 Mar 2025 01:47:03 GMT</pubDate><enclosure url="http://lts.kr/사진-및-문서/pasted-image-20250110101642.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="http://lts.kr/사진-및-문서/pasted-image-20250110101642.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[🥇 정보처리 기사 실기 프로그래밍-사용자 정의 함수]]></title><description><![CDATA[<a class="tag" href="http://lts.kr/?query=tag:정보처리기사" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#정보처리기사</a> <a class="tag" href="http://lts.kr/?query=tag:실기" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#실기</a> <a class="tag" href="http://lts.kr/?query=tag:프로그래밍" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로그래밍</a> <a class="tag" href="http://lts.kr/?query=tag:정리" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#정리</a> <a class="tag" href="http://lts.kr/?query=tag:함수" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#함수</a> <br> <a href="http://lts.kr?query=tag:정보처리기사" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#정보처리기사">#정보처리기사</a> <a href="http://lts.kr?query=tag:실기" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#실기">#실기</a> <a href="http://lts.kr?query=tag:프로그래밍" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로그래밍">#프로그래밍</a> <a href="http://lts.kr?query=tag:정리" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#정리">#정리</a> <a href="http://lts.kr?query=tag:함수" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#함수">#함수</a><br>public class Test { public static void main(String[] args) { System.out.print(Test.check(1)); } "( 1 )" String check(int num){ return (num &gt;= 0) ? "positive" : "negative"; }
}
<br>static은 클래스 이름으로 메소드에 접근하기 위해 사용되는 예약어이다.
<br>메소드를 사용하기 위해서는 메소드가 포함된 클래스의 객체 변수를 선언한 후<br>
[객체변수].[메소드]의 방식으로 접근해야하지만,<br>
static을 이용한다면 객체변수 없이 [클래스이름].[메소드]방식으로 접근하는것이 가능하다.
<br>]]></description><link>http://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-사용자-정의-함수.html</link><guid isPermaLink="false">study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 프로그래밍-사용자 정의 함수.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 13 Mar 2025 01:24:33 GMT</pubDate></item><item><title><![CDATA[🏫 강의 &amp; 자격증]]></title><description><![CDATA[<a class="tag" href="http://lts.kr/?query=tag:강의" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#강의</a> <a class="tag" href="http://lts.kr/?query=tag:모음" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#모음</a> <a class="tag" href="http://lts.kr/?query=tag:lectur" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#lectur</a> <br> <a href="http://lts.kr?query=tag:강의" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#강의">#강의</a> <a href="http://lts.kr?query=tag:모음" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#모음">#모음</a> <a href="http://lts.kr?query=tag:lectur" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#lectur">#lectur</a><br>강의
강의를 수강하며, 정리한 내용 모음집 입니다.
<br>정보
inflearn - SpringCoreBasic.김영한 님의 강의 입니다.
<br> <br> <br> <br> <br>
<br><a data-href="🥈 필기 1과목 - 소프트웨어 설계" href="http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-1과목-소프트웨어-설계.html" class="internal-link" target="_self" rel="noopener nofollow">🥈 필기 1과목 - 소프트웨어 설계</a>
<br><a data-href="🥈 필기 2과목 - 소프트웨어 개발" href="http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-2과목-소프트웨어-개발.html" class="internal-link" target="_self" rel="noopener nofollow">🥈 필기 2과목 - 소프트웨어 개발</a>
<br><a data-href="🥈 필기 3과목 - 데이터베이스 구축" href="http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-3과목-데이터베이스-구축.html" class="internal-link" target="_self" rel="noopener nofollow">🥈 필기 3과목 - 데이터베이스 구축</a>
<br><a data-href="🥈 필기 4과목 - 프로그래밍 언어 활용" href="http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-4과목-프로그래밍-언어-활용.html" class="internal-link" target="_self" rel="noopener nofollow">🥈 필기 4과목 - 프로그래밍 언어 활용</a>
<br><a data-href="🥈 필기 5과목 - 정보시스템 구축관리" href="http://lts.kr/study/정보처리기사/정보처리기사-필기/🥈-필기-5과목-정보시스템-구축관리.html" class="internal-link" target="_self" rel="noopener nofollow">🥈 필기 5과목 - 정보시스템 구축관리</a>
<br>
<br><a data-href="🥇 정보처리 기사 실기 키워드" href="http://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html" class="internal-link" target="_self" rel="noopener nofollow">🥇 정보처리 기사 실기 키워드</a>
<br><a data-href="🥇 정보처리 기사 실기 SQL 문제" href="http://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html" class="internal-link" target="_self" rel="noopener nofollow">🥇 정보처리 기사 실기 SQL 문제</a>
<br><a data-href="🥇 정보처리 기사 실기 프로그래밍-제어문" href="http://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-제어문.html" class="internal-link" target="_self" rel="noopener nofollow">🥇 정보처리 기사 실기 프로그래밍-제어문</a>
<br><a data-href="🥇 정보처리 기사 실기 프로그래밍-포인터" href="http://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-포인터.html" class="internal-link" target="_self" rel="noopener nofollow">🥇 정보처리 기사 실기 프로그래밍-포인터</a>
<br><a data-href="🥇 정보처리 기사 실기 프로그래밍-사용자 정의 함수" href="http://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-사용자-정의-함수.html" class="internal-link" target="_self" rel="noopener nofollow">🥇 정보처리 기사 실기 프로그래밍-사용자 정의 함수</a>]]></description><link>http://lts.kr/lectur/🏫-강의-&amp;-자격증.html</link><guid isPermaLink="false">lectur/🏫 강의 &amp; 자격증.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 13 Mar 2025 00:48:39 GMT</pubDate></item><item><title><![CDATA[🥇 정보처리 기사 실기 SQL 문제]]></title><description><![CDATA[<a class="tag" href="http://lts.kr/?query=tag:정보처리기사" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#정보처리기사</a> <a class="tag" href="http://lts.kr/?query=tag:실기" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#실기</a> <a class="tag" href="http://lts.kr/?query=tag:SQL" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SQL</a> <a class="tag" href="http://lts.kr/?query=tag:정리" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#정리</a> <br> <a href="http://lts.kr?query=tag:정보처리기사" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#정보처리기사">#정보처리기사</a> <a href="http://lts.kr?query=tag:실기" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#실기">#실기</a> <a href="http://lts.kr?query=tag:SQL" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SQL">#SQL</a> <a href="http://lts.kr?query=tag:정리" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#정리">#정리</a><br>CREATE TABLE 부서 ( 부서코드 INT PRIMARY KEY, 부서명 VARCHAR(20)
); CREATE TABLE 직원 ( 직원코드 INT PRIMARY KEY, 부서코드 INT, 직원명 VARCHAR(20), FOREIGN KEY(부서코드) REFERENCES 부서(부서코드) ON DELETE CASCADE
); INSERT INTO 부서 VALUES(10, '영업부');
INSERT INTO 부서 VALUES(20, '기획부');
INSERT INTO 부서 VALUES(30, '개발부'); INSERT INTO 직원 VALUES(1001, 10, '이진수');
INSERT INTO 직원 VALUES(1002, 10, '곽명경');
INSERT INTO 직원 VALUES(1003, 20, '김건길');
INSERT INTO 직원 VALUES(1004, 20, '최민수');
INSERT INTO 직원 VALUES(1005, 20, '이용광');
INSERT INTO 직원 VALUES(1006, 30, '한성광');
INSERT INTO 직원 VALUES(1007, 30, '박미경');
<br>SELECT DISTINCT COUNT(부서코드) FROM 직원 WHERE 부서코드 = 20;
<br>결과: 3<br>해설 :<br>DISTINCT(중복 제거)는 부서코드가 아닌 COUNT(부서코드)에 적용되므로, 여전히 부서코드가 20인 컬럼의 수 '3'이 된다.
<br>DELETE FROM 부서 WHERE 부서코드 = 20;
SELECT DISTINCT COUNT(부서코드) FROM 직원;
<br>결과: 4<br>해설 :<br>부서코드가 20인 컬럼을 삭제한 후, 모든 직원테이블의 부서코드 개수를 센다. 이때 DISTINCT(중복 제거)는 COUNT에 적용되므로<br>
여전히 '4'이다.
<br>
<br>DEPT는 '학과'를 뜻한다
<br>가정: 전기과 학생 50명, 전자과 학생 100명, 전산과 학생 50명<br>SELECT DEPT FROM STUDENT;
<br>결과: 200<br>SELECT DISTINCT DEPT FROM STUDENT;
<br>결과: 3<br>해설 :<br>전기/전자/화학 3가지 종류로 이루어진 DEPT 속성의 중복을 제거하면 '3'이 남는다.
<br>SELECT COUNT(DISTINCT DEPT) FROM STUDENT WHERE DEPT = '전산과';
<br>결과: 1<br>해설 :<br>전산과인 학생들의 학과를 뽑는다. 이후 해당 학과의 중복을 제거하면 1개만 남게 된다.
<br>
<br>'H'제조사의 '단가' 보다 높은 '단가'를 가진 제품의 정보를 조회하는 SQL문이다.
<br>SELECT 제품명, 단가, 제조사
FROM 제품
WHERE 단가 &gt; ( ) (SELECT 단가 FROM 제품 WHERE 제조사 = 'H');
<br>답: ALL<br>해설 :<br>해당 쿼리는, where절의 하위 질의에 결과를 반영하여 본 질의의 조건에 추가하는 SQL이다.
<br>만약 서브쿼리에서 'H'제조사의 제품의 단다가 100/200/400 이 나왔다면,
<br>해당 단가들 보다 높은 단가를 찾기 위해서는 100/200/400을 모두 비교하여야 한다.
<br>따라서 ALL키워드가 들어간다면 모든 단가를 비교할 수 있다.
<br>서브쿼리 앞에 아무 키워드도 붙지 않는다면, 서브쿼리가 다중 행일때 오류를 발생시킨다.<br>
이때, ANY나 ALL 연산자를 사용하여 다중행을 비교할 수 있다.<br>ANY -&gt; 서브쿼리 결과 중 하나라도 참이면 해당 행은 참<br>
ALL -&gt; 서브쿼리 결과 중 모든 것에 참이어야 해당 행은 참<br>TABLE<br>SELECT COUNT(COL2)
FROM TABLE
WHERE COL1 IN (2, 3) OR COL2 IN (3, 5);
<br>결과: 3<br>해설 :<br>COL1 컬럼에 2나 3이 포함되었거나, COL2컬럼에 3이나 5가 포함된 컬럼 (4개)를 찾는다,
<br>
<br>여기서 NULL은 COUNT에 집계가 되지 않으므로 답은 '3'이다.
<br><img alt="Pasted image 20250225161448.png" src="http://lts.kr/사진-및-문서/pasted-image-20250225161448.png" target="_self"><br>결과 :<br>① TTL - ② 부장 - ③ 대리 - ④ 과장 - ⑤ 차장
<br>해설 :<br>해당 관계 대수식의 파이는 속성 리스트에 제시된 속성값만을 추출하여 새로운 릴레이션을 만드는 PROJECT연산이다
<br>따라서, TTL속성이 추출되어 속성명인 TTL부터 모든 속성값이 결과로 나타난다.<br>
= SELECT TTL FROM EMPLOYEE
<br>이 연산들은 관계형 데이터베이스의 데이터를 검색하고 변형하는 데 사용됩니다.<br>관계 대수에서 테이블을 하나의 집합(Set)으로 간주하고 수행하는 연산입니다.<br>(단, SQL문은 ISO/IEC 9075 표준을 기반으로 작성하시오.) <br>( 1 ) TABLE 학생 ( 2 ) 주소 VARCHAR(20);
<br>답 :<br>
1 -&gt; ALTER<br>
2 -&gt; ADD<br>해설 :<br>속성을 추가한다 -&gt; 테이블을 수정한다 -&gt; ALTER
<br>ALTER + ADD 속성 추가.
<br>
<br>3, 4학년의 학번, 이름을 조회한다.
<br>IN 예약어를 사용해야 한다.
<br>속성명 아래의 괄호는 속성의 자료형을 의미한다.
<br>정답 :<br>SELECT 학번, 이름 FROM 학생 WHERE 학년 IN (3, 4);
<br>해설 :<br>IN예약어는 WHERE절과 함께 쓰이며, WHERE 속성 IN (조건,조건,...) 방식으로 사용된다.
<br>해당 조건을 포함하고 있는 모든 속성이 선택되게 된다.
<br>student 테이블<br>정답 :<br>CREATE INDEX idx_name ON student(name);
<br>해설 :<br>인덱스 생성 문법 :<br>
CREATE INDEX 인덱스명 ON 테이블명(속성);
<br>(단, 아래의 실행 결과가 되도록 한다.)<br>
<br>
WHERE 조건절은 사용할 수 없다. <br>
GROUP BY는 반드시 포함한다. <br>
집계함수(Aggregation Function)를 적용한다. <br>
학과별튜플수 컬럼명을 출력에 Alias(AS)를 활용한다. <br>
문장 끝의 세미콜론(;)은 생략해도 무방하다. <br>
인용부호 사용이 필요한 경우 단일 따옴표(' ')를 사용한다.
정답 : <br>SELECT 학과, COUNT(*) AS 학과별튜플수
FROM 학생
GROUP BY 학과;
<br>&lt;처리 조건&gt;을 참고하여 적합한 SQL문을 작성하시오.<br>
<br>WHERE문은 사용하지 않는다.
<br>GROUP BY와 HAVING을 이용한다.
<br>집계함수(Aggregation Function)를 사용하여 명령문을 구성한다.
<br>최소점수, 최대점수는 별칭(Alias)을 위한 AS문을 이용한다.
<br>명령문 마지막의 세미콜론(;)은 생략 가능하다.
<br>인용 부호가 필요한 경우 작은따옴표(')를 사용한다.
<br>정답 :<br>SELECT 과목이름, MIN(점수) AS 최소점수, MAX(점수) AS 최대점수 FROM 성적 GROUP BY 과목이름 HAVING AVG(점수) &gt;= 90;
<br>해설 :<br>과목이름별로 여러 점수의 통계를 내는것 이기 때문에, GROUP BY 과목이름을 사용한다.
<br>이때, GROUP BY ~ HAVING 조건 을 사용하여, 해당 그릅화된 데이터 중 다음 조건을 만족하는 그룹만 포함한다.
<br>SELECT COUNT(*) CNT FROM A CROSS JOIN B WHERE A.NAME LIKE B.RULE;
<br>답 : 4<br>해설 :<br>SELECT COUNT(*) CNT 에서 CNT는 as CNT 가 생략된 형태이다.
<br>CROSS JOIN이란 카디션 프로덕트(곱)을 수행하는 조인방식으로써,<br>
A테이블의 모든 행과, B테이블의 모든 행의 모든 가능한 조합을 구한다.
<br>따라서, 저 중 a.name컬럼이 b.rule을 따르는(like 연산을 했을 때, 참인 결과는)<br>총 4개이다.<br>]]></description><link>http://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-sql-문제.html</link><guid isPermaLink="false">study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 SQL 문제.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 13 Mar 2025 00:41:03 GMT</pubDate><enclosure url="http://lts.kr/사진-및-문서/pasted-image-20250225161448.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="http://lts.kr/사진-및-문서/pasted-image-20250225161448.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[🥇 정보처리 기사 실기 프로그래밍-구조체(structuer)]]></title><description><![CDATA[<a class="tag" href="http://lts.kr/?query=tag:정보처리기사" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#정보처리기사</a> <a class="tag" href="http://lts.kr/?query=tag:실기" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#실기</a> <a class="tag" href="http://lts.kr/?query=tag:프로그래밍" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로그래밍</a> <a class="tag" href="http://lts.kr/?query=tag:정리" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#정리</a> <a class="tag" href="http://lts.kr/?query=tag:구조체" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#구조체</a> <br> <a href="http://lts.kr?query=tag:정보처리기사" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#정보처리기사">#정보처리기사</a> <a href="http://lts.kr?query=tag:실기" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#실기">#실기</a> <a href="http://lts.kr?query=tag:프로그래밍" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로그래밍">#프로그래밍</a> <a href="http://lts.kr?query=tag:정리" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#정리">#정리</a> <a href="http://lts.kr?query=tag:구조체" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#구조체">#구조체</a><br>#include &lt;stdio.h&gt; struct jsu { char nae[12]; int os, db, hab, hhab; }; int main() { struct jsu st[3] = { {"데이터1", 95, 88}, {"데이터2", 84, 91}, {"데이터3", 86, 75} }; struct jsu* p; p = &amp;st[0]; (p + 1)-&gt;hab = (p + 1)-&gt;os + (p + 2)-&gt;db; (p + 1)-&gt;hhab = (p + 1)-&gt;hab + p-&gt;os + p-&gt;db; printf("%d", (p + 1)-&gt;hab + (p + 1)-&gt;hhab); }
<br>구조체는 다음과 같이 연속된 공간에 저장된 후 사용된다.<br>
<img alt="Pasted image 20250312173438.png" src="http://lts.kr/사진-및-문서/pasted-image-20250312173438.png" target="_self"><br>
문자열 저장시 끝을 의미하는 널문자('\0')가 추가되며,<br>
영문, 숫자는 1Byte / 한글은 2Byte를 차지한다.<br>
<img alt="Pasted image 20250312173740.png" src="http://lts.kr/사진-및-문서/pasted-image-20250312173740.png" target="_self">
<br>p = &amp;st[0]; =&gt; 구조체 st의 첫번째 객체의 주소값을 저장
<br>(p + 1)-&gt;hab = (p + 1)-&gt;os + (p + 2)-&gt;db; <br>(p+1)-&gt;hab : st첫번째 객체의 다음객체(st[1])의 hab요소의 값
<br>= st[1]-&gt;hab = 84 + 75 = 159 <br>(p + 1)-&gt;hhab = (p + 1)-&gt;hab + p-&gt;os + p-&gt;db; <br>= 159 + 95 + 88 = 342 <br>구조체 특징
구조체의 멤버를 지정할 때는 변수명 멤버이름 으로 지정하지만, [변수명].[멤버이름]<br>
포인터 변수를 이용해 구조체의 멤버를 지정할 때는 변수명 멤버이름 으로 지정한다 [변수명]-&gt;[멤버이름]]]></description><link>http://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-프로그래밍-구조체(structuer).html</link><guid isPermaLink="false">study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 프로그래밍-구조체(structuer).md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Wed, 12 Mar 2025 08:46:53 GMT</pubDate><enclosure url="http://lts.kr/사진-및-문서/pasted-image-20250312173438.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="http://lts.kr/사진-및-문서/pasted-image-20250312173438.png"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>