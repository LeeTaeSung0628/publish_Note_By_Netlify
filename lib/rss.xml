<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[blog]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://lts.kr/</link><image><url>https://lts.kr/lib/media/favicon.png</url><title>blog</title><link>https://lts.kr/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Tue, 08 Apr 2025 09:17:19 GMT</lastBuildDate><atom:link href="https://lts.kr/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Tue, 08 Apr 2025 09:17:11 GMT</pubDate><copyright><![CDATA[taesung's Blog]]></copyright><ttl>60</ttl><dc:creator>taesung's Blog</dc:creator><item><title><![CDATA[🥇 정보처리 기사 실기 키워드]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:정보처리기사" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#정보처리기사</a> <a class="tag" href="https://lts.kr/?query=tag:실기" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#실기</a> <a class="tag" href="https://lts.kr/?query=tag:키워드" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#키워드</a> <a class="tag" href="https://lts.kr/?query=tag:정리" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#정리</a> <br> <a href="https://lts.kr?query=tag:정보처리기사" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#정보처리기사">#정보처리기사</a> <a href="https://lts.kr?query=tag:실기" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#실기">#실기</a> <a href="https://lts.kr?query=tag:키워드" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#키워드">#키워드</a> <a href="https://lts.kr?query=tag:정리" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#정리">#정리</a><br>
<br>시제품을 끊임없이 제작하며 사이클을 반복하는 개발 방법론
<br>워터폴과 대조적이며, 소프트웨어 개발을 넘어 기업 경영 전반에서 사용되고 있다.
<br>고객의 변화하는 요구사항과 환경 변화에 능동적인 소프트웨어 개발 방법론
<br>
<br>소프트웨어 공학에서 리펙토링(Refactoring)을 하는 목적에 대해 간략히 서술하시오.
<br>
리펙토링의 목적은 프로그램을 쉽게 이해하고 수정하여 빠르게 개발할 수 있도록 하기 위함이다.
<br>
<br>( 1 ) 요구사항은 시스템이 무엇을 하는지, 어떤 기능을 하는지 등 사용자가 시스템을 통해 제공받기를 원하는 기능이나 시스템이 반드시 수행해야하는 기능을 의미한다.
<br>( 2 ) 요구사항은 품질이나 제약사항과 관련된 요구사항으로, 시스템의 장비 구성, 성능, 인터페이스, 테스트, 보안 등의 요구사항을 말한다.
<br>
<br>UML에 관한 다음 괄호에 공통으로 들어갈 알맞은 용어는?
<br>( ) 다이어그램은 UML다이어그램중 객체(Object)들을 ( )로 추상화하여 표현하는 다이어그램으로, 대표적인 구조적 다이어그램이다.
<br>( )는 각각의 객체들이 갖는 속성과 메소드를 표현한 것으로 3개의 구획으로 나눠 이름, 속성, 메서드를 표기한다.
<br>
<br>UML은 시스템 분석, 설계, 구현 등 시스템 개발 과정에서 시스템 개발자와 고객 또는 개발자 상호 간의 의사소통이 원활하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어로 사물, ( 1 ), 다이어그램 으로 이루어져있다.
<br>( 1 )는 사물과 사물사이의 연관성을 표현하는 것으로 연관, 집합, 포함, 일반화 등 다양한 형태의 ( 1 )가 존재한다.
<br>( 2 )는 UML에 표현되는 사물의 하나로, 객체가 갖는 속성과 동작을 표현한다. 일반적으로 직사각형으로 표현하며, 직사각형 안에 이름, 속성, 동작을 표기한다.
<br>( 3 )는 ( 2 )와 같은 UML에 표현되는 사물의 하나로, ( 2 )나 컴포넌트의 동작을 모아놓은 것이며, 외부적으로 가시화되는 행동을 표현한다. 단독으로 사용되는 경우는 없으며, ( 3 )구현을 위한 ( 2 )또는 컴포넌트와 함께 사용된다.
<br>
<br>관계(Relationship)는 사물과 사물 사이의 연관성을 표현하는 것이다.
<br>1 - 하나의 사물이 다른 사물에 포함되어 있는 관계로, 전체와 부분으로 구분되어지며, 서로 독립적이다.
<br>2 - 상위 모듈이 하위 모듈보다 더 일반적인 개념을 가지고 있으며, 하위 모듈이 상위 모듈보다 더 구체적인 개념을 가진다.
<br>
[보기]<br>
-Association(연관 관계) : 객체간의 기본적인 관계를 나타낸다.<br>
-Dependency(의존 관계) : 한 객체가 다른 객체에 의존하거나 영향을 받는다.<br>
-Aggregation(집합 관계) : 부분과 전체의 관계를 나타내며, 부분이 독립적으로 존재할 수 있는 경우를 말한다.<br>
-Realization(실체화 관계) : 인터페이스와 이를 구현하는 클래스 간의 관계<br>
-Composition(합성 관계) : 집합관계의 특수한 형태로, 부분이 전체와 생명 주기를 공유하며 독립적으로 존재할 수 없는 경우<br>
-Generalization(일반화 관계) : 상위 클래스와 하위 클래스 간의 관계로, 상속을 통해 일반적인 특성을 공유한다.
<br>
<br>UML을 이용한 다이어그램 중 다음 그림에 해당하는 다이어그램을 쓰시오.
<br>[ ] &lt;&lt;import&gt;&gt; [Security]
Order ----------------&gt; +(Credentials) / ( ) +(MDSCrupt)
<br>
<br>LOC기법에 의하여 예측된 총 라인 수가 30,000라인, 개발에 참여할 프로그래머가 5명, 프로그래머들의 평균 생산성이 월간 300라인일 때 개발에 소요되는 기간을 계산식과 함께 쓰시오.
<br>
<br>데이터베이스 스키마(Schema)에 대해 간략히 서술하시오.
<br>
스키마는 데이터베이스의 구조와 제약 조건에 관한 전반적인 명세를 기술한 것이다.
<br>
<br>DB 설계에 대한 설명. 괄호를 채우시오
<br>( 1 ) : 논리적 구조로 표현된 데이터를 디스크 등의 저장장치에 저장할 수 있는 데이터로 변환하는 과정으로, 파일의 저장 구조 및 엑세스 경로를 결정하며, 테이블 정의서 및 명세서가 산출된다.
<br>( 2 ) : 현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정으로, 개념 스키마 모델링과 트렌젝션 모델링을 수행하며, 요구 조건 명세를 E-R 다이어그램으로 작성한다.
<br>( 3 ) : 현실의 자료를 특정 DBMS가 지원하는 자료구조로 변환하는 과정으로, 트렌젝션의 인터페이스를 설계하고, 정규화를 통해 스키마를 평가 및 정제한다.
<br>
<br>다음은 데이터베이스 구축까지의 과정을 나열한 것이다. 순서대로 괄호를 채우시오. 요구분석 → ( ) → ( ) → ( ) → 구현 <br>
<br>데이터 모델이 구성 요소에 대한 다음 설명에서 괄호(1, 2)에 들어갈 용어를 쓰시오
<br>( 1 )은 데이터베이스에 저장된 실제 데이터를 처리하는 작업에 대한 명세서로서 데이터베이스를 조작하는 기본 도구에 해당된다.
<br>( 2 )는 논리적으로 표현된 객체 타입들 간의 관계로서 데이터의 구성 및 정적 성질을 표현한다.
<br>제약조건은 데이터베이스에 저장될 수 있는 실제 데이터의 논리적인 제약 조건을 의미한다.
<br><img alt="do-messenger_screenshot_2025-02-10_15_04_45.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png" target="_self"><br>
-다음 E-R다이어그램을 참고하여 괄호(1~5)의 설명에 적합한 요소를 찾아 기호로 표시<br>( 1 ) : 관계 집합을 의미한다.
<br>( 2 ) : 관계 집합과 속성을 연결한다.
<br>( 3 ) : 개체 집합을 의미하며, 키로 사용되는 항목에는 밑줄을 표시한다.
<br>( 4 ) : 관계 집합의 속성을 의미한다.
<br>( 5 ) : 개체 집합과 집합을 연결한다.
<br>
1 → ㄴ<br>
2 → ㄷ<br>
3 → ㄱ<br>
4 → ㄹ<br>
5 → ㅁ
<br>-키(Key)에 대한 다음 설명에서 괄호(1, 2)에 들어갈 용어를 쓰시오.<br>키는 데이터베이스에서 조건에 만족하는 튜플을 찾거나 순서대로 정렬할 때 기준이 되는 속성을 말한다.
<br>슈퍼키는 한 릴레이션 내에 있는 속성들의 집합으로 구성된 키로, 릴레이션을 구성하는 모든 튜플에 대해 ( 1 )을 만족한다.
<br>후보키(Candidate Key)는 릴레이션을 구성하는 속성들 중에서 튜플을 유일하게 식별하기 위해 사용되는 속성들의 부분집합으로, ( 1 )과 ( 2 )을 만족하는 특징이 있다.
<br>
<br>
관계대수란 관계형 데이터베이스에서 원하는 정보와 그 정보를 검색하기 위해서 어떻게 유도하는가를 기술하는 절차적인 언어이다. 관계 대수에 사용되는 연산은 다음과 같다. <br>
합집합(UNION)은 두 릴레이션에 존재하는 튜플의 합집합을 구하되, 결과로 생성된 릴레이션에서 중복되는 튜플은 제되는 연산으로, 기호는 ( 1 )이다. <br>
차집합(DIFFERENCCE)은 두 릴레이션에 존재하는 튜플의 차집합을 구하는 연산으로, 사용하는 기호는 ( 2 )이다. <br>
교차곱(CARTESIAN PRODUCT)은 두 릴레이션에 있는 튜플들의 순서쌍을 구하는 연산으로, 사용하는 기호는 ( 3 )이다. <br>
프로젝트(PROJECT)는 주어진 릴레이션에서 속성 리스트(Attribute List)에 제시된 속성 값만을 추출하여 새로운 릴레이션을 만드는 연산으로, 사용하는 기호는 ( 4 )이다. <br>
조인(JOIN)은 공통 속성을 중심으로 두 개의 릴레이션을 하나로 합쳐서 새로운 릴레이션을 만드는 연산으로, 사용하는 기호는 ( 5 )이다. <br>
1 → U<br>
2 → ㅡ<br>
3 → x<br>
4 → ㅠ<br>
5 → |&gt;&lt;|
<br>
<br>릴레이션 A, B가 있을 때, 릴레이션 B의조건에 맞는 것들만 릴레이션 A에서 분리하여 프로젝션을 하는 연산은?
<br>
<br>( )은 관계 데이터의 연산을 표현하는 방법으로, 관계 데이터 모델의 제안자인 코드(E. F. Codd)가 수학의 술어 해석(Predicate Calculus)에 기반을 두고 관계 데이터베이스를 위해 제안했다.
<br>원하는 정보가 무엇이라는 것만 정의하는 비절차적 특성을 지니며, 원하는 정보를 정의할 때 계산 수식을 사용한다.
<br>튜플 해석식을 사용하는 튜플 ( )과 도메인 해석식을 사용하는 도메인 ( )으로 구분된다.
<br>
<br>데이터의 중복으로 인해 테이블 조작 시 문제가 발생하는 현상을 이상(Anomaly)이라고 한다. 이상 중 삭제 이상(Deletion Anomaly)에 대해 간략히 서술하시오.
<br>
테이블에서 튜플을 삭제할 때 의도와는 상관없는 값들도 함께 삭제되는 현상.
<br>
<br>데이터베이스의 이상(Anomaly)의 종류 3가지를 쓰시오.
<br>
삽입 이상(Insertion Anomaly)<br>
삭제 이상(Deletion Anomaly)<br>
갱신 이상(Update Anomaly)
<br><img alt="do-messenger_screenshot_2025-02-10_17_10_58.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-02-10_17_10_58.png" target="_self"><br>테이블 &lt;R&gt;에서 성적은 기본키인 {학생, 학과}에 대해 ( 1 ) Functional Dependency이다.
<br>테이블 &lt;R&gt;에서 학년은 기본키인 {학생, 학과} 중 학생만으로 식별이 가능하므로 기본키에 대해 ( 2 ) Functional Dependency이다.
<br>임이의 테이블에 속성 A, B, C가 있을 떄, A → B이고 B → C일 때 A → C인 관계는 ( 3 )Functional Dependency이다.
<br> <br>Full - 완전 함수 종속
<br>Partial - 부분 함수 종속
<br>Transitive - 이행적 함수 종속 <br>
<br>데이터베이스에서 비(반)정규화(Denormalization)의 개념을 서술하시오.
<br>
비정규화는 정규화된 데이터 모델을 통합, 중복, 분리 하는 과정으로, 의도적으로 정규화 원칙을 위배하는 행위이다.
<br>
<br>데이터베이스의 상태 변화를 일으키는 트렌젝션(Transaction)의 특성
<br> <br>원자성 : <br>트렌젝션의 연산은 데이터베이스에 모두 반영되도록 완료(Commit)되든지 아니면 전혀 반영되지 않도록 복구(Rollback)되어야 한다. <br>일관성 : <br>트렌젝션이 그 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환한다. <br>독립성 : <br>둘 이상의 트렌젝션이 동시에 병행 실행되는 경우 어느 하나의 트렌젝션 실행중에 다른 트렌젝션의 연산이 끼어들 수 없다. <br>지속성 <br>성공적으로 완료된 트렌젝션의 결과는 시스템이 고장나더라도 영구적으로 반영되어야 한다. <br>
<br>파일의 구조는 파일을 구성하는 레코드들이 보조기억장치에 편성되는 방식을 의미하는 것으로, 크게 순차, ( ), 해싱으로 구분한다.
<br>( ) 파일 구조는 &lt;값, 주소&gt; 쌍으로 구성되는 데이터 구조를 활용하여 데이터에 접근하는 방식으로, 자기 디스크서 주로 활용된다.
<br>
<br>비상 상황이 발생한 경우 비상사태 또는 업무중단 시점부터 업무가 복구되어 다시 정상 가동 될 때까지의 시간을 의미한다.
<br>
<br>접근통제는 데이터가 저장된 객체와 이를 사용하려는 주체 사이의 정보 흐름을 제한하는 것이다. 이러한 접근통제에 관한 기술 중 ( )는 데이터에 접근하는 사용자의 신원에 따라 접근 권한을 부여하여 제어하는 방식으로, 데이터의 소유자가 접근통제 권한을 지정하고 제어한다.
<br>객체를 생성한 사용자가 생성된 객체에 대한 모든 권한을 부여받고, 부여된 권한을 다른 사용자에게 허가할 수도 있다.
<br>
<br>DBMS는 데이터베이스에 치명적인 손실이 발생했을 때 이를 복구하기 위해 데이터베이스의 처리내용이나 이용 상황 등 상태 변화를 시간의 흐름에 따라 기록한 로그를 생성한다.
<br>( 1 ) : 데이터베이스가 비정상적으로 종료되었을 때, 디스크에 저장된 로그를 분석하여 트렌젝션의 시작(start)과 완료(commit)에 대한 기록이 있는 트렌젝션들의 작업을 재작업 한다. 즉, 로그를 이용하여 해당 데이터 항목에 대해 이전 값을 이후값으로 변경하는 연산이다.
<br>( 2 ) : 데이터베이스가 비정상적으로 종료되었을 때, 디스크에 저장된 로그를 분석하여 트렌젝션의 시작을 나타는 'start'는 있지만 완료를 나타내는 'commit' 기록이 없는 트렌젝션들이 작업한 내용들을 모두 취소한다. 즉 로그를 이용하여 해당 데이터 항목에 대해 이후 값을 이전 값으로 변경한다.
<br>
<br>웹 페이지의 기본 형식인 HTML의 문법이 각 웹 브라우저에서 상호 호환적이지 못한다는 문제와 SGML의 복잡함을 해결하기 위하여 개발된 ( )은 다른 특수한 목적을 갖는 마크업 언어이다.
<br>원활한 데이터의 연계를 위해 송.수신 시스템 간에 전송되는 데이터가 동일한 구조로 구성될 수 있도록 형태를 정의는 역할을 수행하며, 다음과 같은 특징이 있다.
<br>
<br>텍스트 데이터 형식으로 유니코드를 사용하여 전 세계 언어를 지원한다.
<br>
<br>대다수의 웹 브라우저가 해석을 위한 번역기(Parser)를 내장하고 있다.
<br>
<br>XML문서의 문자들은 마크업과 내용으로 구분된다.
<br>일반적으로 마크업은 &lt;로 시작하여 &gt;로 끝나는 태그(Tag)를 의미하고, 그 외의 문자열은 내용에 해당한다.
<br>
<br>마크업과 내용으로 이루어지는 하나의 요소를 의미한다.
<br>
<br>통합 구현과 관련하여 다음 설명의 괄호에 공통으로 들어갈 알맞은 용어는?
<br>( )는 HTTP, HTTPS, SMTP 등을 사용하여 xml 기반의 메시지를 네트워크상에서 교환하는 프로토콜이다.
<br>( ) envelope, 헤더, 바디 등이 추가된 xml 문서이다.
<br>( )는 복잡하고 무거운 구조로 구성되어 있어, ( )보다는 RESTful 프로토콜을 이용하기도 한다.
<br>
<br>웹 서비스와 관련된 다음 설명에 해당되는 용어는?
<br>웹 서비스와 관련된 서식이나 프로토콜 등을 표준적인 방법으로 기술하고 게시하기 위한 언어.
<br>XML로 작성되며 UDDI의 기초가 된다. SOAP, XML 스키마와 결합하여 인터넷에서 웹 서비스를 제공하기 위해 사용되며, 클라이언트는 이것을 통해 서버에서 어떠한 조작이 가능한지를 파악할 수 있다.
<br>다음 럼바우 데이터 모델링에 대한 설명에서 각 지문(1~3)에 해당하는 모델링을 매칭시키기<br>ㄱ. 다수의 프로세스들 간의 자료 흐름을 중심으로 처리 과정을 표현한 모델링<br>
ex) 자료흐름도(DFD)<br>ㄴ. 시간의 흐름에 따른 객체들 간의 제어 흐름, 상호 작용, 동작 순서 등의 동적인 행위를 표현하는 모델링<br>
ex) 상태 변화도(STD), 사건 추적도<br>ㄷ. 시스템에서 요구되는 객체를 찾아내어 속성과 연산 식별 및 객체들 간의 관계를 규정하여 표시하는 모델링<br>
ex) ER 다이어그램(ERD)<br>
1 → Function(기능)<br>
2 → Dynamic(동적)<br>
3 → Information(객체) <br>
<br>자신이 사용하지 않는 인터페이스와 의존 관계를 맺거나 영향을 받지 않아야 한다는 객체지향 설계 원칙 중 하나다.
<br>예를 들어 프린터, 펙스, 복사 기능을 가진 복합기의 경우 3가지 기능을 모두 가지 범용 인터페이스보다는, 프린터 인터페이스, 팩스 인터페이스, 복사 인터페이스로 분리함으로써 하나의 기능 변경으로 인해 다른기능이 영향을 받지 않도록 해야한다.
<br>
<br>결합도(Coupling)의 종류 중 단순 처리 대상인 데이터만 전달되는 것이 아니라, 어떻게 처리해야 하는지를 결정하는 제어 요소가 전달되는 경우의 결합도를 영문으로 쓰면?
<br>
<br>( 1 )는 모듈간의 인터페이스로, 데이터,지역변수 등을 직접 참조하거나 수정할 때의 결합도다.
<br>( 2 )는 모듈간의 인터페이스로, 배열이나 레코드 등의 자료구조가 전달될 때의 결합도다.
<br>( 3 )는 모듈간의 인터페이스로, 파라미터가 아닌 모듈 밖에 선언된 전역 변수를 사용하여 전역 변수를 갱신하는 방식으로 상호작용하는 때의 결합도다.
<br>
1 → 내용 결합도<br>
2 → 스탬프 결합도<br>
3 → 공통 결합도
<br>
<br>내부의 요소들이 기능적으로 연관성은 없으나, 순차적으로 실행될 때의 응집도 <br>서로 다른 기능을 수행하지만 동일한 입력과 출력을 사용할 때의 응집도 <br>하나의 기능에 밀접하게 관련되어 있거나 연관되어 있을 때의 응집도 <br>
1 → 절차적 응집도<br>
2 → 교환적 응집도<br>
3 → 기능적 응집도
<br>
<br>모듈간 통신 방식을 구현하기 위해 사용되는 대표적인 프로그래밍 인터페이스 집합이다.
<br>복수의 프로세스를 수행하며 이뤄지는 프로세스 간 통신까지 구현이 가능하다.
<br>대표적인 메소드에는 공뮤 메모리(Shared Memory), 소켓, 세마포어, 파이프와 네임드 파이프, 메세지 큐잉이 있다.
<br>IPC(Inter-Process Communication)<br>
<br>( )패턴은 객체 생성을 서브 클래스에서 처리하도록 분리하여 캡슐화한 패턴이다.
<br>상위 클래스에서 인터페이스만 정의하고 실제 생성은 서브 클래스가 담당한다.
<br>다른 이름으로는 가상 생성자(Virtual Constructor) 패턴 이라고도 한다.
<br>Factory Method 패턴<br>
<br>( 1 )패턴은 구현부에서 추상층을 분리하여, 서로가 독립적으로 확장할 수 있도록 구성한 패턴으로, 기능과 구현을 두 개의 별도 클래스로 구현한다는 특징이 있다.
<br>( 2 )패턴은 한 객체의 상태가 변화하면 객체의 상속된 다른 객체들에게 변화된 상태를 전달하는 패턴으로, 일대다의 의존성을 정의한다. 주로 시스템 간에 이벤트를 생성.발행(Publish)하고, 이를 수신(Subscribe)해야할 떄 이용된다.
<br>
1 → Bridge 패턴<br>
2 → Observer 패턴
<br>
<br>디자인 패턴은 모듈 간의 관계 및 인터페이스를 설계할 때 참조할 수 있는 전형적인 해결 방식 또는 예젤를 의미한다. <br>그 중 ( )패턴은 클래스나 객체들이 서로 상호작용하는 방법이나 책임 분배 방법을 정의하는 패턴으로, Interpreter, Observer, Command 등이 그 예에 해당한다.
<br>행위(Behavioral)<br>
<br>기업 내 각종 어플리케이션 및 플랫폼 간의 정보 전달, 연계, 통합 등 상호 연동이 가능하게 해주는 솔루션.
<br>Point-to-Point, Hub&amp;Spoke, Message Bus, Hybrid 등의 다양한 방식으로 구축이 가능한 모듈 연계 방법.
<br>EAI(Enterprise Application Integration)<br><img alt="do-messenger_screenshot_2025-02-11_13_47_16.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-02-11_13_47_16.png" style="width: 900px; max-width: 100%;" target="_self"><br>EAI(Enterprise Application Integration)는 기업 내 비즈니스 간 통합 및 연계성을 증대시켜 효율성 및 각 시스템 간의 확정성(Determinacy)을 높여 준다. EAI의 구축 유형은 위와 같다.
<br>
1 → Point-to-Point<br>
2 → Hub &amp; Spoke
<br>
<br>네트워크 트래픽에 대해 IP(Internet Protocol) 계층에서 IP패킷 단위의 데이터 변조 및 은닉 기능을 제공하는 네트워크 계층에서의 보안 통신 규약을 쓰시오.
<br>IPSec(Internet Protocol Security)<br>
<br>Kent Beck과 Erich Gamma 등이 개발한 자바 프로그래밍 언어용 유닛 테스트 프레임워크.
<br>xUnit계열의 한 종류이다. 같은 테스트 코드를 여러 번 작성하지 않게 도와주며, 테스트마다 예상 결과를 기억 할 필요가 없는 자동화된 해법을 제공한다.
<br>JUnit<br>
<br>사용자 인터페이스 UI(User Interface)의 설계 원칙
<br>
직관성 : 누구나 쉽게 이해하고 사용할 수 있어야 한다<br>
유효성 : 사용자의 목적을 정확하고 완벽하게 달성해야 한다<br>
학습성 : 누구나 쉽게 배우고 익힐 수 있어야 한다<br>
유연성 : 사용자의 요구사항을 최대한 수용하고 실수를 최소화해야 한다
<br>
<br>애플리케이션 테스트에서 사용되는 살충제 패러독스(Pesticide Paradox)의 개념을 간략히 설명
<br> <br>살충제 패러독스는 동일한 테스트 케이스로 동일한 테스트를 반복하면 더 이상 결함이 발견되지 않는 현상을 의미한다. <br>
<br>테스트에 대한 다음 설명에서 각 (1~3)에 해당되는 커버리지(기준)을 찾으시오.
<br>최소 한번은 모든 문장이 수행되도록 구성하는 검증 기준
<br>조건식이 참 / 거짓일 때 수행되도록 구성하는 검증 기준
<br>2번과 달리 조건식에 상관없이 개별 조건이 참 / 거짓일 때 수행되도록 구성하는 검증기준
<br>
1 → 구문(문장) 커버리지<br>
2 → 결정(분기) 커버리지<br>
3 → 조건 커버리지
<br>
<br>소프트웨어가 수행할 특정 기능을 알기 위해서 각 기능이 완전히 작동되는 것을 입증하는 테스트.
<br>동치 클래스 분해 및 경계값 분석을 이용하는 테스트 기법이다.
<br><img alt="do-messenger_screenshot_2025-02-11_15_32_34.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-02-11_15_32_34.png" target="_self"><br>다음 중 블랙박스 테스트에 속하는 녀석들은?
<br>
경계값 분석(Boundary Value Analysis)<br>
입력값의 경계 부분(최소, 최대값 등)에서 오류가 발생할 가능성이 높다는 점을 이용하여 테스트하는 기법<br>
동등(동치) 분할(Equivalence Partitioning)<br>
입력값을 유사한 동작을 하는 그룹으로 나누고 각 그룹에서 대표값을 선택해 테스트하는 기법<br>
원인-결과 그래프(Cause-Effect Graph)<br>
그래프를 활용하여 입력 데이터 간의 관계와 출력에 영향을 미치는 상황을 체계적으로 분석한 다음 효용성이 높은 테스트 케이스를 선정하여 검사하는 기법
<br>
<br>테스트 기법 중 다음과 같이 평가 점수표를 미리 정해 놓은 후 각 영역에 해당하는 입력 값을 넣고, 예상되는 출력값이 나오는지 실제 값과 비교하는 명세 기밥 테스트 기법을 쓰시오.
<br><img alt="do-messenger_screenshot_2025-02-11_16_31_10.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-02-11_16_31_10.png" style="width: 1025px; max-width: 100%;" target="_self"><br>개발 단계에 따른 애플리케이션 테스트에 대한 다음 V-모델에서 (1~4)에 들어갈 알맞은 테스트를 작성하시오.
<br>
1 → 단위 테스트(Unit Test)<br>
- 코딩 직후 소프트웨어 설계의 최소 단위인 모듈이나 컴포넌트에 초점을 맞춰 수행하는 테스트<br>
2 → 통합 테스트(Integration Test)<br>
- 모듈들을 결합하여 하나의 시스템으로 완성시키는 과정에서의 테스트<br>
3 → 시스템 테스트(System Test)<br>
4 → 인수 테스트(Acceptance Test)
<br>
<br>인수 테스트는 개발한 소프트웨어가 사용자의 요구사항을 충족하는지에 중점을 두고 테스트한다.
<br>( 1 ) : 선정된 최종 사용자가 여러 명의 사용자 앞에서 행하는 테스트 기법으로, 실제 업무를 가지고 사용자가 직접 테스트한다.
<br>( 2 ) : 개발자의 장소에서 사용자가 개발자 앞에서 행하는 테스트 기법으로, 테스트는 통제된 환경에서 행해지며, 오류와 사용상의 문제점을 사용자와 개발자가 함께 확인하면서 기록한다.
<br>
1 → 베타 테스트(Beta Test)<br>
2 → 알파 테스트(Alpha Test)
<br>
<br>통합 테스트 기법 중, 두 방법에 대한 설명이다.
<br>상향식 통합 테스트는 미완성이거나 문제가 있는 상위 모듈을 대체할 수 있는 테스트 드라이버가 있다.
<br>하향식 통합 테스트는 미완성이거나 문제가 있는 하위 모듈을 대체할 수 있는 테스트 ( )가 있어야 한다.
<br>
<br>통합 테스트로 인해 변경된 모듈이나 컴포넌트에 새로운 오류가 있는지 확인하는 테스트.
<br>이미 테스트된 프로그램의 테스팅을 반복하는 것이다.
<br>수정한 모듈이나 컴포넌트가 다른 부분에 영향을 미치는지, 오류가 생기지 않았는지 테스트하여 새로운 오류가 발생하지 않음을 보증하기 위해 반복 테스트한다.
<br>
<br>특정한 몇몇 테스트 케이스의 입력 값들에 대해서만 기대하는 결과를 제공하는 오라클로, 전수 테스트가 불가능한 경우 사용하고, 경계값 및 구간별 예상값 결과 작성시 사용하는 오라클은?
<br>
<br>애플리케이션 성능 측정의 지표에 대한 다음 설명을 채우십시오<br>
( 1 ) - 일정 시간 내에 애플리케이션이 처리하는 일의 양을 의미한다.<br>
( 2 ) - 애플리케이션에 요청을 전달한 시간부터 응답이 도착할 때까지 걸린 시간을 의미한다.<br>
( 3 ) - 애플리케이션에 작업을 의뢰한 시간부터 처리가 완료될 떄까지 걸린 시간을 의미한다.<br>
자원 활용률 - 애플리케이션이 의뢰한 작업을 처리하는 동안의 CPU, 메모리, 네트워크 등의 자원 사용률을 의미.
<br>
1 → 처리량(Throughput)<br>
2 → 응답 시간(Response Time)<br>
3 → 경과 시간(Turn Around Time)
<br>
<br>소스 코드의 코딩 스타일, 코드에 설정된 코딩 표준, 코드의 복잡도, 코드에 존재하는 메모리 누수 현상, 스레드 결함 등을 발견하기 위해 사용하는 분석 도구이다.
<br>각각 소스코드 품질 분석에 대한 정의를 작성하세요.
<br>
<br>작성한 소스 코드를 실행하지 않고, 코딩 표준이나 코딩 스타일, 결함 등을 확인하는 코드 분석 도구.
<br>
<br>소스 코드를 직접 실행하여 프로그램의 동작이나 반응을 추적하고 보고하는 분석 도구로, 프로그램 모니터링 기능이나 스냅샷 생성 기능을 포함하고 있다.
<br>
<br>데이터를 제어하는 DCL의 하나인 GRANT의 기능에 대해 간략히 서술하시오.
<br>
GRANT는 데이터베이스 관리자가 데이터베이스 사용자에게 권한을 부여하는 데 사용하는 명령어 이다.
<br>
<br>데이터를 제어하는 DCL의 하나인 ROLLBACK에 대해 간략히 서술하시오.
<br>
ROLLBACK은 트렌젝션이 실패한 경우 작업을 취소하고 이전 상태로 되돌리기 위한 명령어이다.
<br>
<br>데이터베이스 보안에서 가용성(Availability)에 대해 간략히 서술하시오.
<br>
자산이 적절한 시간에 인가된 당사자에게 접근 가능 해야 하는 것.<br>
위협요소 - Dos/DDoS 공격 등
<br>추가
기밀성 - 자산이 인가된 당사자에 의해서만 접근하는 것을 보장하는 것.<br>
무결성 - 자산이 인가된 당사자에 의해서, 인가된 방법으로만 변경 가능한것.
<br>
<br>보안 위협의 하나인 SQL Injection에 대해 간략히 서술하시오.
<br>
SQL Injection은 웹 응용 프로그램에 SQL 구문을 삽입하여 내부 DB서버의 데이터를 유출 및 변조하고 관리자 인증을 우회하는 공격 기법이다.
<br>
<br>
다음은 암호화 알고리즘에 대한 설명이다. 괄호를 채우시오. <br>
암호화 알고리즘은 패스워드, 주민번호, 은행계좌와 같은 중요 정보를 보호하기 위해 평문을 암호화된 문장으 만드는 절차 또는 방법을 말한다. <br>
스위스의 라이(Lai)와 메시(Messey)는 1990년 PES를 발표하고, 이후 이를 개선한 IPES를 발표하였다. IPES는 128비트의 Key를 사용하여 64비트 블록을 암호화하는 알고리즘이며 현재는 ( 1 )라고 불린다. <br>
( 2 )은 국가 안전 보장국(NSA)에서 개발한 암호화 알고리즘으로, 클리퍼 칩(Clipper Chip)이라는 IC 칩에 내장되어 있다. 80비트의 Key를 사용하여 64비트 블록을 암호화하며, 주로 전화기와 같은 음성 통신 장비에 삽입되어 음성 데이터를 암호화 한다. <br>
1 → IDEA(Internetional Data Encryption Algorithm)<br>
2 → Skipjack
<br>
<br>무선랜 보안에 사용된 WEP 방식을 보완한 데이터 보안 프로토콜로, 임시 키 무결성 프로토콜이라도 한다.
<br>WEP의 취약성을 보완하기 위해 암호 알고리즘의 입력 키 길이를 128비트로 늘리고 패킷당 키할당, 키값 재설정 등 키 관리 방식을 개선하였다.
<br>
<br>1974년 IBM이 개발하고, 1975년 NBS에 의해 미국의 국가 표준으로 발표된 암호화 알고리즘
<br>블록 크기는 64비트, 키 길이는 56비트이며, 16회의 라운드를 수행한다.
<br>컴퓨터 기술이 발달함에 따라 해독이 쉬워지면서 미국의 국가 표준이 2001년 AES로 대체되었다.
<br>
<br>2001년 미국 표준 기술 연구소(NIST)에서 발표한 대칭키 암호화 알고리즘이다.
<br>DES의 한계를 느낀 NIST에서 공모한 후 발표하였다.
<br>블록 크기는 128비트이며, 키 길이에 따라 128, 192, 256으로 분류된다.
<br>
<br>1991년 R.ricest가 MD4를 개선한 암호화 알고리즘으로, 각각의 512비트짜리 입력 메세지 블록에 대해 차례동작한다.
<br>각 512비트 입력 메시지 블록을 처리하고 나면 128비트 스테이트(stat)의 값이 변하는 암호화 알고리즘이다.
<br>
<br>( ) 스푸핑은 로컬 네트워크(LAN)에서 사용하는 ( )프로토콜의 취약점을 이용한 공격 기법으로, 자신의 물리적 주소(MAC)를 변조하여 다른 PC에게 도달해야 하는 데이터 패킷을 가로채거나 방해한다.
<br>
<br>아래의 패킷 로그와 같이, 공격자가 패킷의 출발지 주소(Address) 또는 포트를 임의로 변경하여 송신측 IP주소 또는 포트를 동일하게 함으로써, 송신 IP주소가 자신이므로 자신에게 응답을 수행하게 된다.
<br>자신에 대해 무한히 응답하는 패킷을 계속 전송하여 컴퓨터의 실행 속도를 느리게 하거나 동작을 마비 시켜 서비스 거부 상태에 빠지도록 하는 네워크 공격 유형은?
<br>#### source : 192.168.1.200
#### destination : 192.168.1.200
#### protocol : 6
#### src port : 21845
#### dst port : 21845
<br>
<br>( 1 )은 컴퓨터 보안에 있어서, 인간 상호 작용의 깊은 신뢰를 바탕으로 사람들을 속여 정상 보안 절차를 깨트리기 위한 비기술적 시스템 침입 수단을 의미한다.
<br>( 2 )는 특정 목적을 가지고 데이터를 수집하였으나, 이후 활용되지 않고 저장만 되어있는 대량의 데이터를 의미한다. 미래에 사용될 가능성을 고려하여 저장 공간에서 삭제되지 않고 보관되어 있으나, 이는 저장 공간의 낭비뿐만 아니라 보안 위험을 초래할 수도 있다.
<br>
1 → 사회 공학(Social Engineering)<br>
2 → 다크 데이터(Dark Data)
<br>
<br>( )은 ‘세션을 가로채다’라는 의미로, 정상적인 연결을 RST패킷을 통해 종료시킨 후 재연결 시 희생자가 아닌 공격자에게 연결하는 공격 기법이다.
<br>TCP ( )은 공격자가 TCP 3-Way-Handshake과정에 끼어듦으로써 서버와 상호 간의 동기화된 시퀀스 번호를 갖고 인가되지 않은 시스템의 기능을 이용하거나 중요한 정보에 접근할 수 있게 된다.
<br>
<br>목표 조직이 자주 방문하는 웹 사이트를 사전에 감염시켜, 목표 조직의 일원이 웹 사이트에 방문했을 때 악성 코드에 감연되게 한다.
<br>이후에는 감염된 PC를 기반으로 조직의 중요 시스템에 접근하거나 불능으로 만드는 등의 영향력을 행사하는 웹 기반 공격이다.
<br>
<br>AAA서버는 사용자의 컴퓨터 자원 접근 처리와 서비스 제공에 있어서의 다음 3가지 기능을 제공하는 서버이다.
<br>접근하는 사용자의 신원을 검증하는 기능
<br>신원이 검증된 사용자에게 특정된 권한과 서비스를 허용하는 기능
<br>사용자가 어떤 종류의 서비스를 이용했고, 얼마만큼의 자원을 사용했는지 기록 및 보관하는 기능
<br>각각 무엇인지 ?
<br>
1 → Authentication - 검증<br>
2 → Authorization - 권한 부여<br>
3 → Accounting - 기록
<br>
<br>다양한 장비에서 발생하는 로그 및 보안 이벤트를 통합하여 관리하는 보안 소룰션으로, 방화벽, IDS, IPS, 웹 방화벽, VPN 등에서 발생한 로그 및 보안 이벤트를 통합하여 관리함으로써 비용 및 자원을 절약할 수 있는 특징이 있다.
<br>보안 솔루션 간의 상호 연동을 통해 종합적인 보안 관리 체계를 수립할 수 있다.
<br>
<br>헝가리안 표기법(Hungarian Notation)에 대해 간략히 서술.
<br>
헝가리안 표기법은 변수명 작성시 변수의 자료형을 알 수 있도록 자료형을 의미하는 문자를 포함하여 작성하는 방법.<br>
ex) bool bIsTrue / int nCnt
<br>
<br>스니핑(Sniffing)은 사전적 의미로 ‘코를 킁킁 거리다, 냄새를 맡다’이다. 네트워크 보안에서 스니핑에 대한 개념을 간략히 작성.
<br>
스니핑은 네트워크의 중간에서 남의 패킷 정보를 도청하는 해킹 유형의 하나로 수동적 공격에 해당한다.
<br>
<br>C++에서 생성자에 대해 간략히 서술하시오.
<br>
생성자는 객체 변수 생성에 사용되는 메소드로, 객체 변수를 생성하면서 초기화를 수행한다.
<br>
<br>1960년대 AT&amp;T 벨(Bell) 연구소가 MIT, GM사와 함께 공동 개발한 운영체제 이다.
<br>시분할 시스템(Time Sharing System)을 위해 설계된 대화식 운영체제 이다.
<br>대부분 c언어로 작성되어 있어 이식성이 높으며, 장치/프로세스 간의 호환성이 높다.
<br>트리 구조의 파일 시스템을 갖는다.
<br><img alt="do-messenger_screenshot_2025-02-12_14_04_58.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-02-12_14_04_58.png" target="_self"><br>
1 → 준비(Ready)<br>
2 → 실행(Run)<br>
3 → 대기(Wait)
<br>
<br>HRN 비선점형 스케줄링 우선순위를 구하는 계삭식을 쓰시오.
<br>
<br>( 1 )는 준비상태 큐에서 기다리고 있는 프로세스들 중에서 실행시간이 가장 짧은 프로세스에게 먼저 CPU를 할당하는 기법이다. 가장 적은 평균 대기 시간을 제공하는 최적 알고리즘이지만, 실행 시간이 긴 프로세스는 실행 시간이 짧은 프로세스에게 할당 순위가 밀려 무한 연기 상태가 발생 될 수 있다.
<br>
<br>( 2 )은 시분할 시스템을 위해 고안된 방식으로, 준비상태 큐에 먼저 들어온 프로세스가 먼저 CPU를 할당받지만 각 프로세스는 시간 할당량 동안만 실행한 후 실행이 완료되지 않으면 다음 프로세스에게 CPU를 넘겨고 준비상태 큐의 가장 뒤로 배치된다. 할당되는 시간이 작을 경우 문맥 교환 및 오버헤드가 자주 발생되어 요청된 작업을 신속히 처리할 수 없다.
<br>
<br>( 3 )는 현재 실행중인 프로세스의 남은 시간과 준비상태 큐에 새로 도착한 프로세스의 실행시간을 비교하 가장 짧은 실행 시간을 요구하는 프로세스에게 CPU를 할당하는 기법으로, 시분할 시스템에 유용하다. 준비상태 큐에 있는 각 프로세스의 실행 시간을 추적하여 보유하고 있어야 하므로 오버헤드가 증가한다.
<br>
1 → SJF(Shortest Job First)<br>
2 → RR(Round Robin)<br>
3 → SRT(Shortest Remaining Time)
<br>
<br>리눅스 또는 유닉스에서 a.txt 파일에 대해 다음 처리 조건과 같이 권한을 부여하고자 한다.
<br>사용자에게 읽기,쓰기,실행 권한을 부여한다.
<br>그룹에게 읽기,실행 권한을 부여한다.
<br>기타 사용자에게 실행 권한을 부여한다.
<br>한 줄로 작성하고, 8진법 숫자를 이용한 명령문을 이용한다.
<br>
<br>192.168.1.0/24 네트워크를 FLSM 방식으로 3개의 Subnet으로 나누는 방법
<br>즉, 64개씩 호스트를 할당하면,<br>
<br>여분의 서브넷 = 192.168.1.192/26
<br>
<br>서브넷팅(Subnetting)에 대한 설명
<br>현재 IP주소가 192.168.1.132이고, 서브넷 마스크가 255.255.255.192 일 때, 네트워크 주소와 사용가능 호스트 개수는?
<br>
<br>A Class - 0~127 / 기본 서브넷 - 255.0.0.0 (/8)
<br>B Class - 128~191 / 기본 서브넷 - 255.255.0.0 (/16)
<br>C Class - 192~223 / 기본 서브넷 - 255.255.255.0 (/24)
<br>D Class - 224~239 / 기본 서브넷 - 멀티캐스트 전용 (서브넷 X)
<br>이 때, 네트워크 개수는 2^2(추가된 1의 개수) = 4개<br>호스트개수는 256 / 4(네트워크 개수) = 64개<br>즉, 이를 표로 나타내면 →<br>여기서 192.168.1.13 는 3번째 네트워크 주소에 속하므로,<br>
네트워크 주소는 192.168.1.128 이며, 사용 가능 호스트 주소는 네트워크와 브로드캐스트 주소를 뺀 64-2 <br>
<br>OSI 7 Layer에 대한 설명
<br>
물리적으로 연결된 두 개의 인접한 개방 시스템들 간에 신뢰성 있고 효율적인 정보 전송을 할 수 있도록 연결 설정, 데이터 전송, 오류 제어 등의 기능을 수행한다. <br>
개방 시스템들 간의 네트워크 연결을 관리하며, 경로 제어, 패킷 교환, 트래픽 제어 등의 기능을 수행한다. <br>
서로 다른 데이터 표현 형태를 갖는 시스템 간의 상호 접속을 위해 필요한 계층으로, 코드변환, 데이터 암호화, 데이터 압축, 구문 검색 등의 기능을 수행한다. <br>
다양한 전송매체를 통해 비트 스트림을 전송. 전송에 필요한 두 장치 간의 실제 접속과 절단 등 기계적, 전기적, 기능적, 절차적 특성에 대한 규칙을 정의한다. <br>
1 → 데이터 링크 계층(Data Link Layer)<br>
2 → 네트워크 계층(Network Layer)<br>
3 → 표현 계층(Presentation Layer)<br>
4 → 물리 계층(Physical Layer)
<br>
<br>심리학자 톰 마릴은 컴퓨터가 메시지를 전달하고, 메시지가 제대로 도착했는지 확인하며, 도착하지 않았을 경우 메시지를 재전송하는 일련의 방법을 ‘기술적 은어’를 뜻하는 ( )이라는 용어로 정의하였다.
<br>
<br>프로토콜은 서로다른 기기들 간의 데이터 교환을 원활하게 수행할 수 있도록 표준화 시켜놓은 통신 규약이다. 프로토콜의 기본요소 3가지를 쓰시오.
<br>
구문(Syntex)<br>
의미(Semantics)<br>
시간(Timing)
<br>
<br>( 1 ) : 연결형 통신에서 주로 사용되는 방식으로, 출발지와 목적지의 전송 경로를 미리 연결하여 논리적으로 고정한 후 통신하는 방식
<br>( 2 ) : 비연결형 통신에서 주로 사용되는 방식으로, 사전에 접속 절차를 수행하지 않고 헤더에 출발지에서 목적지까지의 경로 지정을 위한 충분한 정보를 붙여서 개별적으로 전달하는 방식
<br>
1 → 가상 회선(Virtual Circuit)<br>
2 → 데이터그램(Datagram)
<br>
<br>인터넷 환경에서의 호스트 상호 간 통신에서 연결된 네트워크 접속 장치의 물리적 주소인 MAC 주소를 이용하여 IP주소를 찾는 인터넷 계층의 프로토콜로, 역순 주소 결정 프로토콜이라 불린다.
<br>
RARP(Reverse Address Resolution protocol)
<br>
<br>( )는 한 번의 로그인으로 개인이 가입한 모든 사이트를 이용할 수 있게 해주는 시스템을 말한다.
<br>개인의 경우, 사이트에 접속하기 위하여 아이디와 패스워드는 물론 이름, 전화번호 등 개인정보를 각 사이트마다 일일이 기록해야 하던 것이 한 번의 작업으로 끝나므로 불편함이 해소되며, 기업에서는 회원에 대한 통합관리가 가능해 마케딩을 극대화시킬 수 있다는 장점이 있다.
<br>
SSO(Single Sign On)
<br>
<br>재난 및 군사 현장과 같이 별도의 고정된 유선망을 구축할 수 없는 장소에서 모바일 호스트만을 이용하여 구성한 네트워크.
<br>망을 구성한 후 단기간 사용되는 경우나 유선망을 구성하기 어려운 경우에 적합하다.
<br>멀티 홉 라우팅 기능을 지원한다.
<br>
애드 훅 네트워크(Ad-hoc Network)
<br>
<br>우리말로 번역하면 '네트워크 주소 변환'이라는 의미의 영문 3글자 약자이다.
<br>1개의 정식 IP 주소에 다량의 가상 사설 IP 주소를 할당 및 연결하는 방식이다.
<br>1개의 IP 주소를 사용해서 외부에 접속할 수 있는 노드는 어느 시점에서 1개만으로 제한되는 문제가 있으나, 이 때에는 IP 마스커레이드(Masquerade)를 이용하면 된다.
<br>
NAT(Network Address Translation)
<br>
<br>
정의<br>
웹상에 존재하는 데이터를 개별 URI로 식별하고, 각 URI에 링크 정보를 부여함으로써 상호 연결된 웹을 지향하는 모형이다.<br>
링크 기능이 강조된 시맨틱웹의 모형에 속한다고 볼 수 있으며, 팀 버너스 리의 W3C를 중심으로 발전하고있다. <br>
주요 기능 <br>공개된 데이터를 이용하면 내가 원하는 데이터가 이미 존재하는지, 어디에 존재하는지 알 수 있다.
<br>URI로 구별되는 데이터 리소스의 자유로운 접근 및 이용이 가능하므로 큰 노력 없이 데이터의 매쉬업이 가능하다.
<br>내가 만든 데이터가 아니라도 URI를 이용하여 링크만 해주면 이용할 수 있다. <br>
4대 원칙 <br>통합 자원 식별자(URI)를 사용한다,
<br>URI는 HTTP 프로토콜을 통해 접근할 수 있어야 한다.
<br>RDF나 스파클 같은 표준을 사용한다,
<br>풍부한 링크 정보가 있어야 한다. <br>
Linked Data와 Open Data를 결합한 용어이다. <br>
LOD(개방형 링크드 데이터)
<br>
<br>경로 제어 프로토콜은 크게 자율 시스템 내부의 라우팅에 사용되는 (①) 와 <br>자율 시스템 간의 라우팅에 사용되는 (②) 로 구분할 수 있다.
<br>설명 <br>(①) 는 소규모 동종 자율 시스템에서 효율적인 RIP와 대규모 자유 시스템에서 많이 사용되는 (③) 로 나누어진다.
<br>(③) 는 링크 상태(Link State)를 실시간으로 반영하여 최단 경로로 라우팅을 지원하는 특징이 있다.
<br>(④) 는 (②) 의 단점을 보완하여 만들어진 라우팅 프로토콜로, 처음 연결될 때는 전체 라우팅 테이블을 교환하고, 이후에는 변환된 정보만을 교환한다. <br>
<br>BGP
<br>AS
<br>HOP
<br>OSPF
<br>NAT
<br>ISP
<br>EGP
<br>IGP
<br> <br>IGP
<br>EGP
<br>OSPF
<br>BGP <br>
<br>P2P 네트워크를 이용하여 온라인 금융 거래 정보를 온라인 네트워크 참여자(Peer)의 디지털 장비에 분산 저장하는 기술은?
<br>
블록체인(Blockchain)
<br>
<br>정보 자산을 안전하게 보호하기 위한 보호 절차와 대책으로, 정보보호 관리 체계라고 한다.
<br>조직에 맞는 정보보호 정책을 수립하고, 위험에 상시 대응하는 여러 보안 대책을 통합 관리한다.
<br>공공 부문과 민간 기업 부문에서 이것을 평가하고 인증하는 사업을 한국인터넷진흥원(KISA)에서 운영중이다.
<br>
<br>( 1 )은 칩 설계 회사인 ARM에서 개발한 기술로, 하나의 프로세서 내에 일반 애플리케이션을 처리하는 일반 구역과, 보안이 필요한 애플리케이션을 처리하는 보안 구역으로 분할하여 관리하는 하드웨어 기반의 보안기술이다.
<br>( 2 )은 네티즌들이 사이트에 접속할 때 주소를 잘못 입력하거나 철자를 빠뜨리는 실수를 이용하기 위해 이와 유사한 유명 도메인을 미리 등록하는 것으로 URL하이재킹이라고도 한다. <br>
<br>Pharming
<br>Typosquatting
<br>Ransomware
<br>Tvishing
<br>Hacktivism
<br>CSRF
<br>Trustzone
<br>Watering Hole
<br>APT
<br>Smurfing
<br> <br>Trustzone
<br>Typosquatting <br>
<br>RAID(Redundant Array of Independent Disks)란 여러개의 하드디스크를 조합하여 성능 향상과 데이터 보호기능을 제공하는 기술이다.
<br> <br>RAID 0: 성능 최우선, 데이터 보호 없음.
<br>RAID 1: 데이터 안정성 높음, 저장 용량 절반 사용.
<br>RAID 5: 성능과 안정성 균형, 최소 3개 디스크 필요.
<br>RAID 6: RAID 5보다 높은 안정성, 최소 4개 디스크 필요.
<br>RAID 10: RAID 0과 RAID 1의 조합, 고성능과 고안정성 제공. <br>
<br>오픈 소스 기반 분산 컴퓨팅 플랫폼 이다.
<br>분산 저장된 데이터들은 클러스터 환경에서 병렬 처리된다.
<br>일반 PC급 컴퓨터들로 가상화된 대형 스토리지를 형성하고 그 안에 보관된 거대한 데이터 세트를 병렬로 처리할 수 있도록 개발되었다.
<br>더그 커팅과 마이크 캐퍼렐라가 개발했으며, 구글의 맵리듀스(MapReduce) 엔진을 사용하고 있다.
<br>
<br>데이터 마이닝(Data Mining)의 개념을 간략히 서술하시오.
<br>
데이터 마이닝은 대량의 데이터를 분석하여 데이터에 내재된 변수 사이의 상호관계를 규명하여 일정한 패턴을 찾아내는 기법이다.
<br>
<br>데이터베이스 회복(Recovery) 기법에 관련된 내용.
<br>( )은 트렌젝션이 데이터를 변경하면, 트렌젝션이 부분 완료되기 전이라도 즉시 실제 DB에 그 내용을 반영하는 기법.
<br>장애가 발생하여 회복 작업할 경우를 대비하여 갱신된 내용들을 로그에 보관시킨다.
<br>( )에서 회복 작업을 수행할 경우 Redo와 Undo 모두 수행이 가능하다.
<br>
즉각 갱신 기법(Immediate Update)
<br>
<br>데이터베이스 병행제어(Concurrency Control) 기법 중 하나로이다.
<br>접근한 데이터에 대한 연산을 모두 마칠 때 까지 추가적인 접근을 제한함으로써 상호 배타적으로 접근하여 작업을 수행하도록 하는 기법이다.
<br>
<br>
릴리즈 노트는 개발 과정에서 정리된 릴리즈 정보를 고객과 공유하기 위한 문서이다. <br>
릴리즈 노트는 정확하고 완전한 정보를 기반으로 개발팀에서 직접 현재 시제로 작성해야 한다. <br>
릴리즈 노트 작성시 노트 이름, 소프트웨어, 릴리즈 버전, 릴리즈 날짜, 릴리즈 노트 날짜, 버전 등이 포함되는 항목은? <br>
<br>소프트웨어 개발에서의 작업 중 형상 통제에 대해 간략히 서술하시오.
<br>
형상 통제는 식별된 형상 항목에 대한 변경 요구를 검토하여 현재의 기준선이 잘 반영될 수 있도록 조정하는 작업이다.
<br>
<br>소프트웨어 ( )는 소프트웨어 개발 단계의 각 과정에서 만들어지는 프로그램, 문서, 데이터등을 관리하는 것을 말한다.
<br>소프트웨어의 개발 과정에서 만들어지는 여러 버전들의 변경사항을 관리하는 일련의 활동이며 이를 지원하는 도구로 Git, SVN 등이 있다.
<br>
형상관리(SCM)]]></description><link>https://lts.kr/study/정보처리기사/정보처리기사-실기/🥇-정보처리-기사-실기-키워드.html</link><guid isPermaLink="false">study/정보처리기사/정보처리기사 실기/🥇 정보처리 기사 실기 키워드.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Tue, 08 Apr 2025 09:17:02 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-02-10_15_04_45.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[🚨 RSA 암호화 방식의 이해와 적용 (feat.취약성점검)]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:공부" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#공부</a> <a class="tag" href="https://lts.kr/?query=tag:Tokken" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Tokken</a> <a class="tag" href="https://lts.kr/?query=tag:Security" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Security</a> <a class="tag" href="https://lts.kr/?query=tag:SPRING" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#SPRING</a> <a class="tag" href="https://lts.kr/?query=tag:보안" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#보안</a> <br> <a href="https://lts.kr?query=tag:공부" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#공부">#공부</a> <a href="https://lts.kr?query=tag:Tokken" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Tokken">#Tokken</a> <a href="https://lts.kr?query=tag:Security" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Security">#Security</a> <a href="https://lts.kr?query=tag:SPRING" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#SPRING">#SPRING</a> <a href="https://lts.kr?query=tag:보안" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#보안">#보안</a><br>1977년에 Rivest, Shamir, Adleman 이라는 세 명의 수학자가 고안해서 RSA라고 부른다.<br>
이 방식은 지금도 SSL/TLS, 이메일, 디지털 서명, 인증서 등 보안의 핵심 인프라에서 계속 쓰이고 있는 방식이다.<br>
<br>RSA는 "공개키로 암호화하고, 개인키로 복호화" 또는 그 반대로 동작하는 비대칭 암호화 알고리즘이다.
<br>
<br>공개키로 암호화된 데이터는 개인키를 소유한 공개키 생성자만이 복호화 가능하다.
<br>사용자( Client )마다 공개키와 개인키를 접근 시 새로 생성/발급하여 원본 데이터 추적이 불가하다.
<br>결론
즉, 클라이언트의 요청이 들어오면 서버에서 공개키(클라이언트에게 제공할 키) 와 개인키(서버측에서 갖고있는, 공개키와 한쌍이 되는 키) 를 매번 새로 발급하기 때문에, 추적이 어렵고 암호화에 뛰어나다.
<br>
<br>서비스 특성에 따라 적절하게 적용할 필요가 있다.
<br>정보 <br>RSA 키 객체 (PublicKey, PrivateKey) 는 메모리 상에서만 동작할 수 있다.
<br>우리가 파일, 네트워크, DB로 키를 주고받을 때는 Base64 문자열 로 직렬화해야 해야한다. <br>[로그인 / 회원가입 페이지]<br>클라이언트에서 서버에 공개키 요청
<br>서버에서 키쌍 과 KeyUUID 생성
<br>개인키는 KeyUUID와 함께 캐쉬에 저장 / 공개키는 KeyUUID와 클라이언트에 전달
<br>클라이언트는 서버로부터 받은 공개키로 평문 암호화, 서버에 전달
<br>암호화된 평문을 KeyUUID로 찾은 공개키로 복호화 -&gt; 평문 완성
<br>
<br>암호화, 해시, 키 생성, 인증서 처리, 서명 등 암호학 기반 기능들을 제공하는 클래스들의 모음이다.
<br> private static final String INSTANCE_TYPE = "RSA"; // 2048bit RSA KeyPair 생성. public static KeyPair generateKeypair() throws NoSuchAlgorithmException { KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(INSTANCE_TYPE); keyPairGen.initialize(2048, new SecureRandom()); return keyPairGen.genKeyPair(); } <br>KeyPairGenerator (공개키/개인키 쌍 생성) 을 사용한다.
<br>NoSuchAlgorithmException : 지정한 알고리즘 이름이 현재 JVM 환경에서 지원되지 않거나 잘못된 경우 발생하는 체크 예외다.
<br>KeyPair타입 : PrivateKey와 PublicKey로 이루어져있는 데이터 타입
<br>SecureRandom을 시드로 사용해 보안 수준 향상
<br> 2048bit로 RSA암호화 방식을 사용하여 keyPair를 생성하는 코드이다.<br>	private static final String INSTANCE_TYPE = "RSA"; // 평문 + 공개키 Base64로 암호문 생성 public static String rsaEncode(String plainText, String publicKey) throws InvalidKeyException, InvalidKeySpecException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException { Cipher cipher = Cipher.getInstance(INSTANCE_TYPE); cipher.init(Cipher.ENCRYPT_MODE, convertPublicKey(publicKey)); byte[] plainTextByte = cipher.doFinal(plainText.getBytes()); return base64EncodeToString(plainTextByte); } //Base64 공개키 -&gt; 공개키로 디코딩 public static PublicKey convertPublicKey(String publicKey) throws InvalidKeySpecException, NoSuchAlgorithmException { KeyFactory keyFactory = KeyFactory.getInstance(INSTANCE_TYPE); byte[] publicKeyByte = Base64.getDecoder().decode(publicKey.getBytes()); return keyFactory.generatePublic(new X509EncodedKeySpec(publicKeyByte)); }
<br>
Cipher : Java 보안 API에서 실제 암호화/복호화를 수행하는 핵심 클래스<br>
AES, RAS, DES 같은 알고리즘을 직접 실행하는 암호 모듈 , 암호화 엔진 이다. <br>
Cipher cipher = Cipher.getInstance(INSTANCE_TYPE); : 타입에 따라, 암호화 모드와 패딩 방식이 결정된다. <br>
convertPublicKey : base64기반 코드를 실제 키 객체로 변환 <br>
KeyFactory : 키 복원용 펙토리 객체 <br>
keyFactory.generate... : 실제 키 객체 생성 <br>
X509EncodedKeySpec → 공개키 표준 포맷 스펙 <br>node-forge 패키지를 사용한다. base64, encode등 TLS프로토콜(암호화 도구)를 구현한 패키지 이다.
<br>&lt;script src="https://cdn.jsdelivr.net/npm/node-forge@1.3.1/dist/forge.min.js"&gt;&lt;/script&gt; &lt;script&gt;
/** * 서버에서 공개키를 받아서 RSA로 암호화하는 함수 * @param {string} plainText - 암호화할 평문 * @param {string} publicKeyBase64 - 서버로부터 받은 Base64 인코딩된 공개키 * @returns {string} 암호화된 Base64 문자열 */
function rsaEncryptWithBase64PublicKey(plainText, publicKeyBase64) { const forge = window.forge; // 1. Base64 디코딩 → DER 바이너리 const der = forge.util.decode64(publicKeyBase64); // 2. DER → ASN.1 파싱 → PublicKey 객체 const asn1 = forge.asn1.fromDer(der); const publicKey = forge.pki.publicKeyFromAsn1(asn1); // 3. RSA 암호화 const encryptedBytes = publicKey.encrypt(plainText, 'RSAES-PKCS1-V1_5'); // 4. 암호문을 Base64 인코딩해서 반환 return forge.util.encode64(encryptedBytes);
}
&lt;/script&gt;
<br>클라이언트 단에서 request전달 전, 암호화 하기 위한 코드 / 동작 구성은 2.1과 동일 하다
<br>	private static final String INSTANCE_TYPE = "RSA"; // 암호문 + 개인키 Base64로 평문 생성 public static String rsaDecode(String encryptedPlainText, String privateKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidKeySpecException, IllegalBlockSizeException, BadPaddingException { byte[] encryptedPlainTextByte = Base64.getDecoder().decode(encryptedPlainText.getBytes()); Cipher cipher = Cipher.getInstance(INSTANCE_TYPE); cipher.init(Cipher.DECRYPT_MODE, convertPrivateKey(privateKey)); return new String(cipher.doFinal(encryptedPlainTextByte)); } //Base64 개인키 -&gt; 개인키로 디코딩 public static PrivateKey convertPrivateKey(String privateKey) throws InvalidKeySpecException, NoSuchAlgorithmException { KeyFactory keyFactory = KeyFactory.getInstance(INSTANCE_TYPE); byte[] privateKeyByte = Base64.getDecoder().decode(privateKey.getBytes()); return keyFactory.generatePrivate(new PKCS8EncodedKeySpec(privateKeyByte)); }
<br>Cipher 객체를 사용하여 위와 동일하게 동작.
<br>PKCS8EncodedKeySpec → 개인키 표준 포맷 스펙
<br> public static String base64EncodeToString(byte[] byteData) { return Base64.getEncoder().encodeToString(byteData); }
<br>cipher.doFinal(...) 과 같은 코드는 바이너리 데이터로 리턴값을 보낸다.
<br>
<br>JUnit → 테스트 프레임워크 <br>AssertJ → 테스트 결과를 검증(assert)할 때 쓰는 강력한 assertion 도구
<br>JS코드는 제외<br>private static final String PLAIN_TEXT = "키 암/복호화 테스트 123 abc !@#"; @Test @DisplayName("RSA 키쌍 생성 및 암/복호화 통합 테스트") public void testGenerateKeypairAndEncryptDecrypt() throws Exception { // 키쌍 생성 KeyPair keyPair = rsaService.generateKeypair(); PublicKey publicKey = keyPair.getPublic(); PrivateKey privateKey = keyPair.getPrivate(); // 공개키, 개인키 → Base64 인코딩 String publicKeyBase64 = rsaService.base64EncodeToString(publicKey.getEncoded()); String privateKeyBase64 = rsaService.base64EncodeToString(privateKey.getEncoded()); System.out.println("공개키Base64 : " + publicKeyBase64); System.out.println("개인키Base64 : " + privateKeyBase64); // 암호화 String encryptedText = rsaService.rsaEncode(PLAIN_TEXT, publicKeyBase64); System.out.println("RSA암호화 텍스트 : " + encryptedText); // 복호화 (개인키 사용해야 함) String decryptedText = rsaService.rsaDecode(encryptedText, privateKeyBase64); System.out.println("RSA복호화 텍스트 : " + decryptedText); // 검증 Assertions.assertThat(decryptedText).isEqualTo(PLAIN_TEXT); }
<br>결과<br>
<img alt="Pasted image 20250325102427.png" src="https://lts.kr/사진-및-문서/pasted-image-20250325102427.png" target="_self"><br>Base64기반 String 변환 및 암/복호화 테스트 완료
<br>js암호화도 동일하게 동작 확인
<br><img alt="Pasted image 20250325165845.png" src="https://lts.kr/사진-및-문서/pasted-image-20250325165845.png" target="_self"><br>
<img alt="Pasted image 20250325172818.png" src="https://lts.kr/사진-및-문서/pasted-image-20250325172818.png" target="_self"><br>]]></description><link>https://lts.kr/issue_troubleshooting/🚨-rsa-암호화-방식의-이해와-적용-(feat.취약성점검).html</link><guid isPermaLink="false">Issue_TroubleShooting/🚨 RSA 암호화 방식의 이해와 적용 (feat.취약성점검).md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Thu, 27 Mar 2025 07:33:18 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/pasted-image-20250325102427.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/pasted-image-20250325102427.png"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>