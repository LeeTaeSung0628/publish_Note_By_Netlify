<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Category]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://lts.kr/</link><image><url>https://lts.kr/lib/media/favicon.png</url><title>Category</title><link>https://lts.kr/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Wed, 04 Jun 2025 02:43:13 GMT</lastBuildDate><atom:link href="https://lts.kr/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Wed, 04 Jun 2025 02:43:10 GMT</pubDate><copyright><![CDATA[taesung's Blog]]></copyright><ttl>60</ttl><dc:creator>taesung's Blog</dc:creator><item><title><![CDATA[Jenkins 파이프라인 설정]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="https://lts.kr/?query=tag:개발" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개발</a> <a class="tag" href="https://lts.kr/?query=tag:인프라" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#인프라</a> <a class="tag" href="https://lts.kr/?query=tag:CIDE" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#CIDE</a> <a class="tag" href="https://lts.kr/?query=tag:Jenkins" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Jenkins</a> <a class="tag" href="https://lts.kr/?query=tag:도구" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#도구</a> <br> <a href="https://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="https://lts.kr?query=tag:개발" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개발">#개발</a> <a href="https://lts.kr?query=tag:인프라" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#인프라">#인프라</a> <a href="https://lts.kr?query=tag:CIDE" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#CIDE">#CIDE</a> <a href="https://lts.kr?query=tag:Jenkins" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Jenkins">#Jenkins</a> <a href="https://lts.kr?query=tag:도구" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#도구">#도구</a> <br>
<br>credential은 도커 허브, 깃 허브 등 젠킨스가 빌드하고 배포하는 과정에서 로그인에 필요한 정보들이라고 생각하면 된다.
<br><img alt="do-messenger_screenshot_2025-06-04_10_50_01.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_10_50_01.png" target="_self"><br><img alt="do-messenger_screenshot_2025-06-04_10_49_09.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_10_49_09.png" target="_self">
여기서 도커 허브와 git hub 등 인증 정보를 기입하면 된다.<br>참고
처음엔 Docker Hub를 통해 이미지를 관리하였지만, 이후 팀원과 공유하기 위하여<br>
Git Packages로 이미지 저장소를 이전하였다. <a data-href="🔑 Docker Image를 Git repo로 관리하기" href="https://lts.kr/project/new-project/🔑-docker-image를-git-repo로-관리하기.html" class="internal-link" target="_self" rel="noopener nofollow">🔑 Docker Image를 Git repo로 관리하기</a>
<br>파이프라인을 구성할 아이템을 선택한다.<br><img alt="do-messenger_screenshot_2025-06-04_10_56_17.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_10_56_17.png" target="_self">
자동 빌드보다는 수동빌드가 더 안전하다고 생각해서 폴링이나 웹훅 방식을 사용하지 않는다.<br><img alt="Pasted image 20250529235718.png" src="https://lts.kr/사진-및-문서/pasted-image-20250529235718.png" style="width: 725px; max-width: 100%;" target="_self"><br>그래서 트리거는 아무것도 설정하지 않았다.
<br>(직접 젠킨스 어드민 페이지 에서 빌드를 눌러야 빌드가 시작됨)<br>pipeline { agent any environment { DOCKER_HUB_REPO = 'ghcr.io/anonichat/app/anonichat' // docker image 레포지토리 주소 DOCKER_IMAGE_TAG = '${BUILD_NUMBER}' // 이미지태그 자동 넘버링 DOCKER_LATEST_TAG = 'latest' // 가장 최근 넘버를 할당 CONTAINER_NAME = 'anonichat' // 컨테이너 명 CONTAINER_PORT = '8000:8080' // 호스트포트 : 컨테이너 포트 } stages { stage('1. Git Clone') { steps { echo '📂 GitHub에서 최신 코드 가져오기...' checkout([$class: 'GitSCM', // Jenkins git 플러그인 branches: [[name: '*/prod']], // 브렌치 명 userRemoteConfigs: [[ url: 'https://github.com/AnoniChat/App.git', // git repo url credentialsId: 'githubRepository' // git 접속 credentials ID ]] ]) sh 'git log --oneline -5' // 최근 커밋기록 5개 로그 출력 } } stage('2. Build') { steps { echo '🔨 anonichat 애플리케이션 빌드 중...' script { if (fileExists('gradlew')) { sh 'chmod +x ./gradlew' // gradle 실행권한 부여 sh './gradlew clean build -x test' // 테스트 제외 } else { error('gradlew 파일이 없습니다. Gradle 프로젝트인지 확인하세요!') } } } } stage('3. Test') { steps { echo '🧪 단위 테스트 실행 중...' sh './gradlew test' // gradle 테스트 실행 } post { always { junit 'build/test-results/test/*.xml' // 테스트 결과를 Junit 플러그인으로 리포트 } } } stage('4. Docker Image Build') { steps { echo '🐳 Docker 이미지 빌드 중...' script { // Gradle 빌드 결과 JAR 파일 찾기 def jarFile = sh( script: 'find build/libs -name "*.jar" | grep -v plain', // jar파일 탐색 returnStdout: true ).trim() if (jarFile) { echo "JAR 파일 발견: ${jarFile}" sh """ docker build -t ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG} . // docker 빌드 docker tag ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG} ${DOCKER_HUB_REPO}:${DOCKER_LATEST_TAG} // 이미지 태깅 (항상 최근 버전에 `latest` 태그 부여) """ } else { error('JAR 파일을 찾을 수 없습니다!') } } } } stage('5. Docker Image Push') { steps { echo '📤 GHCR에 이미지 푸시 중...' script { // githubPackage에 최신버전 이미지 push withCredentials([usernamePassword(credentialsId: "githubPackage", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) { sh """ echo ${DOCKER_PASSWORD} | docker login ghcr.io -u ${DOCKER_USERNAME} --password-stdin docker push ${DOCKER_HUB_REPO}:${DOCKER_IMAGE_TAG} docker push ${DOCKER_HUB_REPO}:${DOCKER_LATEST_TAG} docker logout """ } } echo "✅ 이미지 푸시 완료!" } } stage('6. Deploy') { steps { echo '🚀 최신 이미지로 배포 중...' script { try { //기존 컨테이너 삭제 후, 최신 이미지로 컨테이너 build/run sh "docker stop ${CONTAINER_NAME} || true" sh "docker rm ${CONTAINER_NAME} || true" sh "docker rmi ${DOCKER_HUB_REPO}:${DOCKER_LATEST_TAG} || true" sh "docker pull ${DOCKER_HUB_REPO}:${DOCKER_LATEST_TAG}" sh """ docker run -d \ --name ${CONTAINER_NAME} \ --restart always \ -p ${CONTAINER_PORT} \ ${DOCKER_HUB_REPO}:${DOCKER_LATEST_TAG} """ sh "sleep 10" sh "docker ps | grep ${CONTAINER_NAME}" } catch (Exception e) { echo "❌ 배포 실패: ${e.getMessage()}" throw e } } } } } post { always { script { node { // node context 추가 echo '🧹 빌드 후 정리 작업...' sh 'docker image prune -f || true' } } } success { echo '🎉 CI/CD 파이프라인이 성공적으로 완료되었습니다!' } failure { echo '❌ CI/CD 파이프라인이 실패했습니다.' } }
}
<br>다음 일련의 과정을 거쳐, 배포가 가능하다.<br>Git repo(prod branch) push 후 → Jenkins 수동 빌드 시<br><img alt="do-messenger_screenshot_2025-06-04_11_29_26.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_11_29_26.png" target="_self"><br><img alt="do-messenger_screenshot_2025-06-04_11_29_14.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_11_29_14.png" target="_self"><br>]]></description><link>https://lts.kr/project/new-project/jenkins-파이프라인-설정.html</link><guid isPermaLink="false">project/New Project/Jenkins 파이프라인 설정.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Wed, 04 Jun 2025 02:42:41 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_10_50_01.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_10_50_01.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[🤑 ANONI Chat 개발기 - CICD 구성]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="https://lts.kr/?query=tag:개발" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개발</a> <a class="tag" href="https://lts.kr/?query=tag:개요" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개요</a> <a class="tag" href="https://lts.kr/?query=tag:구상" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#구상</a> <a class="tag" href="https://lts.kr/?query=tag:인프라" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#인프라</a> <a class="tag" href="https://lts.kr/?query=tag:CIDE" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#CIDE</a> <a class="tag" href="https://lts.kr/?query=tag:Jenkins" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Jenkins</a> <a class="tag" href="https://lts.kr/?query=tag:Vultr" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Vultr</a> <br> <a href="https://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="https://lts.kr?query=tag:개발" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개발">#개발</a> <a href="https://lts.kr?query=tag:개요" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개요">#개요</a> <a href="https://lts.kr?query=tag:구상" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#구상">#구상</a> <a href="https://lts.kr?query=tag:인프라" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#인프라">#인프라</a> <a href="https://lts.kr?query=tag:CIDE" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#CIDE">#CIDE</a> <a href="https://lts.kr?query=tag:Jenkins" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Jenkins">#Jenkins</a> <a href="https://lts.kr?query=tag:Vultr" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Vultr">#Vultr</a><br>이전 시간에 Clude환경에 docker컨테이너를 구동시키는 것 까지 진행하였다.<br>▶ <a data-href="🤑 ANONI Chat 개발기 - infra setup" href="https://lts.kr/project/new-project/🤑-anoni-chat-개발기-infra-setup.html" class="internal-link" target="_self" rel="noopener nofollow">🤑 ANONI Chat 개발기 - infra setup</a><br>이번 시간에는 CICD환경을 구성하겠다.<br>graph TD A[GitHub Push] B[Jenkins Git Pull] C[Gradle Build Jar] D[Docker Build &amp; Tag] E[DockerHub Push] F[서버 Pull + Deploy]
<br>여기서 해당 방식은 Docker-in-Docker(DinD)방식 중 DooD 방식으로 진행한다.
<br>DinD란? - “도커 안에 도커를 실행한다”는 개념.<br>DinD의 종류 <br>일반적인 경우에, Docker에서 Jenkins이미지를 pull받아 컨테이너를 실행시키는 것이 가장 간단하다.
하지만, 이번엔 같은(Ubuntu)서버 내에서 Jenkins와 Spring서버를 Docker로 함께 띄울예정 이다.<br>그렇게 때문에 위에서 기술한 DooD방식으로 Docker로 띄운 Jenkins안에서 Docker를 제어해야한다.<br>이를위해 /var/run/docker.sock을 마운트 해야한다.<br>현재 스펙은 ubuntu:22.04 / Spring 3.3.12 / Java17 이다.<br># 베이스 이미지 설정
FROM ubuntu:22.04 LABEL maintainer="xotjd794613@naver.com" #- **비대화식 모드 설정**
# apt 설치 시 발생하는 `timezone 설정`, `Y/N 질문` 등을 자동으로 건너뛰기 위한 설정
ENV DEBIAN_FRONTEND=noninteractive # 1. UBUNTU 시스템 패키지`s 설치
RUN apt-get update &amp;&amp; apt-get install -y \ curl gnupg2 ca-certificates apt-transport-https software-properties-common \ git sudo unzip wget lsb-release openjdk-17-jdk \ &amp;&amp; apt-get clean # 2. 사용자 hello 생성 및 sudo 권한 부여(비밀번호 묻지 않도록)
# Docker CLI 사용이나 기타 시스템 명령 실행 시 필요
RUN useradd -m -d /home/hello -s /bin/bash hello \ &amp;&amp; echo "hello ALL=(ALL) NOPASSWD:ALL" &gt;&gt; /etc/sudoers ENV JENKINS_HOME=/home/hello # 3. Docker CLI 설치 (DooD 방식) - Jenkins 내부에서 `docker build`, `docker run`, `docker push` 명령 사용 가능
# Jenkins가 호스트의 Docker 데몬을 **/var/run/docker.sock**로 제어하게 되는 구조를 전제로 셋팅
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker.gpg &amp;&amp; \ echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \ &gt; /etc/apt/sources.list.d/docker.list &amp;&amp; \ apt-get update &amp;&amp; apt-get install -y docker-ce-cli # 4. Jenkins WAR 다운로드 (LTS 버전)
# /usr/share/jenkins.war 경로에 배치
ENV JENKINS_VERSION=2.440.1
RUN wget https://get.jenkins.io/war-stable/${JENKINS_VERSION}/jenkins.war -O /usr/share/jenkins.war # 5. 포트 노출
# → 도커 실행 시 `-p 8080:8080 -p 50000:50000` 으로 외부 연결 가능
EXPOSE 8080
EXPOSE 50000 # 6. Jenkins 실행
# Dockerfile 실행 이후 명령은 `jenkins` 사용자 권한으로 실행됨 (보안을 위해 루트 권한 피함)
USER hello
WORKDIR /var/hello # `8080` 포트에서 Jenkins 서비스가 시작됨
CMD ["java", "-jar", "/usr/share/jenkins.war"] <br>Docker이미지 빌드<br>jenkins-dood이름으로 이미지 생성
<br>docker build -t jenkins-dood .
docker tag jenkins-dood xotjd794613/jenkins-dood:v0.01
<br> <br>push/pull 후 docker.sock 사용하여 실행<br>docker run -d \ --name jenkins-dood \ -p 8080:8080 \ -v /var/run/docker.sock:/var/run/docker.sock \ jenkins-dood:v0.01 <br>
permission denied 오류
<img alt="do-messenger_screenshot_2025-05-28_11_42_51.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-28_11_42_51.png" target="_self">
<br>즉, /var/run/docker.sock 파일에 접근할 수 있는 권한이 없기 때문에 발생한 오류이다.
<img alt="do-messenger_screenshot_2025-05-28_12_03_35.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-28_12_03_35.png" target="_self"><br>다음과 같이 docker.sock에 접근권한은 root만이 갖고 있기 때문에,
현재 계정을 docker그룹에 포함시켜야 한다.<br>
<br>Dockerfile에 아래 내용을 추가하기
<br># + Docker 그룹id확인 후(GID: 999)에 추가 (호스트와 GID 일치) RUN groupadd -g 999 docker &amp;&amp; \ useradd -m -d /home/hello -s /bin/bash -G docker hello &amp;&amp; \ echo "hello ALL=(ALL) NOPASSWD:ALL" &gt;&gt; /etc/sudoers
<br>또는<br>root계정으로 변경 후 권한주기<br>sudo usermod -aG docker hello(계정명)
<br>문제 해결 후,
ip주소:8080으로 접속하면 jenkins admin 페이지를 확인할 수 있다.<br><img alt="Pasted image 20250528142521.png" src="https://lts.kr/사진-및-문서/pasted-image-20250528142521.png" target="_self"><br>위 페이지에서 admin passwd를 찾기 위해서는 ssh에서 다음 명령어를 통해 알 수 있다.<br>docker exec -it jenkins-dood cat /home/hello/secrets/initialAdminPassword
<br>admin 로그인 완료
<br><img alt="Pasted image 20250528145922.png" src="https://lts.kr/사진-및-문서/pasted-image-20250528145922.png" target="_self"><br>
<br>Jenkins 커뮤니티에서 추천하는 기본 플러그인 모음을 자동 설치해줌
<br>여기엔 Git, Pipeline, Credentials 등 필수 요소가 포함되어 있음
<br>
!만약 특정한 커스텀 설정이나 최소 설치 환경이 필요한 경우엔 오른쪽을 선택해서 수동으로 선택할 수 있음
<br>에러
<img alt="Pasted image 20250528151309.png" src="https://lts.kr/사진-및-문서/pasted-image-20250528151309.png" style="width: 625px; max-width: 100%;" target="_self"><br>
자동 설치중 대부분에서 fail이 발생했다.
<br>
<br>ubuntu서버가 외부망에 붙지 못했나??
<img alt="Pasted image 20250528151438.png" src="https://lts.kr/사진-및-문서/pasted-image-20250528151438.png" target="_self">
<br> 핑 확인시 정상적으로 붙어있는 모습<br>그렇다면 무엇이 문제일까?<br>호스트 Ubuntu는 인터넷 연결이 되어 있어도, Docker 컨테이너 내부는 DNS나 라우팅 설정이 다를 수 있다.
<br>이를 위한 확인. (컨테이너에 붙기)<br>docker exec -it jenkins-dood bash
# 컨테이너에 붙은 후 `apt update로 확인`
<br><img alt="Pasted image 20250528152038.png" src="https://lts.kr/사진-및-문서/pasted-image-20250528152038.png" style="width: 700px; max-width: 100%;" target="_self"><br> <br>E: Could not open lock file /var/lib/apt/lists/lock - open (13: Permission denied)
E: Unable to lock directory /var/lib/apt/lists/
<br>다음과 같은 로그를 보고 큰 단서를 얻을 수 있었다.
이 에러는 컨테이너 내부에서 apt update를 실행하려 했지만, 현재 사용자가 루트 권한이 아니기 때문에 실패한 것이다.<br>jenkins dockerfile 중,,,
다음 부분을 보면 알 수 있다.<br># 6. Jenkins 실행
# Dockerfile 실행 이후 명령은 `jenkins` 사용자 권한으로 실행됨 (보안을 위해 루트 권한 피함)
USER hello
WORKDIR /var/hello
<br>하지만...
이미 hello 계정에는 /etc/sudoers sudo권한을 준것을 볼 수있다.<br>RUN groupadd -g 999 docker &amp;&amp; \ useradd -m -d /home/hello -s /bin/bash -G docker hello &amp;&amp; \ echo "hello ALL=(ALL) NOPASSWD:ALL" &gt;&gt; /etc/sudoers
<br># /usr/share/jenkins.war 경로에 배치 #ENV JENKINS_VERSION=2.440.1 !!플러그인 설치 실패로 인해 버전업 ENV JENKINS_VERSION=2.462.3 RUN wget https://get.jenkins.io/war-stable/${JENKINS_VERSION}/jenkins.war -O /usr/share/jenkins.war
<br>결론<br>외부망 접근 금지 문제 X
<br>root/sudo 권한 문제 X
<br>Jenkins 버전 문제 O
<br><img alt="do-messenger_screenshot_2025-05-29_11_37_10.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-29_11_37_10.png" target="_self"><br>
<br>
젠킨스 파이프라인(Jenkins Pipeline)이란, 소프트웨어 빌드, 테스트, 배포의 전체 과정을 코드로 정의하고 자동화할 수 있게 해주는 Jenkins의 핵심 기능이다. <br>
CI/CD(지속적 통합/지속적 배포)를 효율적으로 수행하기 위한 필수 도구이다. <br>다음 설정을 통해 파이프라인을 구성할 수 있다.<br>Git repo에 push시 자동적으로 통합 / 배포 할 수 있지만, 일단은 Jenkins Admin에서 수동 트리거 되도록 설정해 두었다.<br>]]></description><link>https://lts.kr/project/new-project/🤑-anoni-chat-개발기-cicd-구성.html</link><guid isPermaLink="false">project/New Project/🤑 ANONI Chat 개발기 - CICD 구성.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Wed, 04 Jun 2025 01:46:17 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-28_11_42_51.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-28_11_42_51.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Jenkins 설정 초기화 문제]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="https://lts.kr/?query=tag:개발" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개발</a> <a class="tag" href="https://lts.kr/?query=tag:트러블슈팅" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#트러블슈팅</a> <a class="tag" href="https://lts.kr/?query=tag:인프라" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#인프라</a> <a class="tag" href="https://lts.kr/?query=tag:CIDE" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#CIDE</a> <a class="tag" href="https://lts.kr/?query=tag:Jenkins" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Jenkins</a> <a class="tag" href="https://lts.kr/?query=tag:도구" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#도구</a> <br> <a href="https://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="https://lts.kr?query=tag:개발" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개발">#개발</a> <a href="https://lts.kr?query=tag:트러블슈팅" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#트러블슈팅">#트러블슈팅</a> <a href="https://lts.kr?query=tag:인프라" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#인프라">#인프라</a> <a href="https://lts.kr?query=tag:CIDE" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#CIDE">#CIDE</a> <a href="https://lts.kr?query=tag:Jenkins" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Jenkins">#Jenkins</a> <a href="https://lts.kr?query=tag:도구" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#도구">#도구</a><br>젠킨스 Admin 페이지의, <br>접속 &gt; 초기 비밀번호 입력 &gt; admin id/pw 생성 &gt; 플러그인 설치 &gt; 젠킨스 admin main
<br>까지 이미 마친 상황이었다. 그런데, 젠킨스에 다시 접속하니까 초기 비밀번호 입력부터 다시 시작되었다.<br>분명히 모든 설정을 끝냈는데 다시 하는게 뭔가 이상했다.<br>문제가 있다 생각하고 연구를 해보았다.<br>
<br>Docker 볼륨은 컨테이너 외부에 데이터를 저장하는 메커니즘으로, 컨테이너의 수명과 독립적으로 데이터를 유지합니다. 이는 컨테이너가 삭제되더라도 데이터가 보존되며, 다른 컨테이너에서 재사용할 수 있습니다.
<br>
<br>
데이터 덮어쓰기 <br>컨테이너의 디렉토리에 이미 데이터가 있는 상태에서 빈 볼륨을 마운트하면, 기존 데이터가 볼륨에 복사됩니다. 반대로, 볼륨에 데이터가 있으면 컨테이너의 해당 디렉토리 내용이 가려집니다. <br>
데이터 공유 <br>동일한 볼륨을 여러 컨테이너에 마운트하여 데이터를 공유할 수 있습니다. 단, 동시에 쓰기 작업을 수행하는 경우 데이터 충돌에 주의해야 합니다. <br>
백업 및 복원: 볼륨은 호스트 시스템의 디렉토리에 저장되므로, 해당 디렉토리를 백업하여 데이터를 보호할 수 있습니다. <br>
<br>컨테이너의 문제점:
<br>컨테이너 생성 → 데이터 저장 → 컨테이너 삭제 → 모든 데이터 사라짐
<br>
<br>볼륨 마운트
<br>컨테이너 생성 → 데이터 저장 → 컨테이너 삭제 → 데이터는 호스트에 보존
새 컨테이너 생성 → 기존 데이터 그대로 사용
<br>즉, 기존에는 볼륨 마운트를 적용하지 않아서 젠킨스 초기 설정 정보가 모두 날아갔고<br>다시 접속해보니 처음부터 다시 시작한 것이다.<br>기존 컨테이너 실행 명령어<br>docker run -d \ --name jenkins-dood \ -p 8080:8080 \ -v /var/run/docker.sock:/var/run/docker.sock \ jenkins-dood:v0.06
<br>볼륨 마운트 적용한 컨테이너 실행 명령어<br>docker run -d \ —name jenkins-dood \ -p 8080:8080 \ -v /var/run/docker.sock:/var/run/docker.sock \ -v jenkins_home:/home/hello \ ##볼륨 마운트 적용 명령어 xotjd794613/jenkins-dood:v0.06
<br>단순한 한줄이지만 컨테이너에서 생성된 데이터를 해당 디렉토리에 저장해놓고<br>컨테이너가 다시 실행되더라도 필요한 데이터를 지정한 디렉토리에서 꺼내서 사용한다.<br>위의 명령어로 컨테이너를 다시 실행하고 젠킨스에 접속했다.
그리고 모든 초기설정을 마쳤다.<br><img alt="Pasted image 20250529221139.png" src="https://lts.kr/사진-및-문서/pasted-image-20250529221139.png" target="_self"><br>브라우저 캐시 삭제 후 다시 접속하니 정상적으로 Jenkins 로그인 화면이 나온다.
<br>git에서 새로 이미지를 받더라도, <br>정상적으로 데이터를 저장하고 있는 모습이다.<br><img alt="Pasted image 20250602113532.png" src="https://lts.kr/사진-및-문서/pasted-image-20250602113532.png" target="_self">]]></description><link>https://lts.kr/project/new-project/jenkins-설정-초기화-문제.html</link><guid isPermaLink="false">project/New Project/Jenkins 설정 초기화 문제.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Wed, 04 Jun 2025 01:43:39 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/pasted-image-20250529221139.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/pasted-image-20250529221139.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[💻 프로젝트]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="https://lts.kr/?query=tag:모음" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#모음</a> <br> <a href="https://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="https://lts.kr?query=tag:모음" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#모음">#모음</a><br>프로젝트
public하게 공개할 수 있는 프로젝트의 제작 과정입니다.
<br>
<br><a data-href="🏹 예치금 차액 비교 Spring Batch 리펙토링" href="https://lts.kr/project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링.html" class="internal-link" target="_self" rel="noopener nofollow">🏹 예치금 차액 비교 Spring Batch 리펙토링</a>⭐
<br><a data-href="🏹 예치금 차액 비교 Spring Batch 리펙토링 부록" href="https://lts.kr/project/hello-batch/🏹-예치금-차액-비교-spring-batch-리펙토링-부록.html" class="internal-link" target="_self" rel="noopener nofollow">🏹 예치금 차액 비교 Spring Batch 리펙토링 부록</a>
<br><a data-href="✏ Chunk_Partitioning Batch 구조 드로잉" href="https://lts.kr/project/hello-batch/✏-chunk_partitioning-batch-구조-드로잉.html" class="internal-link" target="_self" rel="noopener nofollow">✏ Chunk_Partitioning Batch 구조 드로잉</a>
<br>
<br><a data-href="👩‍👧‍👦 marketing Analytics 공통모듈 제작기" href="https://lts.kr/project/hello-marketing/👩‍👧‍👦-marketing-analytics-공통모듈-제작기.html" class="internal-link" target="_self" rel="noopener nofollow">👩‍👧‍👦 marketing Analytics 공통모듈 제작기</a>⭐
<br><a data-href="👩‍👧‍👦 Analytics 공통모듈 ADMIN용 데이터 추출" href="https://lts.kr/project/hello-marketing/👩‍👧‍👦-analytics-공통모듈-admin용-데이터-추출.html" class="internal-link" target="_self" rel="noopener nofollow">👩‍👧‍👦 Analytics 공통모듈 ADMIN용 데이터 추출</a>
<br>
<br><a data-href="🚞 Java 대용량 Excel 리펙토링" href="https://lts.kr/project/🚞-java-대용량-excel-리펙토링.html" class="internal-link" target="_self" rel="noopener nofollow">🚞 Java 대용량 Excel 리펙토링</a>
<br>
<br><a data-href="✈ MM_클라우드 마이그레이션" href="https://lts.kr/project/melometer-project/✈-mm_클라우드-마이그레이션.html" class="internal-link" target="_self" rel="noopener nofollow">✈ MM_클라우드 마이그레이션</a>
<br>
<br><a data-href="🖨 NP_시장조사" href="https://lts.kr/project/new-project/🖨-np_시장조사.html" class="internal-link" target="_self" rel="noopener nofollow">🖨 NP_시장조사</a>
<br><a data-href="🤑 ANONI Chat 개발기 - infra setup" href="https://lts.kr/project/new-project/🤑-anoni-chat-개발기-infra-setup.html" class="internal-link" target="_self" rel="noopener nofollow">🤑 ANONI Chat 개발기 - infra setup</a>
<br><a data-href="🤑 ANONI Chat 개발기 - CICD 구성" href="https://lts.kr/project/new-project/🤑-anoni-chat-개발기-cicd-구성.html" class="internal-link" target="_self" rel="noopener nofollow">🤑 ANONI Chat 개발기 - CICD 구성</a> <br><a data-href="Jenkins 설정 초기화 문제" href="https://lts.kr/project/new-project/jenkins-설정-초기화-문제.html" class="internal-link" target="_self" rel="noopener nofollow">Jenkins 설정 초기화 문제</a>
<br><a data-href="Jenkins 파이프라인 설정" href="https://lts.kr/project/new-project/jenkins-파이프라인-설정.html" class="internal-link" target="_self" rel="noopener nofollow">Jenkins 파이프라인 설정</a> <br>
<br><a data-href="👻 Obsidian 정적호스팅 CICD 과정" href="https://lts.kr/project/note-ci_cd/👻-obsidian-정적호스팅-cicd-과정.html" class="internal-link" target="_self" rel="noopener nofollow">👻 Obsidian 정적호스팅 CICD 과정</a>
<br>
<br><a data-href="📘 SpringBoot &amp; Docker + Reids 연동" href="https://lts.kr/tools/docker/📘-springboot-&amp;-docker-+-reids-연동.html" class="internal-link" target="_self" rel="noopener nofollow">📘 SpringBoot &amp; Docker + Reids 연동</a>
<br><a data-href="🌥 aws(EC2)셋팅부터 배포까지" href="https://lts.kr/tools/aws/🌥-aws(ec2)셋팅부터-배포까지.html" class="internal-link" target="_self" rel="noopener nofollow">🌥 aws(EC2)셋팅부터 배포까지</a>]]></description><link>https://lts.kr/project/💻-프로젝트.html</link><guid isPermaLink="false">project/💻 프로젝트.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Wed, 04 Jun 2025 01:43:38 GMT</pubDate></item><item><title><![CDATA[UBUNTU sever 명령어 모음]]></title><description><![CDATA[<br><br><br>
<br><br><br><br>sudo apt-get update ( )
sudo apt-get upgrade ( apt-get 도구 업그레이드 )
<br> gui를 설치하기 전에 apt-get 도구를 update와 upgrade를 진행한다.<br><br><br>sudo apt-get install --no-install-recommends ubuntu-desktop ( 최소 설치 )
sudo apt-get install ubuntu-desktop ( 전체 설치 )
<br>
<br>여타 desktop버전의 프로그램들 ex) 인터넷 브라우저 등 을 설치할 계획이라면, 전체 설치를 하면되고,
<br>DB, jenkins 등 서버용 셋팅만을 원하면 최소 설치를 하기를 권장한다.<br><br><br>sudo apt-get install indicator-appmenu-tools ( hud service not connected 오류 해결 ) sudo apt-get install indicator-session ( 계정, 세션 아이콘 추가 ) sudo apt-get install indicator-datetime ( 상단 메뉴 시간 추가 ) sudo apt-get install indicator-applet-complete ( 볼륨 조절 아이콘 추가 )
<br>
<br>gui 패키지 설치 후 발생할 수 있는 hud service not connected 오류와 관련하여 indicator-appmenu-tools
패키지를 통해 해결할 수 있다.
<br>나머지 패키지는 사용자의 입장에서 직관적인 편의성을 위한 패지키로써 선택사항입니다.
<br><br><br>startx ( xwindow 환경 실행 ) sudo systemctl isolate graphical.target ( runlevel 5 일회성 실행 / init 실행 ) sudo systemctl enable graphical.target ( runlevel 5 영구히 실행 / 활성 ) sudo systemctl set-default graphical.target ( runlevel 5 영구히 실행 / inittab 수정 )
<br>
<br>CLI에 startx 명령어를 입력하면 xwindow 환경이 실행이 되면서 gui 환경으로 전환이 된다.
<br>startx 명령어 없이 영구히 적용하기 위해 위 명령어를 입력하면 된다.
<br><br><br>gradlew bootJar
docker build -t anonichat .
docker tag anonichat xotjd794613/anonichat:v0.02
<br>
<br>docker build -t "생성할 이미지 이름" "도커파일을 찾을 위치"
<br>docker tag "복사할 이미지 원본 이름" "복사된 이미지 이름":"태그"
<br><br><br>curl -fsSL https://get.docker.com | sh
docker login
sudo docker pull [image이름]:[태그]
<br><br><br>sudo docker run -p 8000:8080 "계정명"/"이미지이름":"태그"
<br><br><br>docker run -d \ --name jenkins-dood \ -p 8080:8080 \ -v /var/run/docker.sock:/var/run/docker.sock \ -v jenkins_home:/home/hello \ # 볼륨 마운트 적용 ghcr.io/anonichat/app/jenkins-dood:v0.06
<br>
<br>--name jenkins-dood \ 실행시킬 컨테이너 이름
<br>-p 8080:8080 \ 실행시킬 포트번호
<br>xotjd794613/jenkins-dood:v0.01 실행시킬 이미지 명
<br><br><br>su -
<br><br><br>(권한부여 / root계정에서 실행)<br>sudo usermod -aG docker hello(계정명)
<br><br><br>docker exec -it jenkins-dood cat /home/hello/secrets/initialAdminPassword
<br><br><br>docker exec -it &lt;컨테이너_이름&gt; java -jar /usr/share/jenkins.war --version
<br><br><br>$ docker login ghcr.io -u "gitHub아이디" Password: #&lt;Pesonal Access Token&gt; 입력
<br><br><br>docker tag "이미지ID" ghcr.io/"gitHub아이디"/"repo이름"/"이미지:태그"
<br>]]></description><link>https://lts.kr/project/new-project/ubuntu-sever-명령어-모음.html</link><guid isPermaLink="false">project/New Project/UBUNTU sever 명령어 모음.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Mon, 02 Jun 2025 05:34:46 GMT</pubDate></item></channel></rss>