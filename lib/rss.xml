<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Category]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://lts.kr/</link><image><url>https://lts.kr/lib/media/favicon.png</url><title>Category</title><link>https://lts.kr/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Wed, 04 Jun 2025 09:08:27 GMT</lastBuildDate><atom:link href="https://lts.kr/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Wed, 04 Jun 2025 09:08:23 GMT</pubDate><copyright><![CDATA[taesung's Blog]]></copyright><ttl>60</ttl><dc:creator>taesung's Blog</dc:creator><item><title><![CDATA[🤑 ANONI Chat 개발기 - ELK Stack setting]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="https://lts.kr/?query=tag:개발" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개발</a> <a class="tag" href="https://lts.kr/?query=tag:인프라" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#인프라</a> <a class="tag" href="https://lts.kr/?query=tag:Elasticsearch" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Elasticsearch</a> <a class="tag" href="https://lts.kr/?query=tag:Logstash" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Logstash</a> <a class="tag" href="https://lts.kr/?query=tag:Kibana" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Kibana</a> <br> <a href="https://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="https://lts.kr?query=tag:개발" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개발">#개발</a> <a href="https://lts.kr?query=tag:인프라" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#인프라">#인프라</a> <a href="https://lts.kr?query=tag:Elasticsearch" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Elasticsearch">#Elasticsearch</a> <a href="https://lts.kr?query=tag:Logstash" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Logstash">#Logstash</a> <a href="https://lts.kr?query=tag:Kibana" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Kibana">#Kibana</a><br>
<br>ELK는 Elasticsearch, Logstash, Kibana의 약자로, 로그 수집, 저장, 분석, 시각화를 위한 오픈소스 로그 플랫폼 스택이다.
<br>최근에는 Beats까지 포함한 "Elastic Stack" 이라고도 부른다.
<br><img alt="do-messenger_screenshot_2025-06-04_13_38_39.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_13_38_39.png" target="_self"><br>
<br>고성능을 위해 많은 메모리가 필요하다.
<br>infra를 셋팅하는데 있어서 러닝커브가 높다..
<br>build.gradle<br>dependencies { implementation 'net.logstash.logback:logstash-logback-encoder:7.4' }
<br>logstash 의존성을 추가해준다.
<br>logback-spring.xml<br>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;configuration&gt; &lt;!--모든 로그를 콘솔에 출력--&gt; &lt;appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender"&gt; &lt;encoder&gt; &lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;!--예: `12:30:15.321 [main] INFO AuctionService - Started`--&gt; &lt;/appender&gt; &lt;appender name="MAIN_LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender"&gt; &lt;destination&gt;logstash:5000&lt;/destination&gt; &lt;!--컨테이너 포트 5001으로 전송--&gt; &lt;encoder class="net.logstash.logback.encoder.LogstashEncoder" /&gt; &lt;!--JSON 형식 로그로 인코딩--&gt; &lt;keepAliveDuration&gt;5 minutes&lt;/keepAliveDuration&gt; &lt;!--TCP연결 5분간 유지--&gt; &lt;/appender&gt; &lt;!-- 추가적으로 로그 분기 가능 (ex) java. Logger logger = LoggerFactory.getLogger("AuctionServiceLogger"); logger.info("{}", bidLogDTO); &lt;appender name="CUSTOM_LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender"&gt; &lt;destination&gt;logstash:5001&lt;/destination&gt; &lt;encoder class="net.logstash.logback.encoder.LogstashEncoder" /&gt; &lt;keepAliveDuration&gt;5 minutes&lt;/keepAliveDuration&gt; &lt;/appender&gt;
--&gt; &lt;!--전체 시스템 로그 중 INFO 이상만 콘솔 출력 (별도 logger 설정 없는 경우에 해당)--&gt; &lt;root level="info"&gt; &lt;appender-ref ref="CONSOLE" /&gt; &lt;/root&gt; &lt;!-- 클래스 또는 패키지 이름이 `AuctionServiceLogger`인 로거에 적용 DEBUG 이상 로그 additivity="false" : 루트로 로그 전파 X (CONSOLE + AUCTION_LOGSTASH만 사용) + 콘솔 동시 출력 --&gt; &lt;logger name="MainServiceLogger" level="debug" additivity="false"&gt; &lt;appender-ref ref="AUCTION_LOGSTASH" /&gt; &lt;appender-ref ref="CONSOLE" /&gt; &lt;/logger&gt; &lt;!-- &lt;logger name="CustomServiceLogger" level="debug" additivity="false"&gt; &lt;appender-ref ref="CUSTOM_LOGSTASH" /&gt; &lt;appender-ref ref="CONSOLE" /&gt; &lt;/logger&gt;
--&gt;
&lt;/configuration&gt;
<br>mainController<br>@GetMapping(GlobalURL.MAIN_URL) public ModelAndView mainView() { log.info("[MainController Log] mainView 접속 TEST"); return new ModelAndView("main"); }
<br>
<br>Elasticsearch
<br>Logstash
<br>Kibana
<br>Spring Boot 애플리케이션
<br># Docker Compose 파일 스펙 버전 3 사용
version: '3' services: elasticsearch: image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1 environment: - discovery.type=single-node # 단일 노드 구성 ports: - "9200:9200" networks: - elk # `elk`키워드 네트워크로 구성 (다른 서비스와 내부 통신) volumes: - esdata:/usr/share/elasticsearch/data logstash: image: docker.elastic.co/logstash/logstash:7.12.0 ports: - "5044:5044" # Filebeat 등 input으로 사용하는 포트 - "5000:5000" # TCP 또는 JSON 로그 input 용 포트 (Spring에서 이 포트를 사용) volumes: - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf networks: - elk # `elk`키워드 네트워크 kibana: image: docker.elastic.co/kibana/kibana:7.11.1 ports: - "5601:5601" # 웹 UI 접근용 포트 networks: - elk # `elk`키워드 네트워크 environment: - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 # Elasticsearch 주소 연결 - server.host=0.0.0.0 # 모든 IP 바인딩 허용 spring: image: ghcr.io/anonichat/app/anonichat:v0.04 ports: - "8080:8080" environment: - ELASTICSEARCH_HOST=elasticsearch:9200 # Elasticsearch의 내부 주소를 환경변수로 주입 depends_on: - elasticsearch # Elasticsearch가 먼저 실행되도록 보장 networks: - elk # 내부 ELK 네트워크로 연결 volumes: esdata: driver: local # Elasticsearch 데이터 저장소를 호스트 볼륨에 영구 저장 networks: elk: # 모든 서비스가 하나의 공용 네트워크 `elk`에서 통신 driver: bridge # `elasticsearch`, `logstash`, `spring`, `kibana`는 서로 이름으로 접근 가능]]></description><link>https://lts.kr/project/new-project/🤑-anoni-chat-개발기-elk-stack-setting.html</link><guid isPermaLink="false">project/New Project/🤑 ANONI Chat 개발기 - ELK Stack setting.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Wed, 04 Jun 2025 09:07:23 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_13_38_39.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_13_38_39.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[🤑 ANONI Chat 개발기 - CICD 구성]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:프로젝트" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#프로젝트</a> <a class="tag" href="https://lts.kr/?query=tag:개발" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개발</a> <a class="tag" href="https://lts.kr/?query=tag:개요" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#개요</a> <a class="tag" href="https://lts.kr/?query=tag:구상" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#구상</a> <a class="tag" href="https://lts.kr/?query=tag:인프라" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#인프라</a> <a class="tag" href="https://lts.kr/?query=tag:CIDE" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#CIDE</a> <a class="tag" href="https://lts.kr/?query=tag:Jenkins" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Jenkins</a> <a class="tag" href="https://lts.kr/?query=tag:Vultr" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#Vultr</a> <br> <a href="https://lts.kr?query=tag:프로젝트" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#프로젝트">#프로젝트</a> <a href="https://lts.kr?query=tag:개발" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개발">#개발</a> <a href="https://lts.kr?query=tag:개요" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#개요">#개요</a> <a href="https://lts.kr?query=tag:구상" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#구상">#구상</a> <a href="https://lts.kr?query=tag:인프라" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#인프라">#인프라</a> <a href="https://lts.kr?query=tag:CIDE" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#CIDE">#CIDE</a> <a href="https://lts.kr?query=tag:Jenkins" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Jenkins">#Jenkins</a> <a href="https://lts.kr?query=tag:Vultr" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#Vultr">#Vultr</a><br>이전 시간에 Clude환경에 docker컨테이너를 구동시키는 것 까지 진행하였다.<br>▶ <a data-href="🤑 ANONI Chat 개발기 - infra setup" href="https://lts.kr/project/new-project/🤑-anoni-chat-개발기-infra-setup.html" class="internal-link" target="_self" rel="noopener nofollow">🤑 ANONI Chat 개발기 - infra setup</a><br>이번 시간에는 CICD환경을 구성하겠다.<br>graph TD A[GitHub Push] B[Jenkins Git Pull] C[Gradle Build Jar] D[Docker Build &amp; Tag] E[DockerHub Push] F[서버 Pull + Deploy]
<br>여기서 해당 방식은 Docker-in-Docker(DinD)방식 중 DooD 방식으로 진행한다.
<br>DinD란? - “도커 안에 도커를 실행한다”는 개념.<br>DinD의 종류 <br>일반적인 경우에, Docker에서 Jenkins이미지를 pull받아 컨테이너를 실행시키는 것이 가장 간단하다.
하지만, 이번엔 같은(Ubuntu)서버 내에서 Jenkins와 Spring서버를 Docker로 함께 띄울예정 이다.<br>그렇게 때문에 위에서 기술한 DooD방식으로 Docker로 띄운 Jenkins안에서 Docker를 제어해야한다.<br>이를위해 /var/run/docker.sock을 마운트 해야한다.<br>현재 스펙은 ubuntu:22.04 / Spring 3.3.12 / Java17 이다.<br># 베이스 이미지 설정
FROM ubuntu:22.04 LABEL maintainer="xotjd794613@naver.com" #- **비대화식 모드 설정**
# apt 설치 시 발생하는 `timezone 설정`, `Y/N 질문` 등을 자동으로 건너뛰기 위한 설정
ENV DEBIAN_FRONTEND=noninteractive # 1. UBUNTU 시스템 패키지`s 설치
RUN apt-get update &amp;&amp; apt-get install -y \ curl gnupg2 ca-certificates apt-transport-https software-properties-common \ git sudo unzip wget lsb-release openjdk-17-jdk \ &amp;&amp; apt-get clean # 2. 사용자 hello 생성 및 sudo 권한 부여(비밀번호 묻지 않도록)
# Docker CLI 사용이나 기타 시스템 명령 실행 시 필요
RUN useradd -m -d /home/hello -s /bin/bash hello \ &amp;&amp; echo "hello ALL=(ALL) NOPASSWD:ALL" &gt;&gt; /etc/sudoers ENV JENKINS_HOME=/home/hello # 3. Docker CLI 설치 (DooD 방식) - Jenkins 내부에서 `docker build`, `docker run`, `docker push` 명령 사용 가능
# Jenkins가 호스트의 Docker 데몬을 **/var/run/docker.sock**로 제어하게 되는 구조를 전제로 셋팅
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker.gpg &amp;&amp; \ echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \ &gt; /etc/apt/sources.list.d/docker.list &amp;&amp; \ apt-get update &amp;&amp; apt-get install -y docker-ce-cli # 4. Jenkins WAR 다운로드 (LTS 버전)
# /usr/share/jenkins.war 경로에 배치
ENV JENKINS_VERSION=2.440.1
RUN wget https://get.jenkins.io/war-stable/${JENKINS_VERSION}/jenkins.war -O /usr/share/jenkins.war # 5. 포트 노출
# → 도커 실행 시 `-p 8080:8080 -p 50000:50000` 으로 외부 연결 가능
EXPOSE 8080
EXPOSE 50000 # 6. Jenkins 실행
# Dockerfile 실행 이후 명령은 `jenkins` 사용자 권한으로 실행됨 (보안을 위해 루트 권한 피함)
USER hello
WORKDIR /var/hello # `8080` 포트에서 Jenkins 서비스가 시작됨
CMD ["java", "-jar", "/usr/share/jenkins.war"] <br>Docker이미지 빌드<br>jenkins-dood이름으로 이미지 생성
<br>docker build -t jenkins-dood .
docker tag jenkins-dood xotjd794613/jenkins-dood:v0.01
<br> <br>push/pull 후 docker.sock 사용하여 실행<br>docker run -d \ --name jenkins-dood \ -p 8080:8080 \ -v /var/run/docker.sock:/var/run/docker.sock \ jenkins-dood:v0.01 <br>
permission denied 오류
<img alt="do-messenger_screenshot_2025-05-28_11_42_51.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-28_11_42_51.png" target="_self">
<br>즉, /var/run/docker.sock 파일에 접근할 수 있는 권한이 없기 때문에 발생한 오류이다.
<img alt="do-messenger_screenshot_2025-05-28_12_03_35.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-28_12_03_35.png" target="_self"><br>다음과 같이 docker.sock에 접근권한은 root만이 갖고 있기 때문에,
현재 계정을 docker그룹에 포함시켜야 한다.<br>
<br>Dockerfile에 아래 내용을 추가하기
<br># + Docker 그룹id확인 후(GID: 999)에 추가 (호스트와 GID 일치) RUN groupadd -g 999 docker &amp;&amp; \ useradd -m -d /home/hello -s /bin/bash -G docker hello &amp;&amp; \ echo "hello ALL=(ALL) NOPASSWD:ALL" &gt;&gt; /etc/sudoers
<br>또는<br>root계정으로 변경 후 권한주기<br>sudo usermod -aG docker hello(계정명)
<br>문제 해결 후,
ip주소:8080으로 접속하면 jenkins admin 페이지를 확인할 수 있다.<br><img alt="Pasted image 20250528142521.png" src="https://lts.kr/사진-및-문서/pasted-image-20250528142521.png" target="_self"><br>위 페이지에서 admin passwd를 찾기 위해서는 ssh에서 다음 명령어를 통해 알 수 있다.<br>docker exec -it jenkins-dood cat /home/hello/secrets/initialAdminPassword
<br>admin 로그인 완료
<br><img alt="Pasted image 20250528145922.png" src="https://lts.kr/사진-및-문서/pasted-image-20250528145922.png" target="_self"><br>
<br>Jenkins 커뮤니티에서 추천하는 기본 플러그인 모음을 자동 설치해줌
<br>여기엔 Git, Pipeline, Credentials 등 필수 요소가 포함되어 있음
<br>
!만약 특정한 커스텀 설정이나 최소 설치 환경이 필요한 경우엔 오른쪽을 선택해서 수동으로 선택할 수 있음
<br>에러
<img alt="Pasted image 20250528151309.png" src="https://lts.kr/사진-및-문서/pasted-image-20250528151309.png" style="width: 625px; max-width: 100%;" target="_self"><br>
자동 설치중 대부분에서 fail이 발생했다.
<br>
<br>ubuntu서버가 외부망에 붙지 못했나??
<img alt="Pasted image 20250528151438.png" src="https://lts.kr/사진-및-문서/pasted-image-20250528151438.png" target="_self">
<br> 핑 확인시 정상적으로 붙어있는 모습<br>그렇다면 무엇이 문제일까?<br>호스트 Ubuntu는 인터넷 연결이 되어 있어도, Docker 컨테이너 내부는 DNS나 라우팅 설정이 다를 수 있다.
<br>이를 위한 확인. (컨테이너에 붙기)<br>docker exec -it jenkins-dood bash
# 컨테이너에 붙은 후 `apt update로 확인`
<br><img alt="Pasted image 20250528152038.png" src="https://lts.kr/사진-및-문서/pasted-image-20250528152038.png" style="width: 700px; max-width: 100%;" target="_self"><br> <br>E: Could not open lock file /var/lib/apt/lists/lock - open (13: Permission denied)
E: Unable to lock directory /var/lib/apt/lists/
<br>다음과 같은 로그를 보고 큰 단서를 얻을 수 있었다.
이 에러는 컨테이너 내부에서 apt update를 실행하려 했지만, 현재 사용자가 루트 권한이 아니기 때문에 실패한 것이다.<br>jenkins dockerfile 중,,,
다음 부분을 보면 알 수 있다.<br># 6. Jenkins 실행
# Dockerfile 실행 이후 명령은 `jenkins` 사용자 권한으로 실행됨 (보안을 위해 루트 권한 피함)
USER hello
WORKDIR /var/hello
<br>하지만...
이미 hello 계정에는 /etc/sudoers sudo권한을 준것을 볼 수있다.<br>RUN groupadd -g 999 docker &amp;&amp; \ useradd -m -d /home/hello -s /bin/bash -G docker hello &amp;&amp; \ echo "hello ALL=(ALL) NOPASSWD:ALL" &gt;&gt; /etc/sudoers
<br># /usr/share/jenkins.war 경로에 배치 #ENV JENKINS_VERSION=2.440.1 !!플러그인 설치 실패로 인해 버전업 ENV JENKINS_VERSION=2.462.3 RUN wget https://get.jenkins.io/war-stable/${JENKINS_VERSION}/jenkins.war -O /usr/share/jenkins.war
<br>결론<br>외부망 접근 금지 문제 X
<br>root/sudo 권한 문제 X
<br>Jenkins 버전 문제 O
<br><img alt="do-messenger_screenshot_2025-05-29_11_37_10.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-29_11_37_10.png" target="_self"><br>
<br>
젠킨스 파이프라인(Jenkins Pipeline)이란, 소프트웨어 빌드, 테스트, 배포의 전체 과정을 코드로 정의하고 자동화할 수 있게 해주는 Jenkins의 핵심 기능이다. <br>
CI/CD(지속적 통합/지속적 배포)를 효율적으로 수행하기 위한 필수 도구이다. <br>다음 설정을 통해 파이프라인을 구성할 수 있다.<br>Git repo에 push시 자동적으로 통합 / 배포 할 수 있지만, 일단은 Jenkins Admin에서 수동 트리거 되도록 설정해 두었다.<br>Git repo(prod branch) push 후 → Jenkins 수동 빌드 시<br><img alt="do-messenger_screenshot_2025-06-04_11_29_26.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_11_29_26.png" target="_self"><br><img alt="do-messenger_screenshot_2025-06-04_11_29_14.png" src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-06-04_11_29_14.png" target="_self"><br>]]></description><link>https://lts.kr/project/new-project/🤑-anoni-chat-개발기-cicd-구성.html</link><guid isPermaLink="false">project/New Project/🤑 ANONI Chat 개발기 - CICD 구성.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Wed, 04 Jun 2025 04:35:23 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-28_11_42_51.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/do-messenger_screenshot_2025-05-28_11_42_51.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[🏠 taesung's Blog]]></title><description><![CDATA[<a class="tag" href="https://lts.kr/?query=tag:home" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#home</a> <a class="tag" href="https://lts.kr/?query=tag:index" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#index</a> <a class="tag" href="https://lts.kr/?query=tag:blog" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#blog</a> <a class="tag" href="https://lts.kr/?query=tag:공부" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#공부</a> <br> <a href="https://lts.kr?query=tag:home" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#home">#home</a> <a href="https://lts.kr?query=tag:index" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#index">#index</a> <a href="https://lts.kr?query=tag:blog" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#blog">#blog</a> <a href="https://lts.kr?query=tag:공부" class="tag is-unresolved" target="_self" rel="noopener nofollow" data-href="#공부">#공부</a><br><a data-tooltip-position="top" aria-label="https://github.com/LeeTaeSung0628" rel="noopener nofollow" class="external-link is-unresolved" href="https://github.com/LeeTaeSung0628" target="_self"><span alt="prof2.jpg" src="prof2.jpg" class="internal-embed media-embed image-embed is-loaded" style="width: 250px; max-width: 100%;"></span></a><img alt="prof2.jpg" src="https://lts.kr/사진-및-문서/prof2.jpg" style="width: 250px; max-width: 100%;" target="_self"><br><a data-tooltip-position="top" aria-label="https://git.io/typing-svg" rel="noopener nofollow" class="external-link is-unresolved" href="https://git.io/typing-svg" target="_self"></a><img alt="Typing SVG" src="https://readme-typing-svg.demolab.com?font=Fira+Code&amp;pause=1000&amp;color=36A9F7&amp;random=false&amp;width=435&amp;lines=%EC%97%AC%EA%B8%B0%EB%8A%94+%EA%B3%B5%EB%B6%80%ED%95%98%EA%B3%A0%2C+%EA%B8%B0%EB%A1%9D%ED%95%98%EB%8A%94+%EA%B3%B3%EC%9E%85%EB%8B%88%EB%8B%A4" referrerpolicy="no-referrer" target="_self" class="is-unresolved"><br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>]]></description><link>https://lts.kr/🏠-taesung's-blog.html</link><guid isPermaLink="false">🏠 taesung's Blog.md</guid><dc:creator><![CDATA[taesung's Blog]]></dc:creator><pubDate>Wed, 04 Jun 2025 02:48:07 GMT</pubDate><enclosure url="https://lts.kr/사진-및-문서/prof2.jpg" length="0" type="image/jpeg"/><content:encoded>&lt;figure&gt;&lt;img src="https://lts.kr/사진-및-문서/prof2.jpg"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>